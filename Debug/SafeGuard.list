
SafeGuard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1c8  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022ec  0800a308  0800a308  0000b308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5f4  0800c5f4  0000e1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c5f4  0800c5f4  0000d5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5fc  0800c5fc  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5fc  0800c5fc  0000d5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c600  0800c600  0000d600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c604  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001158  200001ec  0800c7f0  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001344  0800c7f0  0000e344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1e7  00000000  00000000  0000e215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281d  00000000  00000000  0002b3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  0002dc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a2  00000000  00000000  0002f7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bb3  00000000  00000000  00030d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019358  00000000  00000000  0004993d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ba3f  00000000  00000000  00062c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  000fe6d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ca0  00000000  00000000  000fe75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001073fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ec 	.word	0x200001ec
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a2f0 	.word	0x0800a2f0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f0 	.word	0x200001f0
 800017c:	0800a2f0 	.word	0x0800a2f0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <__aeabi_f2uiz>:
 800114c:	0042      	lsls	r2, r0, #1
 800114e:	d20e      	bcs.n	800116e <__aeabi_f2uiz+0x22>
 8001150:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001154:	d30b      	bcc.n	800116e <__aeabi_f2uiz+0x22>
 8001156:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800115a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115e:	d409      	bmi.n	8001174 <__aeabi_f2uiz+0x28>
 8001160:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001164:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001168:	fa23 f002 	lsr.w	r0, r3, r2
 800116c:	4770      	bx	lr
 800116e:	f04f 0000 	mov.w	r0, #0
 8001172:	4770      	bx	lr
 8001174:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001178:	d101      	bne.n	800117e <__aeabi_f2uiz+0x32>
 800117a:	0242      	lsls	r2, r0, #9
 800117c:	d102      	bne.n	8001184 <__aeabi_f2uiz+0x38>
 800117e:	f04f 30ff 	mov.w	r0, #4294967295
 8001182:	4770      	bx	lr
 8001184:	f04f 0000 	mov.w	r0, #0
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <__aeabi_uldivmod>:
 800118c:	b953      	cbnz	r3, 80011a4 <__aeabi_uldivmod+0x18>
 800118e:	b94a      	cbnz	r2, 80011a4 <__aeabi_uldivmod+0x18>
 8001190:	2900      	cmp	r1, #0
 8001192:	bf08      	it	eq
 8001194:	2800      	cmpeq	r0, #0
 8001196:	bf1c      	itt	ne
 8001198:	f04f 31ff 	movne.w	r1, #4294967295
 800119c:	f04f 30ff 	movne.w	r0, #4294967295
 80011a0:	f000 b98c 	b.w	80014bc <__aeabi_idiv0>
 80011a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ac:	f000 f806 	bl	80011bc <__udivmoddi4>
 80011b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr

080011bc <__udivmoddi4>:
 80011bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c0:	9d08      	ldr	r5, [sp, #32]
 80011c2:	468e      	mov	lr, r1
 80011c4:	4604      	mov	r4, r0
 80011c6:	4688      	mov	r8, r1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d14a      	bne.n	8001262 <__udivmoddi4+0xa6>
 80011cc:	428a      	cmp	r2, r1
 80011ce:	4617      	mov	r7, r2
 80011d0:	d962      	bls.n	8001298 <__udivmoddi4+0xdc>
 80011d2:	fab2 f682 	clz	r6, r2
 80011d6:	b14e      	cbz	r6, 80011ec <__udivmoddi4+0x30>
 80011d8:	f1c6 0320 	rsb	r3, r6, #32
 80011dc:	fa01 f806 	lsl.w	r8, r1, r6
 80011e0:	fa20 f303 	lsr.w	r3, r0, r3
 80011e4:	40b7      	lsls	r7, r6
 80011e6:	ea43 0808 	orr.w	r8, r3, r8
 80011ea:	40b4      	lsls	r4, r6
 80011ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011f0:	fbb8 f1fe 	udiv	r1, r8, lr
 80011f4:	fa1f fc87 	uxth.w	ip, r7
 80011f8:	fb0e 8811 	mls	r8, lr, r1, r8
 80011fc:	fb01 f20c 	mul.w	r2, r1, ip
 8001200:	0c23      	lsrs	r3, r4, #16
 8001202:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001206:	429a      	cmp	r2, r3
 8001208:	d909      	bls.n	800121e <__udivmoddi4+0x62>
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	f101 30ff 	add.w	r0, r1, #4294967295
 8001210:	f080 80eb 	bcs.w	80013ea <__udivmoddi4+0x22e>
 8001214:	429a      	cmp	r2, r3
 8001216:	f240 80e8 	bls.w	80013ea <__udivmoddi4+0x22e>
 800121a:	3902      	subs	r1, #2
 800121c:	443b      	add	r3, r7
 800121e:	1a9a      	subs	r2, r3, r2
 8001220:	fbb2 f0fe 	udiv	r0, r2, lr
 8001224:	fb0e 2210 	mls	r2, lr, r0, r2
 8001228:	fb00 fc0c 	mul.w	ip, r0, ip
 800122c:	b2a3      	uxth	r3, r4
 800122e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001232:	459c      	cmp	ip, r3
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x8e>
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	f100 32ff 	add.w	r2, r0, #4294967295
 800123c:	f080 80d7 	bcs.w	80013ee <__udivmoddi4+0x232>
 8001240:	459c      	cmp	ip, r3
 8001242:	f240 80d4 	bls.w	80013ee <__udivmoddi4+0x232>
 8001246:	443b      	add	r3, r7
 8001248:	3802      	subs	r0, #2
 800124a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800124e:	2100      	movs	r1, #0
 8001250:	eba3 030c 	sub.w	r3, r3, ip
 8001254:	b11d      	cbz	r5, 800125e <__udivmoddi4+0xa2>
 8001256:	2200      	movs	r2, #0
 8001258:	40f3      	lsrs	r3, r6
 800125a:	e9c5 3200 	strd	r3, r2, [r5]
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	428b      	cmp	r3, r1
 8001264:	d905      	bls.n	8001272 <__udivmoddi4+0xb6>
 8001266:	b10d      	cbz	r5, 800126c <__udivmoddi4+0xb0>
 8001268:	e9c5 0100 	strd	r0, r1, [r5]
 800126c:	2100      	movs	r1, #0
 800126e:	4608      	mov	r0, r1
 8001270:	e7f5      	b.n	800125e <__udivmoddi4+0xa2>
 8001272:	fab3 f183 	clz	r1, r3
 8001276:	2900      	cmp	r1, #0
 8001278:	d146      	bne.n	8001308 <__udivmoddi4+0x14c>
 800127a:	4573      	cmp	r3, lr
 800127c:	d302      	bcc.n	8001284 <__udivmoddi4+0xc8>
 800127e:	4282      	cmp	r2, r0
 8001280:	f200 8108 	bhi.w	8001494 <__udivmoddi4+0x2d8>
 8001284:	1a84      	subs	r4, r0, r2
 8001286:	eb6e 0203 	sbc.w	r2, lr, r3
 800128a:	2001      	movs	r0, #1
 800128c:	4690      	mov	r8, r2
 800128e:	2d00      	cmp	r5, #0
 8001290:	d0e5      	beq.n	800125e <__udivmoddi4+0xa2>
 8001292:	e9c5 4800 	strd	r4, r8, [r5]
 8001296:	e7e2      	b.n	800125e <__udivmoddi4+0xa2>
 8001298:	2a00      	cmp	r2, #0
 800129a:	f000 8091 	beq.w	80013c0 <__udivmoddi4+0x204>
 800129e:	fab2 f682 	clz	r6, r2
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	f040 80a5 	bne.w	80013f2 <__udivmoddi4+0x236>
 80012a8:	1a8a      	subs	r2, r1, r2
 80012aa:	2101      	movs	r1, #1
 80012ac:	0c03      	lsrs	r3, r0, #16
 80012ae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012b2:	b280      	uxth	r0, r0
 80012b4:	b2bc      	uxth	r4, r7
 80012b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80012ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80012be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012c2:	fb04 f20c 	mul.w	r2, r4, ip
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d907      	bls.n	80012da <__udivmoddi4+0x11e>
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80012d0:	d202      	bcs.n	80012d8 <__udivmoddi4+0x11c>
 80012d2:	429a      	cmp	r2, r3
 80012d4:	f200 80e3 	bhi.w	800149e <__udivmoddi4+0x2e2>
 80012d8:	46c4      	mov	ip, r8
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80012e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80012e4:	fb02 f404 	mul.w	r4, r2, r4
 80012e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80012ec:	429c      	cmp	r4, r3
 80012ee:	d907      	bls.n	8001300 <__udivmoddi4+0x144>
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80012f6:	d202      	bcs.n	80012fe <__udivmoddi4+0x142>
 80012f8:	429c      	cmp	r4, r3
 80012fa:	f200 80cd 	bhi.w	8001498 <__udivmoddi4+0x2dc>
 80012fe:	4602      	mov	r2, r0
 8001300:	1b1b      	subs	r3, r3, r4
 8001302:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001306:	e7a5      	b.n	8001254 <__udivmoddi4+0x98>
 8001308:	f1c1 0620 	rsb	r6, r1, #32
 800130c:	408b      	lsls	r3, r1
 800130e:	fa22 f706 	lsr.w	r7, r2, r6
 8001312:	431f      	orrs	r7, r3
 8001314:	fa2e fa06 	lsr.w	sl, lr, r6
 8001318:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800131c:	fbba f8f9 	udiv	r8, sl, r9
 8001320:	fa0e fe01 	lsl.w	lr, lr, r1
 8001324:	fa20 f306 	lsr.w	r3, r0, r6
 8001328:	fb09 aa18 	mls	sl, r9, r8, sl
 800132c:	fa1f fc87 	uxth.w	ip, r7
 8001330:	ea43 030e 	orr.w	r3, r3, lr
 8001334:	fa00 fe01 	lsl.w	lr, r0, r1
 8001338:	fb08 f00c 	mul.w	r0, r8, ip
 800133c:	0c1c      	lsrs	r4, r3, #16
 800133e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001342:	42a0      	cmp	r0, r4
 8001344:	fa02 f201 	lsl.w	r2, r2, r1
 8001348:	d90a      	bls.n	8001360 <__udivmoddi4+0x1a4>
 800134a:	193c      	adds	r4, r7, r4
 800134c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001350:	f080 809e 	bcs.w	8001490 <__udivmoddi4+0x2d4>
 8001354:	42a0      	cmp	r0, r4
 8001356:	f240 809b 	bls.w	8001490 <__udivmoddi4+0x2d4>
 800135a:	f1a8 0802 	sub.w	r8, r8, #2
 800135e:	443c      	add	r4, r7
 8001360:	1a24      	subs	r4, r4, r0
 8001362:	b298      	uxth	r0, r3
 8001364:	fbb4 f3f9 	udiv	r3, r4, r9
 8001368:	fb09 4413 	mls	r4, r9, r3, r4
 800136c:	fb03 fc0c 	mul.w	ip, r3, ip
 8001370:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001374:	45a4      	cmp	ip, r4
 8001376:	d909      	bls.n	800138c <__udivmoddi4+0x1d0>
 8001378:	193c      	adds	r4, r7, r4
 800137a:	f103 30ff 	add.w	r0, r3, #4294967295
 800137e:	f080 8085 	bcs.w	800148c <__udivmoddi4+0x2d0>
 8001382:	45a4      	cmp	ip, r4
 8001384:	f240 8082 	bls.w	800148c <__udivmoddi4+0x2d0>
 8001388:	3b02      	subs	r3, #2
 800138a:	443c      	add	r4, r7
 800138c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001390:	eba4 040c 	sub.w	r4, r4, ip
 8001394:	fba0 8c02 	umull	r8, ip, r0, r2
 8001398:	4564      	cmp	r4, ip
 800139a:	4643      	mov	r3, r8
 800139c:	46e1      	mov	r9, ip
 800139e:	d364      	bcc.n	800146a <__udivmoddi4+0x2ae>
 80013a0:	d061      	beq.n	8001466 <__udivmoddi4+0x2aa>
 80013a2:	b15d      	cbz	r5, 80013bc <__udivmoddi4+0x200>
 80013a4:	ebbe 0203 	subs.w	r2, lr, r3
 80013a8:	eb64 0409 	sbc.w	r4, r4, r9
 80013ac:	fa04 f606 	lsl.w	r6, r4, r6
 80013b0:	fa22 f301 	lsr.w	r3, r2, r1
 80013b4:	431e      	orrs	r6, r3
 80013b6:	40cc      	lsrs	r4, r1
 80013b8:	e9c5 6400 	strd	r6, r4, [r5]
 80013bc:	2100      	movs	r1, #0
 80013be:	e74e      	b.n	800125e <__udivmoddi4+0xa2>
 80013c0:	fbb1 fcf2 	udiv	ip, r1, r2
 80013c4:	0c01      	lsrs	r1, r0, #16
 80013c6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80013ca:	b280      	uxth	r0, r0
 80013cc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80013d0:	463b      	mov	r3, r7
 80013d2:	fbb1 f1f7 	udiv	r1, r1, r7
 80013d6:	4638      	mov	r0, r7
 80013d8:	463c      	mov	r4, r7
 80013da:	46b8      	mov	r8, r7
 80013dc:	46be      	mov	lr, r7
 80013de:	2620      	movs	r6, #32
 80013e0:	eba2 0208 	sub.w	r2, r2, r8
 80013e4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013e8:	e765      	b.n	80012b6 <__udivmoddi4+0xfa>
 80013ea:	4601      	mov	r1, r0
 80013ec:	e717      	b.n	800121e <__udivmoddi4+0x62>
 80013ee:	4610      	mov	r0, r2
 80013f0:	e72b      	b.n	800124a <__udivmoddi4+0x8e>
 80013f2:	f1c6 0120 	rsb	r1, r6, #32
 80013f6:	fa2e fc01 	lsr.w	ip, lr, r1
 80013fa:	40b7      	lsls	r7, r6
 80013fc:	fa0e fe06 	lsl.w	lr, lr, r6
 8001400:	fa20 f101 	lsr.w	r1, r0, r1
 8001404:	ea41 010e 	orr.w	r1, r1, lr
 8001408:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800140c:	fbbc f8fe 	udiv	r8, ip, lr
 8001410:	b2bc      	uxth	r4, r7
 8001412:	fb0e cc18 	mls	ip, lr, r8, ip
 8001416:	fb08 f904 	mul.w	r9, r8, r4
 800141a:	0c0a      	lsrs	r2, r1, #16
 800141c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001420:	40b0      	lsls	r0, r6
 8001422:	4591      	cmp	r9, r2
 8001424:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001428:	b280      	uxth	r0, r0
 800142a:	d93e      	bls.n	80014aa <__udivmoddi4+0x2ee>
 800142c:	18ba      	adds	r2, r7, r2
 800142e:	f108 3cff 	add.w	ip, r8, #4294967295
 8001432:	d201      	bcs.n	8001438 <__udivmoddi4+0x27c>
 8001434:	4591      	cmp	r9, r2
 8001436:	d81f      	bhi.n	8001478 <__udivmoddi4+0x2bc>
 8001438:	eba2 0209 	sub.w	r2, r2, r9
 800143c:	fbb2 f9fe 	udiv	r9, r2, lr
 8001440:	fb09 f804 	mul.w	r8, r9, r4
 8001444:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001448:	b28a      	uxth	r2, r1
 800144a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800144e:	4542      	cmp	r2, r8
 8001450:	d229      	bcs.n	80014a6 <__udivmoddi4+0x2ea>
 8001452:	18ba      	adds	r2, r7, r2
 8001454:	f109 31ff 	add.w	r1, r9, #4294967295
 8001458:	d2c2      	bcs.n	80013e0 <__udivmoddi4+0x224>
 800145a:	4542      	cmp	r2, r8
 800145c:	d2c0      	bcs.n	80013e0 <__udivmoddi4+0x224>
 800145e:	f1a9 0102 	sub.w	r1, r9, #2
 8001462:	443a      	add	r2, r7
 8001464:	e7bc      	b.n	80013e0 <__udivmoddi4+0x224>
 8001466:	45c6      	cmp	lr, r8
 8001468:	d29b      	bcs.n	80013a2 <__udivmoddi4+0x1e6>
 800146a:	ebb8 0302 	subs.w	r3, r8, r2
 800146e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001472:	3801      	subs	r0, #1
 8001474:	46e1      	mov	r9, ip
 8001476:	e794      	b.n	80013a2 <__udivmoddi4+0x1e6>
 8001478:	eba7 0909 	sub.w	r9, r7, r9
 800147c:	444a      	add	r2, r9
 800147e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001482:	f1a8 0c02 	sub.w	ip, r8, #2
 8001486:	fb09 f804 	mul.w	r8, r9, r4
 800148a:	e7db      	b.n	8001444 <__udivmoddi4+0x288>
 800148c:	4603      	mov	r3, r0
 800148e:	e77d      	b.n	800138c <__udivmoddi4+0x1d0>
 8001490:	46d0      	mov	r8, sl
 8001492:	e765      	b.n	8001360 <__udivmoddi4+0x1a4>
 8001494:	4608      	mov	r0, r1
 8001496:	e6fa      	b.n	800128e <__udivmoddi4+0xd2>
 8001498:	443b      	add	r3, r7
 800149a:	3a02      	subs	r2, #2
 800149c:	e730      	b.n	8001300 <__udivmoddi4+0x144>
 800149e:	f1ac 0c02 	sub.w	ip, ip, #2
 80014a2:	443b      	add	r3, r7
 80014a4:	e719      	b.n	80012da <__udivmoddi4+0x11e>
 80014a6:	4649      	mov	r1, r9
 80014a8:	e79a      	b.n	80013e0 <__udivmoddi4+0x224>
 80014aa:	eba2 0209 	sub.w	r2, r2, r9
 80014ae:	fbb2 f9fe 	udiv	r9, r2, lr
 80014b2:	46c4      	mov	ip, r8
 80014b4:	fb09 f804 	mul.w	r8, r9, r4
 80014b8:	e7c4      	b.n	8001444 <__udivmoddi4+0x288>
 80014ba:	bf00      	nop

080014bc <__aeabi_idiv0>:
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <buzzer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void buzzer (uint8_t buzzerState)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	if(buzzerState)
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d007      	beq.n	80014e0 <buzzer+0x20>
	{
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 80014d0:	2104      	movs	r1, #4
 80014d2:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <buzzer+0x38>)
 80014d4:	f004 f9c0 	bl	8005858 <HAL_TIM_PWM_Start_IT>
		printf("Buzzer ON\r\n");
 80014d8:	4808      	ldr	r0, [pc, #32]	@ (80014fc <buzzer+0x3c>)
 80014da:	f006 fe19 	bl	8008110 <puts>
	else
	{
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_2);
		printf("Buzzer OFF\r\n");
	}
}
 80014de:	e006      	b.n	80014ee <buzzer+0x2e>
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_2);
 80014e0:	2104      	movs	r1, #4
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <buzzer+0x38>)
 80014e4:	f004 fa9a 	bl	8005a1c <HAL_TIM_PWM_Stop_IT>
		printf("Buzzer OFF\r\n");
 80014e8:	4805      	ldr	r0, [pc, #20]	@ (8001500 <buzzer+0x40>)
 80014ea:	f006 fe11 	bl	8008110 <puts>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200002b4 	.word	0x200002b4
 80014fc:	0800a32c 	.word	0x0800a32c
 8001500:	0800a338 	.word	0x0800a338

08001504 <procedure_alarme>:

void procedure_alarme (void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	tempo = 0x38;
 8001508:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <procedure_alarme+0xd8>)
 800150a:	2238      	movs	r2, #56	@ 0x38
 800150c:	701a      	strb	r2, [r3, #0]
	while (alarme ==1 && tempo>0x30)
 800150e:	e02e      	b.n	800156e <procedure_alarme+0x6a>
	{
		MAX7219_DisplayChar(1, tempo);
 8001510:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <procedure_alarme+0xd8>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	2001      	movs	r0, #1
 8001518:	f005 fe43 	bl	80071a2 <MAX7219_DisplayChar>
		MAX7219_DisplayChar(2, 'S');
 800151c:	2153      	movs	r1, #83	@ 0x53
 800151e:	2002      	movs	r0, #2
 8001520:	f005 fe3f 	bl	80071a2 <MAX7219_DisplayChar>
		MAX7219_DisplayChar(3, 'E');
 8001524:	2145      	movs	r1, #69	@ 0x45
 8001526:	2003      	movs	r0, #3
 8001528:	f005 fe3b 	bl	80071a2 <MAX7219_DisplayChar>
		MAX7219_DisplayChar(4, 'C');
 800152c:	2143      	movs	r1, #67	@ 0x43
 800152e:	2004      	movs	r0, #4
 8001530:	f005 fe37 	bl	80071a2 <MAX7219_DisplayChar>
		TIM3->ARR = 1032;
 8001534:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <procedure_alarme+0xdc>)
 8001536:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800153a:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CCR2 = TIM3->ARR /2;
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <procedure_alarme+0xdc>)
 800153e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001540:	4a27      	ldr	r2, [pc, #156]	@ (80015e0 <procedure_alarme+0xdc>)
 8001542:	085b      	lsrs	r3, r3, #1
 8001544:	6393      	str	r3, [r2, #56]	@ 0x38
		buzzer(1);
 8001546:	2001      	movs	r0, #1
 8001548:	f7ff ffba 	bl	80014c0 <buzzer>
		HAL_Delay(500);
 800154c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001550:	f001 fb70 	bl	8002c34 <HAL_Delay>
		buzzer(0);
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff ffb3 	bl	80014c0 <buzzer>
		HAL_Delay(500);
 800155a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800155e:	f001 fb69 	bl	8002c34 <HAL_Delay>
		tempo--;
 8001562:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <procedure_alarme+0xd8>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	3b01      	subs	r3, #1
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <procedure_alarme+0xd8>)
 800156c:	701a      	strb	r2, [r3, #0]
	while (alarme ==1 && tempo>0x30)
 800156e:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <procedure_alarme+0xe0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d103      	bne.n	800157e <procedure_alarme+0x7a>
 8001576:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <procedure_alarme+0xd8>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b30      	cmp	r3, #48	@ 0x30
 800157c:	d8c8      	bhi.n	8001510 <procedure_alarme+0xc>
	}

	if (alarme ==1) alarme =2;
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <procedure_alarme+0xe0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d11e      	bne.n	80015c4 <procedure_alarme+0xc0>
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <procedure_alarme+0xe0>)
 8001588:	2202      	movs	r2, #2
 800158a:	601a      	str	r2, [r3, #0]

	while (alarme ==2)
 800158c:	e01a      	b.n	80015c4 <procedure_alarme+0xc0>
	{
		TIM3->ARR = 206;
 800158e:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <procedure_alarme+0xdc>)
 8001590:	22ce      	movs	r2, #206	@ 0xce
 8001592:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CCR2 = TIM3->ARR/2;
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <procedure_alarme+0xdc>)
 8001596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001598:	4a11      	ldr	r2, [pc, #68]	@ (80015e0 <procedure_alarme+0xdc>)
 800159a:	085b      	lsrs	r3, r3, #1
 800159c:	6393      	str	r3, [r2, #56]	@ 0x38
		buzzer(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff ff8e 	bl	80014c0 <buzzer>
		MAX7219_DisplayChar(1, 'A');
 80015a4:	2141      	movs	r1, #65	@ 0x41
 80015a6:	2001      	movs	r0, #1
 80015a8:	f005 fdfb 	bl	80071a2 <MAX7219_DisplayChar>
		MAX7219_DisplayChar(2, 'L');
 80015ac:	214c      	movs	r1, #76	@ 0x4c
 80015ae:	2002      	movs	r0, #2
 80015b0:	f005 fdf7 	bl	80071a2 <MAX7219_DisplayChar>
		MAX7219_DisplayChar(3, 'R');
 80015b4:	2152      	movs	r1, #82	@ 0x52
 80015b6:	2003      	movs	r0, #3
 80015b8:	f005 fdf3 	bl	80071a2 <MAX7219_DisplayChar>
		MAX7219_DisplayChar(4, 'T');
 80015bc:	2154      	movs	r1, #84	@ 0x54
 80015be:	2004      	movs	r0, #4
 80015c0:	f005 fdef 	bl	80071a2 <MAX7219_DisplayChar>
	while (alarme ==2)
 80015c4:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <procedure_alarme+0xe0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d0e0      	beq.n	800158e <procedure_alarme+0x8a>
	}
	buzzer(0);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff ff77 	bl	80014c0 <buzzer>
	MAX7219_Clear();
 80015d2:	f005 fdd0 	bl	8007176 <MAX7219_Clear>
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200009cc 	.word	0x200009cc
 80015e0:	40000400 	.word	0x40000400
 80015e4:	200009c8 	.word	0x200009c8

080015e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	/* Initialize mems driver interface */
	dev_ctx.write_reg = platform_write;
 80015ee:	4b9e      	ldr	r3, [pc, #632]	@ (8001868 <main+0x280>)
 80015f0:	4a9e      	ldr	r2, [pc, #632]	@ (800186c <main+0x284>)
 80015f2:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 80015f4:	4b9c      	ldr	r3, [pc, #624]	@ (8001868 <main+0x280>)
 80015f6:	4a9e      	ldr	r2, [pc, #632]	@ (8001870 <main+0x288>)
 80015f8:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &hi2c1;
 80015fa:	4b9b      	ldr	r3, [pc, #620]	@ (8001868 <main+0x280>)
 80015fc:	4a9d      	ldr	r2, [pc, #628]	@ (8001874 <main+0x28c>)
 80015fe:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001600:	f001 faa9 	bl	8002b56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001604:	f000 f966 	bl	80018d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	iks01a3_i2c_stuck_quirk();
 8001608:	f000 ff6e 	bl	80024e8 <iks01a3_i2c_stuck_quirk>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160c:	f000 fae8 	bl	8001be0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001610:	f000 f9ae 	bl	8001970 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001614:	f000 faba 	bl	8001b8c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001618:	f000 fa0e 	bl	8001a38 <MX_TIM3_Init>
  MX_TIM6_Init();
 800161c:	f000 fa80 	bl	8001b20 <MX_TIM6_Init>
  MX_SPI1_Init();
 8001620:	f000 f9d4 	bl	80019cc <MX_SPI1_Init>
  MAX7219_Init();
 8001624:	f005 fd70 	bl	8007108 <MAX7219_Init>
  /* USER CODE BEGIN 2 */
	KIN1_InitCycleCounter();
 8001628:	4b93      	ldr	r3, [pc, #588]	@ (8001878 <main+0x290>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a92      	ldr	r2, [pc, #584]	@ (8001878 <main+0x290>)
 800162e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001632:	6013      	str	r3, [r2, #0]
	KIN1_EnableCycleCounter();
 8001634:	4b91      	ldr	r3, [pc, #580]	@ (800187c <main+0x294>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a90      	ldr	r2, [pc, #576]	@ (800187c <main+0x294>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6013      	str	r3, [r2, #0]
	lsm6dso_initialize();
 8001640:	f000 fdfc 	bl	800223c <lsm6dso_initialize>
	if (NEAI_MODE) {
		neai_state = neai_classification_init(knowledge);
 8001644:	488e      	ldr	r0, [pc, #568]	@ (8001880 <main+0x298>)
 8001646:	f005 fe17 	bl	8007278 <neai_classification_init>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	4b8d      	ldr	r3, [pc, #564]	@ (8001884 <main+0x29c>)
 8001650:	701a      	strb	r2, [r3, #0]
		printf("Initialize NEAI Classification library. NEAI init return: %d.\r\n", neai_state);
 8001652:	4b8c      	ldr	r3, [pc, #560]	@ (8001884 <main+0x29c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4619      	mov	r1, r3
 8001658:	488b      	ldr	r0, [pc, #556]	@ (8001888 <main+0x2a0>)
 800165a:	f006 fcf1 	bl	8008040 <iprintf>

		if (neai_state != NEAI_OK) {
 800165e:	4b89      	ldr	r3, [pc, #548]	@ (8001884 <main+0x29c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <main+0x84>
			printf("ERREUR: Échec d'initialisation NanoEdgeAI!\r\n");
 8001666:	4889      	ldr	r0, [pc, #548]	@ (800188c <main+0x2a4>)
 8001668:	f006 fd52 	bl	8008110 <puts>
			// Gestion d'erreur appropriée
		}

		printf("SafeGuard - Système de détection de chute activé\r\n");
 800166c:	4888      	ldr	r0, [pc, #544]	@ (8001890 <main+0x2a8>)
 800166e:	f006 fd4f 	bl	8008110 <puts>
		printf("Classes disponibles: %s, %s, %s\r\n",
 8001672:	4b88      	ldr	r3, [pc, #544]	@ (8001894 <main+0x2ac>)
 8001674:	6859      	ldr	r1, [r3, #4]
 8001676:	4b87      	ldr	r3, [pc, #540]	@ (8001894 <main+0x2ac>)
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	4b86      	ldr	r3, [pc, #536]	@ (8001894 <main+0x2ac>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	4886      	ldr	r0, [pc, #536]	@ (8001898 <main+0x2b0>)
 8001680:	f006 fcde 	bl	8008040 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		uint8_t wtm_flag = 0, status2 = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	72fb      	strb	r3, [r7, #11]
 8001688:	2300      	movs	r3, #0
 800168a:	70fb      	strb	r3, [r7, #3]
		uint16_t num = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	803b      	strh	r3, [r7, #0]
		if (drdy) {
 8001690:	4b82      	ldr	r3, [pc, #520]	@ (800189c <main+0x2b4>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f4      	beq.n	8001684 <main+0x9c>
			/* Reset data ready condition */
			drdy = 0;
 800169a:	4b80      	ldr	r3, [pc, #512]	@ (800189c <main+0x2b4>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
			lsm6dso_read_reg(&dev_ctx, LSM6DSO_FIFO_STATUS2, &status2, 1);
 80016a0:	1cfa      	adds	r2, r7, #3
 80016a2:	2301      	movs	r3, #1
 80016a4:	213b      	movs	r1, #59	@ 0x3b
 80016a6:	4870      	ldr	r0, [pc, #448]	@ (8001868 <main+0x280>)
 80016a8:	f005 f9ba 	bl	8006a20 <lsm6dso_read_reg>
			wtm_flag = status2 >> 7;
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	09db      	lsrs	r3, r3, #7
 80016b0:	72fb      	strb	r3, [r7, #11]
			if (wtm_flag) {
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0e5      	beq.n	8001684 <main+0x9c>
				lsm6dso_fifo_data_level_get(&dev_ctx, &num);
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	486a      	ldr	r0, [pc, #424]	@ (8001868 <main+0x280>)
 80016be:	f005 fc79 	bl	8006fb4 <lsm6dso_fifo_data_level_get>
				if (data_left < num) {
 80016c2:	4b77      	ldr	r3, [pc, #476]	@ (80018a0 <main+0x2b8>)
 80016c4:	881a      	ldrh	r2, [r3, #0]
 80016c6:	883b      	ldrh	r3, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d202      	bcs.n	80016d2 <main+0xea>
					num = data_left;
 80016cc:	4b74      	ldr	r3, [pc, #464]	@ (80018a0 <main+0x2b8>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	803b      	strh	r3, [r7, #0]
				}
				lsm6dso_get_buffer_from_fifo(num);
 80016d2:	883b      	ldrh	r3, [r7, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fe0d 	bl	80022f4 <lsm6dso_get_buffer_from_fifo>
				data_left -= num;
 80016da:	4b71      	ldr	r3, [pc, #452]	@ (80018a0 <main+0x2b8>)
 80016dc:	881a      	ldrh	r2, [r3, #0]
 80016de:	883b      	ldrh	r3, [r7, #0]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4b6e      	ldr	r3, [pc, #440]	@ (80018a0 <main+0x2b8>)
 80016e6:	801a      	strh	r2, [r3, #0]
				number_read += num;
 80016e8:	4b6e      	ldr	r3, [pc, #440]	@ (80018a4 <main+0x2bc>)
 80016ea:	881a      	ldrh	r2, [r3, #0]
 80016ec:	883b      	ldrh	r3, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	4b6c      	ldr	r3, [pc, #432]	@ (80018a4 <main+0x2bc>)
 80016f4:	801a      	strh	r2, [r3, #0]
				if (data_left == 0) {
 80016f6:	4b6a      	ldr	r3, [pc, #424]	@ (80018a0 <main+0x2b8>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 80a4 	bne.w	8001848 <main+0x260>
					lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_BYPASS_MODE);
 8001700:	2100      	movs	r1, #0
 8001702:	4859      	ldr	r0, [pc, #356]	@ (8001868 <main+0x280>)
 8001704:	f005 fc30 	bl	8006f68 <lsm6dso_fifo_mode_set>
#if NEAI_MODE
					uint32_t cycles_cnt = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]

					// CHANGÉ: Classification au lieu de learn/detect
					KIN1_ResetCycleCounter();
 800170c:	4b66      	ldr	r3, [pc, #408]	@ (80018a8 <main+0x2c0>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
					neai_state = neai_classification(neai_buffer, neai_output_buffer, &neai_id_class);
 8001712:	4a66      	ldr	r2, [pc, #408]	@ (80018ac <main+0x2c4>)
 8001714:	4966      	ldr	r1, [pc, #408]	@ (80018b0 <main+0x2c8>)
 8001716:	4867      	ldr	r0, [pc, #412]	@ (80018b4 <main+0x2cc>)
 8001718:	f005 fe68 	bl	80073ec <neai_classification>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	4b58      	ldr	r3, [pc, #352]	@ (8001884 <main+0x29c>)
 8001722:	701a      	strb	r2, [r3, #0]
					cycles_cnt = KIN1_GetCycleCounter();
 8001724:	4b60      	ldr	r3, [pc, #384]	@ (80018a8 <main+0x2c0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	607b      	str	r3, [r7, #4]
					neai_time = (cycles_cnt * 1000000.0) / HAL_RCC_GetSysClockFreq();
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7fe fe72 	bl	8000414 <__aeabi_ui2d>
 8001730:	a34b      	add	r3, pc, #300	@ (adr r3, 8001860 <main+0x278>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7fe fee7 	bl	8000508 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4614      	mov	r4, r2
 8001740:	461d      	mov	r5, r3
 8001742:	f003 fa2f 	bl	8004ba4 <HAL_RCC_GetSysClockFreq>
 8001746:	4603      	mov	r3, r0
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fe63 	bl	8000414 <__aeabi_ui2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7ff f801 	bl	800075c <__aeabi_ddiv>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f9a9 	bl	8000ab8 <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	4a53      	ldr	r2, [pc, #332]	@ (80018b8 <main+0x2d0>)
 800176a:	6013      	str	r3, [r2, #0]

					// Affichage des résultats
					printf("Classe détectée: %s (ID: %d, Confiance: %.1f%%).\r\n",
 800176c:	4b4f      	ldr	r3, [pc, #316]	@ (80018ac <main+0x2c4>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b48      	ldr	r3, [pc, #288]	@ (8001894 <main+0x2ac>)
 8001774:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001778:	4b4c      	ldr	r3, [pc, #304]	@ (80018ac <main+0x2c4>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	461d      	mov	r5, r3
							id2class[neai_id_class], neai_id_class, neai_output_buffer[neai_id_class] * 100.0f);
 800177e:	4b4b      	ldr	r3, [pc, #300]	@ (80018ac <main+0x2c4>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	4b4a      	ldr	r3, [pc, #296]	@ (80018b0 <main+0x2c8>)
 8001786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178a:	494c      	ldr	r1, [pc, #304]	@ (80018bc <main+0x2d4>)
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff faf1 	bl	8000d74 <__aeabi_fmul>
 8001792:	4603      	mov	r3, r0
					printf("Classe détectée: %s (ID: %d, Confiance: %.1f%%).\r\n",
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fe5f 	bl	8000458 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	e9cd 2300 	strd	r2, r3, [sp]
 80017a2:	462a      	mov	r2, r5
 80017a4:	4621      	mov	r1, r4
 80017a6:	4846      	ldr	r0, [pc, #280]	@ (80018c0 <main+0x2d8>)
 80017a8:	f006 fc4a 	bl	8008040 <iprintf>
					printf("NEAI classification return: %d. Cycles: %ld = %.1f µs.\r\n",
 80017ac:	4b35      	ldr	r3, [pc, #212]	@ (8001884 <main+0x29c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461c      	mov	r4, r3
 80017b2:	4b41      	ldr	r3, [pc, #260]	@ (80018b8 <main+0x2d0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fe4e 	bl	8000458 <__aeabi_f2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	e9cd 2300 	strd	r2, r3, [sp]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4621      	mov	r1, r4
 80017c8:	483e      	ldr	r0, [pc, #248]	@ (80018c4 <main+0x2dc>)
 80017ca:	f006 fc39 	bl	8008040 <iprintf>
							neai_state, cycles_cnt, neai_time);

					// Affichage détaillé des probabilités
					printf("Probabilités: \r\n");
 80017ce:	483e      	ldr	r0, [pc, #248]	@ (80018c8 <main+0x2e0>)
 80017d0:	f006 fc9e 	bl	8008110 <puts>
					for(int i = 1; i <= CLASS_NUMBER; i++) {
 80017d4:	2301      	movs	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e019      	b.n	800180e <main+0x226>
						printf("%s=%.1f%% ", id2class[i], neai_output_buffer[i-1] * 100.0f);
 80017da:	4a2e      	ldr	r2, [pc, #184]	@ (8001894 <main+0x2ac>)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	4a32      	ldr	r2, [pc, #200]	@ (80018b0 <main+0x2c8>)
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	4933      	ldr	r1, [pc, #204]	@ (80018bc <main+0x2d4>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fac0 	bl	8000d74 <__aeabi_fmul>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe2e 	bl	8000458 <__aeabi_f2d>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4621      	mov	r1, r4
 8001802:	4832      	ldr	r0, [pc, #200]	@ (80018cc <main+0x2e4>)
 8001804:	f006 fc1c 	bl	8008040 <iprintf>
					for(int i = 1; i <= CLASS_NUMBER; i++) {
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3301      	adds	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b03      	cmp	r3, #3
 8001812:	dde2      	ble.n	80017da <main+0x1f2>
					}
					printf("\r\n");
 8001814:	482e      	ldr	r0, [pc, #184]	@ (80018d0 <main+0x2e8>)
 8001816:	f006 fc7b 	bl	8008110 <puts>

					// AJOUTÉ: Vérification de détection de chute
					check_fall_detection();
 800181a:	f000 fa7d 	bl	8001d18 <check_fall_detection>
						printf("%.3f ", neai_buffer[i]);
					}
					printf("\r\n");
#endif
					// Reset pour le prochain cycle
					data_left = (uint16_t) SAMPLES;
 800181e:	4b20      	ldr	r3, [pc, #128]	@ (80018a0 <main+0x2b8>)
 8001820:	2280      	movs	r2, #128	@ 0x80
 8001822:	801a      	strh	r2, [r3, #0]
					number_read = 0;
 8001824:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <main+0x2bc>)
 8001826:	2200      	movs	r2, #0
 8001828:	801a      	strh	r2, [r3, #0]
					memset(neai_buffer, 0x00, AXIS * SAMPLES * sizeof(float));
 800182a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800182e:	2100      	movs	r1, #0
 8001830:	4820      	ldr	r0, [pc, #128]	@ (80018b4 <main+0x2cc>)
 8001832:	f006 fd4d 	bl	80082d0 <memset>

					if (SAMPLES <= MAX_FIFO_SIZE) {
						lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 8001836:	2180      	movs	r1, #128	@ 0x80
 8001838:	480b      	ldr	r0, [pc, #44]	@ (8001868 <main+0x280>)
 800183a:	f005 fb13 	bl	8006e64 <lsm6dso_fifo_watermark_set>
					}
					else {
						lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
					}
					lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_FIFO_MODE);
 800183e:	2101      	movs	r1, #1
 8001840:	4809      	ldr	r0, [pc, #36]	@ (8001868 <main+0x280>)
 8001842:	f005 fb91 	bl	8006f68 <lsm6dso_fifo_mode_set>
 8001846:	e71d      	b.n	8001684 <main+0x9c>
				}
				else if (data_left < MAX_FIFO_SIZE) {
 8001848:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <main+0x2b8>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	2bff      	cmp	r3, #255	@ 0xff
 800184e:	f63f af19 	bhi.w	8001684 <main+0x9c>
					lsm6dso_fifo_watermark_set(&dev_ctx, data_left);
 8001852:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <main+0x2b8>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	4803      	ldr	r0, [pc, #12]	@ (8001868 <main+0x280>)
 800185a:	f005 fb03 	bl	8006e64 <lsm6dso_fifo_watermark_set>
	{
 800185e:	e711      	b.n	8001684 <main+0x9c>
 8001860:	00000000 	.word	0x00000000
 8001864:	412e8480 	.word	0x412e8480
 8001868:	200009b8 	.word	0x200009b8
 800186c:	080021c9 	.word	0x080021c9
 8001870:	08002203 	.word	0x08002203
 8001874:	20000208 	.word	0x20000208
 8001878:	e000edfc 	.word	0xe000edfc
 800187c:	e0001000 	.word	0xe0001000
 8001880:	0800a7a8 	.word	0x0800a7a8
 8001884:	20000380 	.word	0x20000380
 8001888:	0800a344 	.word	0x0800a344
 800188c:	0800a384 	.word	0x0800a384
 8001890:	0800a3b4 	.word	0x0800a3b4
 8001894:	20000004 	.word	0x20000004
 8001898:	0800a3ec 	.word	0x0800a3ec
 800189c:	20000381 	.word	0x20000381
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000382 	.word	0x20000382
 80018a8:	e0001004 	.word	0xe0001004
 80018ac:	2000037e 	.word	0x2000037e
 80018b0:	2000098c 	.word	0x2000098c
 80018b4:	2000038c 	.word	0x2000038c
 80018b8:	20000388 	.word	0x20000388
 80018bc:	42c80000 	.word	0x42c80000
 80018c0:	0800a410 	.word	0x0800a410
 80018c4:	0800a448 	.word	0x0800a448
 80018c8:	0800a484 	.word	0x0800a484
 80018cc:	0800a498 	.word	0x0800a498
 80018d0:	0800a4a4 	.word	0x0800a4a4

080018d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b092      	sub	sp, #72	@ 0x48
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	2234      	movs	r2, #52	@ 0x34
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f006 fcf4 	bl	80082d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f6:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <SystemClock_Config+0x98>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80018fe:	4a1b      	ldr	r2, [pc, #108]	@ (800196c <SystemClock_Config+0x98>)
 8001900:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001904:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001906:	2302      	movs	r3, #2
 8001908:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800190a:	2301      	movs	r3, #1
 800190c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800190e:	2310      	movs	r3, #16
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001912:	2302      	movs	r3, #2
 8001914:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001916:	2300      	movs	r3, #0
 8001918:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800191a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800191e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001920:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001924:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4618      	mov	r0, r3
 800192c:	f002 fcd6 	bl	80042dc <HAL_RCC_OscConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001936:	f000 fe27 	bl	8002588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193a:	230f      	movs	r3, #15
 800193c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193e:	2303      	movs	r3, #3
 8001940:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800194e:	463b      	mov	r3, r7
 8001950:	2101      	movs	r1, #1
 8001952:	4618      	mov	r0, r3
 8001954:	f002 fff2 	bl	800493c <HAL_RCC_ClockConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800195e:	f000 fe13 	bl	8002588 <Error_Handler>
  }
}
 8001962:	bf00      	nop
 8001964:	3748      	adds	r7, #72	@ 0x48
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40007000 	.word	0x40007000

08001970 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <MX_I2C1_Init+0x50>)
 8001976:	4a13      	ldr	r2, [pc, #76]	@ (80019c4 <MX_I2C1_Init+0x54>)
 8001978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800197a:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <MX_I2C1_Init+0x50>)
 800197c:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <MX_I2C1_Init+0x58>)
 800197e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <MX_I2C1_Init+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <MX_I2C1_Init+0x50>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <MX_I2C1_Init+0x50>)
 800198e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001992:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001994:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <MX_I2C1_Init+0x50>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <MX_I2C1_Init+0x50>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a0:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <MX_I2C1_Init+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019a6:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <MX_I2C1_Init+0x50>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019ac:	4804      	ldr	r0, [pc, #16]	@ (80019c0 <MX_I2C1_Init+0x50>)
 80019ae:	f001 fc71 	bl	8003294 <HAL_I2C_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019b8:	f000 fde6 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000208 	.word	0x20000208
 80019c4:	40005400 	.word	0x40005400
 80019c8:	00061a80 	.word	0x00061a80

080019cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019d0:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <MX_SPI1_Init+0x64>)
 80019d2:	4a18      	ldr	r2, [pc, #96]	@ (8001a34 <MX_SPI1_Init+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019d6:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <MX_SPI1_Init+0x64>)
 80019d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019de:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <MX_SPI1_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <MX_SPI1_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ea:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <MX_SPI1_Init+0x64>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <MX_SPI1_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <MX_SPI1_Init+0x64>)
 80019f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <MX_SPI1_Init+0x64>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a04:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <MX_SPI1_Init+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <MX_SPI1_Init+0x64>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a10:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <MX_SPI1_Init+0x64>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <MX_SPI1_Init+0x64>)
 8001a18:	220a      	movs	r2, #10
 8001a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a1c:	4804      	ldr	r0, [pc, #16]	@ (8001a30 <MX_SPI1_Init+0x64>)
 8001a1e:	f003 fa53 	bl	8004ec8 <HAL_SPI_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a28:	f000 fdae 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	2000025c 	.word	0x2000025c
 8001a34:	40013000 	.word	0x40013000

08001a38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3e:	f107 0318 	add.w	r3, r7, #24
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a56:	463b      	mov	r3, r7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a62:	4b2d      	ldr	r3, [pc, #180]	@ (8001b18 <MX_TIM3_Init+0xe0>)
 8001a64:	4a2d      	ldr	r2, [pc, #180]	@ (8001b1c <MX_TIM3_Init+0xe4>)
 8001a66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8001a68:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <MX_TIM3_Init+0xe0>)
 8001a6a:	221f      	movs	r2, #31
 8001a6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b18 <MX_TIM3_Init+0xe0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1032;
 8001a74:	4b28      	ldr	r3, [pc, #160]	@ (8001b18 <MX_TIM3_Init+0xe0>)
 8001a76:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8001a7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <MX_TIM3_Init+0xe0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a82:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <MX_TIM3_Init+0xe0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a88:	4823      	ldr	r0, [pc, #140]	@ (8001b18 <MX_TIM3_Init+0xe0>)
 8001a8a:	f003 fde5 	bl	8005658 <HAL_TIM_Base_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001a94:	f000 fd78 	bl	8002588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a9c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a9e:	f107 0318 	add.w	r3, r7, #24
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481c      	ldr	r0, [pc, #112]	@ (8001b18 <MX_TIM3_Init+0xe0>)
 8001aa6:	f004 f9d1 	bl	8005e4c <HAL_TIM_ConfigClockSource>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ab0:	f000 fd6a 	bl	8002588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ab4:	4818      	ldr	r0, [pc, #96]	@ (8001b18 <MX_TIM3_Init+0xe0>)
 8001ab6:	f003 fe87 	bl	80057c8 <HAL_TIM_PWM_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ac0:	f000 fd62 	bl	8002588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4811      	ldr	r0, [pc, #68]	@ (8001b18 <MX_TIM3_Init+0xe0>)
 8001ad4:	f004 fccc 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001ade:	f000 fd53 	bl	8002588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae2:	2360      	movs	r3, #96	@ 0x60
 8001ae4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 516;
 8001ae6:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8001aea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af4:	463b      	mov	r3, r7
 8001af6:	2204      	movs	r2, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4807      	ldr	r0, [pc, #28]	@ (8001b18 <MX_TIM3_Init+0xe0>)
 8001afc:	f004 f8e4 	bl	8005cc8 <HAL_TIM_PWM_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001b06:	f000 fd3f 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b0a:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <MX_TIM3_Init+0xe0>)
 8001b0c:	f000 fe44 	bl	8002798 <HAL_TIM_MspPostInit>

}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	@ 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200002b4 	.word	0x200002b4
 8001b1c:	40000400 	.word	0x40000400

08001b20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b26:	463b      	mov	r3, r7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <MX_TIM6_Init+0x64>)
 8001b30:	4a15      	ldr	r2, [pc, #84]	@ (8001b88 <MX_TIM6_Init+0x68>)
 8001b32:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31999;
 8001b34:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <MX_TIM6_Init+0x64>)
 8001b36:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8001b3a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <MX_TIM6_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <MX_TIM6_Init+0x64>)
 8001b44:	22c8      	movs	r2, #200	@ 0xc8
 8001b46:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b48:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <MX_TIM6_Init+0x64>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b4e:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <MX_TIM6_Init+0x64>)
 8001b50:	f003 fd82 	bl	8005658 <HAL_TIM_Base_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001b5a:	f000 fd15 	bl	8002588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b66:	463b      	mov	r3, r7
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4806      	ldr	r0, [pc, #24]	@ (8001b84 <MX_TIM6_Init+0x64>)
 8001b6c:	f004 fc80 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001b76:	f000 fd07 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200002f4 	.word	0x200002f4
 8001b88:	40001000 	.word	0x40001000

08001b8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	@ (8001bdc <MX_USART2_UART_Init+0x50>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bc4:	f004 fcb2 	bl	800652c <HAL_UART_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bce:	f000 fcdb 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000334 	.word	0x20000334
 8001bdc:	40004400 	.word	0x40004400

08001be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
 8001bf4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	4b44      	ldr	r3, [pc, #272]	@ (8001d08 <MX_GPIO_Init+0x128>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a43      	ldr	r2, [pc, #268]	@ (8001d08 <MX_GPIO_Init+0x128>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b41      	ldr	r3, [pc, #260]	@ (8001d08 <MX_GPIO_Init+0x128>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d08 <MX_GPIO_Init+0x128>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4a3d      	ldr	r2, [pc, #244]	@ (8001d08 <MX_GPIO_Init+0x128>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	61d3      	str	r3, [r2, #28]
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d08 <MX_GPIO_Init+0x128>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	4b38      	ldr	r3, [pc, #224]	@ (8001d08 <MX_GPIO_Init+0x128>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a37      	ldr	r2, [pc, #220]	@ (8001d08 <MX_GPIO_Init+0x128>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b35      	ldr	r3, [pc, #212]	@ (8001d08 <MX_GPIO_Init+0x128>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_RESET);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2102      	movs	r1, #2
 8001c42:	4832      	ldr	r0, [pc, #200]	@ (8001d0c <MX_GPIO_Init+0x12c>)
 8001c44:	f001 faf6 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c4e:	4830      	ldr	r0, [pc, #192]	@ (8001d10 <MX_GPIO_Init+0x130>)
 8001c50:	f001 faf0 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = B1_Pin|BTN3_Pin;
 8001c54:	f44f 5301 	mov.w	r3, #8256	@ 0x2040
 8001c58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	4619      	mov	r1, r3
 8001c6a:	482a      	ldr	r0, [pc, #168]	@ (8001d14 <MX_GPIO_Init+0x134>)
 8001c6c:	f001 f952 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : L0_Pin */
  GPIO_InitStruct.Pin = L0_Pin;
 8001c70:	2302      	movs	r3, #2
 8001c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L0_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	4619      	mov	r1, r3
 8001c86:	4821      	ldr	r0, [pc, #132]	@ (8001d0c <MX_GPIO_Init+0x12c>)
 8001c88:	f001 f944 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001c8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	481a      	ldr	r0, [pc, #104]	@ (8001d10 <MX_GPIO_Init+0x130>)
 8001ca6:	f001 f935 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8001caa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cb0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4813      	ldr	r0, [pc, #76]	@ (8001d10 <MX_GPIO_Init+0x130>)
 8001cc2:	f001 f927 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_ACC_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480c      	ldr	r0, [pc, #48]	@ (8001d0c <MX_GPIO_Init+0x12c>)
 8001cdc:	f001 f91a 	bl	8002f14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2017      	movs	r0, #23
 8001ce6:	f001 f89e 	bl	8002e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cea:	2017      	movs	r0, #23
 8001cec:	f001 f8b7 	bl	8002e5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2028      	movs	r0, #40	@ 0x28
 8001cf6:	f001 f896 	bl	8002e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cfa:	2028      	movs	r0, #40	@ 0x28
 8001cfc:	f001 f8af 	bl	8002e5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020400 	.word	0x40020400
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020800 	.word	0x40020800

08001d18 <check_fall_detection>:
/**
 * @brief  Vérifie si une chute a été détectée avec filtres anti-faux-positifs et anti-cascade
 * @retval None
 */
static void check_fall_detection(void)
{
 8001d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d1c:	b08e      	sub	sp, #56	@ 0x38
 8001d1e:	af08      	add	r7, sp, #32
	uint32_t current_time = HAL_GetTick();
 8001d20:	f000 ff7e 	bl	8002c20 <HAL_GetTick>
 8001d24:	6178      	str	r0, [r7, #20]

	// === FILTRE COOLDOWN GLOBAL ===
	// Éviter les détections multiples rapprochées
	if (current_time - last_fall_time < FALL_COOLDOWN_MS) {
 8001d26:	4b96      	ldr	r3, [pc, #600]	@ (8001f80 <check_fall_detection+0x268>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001d32:	4293      	cmp	r3, r2
 8001d34:	f240 8180 	bls.w	8002038 <check_fall_detection+0x320>
		return;
	}

	// === MODE POST-CHUTE ===
	// Ignorer toute détection pendant 10s après une chute confirmée
	if (post_fall_mode) {
 8001d38:	4b92      	ldr	r3, [pc, #584]	@ (8001f84 <check_fall_detection+0x26c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d019      	beq.n	8001d74 <check_fall_detection+0x5c>
		if (current_time - post_fall_start_time > POST_FALL_DURATION_MS) {
 8001d40:	4b91      	ldr	r3, [pc, #580]	@ (8001f88 <check_fall_detection+0x270>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d906      	bls.n	8001d5e <check_fall_detection+0x46>
			post_fall_mode = 0;
 8001d50:	4b8c      	ldr	r3, [pc, #560]	@ (8001f84 <check_fall_detection+0x26c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
			printf("🟢 Fin mode post-chute, surveillance normale reprise\r\n");
 8001d56:	488d      	ldr	r0, [pc, #564]	@ (8001f8c <check_fall_detection+0x274>)
 8001d58:	f006 f9da 	bl	8008110 <puts>
 8001d5c:	e00a      	b.n	8001d74 <check_fall_detection+0x5c>
		} else {
			printf("⏳ Mode post-chute actif (%lu/%d ms)\r\n",
 8001d5e:	4b8a      	ldr	r3, [pc, #552]	@ (8001f88 <check_fall_detection+0x270>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4888      	ldr	r0, [pc, #544]	@ (8001f90 <check_fall_detection+0x278>)
 8001d6e:	f006 f967 	bl	8008040 <iprintf>
					current_time - post_fall_start_time, POST_FALL_DURATION_MS);
			return;
 8001d72:	e162      	b.n	800203a <check_fall_detection+0x322>
		}
	}

	float tomber_prob = neai_output_buffer[0] * 100.0f;
 8001d74:	4b87      	ldr	r3, [pc, #540]	@ (8001f94 <check_fall_detection+0x27c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4987      	ldr	r1, [pc, #540]	@ (8001f98 <check_fall_detection+0x280>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fffa 	bl	8000d74 <__aeabi_fmul>
 8001d80:	4603      	mov	r3, r0
 8001d82:	613b      	str	r3, [r7, #16]
	float pas_bouger_prob = neai_output_buffer[1] * 100.0f;
 8001d84:	4b83      	ldr	r3, [pc, #524]	@ (8001f94 <check_fall_detection+0x27c>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4983      	ldr	r1, [pc, #524]	@ (8001f98 <check_fall_detection+0x280>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fff2 	bl	8000d74 <__aeabi_fmul>
 8001d90:	4603      	mov	r3, r0
 8001d92:	60fb      	str	r3, [r7, #12]
	float marche_prob = neai_output_buffer[2] * 100.0f;
 8001d94:	4b7f      	ldr	r3, [pc, #508]	@ (8001f94 <check_fall_detection+0x27c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	497f      	ldr	r1, [pc, #508]	@ (8001f98 <check_fall_detection+0x280>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ffea 	bl	8000d74 <__aeabi_fmul>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60bb      	str	r3, [r7, #8]

#ifdef DEBUG_FALL_DETECTION
	printf("DEBUG - Classe: %d (%s) | Tomber: %.1f%% | Pas_bouger: %.1f%% | Marche: %.1f%% | Count: %d\r\n",
 8001da4:	4b7d      	ldr	r3, [pc, #500]	@ (8001f9c <check_fall_detection+0x284>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	469a      	mov	sl, r3
 8001daa:	4b7c      	ldr	r3, [pc, #496]	@ (8001f9c <check_fall_detection+0x284>)
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa0 <check_fall_detection+0x288>)
 8001db2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8001db6:	6938      	ldr	r0, [r7, #16]
 8001db8:	f7fe fb4e 	bl	8000458 <__aeabi_f2d>
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	460d      	mov	r5, r1
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f7fe fb49 	bl	8000458 <__aeabi_f2d>
 8001dc6:	4680      	mov	r8, r0
 8001dc8:	4689      	mov	r9, r1
 8001dca:	68b8      	ldr	r0, [r7, #8]
 8001dcc:	f7fe fb44 	bl	8000458 <__aeabi_f2d>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4973      	ldr	r1, [pc, #460]	@ (8001fa4 <check_fall_detection+0x28c>)
 8001dd6:	7809      	ldrb	r1, [r1, #0]
 8001dd8:	9106      	str	r1, [sp, #24]
 8001dda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001dde:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001de2:	e9cd 4500 	strd	r4, r5, [sp]
 8001de6:	4632      	mov	r2, r6
 8001de8:	4651      	mov	r1, sl
 8001dea:	486f      	ldr	r0, [pc, #444]	@ (8001fa8 <check_fall_detection+0x290>)
 8001dec:	f006 f928 	bl	8008040 <iprintf>
			neai_id_class, id2class[neai_id_class], tomber_prob, pas_bouger_prob, marche_prob, consecutive_fall_count);
#endif

	// === FILTRE 1: SEUIL PLUS STRICT ===
	if (neai_id_class == 1 && tomber_prob > FALL_DETECTION_THRESHOLD_IMPACT) {
 8001df0:	4b6a      	ldr	r3, [pc, #424]	@ (8001f9c <check_fall_detection+0x284>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d167      	bne.n	8001ec8 <check_fall_detection+0x1b0>
 8001df8:	496c      	ldr	r1, [pc, #432]	@ (8001fac <check_fall_detection+0x294>)
 8001dfa:	6938      	ldr	r0, [r7, #16]
 8001dfc:	f7ff f976 	bl	80010ec <__aeabi_fcmpgt>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d060      	beq.n	8001ec8 <check_fall_detection+0x1b0>

		// Première détection de chute potentielle
		if (consecutive_fall_count == 0) {
 8001e06:	4b67      	ldr	r3, [pc, #412]	@ (8001fa4 <check_fall_detection+0x28c>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <check_fall_detection+0xfc>
			first_fall_time = current_time;
 8001e0e:	4a68      	ldr	r2, [pc, #416]	@ (8001fb0 <check_fall_detection+0x298>)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	6013      	str	r3, [r2, #0]
		}

		consecutive_fall_count++;
 8001e14:	4b63      	ldr	r3, [pc, #396]	@ (8001fa4 <check_fall_detection+0x28c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b61      	ldr	r3, [pc, #388]	@ (8001fa4 <check_fall_detection+0x28c>)
 8001e1e:	701a      	strb	r2, [r3, #0]
		printf("🟡 Chute potentielle %d/%d (%.1f%% > %.1f%%)\r\n",
 8001e20:	4b60      	ldr	r3, [pc, #384]	@ (8001fa4 <check_fall_detection+0x28c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461c      	mov	r4, r3
 8001e26:	6938      	ldr	r0, [r7, #16]
 8001e28:	f7fe fb16 	bl	8000458 <__aeabi_f2d>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	a151      	add	r1, pc, #324	@ (adr r1, 8001f78 <check_fall_detection+0x260>)
 8001e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e3a:	e9cd 2300 	strd	r2, r3, [sp]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4621      	mov	r1, r4
 8001e42:	485c      	ldr	r0, [pc, #368]	@ (8001fb4 <check_fall_detection+0x29c>)
 8001e44:	f006 f8fc 	bl	8008040 <iprintf>
				consecutive_fall_count, MIN_CONSECUTIVE_FALLS, tomber_prob, (float)FALL_DETECTION_THRESHOLD_IMPACT);

		// === FILTRE 2: DÉTECTIONS CONSÉCUTIVES ===
		if (consecutive_fall_count >= MIN_CONSECUTIVE_FALLS) {
 8001e48:	4b56      	ldr	r3, [pc, #344]	@ (8001fa4 <check_fall_detection+0x28c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	f240 80d6 	bls.w	8001ffe <check_fall_detection+0x2e6>

			// === FILTRE 3: DURÉE RAISONNABLE DE SÉQUENCE ===
			uint32_t sequence_duration = current_time - first_fall_time;
 8001e52:	4b57      	ldr	r3, [pc, #348]	@ (8001fb0 <check_fall_detection+0x298>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	607b      	str	r3, [r7, #4]
			if (sequence_duration <= MAX_FALL_SEQUENCE_TIME_MS) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d828      	bhi.n	8001eb8 <check_fall_detection+0x1a0>

				// === VRAIE CHUTE DÉTECTÉE ===
				fall_detected = 1;
 8001e66:	4b54      	ldr	r3, [pc, #336]	@ (8001fb8 <check_fall_detection+0x2a0>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
				last_fall_time = current_time;
 8001e6c:	4a44      	ldr	r2, [pc, #272]	@ (8001f80 <check_fall_detection+0x268>)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	6013      	str	r3, [r2, #0]
				consecutive_fall_count = 0; // Reset pour prochaine fois
 8001e72:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa4 <check_fall_detection+0x28c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]

				printf("\n🚨 === ALERTE CHUTE CONFIRMÉE === 🚨\r\n");
 8001e78:	4850      	ldr	r0, [pc, #320]	@ (8001fbc <check_fall_detection+0x2a4>)
 8001e7a:	f006 f949 	bl	8008110 <puts>
				printf("Probabilité finale: %.1f%%\r\n", tomber_prob);
 8001e7e:	6938      	ldr	r0, [r7, #16]
 8001e80:	f7fe faea 	bl	8000458 <__aeabi_f2d>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	484d      	ldr	r0, [pc, #308]	@ (8001fc0 <check_fall_detection+0x2a8>)
 8001e8a:	f006 f8d9 	bl	8008040 <iprintf>
				printf("Détections consécutives: %d\r\n", MIN_CONSECUTIVE_FALLS);
 8001e8e:	2102      	movs	r1, #2
 8001e90:	484c      	ldr	r0, [pc, #304]	@ (8001fc4 <check_fall_detection+0x2ac>)
 8001e92:	f006 f8d5 	bl	8008040 <iprintf>
				printf("Durée séquence: %lu ms\r\n", sequence_duration);
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	484b      	ldr	r0, [pc, #300]	@ (8001fc8 <check_fall_detection+0x2b0>)
 8001e9a:	f006 f8d1 	bl	8008040 <iprintf>

				trigger_fall_alert();
 8001e9e:	f000 f8df 	bl	8002060 <trigger_fall_alert>

				// === ACTIVATION MODE POST-CHUTE ===
				post_fall_mode = 1;
 8001ea2:	4b38      	ldr	r3, [pc, #224]	@ (8001f84 <check_fall_detection+0x26c>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
				post_fall_start_time = current_time;
 8001ea8:	4a37      	ldr	r2, [pc, #220]	@ (8001f88 <check_fall_detection+0x270>)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	6013      	str	r3, [r2, #0]
				printf("⏳ Mode post-chute activé pour %d secondes\r\n", POST_FALL_DURATION_MS/1000);
 8001eae:	210a      	movs	r1, #10
 8001eb0:	4846      	ldr	r0, [pc, #280]	@ (8001fcc <check_fall_detection+0x2b4>)
 8001eb2:	f006 f8c5 	bl	8008040 <iprintf>

				return; // Sortir immédiatement pour éviter cascade
 8001eb6:	e0c0      	b.n	800203a <check_fall_detection+0x322>

			} else {
				// Séquence trop longue = probablement faux positif
				printf("❌ Séquence trop longue (%lu ms), reset\r\n", sequence_duration);
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4845      	ldr	r0, [pc, #276]	@ (8001fd0 <check_fall_detection+0x2b8>)
 8001ebc:	f006 f8c0 	bl	8008040 <iprintf>
				consecutive_fall_count = 0;
 8001ec0:	4b38      	ldr	r3, [pc, #224]	@ (8001fa4 <check_fall_detection+0x28c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
		if (consecutive_fall_count >= MIN_CONSECUTIVE_FALLS) {
 8001ec6:	e09a      	b.n	8001ffe <check_fall_detection+0x2e6>
			}
		}
	}
	// === RESET DU COMPTEUR ===
	else if (neai_id_class == 1 && tomber_prob < FALL_RECOVERY_THRESHOLD) {
 8001ec8:	4b34      	ldr	r3, [pc, #208]	@ (8001f9c <check_fall_detection+0x284>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d120      	bne.n	8001f12 <check_fall_detection+0x1fa>
 8001ed0:	4940      	ldr	r1, [pc, #256]	@ (8001fd4 <check_fall_detection+0x2bc>)
 8001ed2:	6938      	ldr	r0, [r7, #16]
 8001ed4:	f7ff f8ec 	bl	80010b0 <__aeabi_fcmplt>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d019      	beq.n	8001f12 <check_fall_detection+0x1fa>
		// Tomber détecté mais confiance trop faible = reset
		if (consecutive_fall_count > 0) {
 8001ede:	4b31      	ldr	r3, [pc, #196]	@ (8001fa4 <check_fall_detection+0x28c>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d011      	beq.n	8001f0a <check_fall_detection+0x1f2>
			printf("🔄 Reset compteur chute (%.1f%% < %.1f%%)\r\n", tomber_prob, (float)FALL_RECOVERY_THRESHOLD);
 8001ee6:	6938      	ldr	r0, [r7, #16]
 8001ee8:	f7fe fab6 	bl	8000458 <__aeabi_f2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	f04f 0000 	mov.w	r0, #0
 8001ef4:	4938      	ldr	r1, [pc, #224]	@ (8001fd8 <check_fall_detection+0x2c0>)
 8001ef6:	e9cd 0100 	strd	r0, r1, [sp]
 8001efa:	4838      	ldr	r0, [pc, #224]	@ (8001fdc <check_fall_detection+0x2c4>)
 8001efc:	f006 f8a0 	bl	8008040 <iprintf>
			false_positives_avoided++;
 8001f00:	4b37      	ldr	r3, [pc, #220]	@ (8001fe0 <check_fall_detection+0x2c8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	4a36      	ldr	r2, [pc, #216]	@ (8001fe0 <check_fall_detection+0x2c8>)
 8001f08:	6013      	str	r3, [r2, #0]
		}
		consecutive_fall_count = 0;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	@ (8001fa4 <check_fall_detection+0x28c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	e075      	b.n	8001ffe <check_fall_detection+0x2e6>
	}
	else if (neai_id_class != 1) {
 8001f12:	4b22      	ldr	r3, [pc, #136]	@ (8001f9c <check_fall_detection+0x284>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d071      	beq.n	8001ffe <check_fall_detection+0x2e6>
		// Autre classe détectée = reset total
		if (consecutive_fall_count > 0) {
 8001f1a:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <check_fall_detection+0x28c>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00e      	beq.n	8001f40 <check_fall_detection+0x228>
			printf("🔄 Reset compteur chute (classe: %s)\r\n", id2class[neai_id_class]);
 8001f22:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <check_fall_detection+0x284>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <check_fall_detection+0x288>)
 8001f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	482c      	ldr	r0, [pc, #176]	@ (8001fe4 <check_fall_detection+0x2cc>)
 8001f32:	f006 f885 	bl	8008040 <iprintf>
			false_positives_avoided++;
 8001f36:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe0 <check_fall_detection+0x2c8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	4a28      	ldr	r2, [pc, #160]	@ (8001fe0 <check_fall_detection+0x2c8>)
 8001f3e:	6013      	str	r3, [r2, #0]
		}
		consecutive_fall_count = 0;
 8001f40:	4b18      	ldr	r3, [pc, #96]	@ (8001fa4 <check_fall_detection+0x28c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]

		// Affichage status normal (seulement si pas en mode post-chute)
		switch(neai_id_class) {
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <check_fall_detection+0x284>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d002      	beq.n	8001f54 <check_fall_detection+0x23c>
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d009      	beq.n	8001f66 <check_fall_detection+0x24e>
 8001f52:	e04d      	b.n	8001ff0 <check_fall_detection+0x2d8>
		case 2: // Pas bouger
			printf("🟢 Statut: Immobile (%.1f%%)\r\n", pas_bouger_prob);
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f7fe fa7f 	bl	8000458 <__aeabi_f2d>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4822      	ldr	r0, [pc, #136]	@ (8001fe8 <check_fall_detection+0x2d0>)
 8001f60:	f006 f86e 	bl	8008040 <iprintf>
			break;
 8001f64:	e04b      	b.n	8001ffe <check_fall_detection+0x2e6>
		case 3: // Marche
			printf("🔵 Statut: En mouvement/Marche (%.1f%%)\r\n", marche_prob);
 8001f66:	68b8      	ldr	r0, [r7, #8]
 8001f68:	f7fe fa76 	bl	8000458 <__aeabi_f2d>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	481e      	ldr	r0, [pc, #120]	@ (8001fec <check_fall_detection+0x2d4>)
 8001f72:	f006 f865 	bl	8008040 <iprintf>
			break;
 8001f76:	e042      	b.n	8001ffe <check_fall_detection+0x2e6>
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	4057c000 	.word	0x4057c000
 8001f80:	2000099c 	.word	0x2000099c
 8001f84:	200009a8 	.word	0x200009a8
 8001f88:	200009ac 	.word	0x200009ac
 8001f8c:	0800a4a8 	.word	0x0800a4a8
 8001f90:	0800a4e0 	.word	0x0800a4e0
 8001f94:	2000098c 	.word	0x2000098c
 8001f98:	42c80000 	.word	0x42c80000
 8001f9c:	2000037e 	.word	0x2000037e
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	200009a0 	.word	0x200009a0
 8001fa8:	0800a508 	.word	0x0800a508
 8001fac:	42be0000 	.word	0x42be0000
 8001fb0:	200009a4 	.word	0x200009a4
 8001fb4:	0800a568 	.word	0x0800a568
 8001fb8:	20000998 	.word	0x20000998
 8001fbc:	0800a59c 	.word	0x0800a59c
 8001fc0:	0800a5c8 	.word	0x0800a5c8
 8001fc4:	0800a5e8 	.word	0x0800a5e8
 8001fc8:	0800a608 	.word	0x0800a608
 8001fcc:	0800a624 	.word	0x0800a624
 8001fd0:	0800a654 	.word	0x0800a654
 8001fd4:	42700000 	.word	0x42700000
 8001fd8:	404e0000 	.word	0x404e0000
 8001fdc:	0800a680 	.word	0x0800a680
 8001fe0:	200009b4 	.word	0x200009b4
 8001fe4:	0800a6b0 	.word	0x0800a6b0
 8001fe8:	0800a6dc 	.word	0x0800a6dc
 8001fec:	0800a700 	.word	0x0800a700
		default:
			printf("❓ Classe inconnue: %d\r\n", neai_id_class);
 8001ff0:	4b14      	ldr	r3, [pc, #80]	@ (8002044 <check_fall_detection+0x32c>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4814      	ldr	r0, [pc, #80]	@ (8002048 <check_fall_detection+0x330>)
 8001ff8:	f006 f822 	bl	8008040 <iprintf>
			break;
 8001ffc:	bf00      	nop
		}
	}

	// === TIMEOUT DE SÉQUENCE ===
	if (consecutive_fall_count > 0 && (current_time - first_fall_time) > MAX_FALL_SEQUENCE_TIME_MS) {
 8001ffe:	4b13      	ldr	r3, [pc, #76]	@ (800204c <check_fall_detection+0x334>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d012      	beq.n	800202c <check_fall_detection+0x314>
 8002006:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <check_fall_detection+0x338>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002012:	4293      	cmp	r3, r2
 8002014:	d90a      	bls.n	800202c <check_fall_detection+0x314>
		printf("⏰ Timeout séquence chute, reset\r\n");
 8002016:	480f      	ldr	r0, [pc, #60]	@ (8002054 <check_fall_detection+0x33c>)
 8002018:	f006 f87a 	bl	8008110 <puts>
		false_positives_avoided++;
 800201c:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <check_fall_detection+0x340>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	4a0d      	ldr	r2, [pc, #52]	@ (8002058 <check_fall_detection+0x340>)
 8002024:	6013      	str	r3, [r2, #0]
		consecutive_fall_count = 0;
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <check_fall_detection+0x334>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
	}

	total_classifications++;
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <check_fall_detection+0x344>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <check_fall_detection+0x344>)
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e000      	b.n	800203a <check_fall_detection+0x322>
		return;
 8002038:	bf00      	nop
}
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002042:	bf00      	nop
 8002044:	2000037e 	.word	0x2000037e
 8002048:	0800a72c 	.word	0x0800a72c
 800204c:	200009a0 	.word	0x200009a0
 8002050:	200009a4 	.word	0x200009a4
 8002054:	0800a748 	.word	0x0800a748
 8002058:	200009b4 	.word	0x200009b4
 800205c:	200009b0 	.word	0x200009b0

08002060 <trigger_fall_alert>:
/**
 * @brief  Déclenche l'alerte de chute (LED, buzzer, transmission, etc.)
 * @retval None
 */
static void trigger_fall_alert(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	// Allumer la LED d'alerte
	HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_SET);
 8002064:	2201      	movs	r2, #1
 8002066:	2102      	movs	r1, #2
 8002068:	480e      	ldr	r0, [pc, #56]	@ (80020a4 <trigger_fall_alert+0x44>)
 800206a:	f001 f8e3 	bl	8003234 <HAL_GPIO_WritePin>

	// TODO: Ajouter ici:
	// - Activation buzzer/sirène
	alarme = 1;
 800206e:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <trigger_fall_alert+0x48>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]
	procedure_alarme();
 8002074:	f7ff fa46 	bl	8001504 <procedure_alarme>
	// - Envoi SMS/notification
	// - Transmission radio/LoRa/WiFi
	// - Logs dans mémoire

	printf("🚨 Procédures d'urgence activées!\r\n");
 8002078:	480c      	ldr	r0, [pc, #48]	@ (80020ac <trigger_fall_alert+0x4c>)
 800207a:	f006 f849 	bl	8008110 <puts>
	printf("Timestamp: %lu ms\r\n", HAL_GetTick());
 800207e:	f000 fdcf 	bl	8002c20 <HAL_GetTick>
 8002082:	4603      	mov	r3, r0
 8002084:	4619      	mov	r1, r3
 8002086:	480a      	ldr	r0, [pc, #40]	@ (80020b0 <trigger_fall_alert+0x50>)
 8002088:	f005 ffda 	bl	8008040 <iprintf>

	// Simulation temporisation d'alerte (à remplacer par vraie logique)
	HAL_Delay(1000);
 800208c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002090:	f000 fdd0 	bl	8002c34 <HAL_Delay>
	HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	2102      	movs	r1, #2
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <trigger_fall_alert+0x44>)
 800209a:	f001 f8cb 	bl	8003234 <HAL_GPIO_WritePin>
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40020400 	.word	0x40020400
 80020a8:	200009c8 	.word	0x200009c8
 80020ac:	0800a76c 	.word	0x0800a76c
 80020b0:	0800a794 	.word	0x0800a794

080020b4 <__io_putchar>:
 * @brief  Redirecting stdout to USART2 which is connected on the STLINK port
 * @retval
 * @param
 */
int __io_putchar(int ch)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80020c2:	f107 010c 	add.w	r1, r7, #12
 80020c6:	230a      	movs	r3, #10
 80020c8:	2201      	movs	r2, #1
 80020ca:	4804      	ldr	r0, [pc, #16]	@ (80020dc <__io_putchar+0x28>)
 80020cc:	f004 fa7e 	bl	80065cc <HAL_UART_Transmit>
	return ch;
 80020d0:	687b      	ldr	r3, [r7, #4]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000334 	.word	0x20000334

080020e0 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line rising detection callback.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	80fb      	strh	r3, [r7, #6]
	if (!debounce_flag)
 80020ea:	4b32      	ldr	r3, [pc, #200]	@ (80021b4 <HAL_GPIO_EXTI_Callback+0xd4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d155      	bne.n	800219e <HAL_GPIO_EXTI_Callback+0xbe>
		{
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 80020f2:	4b31      	ldr	r3, [pc, #196]	@ (80021b8 <HAL_GPIO_EXTI_Callback+0xd8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 80020fa:	482f      	ldr	r0, [pc, #188]	@ (80021b8 <HAL_GPIO_EXTI_Callback+0xd8>)
 80020fc:	f003 faec 	bl	80056d8 <HAL_TIM_Base_Start_IT>

			switch (GPIO_Pin)
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002106:	d00e      	beq.n	8002126 <HAL_GPIO_EXTI_Callback+0x46>
 8002108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800210c:	dc47      	bgt.n	800219e <HAL_GPIO_EXTI_Callback+0xbe>
 800210e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002112:	d020      	beq.n	8002156 <HAL_GPIO_EXTI_Callback+0x76>
 8002114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002118:	dc41      	bgt.n	800219e <HAL_GPIO_EXTI_Callback+0xbe>
 800211a:	2b40      	cmp	r3, #64	@ 0x40
 800211c:	d02b      	beq.n	8002176 <HAL_GPIO_EXTI_Callback+0x96>
 800211e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002122:	d008      	beq.n	8002136 <HAL_GPIO_EXTI_Callback+0x56>
 8002124:	e03b      	b.n	800219e <HAL_GPIO_EXTI_Callback+0xbe>
			{
			case (B1_Pin):
					if (alarme ==1) alarme =0;
 8002126:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <HAL_GPIO_EXTI_Callback+0xdc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d136      	bne.n	800219c <HAL_GPIO_EXTI_Callback+0xbc>
 800212e:	4b23      	ldr	r3, [pc, #140]	@ (80021bc <HAL_GPIO_EXTI_Callback+0xdc>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
					break;
 8002134:	e032      	b.n	800219c <HAL_GPIO_EXTI_Callback+0xbc>

			case (BTN1_Pin):
					if (sequence ==0 && alarme ==2) sequence =1;
 8002136:	4b22      	ldr	r3, [pc, #136]	@ (80021c0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d107      	bne.n	800214e <HAL_GPIO_EXTI_Callback+0x6e>
 800213e:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <HAL_GPIO_EXTI_Callback+0xdc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d103      	bne.n	800214e <HAL_GPIO_EXTI_Callback+0x6e>
 8002146:	4b1e      	ldr	r3, [pc, #120]	@ (80021c0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]
					else sequence =0;
					break;
 800214c:	e027      	b.n	800219e <HAL_GPIO_EXTI_Callback+0xbe>
					else sequence =0;
 800214e:	4b1c      	ldr	r3, [pc, #112]	@ (80021c0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
					break;
 8002154:	e023      	b.n	800219e <HAL_GPIO_EXTI_Callback+0xbe>

			case (BTN2_Pin):
					if (sequence ==0 && alarme ==2) sequence =2;
 8002156:	4b1a      	ldr	r3, [pc, #104]	@ (80021c0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d107      	bne.n	800216e <HAL_GPIO_EXTI_Callback+0x8e>
 800215e:	4b17      	ldr	r3, [pc, #92]	@ (80021bc <HAL_GPIO_EXTI_Callback+0xdc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d103      	bne.n	800216e <HAL_GPIO_EXTI_Callback+0x8e>
 8002166:	4b16      	ldr	r3, [pc, #88]	@ (80021c0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002168:	2202      	movs	r2, #2
 800216a:	601a      	str	r2, [r3, #0]
					else sequence =0;
					break;
 800216c:	e017      	b.n	800219e <HAL_GPIO_EXTI_Callback+0xbe>
					else sequence =0;
 800216e:	4b14      	ldr	r3, [pc, #80]	@ (80021c0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
					break;
 8002174:	e013      	b.n	800219e <HAL_GPIO_EXTI_Callback+0xbe>

			case (BTN3_Pin):
					if (sequence ==0 && alarme ==2)
 8002176:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10a      	bne.n	8002194 <HAL_GPIO_EXTI_Callback+0xb4>
 800217e:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <HAL_GPIO_EXTI_Callback+0xdc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d106      	bne.n	8002194 <HAL_GPIO_EXTI_Callback+0xb4>
						{
							sequence =3;
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002188:	2203      	movs	r2, #3
 800218a:	601a      	str	r2, [r3, #0]
							alarme = 0;
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_GPIO_EXTI_Callback+0xdc>)
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
						}
					else sequence =0;
					break;
 8002192:	e004      	b.n	800219e <HAL_GPIO_EXTI_Callback+0xbe>
					else sequence =0;
 8002194:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
					break;
 800219a:	e000      	b.n	800219e <HAL_GPIO_EXTI_Callback+0xbe>
					break;
 800219c:	bf00      	nop
			}
		}

	switch(GPIO_Pin) {
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d103      	bne.n	80021ac <HAL_GPIO_EXTI_Callback+0xcc>
		case GYRO_ACC_INT_Pin:
			drdy = 1;
 80021a4:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <HAL_GPIO_EXTI_Callback+0xe4>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
			break;
 80021aa:	bf00      	nop


	}
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200009d0 	.word	0x200009d0
 80021b8:	200002f4 	.word	0x200002f4
 80021bc:	200009c8 	.word	0x200009c8
 80021c0:	200009d4 	.word	0x200009d4
 80021c4:	20000381 	.word	0x20000381

080021c8 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
		uint16_t len)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af04      	add	r7, sp, #16
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	461a      	mov	r2, r3
 80021d4:	460b      	mov	r3, r1
 80021d6:	72fb      	strb	r3, [r7, #11]
 80021d8:	4613      	mov	r3, r2
 80021da:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Write(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	893b      	ldrh	r3, [r7, #8]
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2301      	movs	r3, #1
 80021f0:	21d7      	movs	r1, #215	@ 0xd7
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f001 f992 	bl	800351c <HAL_I2C_Mem_Write>
	return 0;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b088      	sub	sp, #32
 8002206:	af04      	add	r7, sp, #16
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	461a      	mov	r2, r3
 800220e:	460b      	mov	r3, r1
 8002210:	72fb      	strb	r3, [r7, #11]
 8002212:	4613      	mov	r3, r2
 8002214:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8002216:	7afb      	ldrb	r3, [r7, #11]
 8002218:	b29a      	uxth	r2, r3
 800221a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800221e:	9302      	str	r3, [sp, #8]
 8002220:	893b      	ldrh	r3, [r7, #8]
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2301      	movs	r3, #1
 800222a:	21d7      	movs	r1, #215	@ 0xd7
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f001 fa6f 	bl	8003710 <HAL_I2C_Mem_Read>
	return 0;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <lsm6dso_initialize>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	lsm6dso_initialize_basics();
 8002240:	f000 f80e 	bl	8002260 <lsm6dso_initialize_basics>
#ifdef ACCELEROMETER
	/* Accelelerometer configuration */
	lsm6dso_xl_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 8002244:	2108      	movs	r1, #8
 8002246:	4805      	ldr	r0, [pc, #20]	@ (800225c <lsm6dso_initialize+0x20>)
 8002248:	f004 fc56 	bl	8006af8 <lsm6dso_xl_data_rate_set>
	lsm6dso_xl_full_scale_set(&dev_ctx, ACCELEROMETER_FS);
 800224c:	2100      	movs	r1, #0
 800224e:	4803      	ldr	r0, [pc, #12]	@ (800225c <lsm6dso_initialize+0x20>)
 8002250:	f004 fc2c 	bl	8006aac <lsm6dso_xl_full_scale_set>
#else
	/* Gyroscope configuration */
	lsm6dso_gy_data_rate_set(&dev_ctx, GYROSCOPE_ODR);
	lsm6dso_gy_full_scale_set(&dev_ctx, GYROSCOPE_FS);
#endif
	lsm6dso_initialize_fifo();
 8002254:	f000 f82c 	bl	80022b0 <lsm6dso_initialize_fifo>
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200009b8 	.word	0x200009b8

08002260 <lsm6dso_initialize_basics>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_basics()
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	/* Check device ID */
	whoamI = 0;
 8002264:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <lsm6dso_initialize_basics+0x44>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]

	do {
		HAL_Delay(20);
 800226a:	2014      	movs	r0, #20
 800226c:	f000 fce2 	bl	8002c34 <HAL_Delay>
		lsm6dso_device_id_get(&dev_ctx, &whoamI);
 8002270:	490c      	ldr	r1, [pc, #48]	@ (80022a4 <lsm6dso_initialize_basics+0x44>)
 8002272:	480d      	ldr	r0, [pc, #52]	@ (80022a8 <lsm6dso_initialize_basics+0x48>)
 8002274:	f004 fd60 	bl	8006d38 <lsm6dso_device_id_get>
	} while(whoamI != LSM6DSO_ID);
 8002278:	4b0a      	ldr	r3, [pc, #40]	@ (80022a4 <lsm6dso_initialize_basics+0x44>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b6c      	cmp	r3, #108	@ 0x6c
 800227e:	d1f4      	bne.n	800226a <lsm6dso_initialize_basics+0xa>

	/* Restore default configuration */
	lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8002280:	2101      	movs	r1, #1
 8002282:	4809      	ldr	r0, [pc, #36]	@ (80022a8 <lsm6dso_initialize_basics+0x48>)
 8002284:	f004 fd69 	bl	8006d5a <lsm6dso_reset_set>

	do {
		lsm6dso_reset_get(&dev_ctx, &rst);
 8002288:	4908      	ldr	r1, [pc, #32]	@ (80022ac <lsm6dso_initialize_basics+0x4c>)
 800228a:	4807      	ldr	r0, [pc, #28]	@ (80022a8 <lsm6dso_initialize_basics+0x48>)
 800228c:	f004 fd8b 	bl	8006da6 <lsm6dso_reset_get>
	} while (rst);
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <lsm6dso_initialize_basics+0x4c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f7      	bne.n	8002288 <lsm6dso_initialize_basics+0x28>

	/* Disable I3C interface */
	lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
 8002298:	2180      	movs	r1, #128	@ 0x80
 800229a:	4803      	ldr	r0, [pc, #12]	@ (80022a8 <lsm6dso_initialize_basics+0x48>)
 800229c:	f004 fd9c 	bl	8006dd8 <lsm6dso_i3c_disable_set>
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	2000037c 	.word	0x2000037c
 80022a8:	200009b8 	.word	0x200009b8
 80022ac:	2000037d 	.word	0x2000037d

080022b0 <lsm6dso_initialize_fifo>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_fifo()
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
#ifdef ACCELEROMETER
	/* Batch odr config */
	lsm6dso_fifo_xl_batch_set(&dev_ctx, ACCELEROMETER_ODR);
 80022b6:	2108      	movs	r1, #8
 80022b8:	480d      	ldr	r0, [pc, #52]	@ (80022f0 <lsm6dso_initialize_fifo+0x40>)
 80022ba:	f004 fe09 	bl	8006ed0 <lsm6dso_fifo_xl_batch_set>
	lsm6dso_fifo_gy_batch_set(&dev_ctx, 0);
 80022be:	2100      	movs	r1, #0
 80022c0:	480b      	ldr	r0, [pc, #44]	@ (80022f0 <lsm6dso_initialize_fifo+0x40>)
 80022c2:	f004 fe2b 	bl	8006f1c <lsm6dso_fifo_gy_batch_set>
	/* Batch odr config */
	lsm6dso_fifo_xl_batch_set(&dev_ctx, 0);
	lsm6dso_fifo_gy_batch_set(&dev_ctx, GYROSCOPE_ODR);
#endif
	/* FIFO MODE */
	lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_FIFO_MODE);
 80022c6:	2101      	movs	r1, #1
 80022c8:	4809      	ldr	r0, [pc, #36]	@ (80022f0 <lsm6dso_initialize_fifo+0x40>)
 80022ca:	f004 fe4d 	bl	8006f68 <lsm6dso_fifo_mode_set>
	/* Watermark config */
	if (SAMPLES <= MAX_FIFO_SIZE) {
		lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 80022ce:	2180      	movs	r1, #128	@ 0x80
 80022d0:	4807      	ldr	r0, [pc, #28]	@ (80022f0 <lsm6dso_initialize_fifo+0x40>)
 80022d2:	f004 fdc7 	bl	8006e64 <lsm6dso_fifo_watermark_set>
	}
	else {
		lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
	}
	/* Need to enable interrupt pin when wtm is reached */
	uint8_t ctrl = 0x08;
 80022d6:	2308      	movs	r3, #8
 80022d8:	71fb      	strb	r3, [r7, #7]
	lsm6dso_write_reg(&dev_ctx, LSM6DSO_INT1_CTRL, (uint8_t *) &ctrl, 1);
 80022da:	1dfa      	adds	r2, r7, #7
 80022dc:	2301      	movs	r3, #1
 80022de:	210d      	movs	r1, #13
 80022e0:	4803      	ldr	r0, [pc, #12]	@ (80022f0 <lsm6dso_initialize_fifo+0x40>)
 80022e2:	f004 fbb5 	bl	8006a50 <lsm6dso_write_reg>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200009b8 	.word	0x200009b8

080022f4 <lsm6dso_get_buffer_from_fifo>:
 *
 * @return No
 *
 */
static void lsm6dso_get_buffer_from_fifo(uint16_t nb)
{
 80022f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022f8:	b087      	sub	sp, #28
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	80fb      	strh	r3, [r7, #6]
 8002300:	466b      	mov	r3, sp
 8002302:	461e      	mov	r6, r3
	uint8_t reg_tag = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	74fb      	strb	r3, [r7, #19]
	uint8_t buff_tmp[nb * FIFO_WORD];
 8002308:	88fa      	ldrh	r2, [r7, #6]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	1a99      	subs	r1, r3, r2
 8002310:	1e4b      	subs	r3, r1, #1
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	460a      	mov	r2, r1
 8002316:	2300      	movs	r3, #0
 8002318:	4690      	mov	r8, r2
 800231a:	4699      	mov	r9, r3
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002328:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800232c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002330:	460a      	mov	r2, r1
 8002332:	2300      	movs	r3, #0
 8002334:	4614      	mov	r4, r2
 8002336:	461d      	mov	r5, r3
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	00eb      	lsls	r3, r5, #3
 8002342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002346:	00e2      	lsls	r2, r4, #3
 8002348:	460b      	mov	r3, r1
 800234a:	3307      	adds	r3, #7
 800234c:	08db      	lsrs	r3, r3, #3
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	ebad 0d03 	sub.w	sp, sp, r3
 8002354:	466b      	mov	r3, sp
 8002356:	3300      	adds	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
	 * The data stored in FIFO are accessible from dedicated registers and each FIFO word is composed of 7
	 * bytes: one tag byte (FIFO_DATA_OUT_TAG (78h)), in order to identify the sensor, and 6 bytes of fixed data
	 * (FIFO_DATA_OUT registers from (79h) to (7Eh))
	 * So, here we read the fifo in only one transaction in order to save time
	 */
	lsm6dso_read_reg(&dev_ctx, LSM6DSO_FIFO_DATA_OUT_TAG, buff_tmp, nb * FIFO_WORD);
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	461a      	mov	r2, r3
 800235e:	00d2      	lsls	r2, r2, #3
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	b29b      	uxth	r3, r3
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	2178      	movs	r1, #120	@ 0x78
 8002368:	484b      	ldr	r0, [pc, #300]	@ (8002498 <lsm6dso_get_buffer_from_fifo+0x1a4>)
 800236a:	f004 fb59 	bl	8006a20 <lsm6dso_read_reg>
	for (uint16_t i = 0; i < nb; i++) {
 800236e:	2300      	movs	r3, #0
 8002370:	82fb      	strh	r3, [r7, #22]
 8002372:	e079      	b.n	8002468 <lsm6dso_get_buffer_from_fifo+0x174>
		/* According to the datasheet, the TAG_SENSOR is the 5 MSB of the FIFO_DATA_OUT_TAG register, so we shift 3 bits to the right */
		reg_tag = buff_tmp[FIFO_WORD * i] >> 3;
 8002374:	8afa      	ldrh	r2, [r7, #22]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	08db      	lsrs	r3, r3, #3
 8002382:	74fb      	strb	r3, [r7, #19]
		if(reg_tag == LSM6DSO_XL_NC_TAG) {
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d134      	bne.n	80023f4 <lsm6dso_get_buffer_from_fifo+0x100>
			for(uint8_t j = 0; j < AXIS; j++) {
 800238a:	2300      	movs	r3, #0
 800238c:	757b      	strb	r3, [r7, #21]
 800238e:	e02d      	b.n	80023ec <lsm6dso_get_buffer_from_fifo+0xf8>
				neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i) + j] = lsm6dso_convert_accel_data_to_mg((uint16_t) buff_tmp[(FIFO_WORD * i) + (2 * j) + 2] << 8 | buff_tmp[(FIFO_WORD * i) + (2 * j) + 1]);
 8002390:	8afa      	ldrh	r2, [r7, #22]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	1a9a      	subs	r2, r3, r2
 8002398:	7d7b      	ldrb	r3, [r7, #21]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	3302      	adds	r3, #2
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	b21b      	sxth	r3, r3
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	b219      	sxth	r1, r3
 80023aa:	8afa      	ldrh	r2, [r7, #22]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	1a9a      	subs	r2, r3, r2
 80023b2:	7d7b      	ldrb	r3, [r7, #21]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	3301      	adds	r3, #1
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	5cd3      	ldrb	r3, [r2, r3]
 80023be:	b21b      	sxth	r3, r3
 80023c0:	430b      	orrs	r3, r1
 80023c2:	b219      	sxth	r1, r3
 80023c4:	4b35      	ldr	r3, [pc, #212]	@ (800249c <lsm6dso_get_buffer_from_fifo+0x1a8>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	8afb      	ldrh	r3, [r7, #22]
 80023cc:	441a      	add	r2, r3
 80023ce:	4613      	mov	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	441a      	add	r2, r3
 80023d4:	7d7b      	ldrb	r3, [r7, #21]
 80023d6:	18d4      	adds	r4, r2, r3
 80023d8:	4608      	mov	r0, r1
 80023da:	f000 f871 	bl	80024c0 <lsm6dso_convert_accel_data_to_mg>
 80023de:	4603      	mov	r3, r0
 80023e0:	4a2f      	ldr	r2, [pc, #188]	@ (80024a0 <lsm6dso_get_buffer_from_fifo+0x1ac>)
 80023e2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for(uint8_t j = 0; j < AXIS; j++) {
 80023e6:	7d7b      	ldrb	r3, [r7, #21]
 80023e8:	3301      	adds	r3, #1
 80023ea:	757b      	strb	r3, [r7, #21]
 80023ec:	7d7b      	ldrb	r3, [r7, #21]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d9ce      	bls.n	8002390 <lsm6dso_get_buffer_from_fifo+0x9c>
 80023f2:	e036      	b.n	8002462 <lsm6dso_get_buffer_from_fifo+0x16e>
			}
		}
		else if(reg_tag == LSM6DSO_GYRO_NC_TAG) {
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d133      	bne.n	8002462 <lsm6dso_get_buffer_from_fifo+0x16e>
			for(uint8_t j = 0; j < AXIS; j++) {
 80023fa:	2300      	movs	r3, #0
 80023fc:	753b      	strb	r3, [r7, #20]
 80023fe:	e02d      	b.n	800245c <lsm6dso_get_buffer_from_fifo+0x168>
				neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i) + j] = lsm6dso_convert_gyro_data_to_mdps((uint16_t) buff_tmp[(FIFO_WORD * i) + (2 * j) + 2] << 8 | buff_tmp[(FIFO_WORD * i) + (2 * j) + 1]);
 8002400:	8afa      	ldrh	r2, [r7, #22]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	1a9a      	subs	r2, r3, r2
 8002408:	7d3b      	ldrb	r3, [r7, #20]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	3302      	adds	r3, #2
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	b21b      	sxth	r3, r3
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	b219      	sxth	r1, r3
 800241a:	8afa      	ldrh	r2, [r7, #22]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	1a9a      	subs	r2, r3, r2
 8002422:	7d3b      	ldrb	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	3301      	adds	r3, #1
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	b21b      	sxth	r3, r3
 8002430:	430b      	orrs	r3, r1
 8002432:	b219      	sxth	r1, r3
 8002434:	4b19      	ldr	r3, [pc, #100]	@ (800249c <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	8afb      	ldrh	r3, [r7, #22]
 800243c:	441a      	add	r2, r3
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	441a      	add	r2, r3
 8002444:	7d3b      	ldrb	r3, [r7, #20]
 8002446:	18d4      	adds	r4, r2, r3
 8002448:	4608      	mov	r0, r1
 800244a:	f000 f82b 	bl	80024a4 <lsm6dso_convert_gyro_data_to_mdps>
 800244e:	4603      	mov	r3, r0
 8002450:	4a13      	ldr	r2, [pc, #76]	@ (80024a0 <lsm6dso_get_buffer_from_fifo+0x1ac>)
 8002452:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for(uint8_t j = 0; j < AXIS; j++) {
 8002456:	7d3b      	ldrb	r3, [r7, #20]
 8002458:	3301      	adds	r3, #1
 800245a:	753b      	strb	r3, [r7, #20]
 800245c:	7d3b      	ldrb	r3, [r7, #20]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d9ce      	bls.n	8002400 <lsm6dso_get_buffer_from_fifo+0x10c>
	for (uint16_t i = 0; i < nb; i++) {
 8002462:	8afb      	ldrh	r3, [r7, #22]
 8002464:	3301      	adds	r3, #1
 8002466:	82fb      	strh	r3, [r7, #22]
 8002468:	8afa      	ldrh	r2, [r7, #22]
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	429a      	cmp	r2, r3
 800246e:	d381      	bcc.n	8002374 <lsm6dso_get_buffer_from_fifo+0x80>
			}
		}
	}
	neai_buffer_ptr += nb;
 8002470:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8002472:	881a      	ldrh	r2, [r3, #0]
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	4413      	add	r3, r2
 8002478:	b29a      	uxth	r2, r3
 800247a:	4b08      	ldr	r3, [pc, #32]	@ (800249c <lsm6dso_get_buffer_from_fifo+0x1a8>)
 800247c:	801a      	strh	r2, [r3, #0]
	if (neai_buffer_ptr == SAMPLES) {
 800247e:	4b07      	ldr	r3, [pc, #28]	@ (800249c <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	2b80      	cmp	r3, #128	@ 0x80
 8002484:	d102      	bne.n	800248c <lsm6dso_get_buffer_from_fifo+0x198>
		neai_buffer_ptr = 0;
 8002486:	4b05      	ldr	r3, [pc, #20]	@ (800249c <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8002488:	2200      	movs	r2, #0
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	46b5      	mov	sp, r6
	}
}
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002498:	200009b8 	.word	0x200009b8
 800249c:	20000384 	.word	0x20000384
 80024a0:	2000038c 	.word	0x2000038c

080024a4 <lsm6dso_convert_gyro_data_to_mdps>:
 *
 * @return The converted value in milli degrees per second (mdps)
 *
 */
static float lsm6dso_convert_gyro_data_to_mdps(int16_t gyro_raw_data)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
	float gyro_data_mdps = 0.0;
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
	default:
		gyro_data_mdps = 0.0;
		break;
	}
#endif
	return gyro_data_mdps;
 80024b4:	68fb      	ldr	r3, [r7, #12]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <lsm6dso_convert_accel_data_to_mg>:
 *
 * @return The converted value in milli-G' (mg)
 *
 */
static float lsm6dso_convert_accel_data_to_mg(int16_t accel_raw_data)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	80fb      	strh	r3, [r7, #6]
	float accel_data_mg = 0.0;
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
#ifdef ACCELEROMETER
	switch (ACCELEROMETER_FS)
	{
	case LSM6DSO_2g:
		accel_data_mg = lsm6dso_from_fs2_to_mg(accel_raw_data);
 80024d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f004 fad3 	bl	8006a80 <lsm6dso_from_fs2_to_mg>
 80024da:	60f8      	str	r0, [r7, #12]
		break;
 80024dc:	bf00      	nop
	default:
		accel_data_mg = 0.0;
		break;
	}
#endif
	return accel_data_mg;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <iks01a3_i2c_stuck_quirk>:
 *
 * As a workaround we simply configure the SCL pin as a GPIO and send a burst
 * of pulses to bring the sensor back to an idle state.
 */
static void iks01a3_i2c_stuck_quirk(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ee:	f107 0308 	add.w	r3, r7, #8
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80024fe:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <iks01a3_i2c_stuck_quirk+0x98>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a1f      	ldr	r2, [pc, #124]	@ (8002580 <iks01a3_i2c_stuck_quirk+0x98>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	61d3      	str	r3, [r2, #28]
 800250a:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <iks01a3_i2c_stuck_quirk+0x98>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

	/* Configure SCL as a GPIO */
	GPIO_InitStruct.Pin = SCL_PIN;
 8002516:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800251a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251c:	2301      	movs	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002528:	2304      	movs	r3, #4
 800252a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct);
 800252c:	f107 0308 	add.w	r3, r7, #8
 8002530:	4619      	mov	r1, r3
 8002532:	4814      	ldr	r0, [pc, #80]	@ (8002584 <iks01a3_i2c_stuck_quirk+0x9c>)
 8002534:	f000 fcee 	bl	8002f14 <HAL_GPIO_Init>

	/* Send a burst of pulses on SCL */
	int pulses = 20;
 8002538:	2314      	movs	r3, #20
 800253a:	61fb      	str	r3, [r7, #28]
	do {
		HAL_Delay(1);
 800253c:	2001      	movs	r0, #1
 800253e:	f000 fb79 	bl	8002c34 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8002542:	2200      	movs	r2, #0
 8002544:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002548:	480e      	ldr	r0, [pc, #56]	@ (8002584 <iks01a3_i2c_stuck_quirk+0x9c>)
 800254a:	f000 fe73 	bl	8003234 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800254e:	2001      	movs	r0, #1
 8002550:	f000 fb70 	bl	8002c34 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8002554:	2201      	movs	r2, #1
 8002556:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800255a:	480a      	ldr	r0, [pc, #40]	@ (8002584 <iks01a3_i2c_stuck_quirk+0x9c>)
 800255c:	f000 fe6a 	bl	8003234 <HAL_GPIO_WritePin>
	} while (pulses--);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	1e5a      	subs	r2, r3, #1
 8002564:	61fa      	str	r2, [r7, #28]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1e8      	bne.n	800253c <iks01a3_i2c_stuck_quirk+0x54>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_DISABLE();
 800256a:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <iks01a3_i2c_stuck_quirk+0x98>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <iks01a3_i2c_stuck_quirk+0x98>)
 8002570:	f023 0302 	bic.w	r3, r3, #2
 8002574:	61d3      	str	r3, [r2, #28]
}
 8002576:	bf00      	nop
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40020400 	.word	0x40020400

08002588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800258c:	b672      	cpsid	i
}
 800258e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <Error_Handler+0x8>

08002594 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <HAL_MspInit+0x5c>)
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	4a14      	ldr	r2, [pc, #80]	@ (80025f0 <HAL_MspInit+0x5c>)
 80025a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025a4:	6253      	str	r3, [r2, #36]	@ 0x24
 80025a6:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <HAL_MspInit+0x5c>)
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	4b0f      	ldr	r3, [pc, #60]	@ (80025f0 <HAL_MspInit+0x5c>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4a0e      	ldr	r2, [pc, #56]	@ (80025f0 <HAL_MspInit+0x5c>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6213      	str	r3, [r2, #32]
 80025be:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <HAL_MspInit+0x5c>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	4b09      	ldr	r3, [pc, #36]	@ (80025f0 <HAL_MspInit+0x5c>)
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	4a08      	ldr	r2, [pc, #32]	@ (80025f0 <HAL_MspInit+0x5c>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025d4:	6253      	str	r3, [r2, #36]	@ 0x24
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_MspInit+0x5c>)
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025e2:	2007      	movs	r0, #7
 80025e4:	f000 fc14 	bl	8002e10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	@ 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a17      	ldr	r2, [pc, #92]	@ (8002670 <HAL_I2C_MspInit+0x7c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d128      	bne.n	8002668 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002616:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <HAL_I2C_MspInit+0x80>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4a16      	ldr	r2, [pc, #88]	@ (8002674 <HAL_I2C_MspInit+0x80>)
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	61d3      	str	r3, [r2, #28]
 8002622:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_I2C_MspInit+0x80>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800262e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002634:	2312      	movs	r3, #18
 8002636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263c:	2303      	movs	r3, #3
 800263e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002640:	2304      	movs	r3, #4
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4619      	mov	r1, r3
 800264a:	480b      	ldr	r0, [pc, #44]	@ (8002678 <HAL_I2C_MspInit+0x84>)
 800264c:	f000 fc62 	bl	8002f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002650:	4b08      	ldr	r3, [pc, #32]	@ (8002674 <HAL_I2C_MspInit+0x80>)
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	4a07      	ldr	r2, [pc, #28]	@ (8002674 <HAL_I2C_MspInit+0x80>)
 8002656:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800265a:	6253      	str	r3, [r2, #36]	@ 0x24
 800265c:	4b05      	ldr	r3, [pc, #20]	@ (8002674 <HAL_I2C_MspInit+0x80>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002668:	bf00      	nop
 800266a:	3728      	adds	r7, #40	@ 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40005400 	.word	0x40005400
 8002674:	40023800 	.word	0x40023800
 8002678:	40020400 	.word	0x40020400

0800267c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	@ 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1b      	ldr	r2, [pc, #108]	@ (8002708 <HAL_SPI_MspInit+0x8c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d12f      	bne.n	80026fe <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800269e:	4b1b      	ldr	r3, [pc, #108]	@ (800270c <HAL_SPI_MspInit+0x90>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4a1a      	ldr	r2, [pc, #104]	@ (800270c <HAL_SPI_MspInit+0x90>)
 80026a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026a8:	6213      	str	r3, [r2, #32]
 80026aa:	4b18      	ldr	r3, [pc, #96]	@ (800270c <HAL_SPI_MspInit+0x90>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	4b15      	ldr	r3, [pc, #84]	@ (800270c <HAL_SPI_MspInit+0x90>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4a14      	ldr	r2, [pc, #80]	@ (800270c <HAL_SPI_MspInit+0x90>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	61d3      	str	r3, [r2, #28]
 80026c2:	4b12      	ldr	r3, [pc, #72]	@ (800270c <HAL_SPI_MspInit+0x90>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 80026ce:	23e0      	movs	r3, #224	@ 0xe0
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026de:	2305      	movs	r3, #5
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	4809      	ldr	r0, [pc, #36]	@ (8002710 <HAL_SPI_MspInit+0x94>)
 80026ea:	f000 fc13 	bl	8002f14 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	2023      	movs	r0, #35	@ 0x23
 80026f4:	f000 fb97 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80026f8:	2023      	movs	r0, #35	@ 0x23
 80026fa:	f000 fbb0 	bl	8002e5e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80026fe:	bf00      	nop
 8002700:	3728      	adds	r7, #40	@ 0x28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40013000 	.word	0x40013000
 800270c:	40023800 	.word	0x40023800
 8002710:	40020000 	.word	0x40020000

08002714 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1a      	ldr	r2, [pc, #104]	@ (800278c <HAL_TIM_Base_MspInit+0x78>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d114      	bne.n	8002750 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002726:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <HAL_TIM_Base_MspInit+0x7c>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	4a19      	ldr	r2, [pc, #100]	@ (8002790 <HAL_TIM_Base_MspInit+0x7c>)
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	6253      	str	r3, [r2, #36]	@ 0x24
 8002732:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <HAL_TIM_Base_MspInit+0x7c>)
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	201d      	movs	r0, #29
 8002744:	f000 fb6f 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002748:	201d      	movs	r0, #29
 800274a:	f000 fb88 	bl	8002e5e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800274e:	e018      	b.n	8002782 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0f      	ldr	r2, [pc, #60]	@ (8002794 <HAL_TIM_Base_MspInit+0x80>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d113      	bne.n	8002782 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800275a:	4b0d      	ldr	r3, [pc, #52]	@ (8002790 <HAL_TIM_Base_MspInit+0x7c>)
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	4a0c      	ldr	r2, [pc, #48]	@ (8002790 <HAL_TIM_Base_MspInit+0x7c>)
 8002760:	f043 0310 	orr.w	r3, r3, #16
 8002764:	6253      	str	r3, [r2, #36]	@ 0x24
 8002766:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <HAL_TIM_Base_MspInit+0x7c>)
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	202b      	movs	r0, #43	@ 0x2b
 8002778:	f000 fb55 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800277c:	202b      	movs	r0, #43	@ 0x2b
 800277e:	f000 fb6e 	bl	8002e5e <HAL_NVIC_EnableIRQ>
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40000400 	.word	0x40000400
 8002790:	40023800 	.word	0x40023800
 8002794:	40001000 	.word	0x40001000

08002798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 030c 	add.w	r3, r7, #12
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a11      	ldr	r2, [pc, #68]	@ (80027fc <HAL_TIM_MspPostInit+0x64>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d11b      	bne.n	80027f2 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ba:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <HAL_TIM_MspPostInit+0x68>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4a10      	ldr	r2, [pc, #64]	@ (8002800 <HAL_TIM_MspPostInit+0x68>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	61d3      	str	r3, [r2, #28]
 80027c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002800 <HAL_TIM_MspPostInit+0x68>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027d2:	2380      	movs	r3, #128	@ 0x80
 80027d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	4619      	mov	r1, r3
 80027ec:	4805      	ldr	r0, [pc, #20]	@ (8002804 <HAL_TIM_MspPostInit+0x6c>)
 80027ee:	f000 fb91 	bl	8002f14 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027f2:	bf00      	nop
 80027f4:	3720      	adds	r7, #32
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40000400 	.word	0x40000400
 8002800:	40023800 	.word	0x40023800
 8002804:	40020800 	.word	0x40020800

08002808 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	@ 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a17      	ldr	r2, [pc, #92]	@ (8002884 <HAL_UART_MspInit+0x7c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d127      	bne.n	800287a <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800282a:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <HAL_UART_MspInit+0x80>)
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282e:	4a16      	ldr	r2, [pc, #88]	@ (8002888 <HAL_UART_MspInit+0x80>)
 8002830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002834:	6253      	str	r3, [r2, #36]	@ 0x24
 8002836:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <HAL_UART_MspInit+0x80>)
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HAL_UART_MspInit+0x80>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4a10      	ldr	r2, [pc, #64]	@ (8002888 <HAL_UART_MspInit+0x80>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	61d3      	str	r3, [r2, #28]
 800284e:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <HAL_UART_MspInit+0x80>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800285a:	230c      	movs	r3, #12
 800285c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002866:	2303      	movs	r3, #3
 8002868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800286a:	2307      	movs	r3, #7
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	4805      	ldr	r0, [pc, #20]	@ (800288c <HAL_UART_MspInit+0x84>)
 8002876:	f000 fb4d 	bl	8002f14 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800287a:	bf00      	nop
 800287c:	3728      	adds	r7, #40	@ 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40004400 	.word	0x40004400
 8002888:	40023800 	.word	0x40023800
 800288c:	40020000 	.word	0x40020000

08002890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <NMI_Handler+0x4>

08002898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <HardFault_Handler+0x4>

080028a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <MemManage_Handler+0x4>

080028a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <BusFault_Handler+0x4>

080028b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b4:	bf00      	nop
 80028b6:	e7fd      	b.n	80028b4 <UsageFault_Handler+0x4>

080028b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e0:	f000 f98c 	bl	8002bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_ACC_INT_Pin);
 80028ec:	2020      	movs	r0, #32
 80028ee:	f000 fcb9 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 80028f2:	2040      	movs	r0, #64	@ 0x40
 80028f4:	f000 fcb6 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}

080028fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002900:	4802      	ldr	r0, [pc, #8]	@ (800290c <TIM3_IRQHandler+0x10>)
 8002902:	f003 f915 	bl	8005b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200002b4 	.word	0x200002b4

08002910 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002914:	4802      	ldr	r0, [pc, #8]	@ (8002920 <SPI1_IRQHandler+0x10>)
 8002916:	f002 fca5 	bl	8005264 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	2000025c 	.word	0x2000025c

08002924 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8002928:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800292c:	f000 fc9a 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8002930:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002934:	f000 fc96 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002938:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800293c:	f000 fc92 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}

08002944 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002948:	4802      	ldr	r0, [pc, #8]	@ (8002954 <TIM6_IRQHandler+0x10>)
 800294a:	f003 f8f1 	bl	8005b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200002f4 	.word	0x200002f4

08002958 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	debounce_flag =0;
 8002960:	4b04      	ldr	r3, [pc, #16]	@ (8002974 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim6);
 8002966:	4804      	ldr	r0, [pc, #16]	@ (8002978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002968:	f002 ff08 	bl	800577c <HAL_TIM_Base_Stop_IT>
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	200009d0 	.word	0x200009d0
 8002978:	200002f4 	.word	0x200002f4

0800297c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return 1;
 8002980:	2301      	movs	r3, #1
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <_kill>:

int _kill(int pid, int sig)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002994:	f005 fcee 	bl	8008374 <__errno>
 8002998:	4603      	mov	r3, r0
 800299a:	2216      	movs	r2, #22
 800299c:	601a      	str	r2, [r3, #0]
  return -1;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_exit>:

void _exit (int status)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029b2:	f04f 31ff 	mov.w	r1, #4294967295
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ffe7 	bl	800298a <_kill>
  while (1) {}    /* Make sure we hang here */
 80029bc:	bf00      	nop
 80029be:	e7fd      	b.n	80029bc <_exit+0x12>

080029c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	e00a      	b.n	80029e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029d2:	f3af 8000 	nop.w
 80029d6:	4601      	mov	r1, r0
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	60ba      	str	r2, [r7, #8]
 80029de:	b2ca      	uxtb	r2, r1
 80029e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3301      	adds	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	dbf0      	blt.n	80029d2 <_read+0x12>
  }

  return len;
 80029f0:	687b      	ldr	r3, [r7, #4]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	e009      	b.n	8002a20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	60ba      	str	r2, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fb4d 	bl	80020b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	dbf1      	blt.n	8002a0c <_write+0x12>
  }
  return len;
 8002a28:	687b      	ldr	r3, [r7, #4]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <_close>:

int _close(int file)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a58:	605a      	str	r2, [r3, #4]
  return 0;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <_isatty>:

int _isatty(int file)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a6e:	2301      	movs	r3, #1
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
	...

08002a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a9c:	4a14      	ldr	r2, [pc, #80]	@ (8002af0 <_sbrk+0x5c>)
 8002a9e:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <_sbrk+0x60>)
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aa8:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <_sbrk+0x64>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <_sbrk+0x64>)
 8002ab2:	4a12      	ldr	r2, [pc, #72]	@ (8002afc <_sbrk+0x68>)
 8002ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ab6:	4b10      	ldr	r3, [pc, #64]	@ (8002af8 <_sbrk+0x64>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d207      	bcs.n	8002ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ac4:	f005 fc56 	bl	8008374 <__errno>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	220c      	movs	r2, #12
 8002acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad2:	e009      	b.n	8002ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ad4:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <_sbrk+0x64>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ada:	4b07      	ldr	r3, [pc, #28]	@ (8002af8 <_sbrk+0x64>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	4a05      	ldr	r2, [pc, #20]	@ (8002af8 <_sbrk+0x64>)
 8002ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20014000 	.word	0x20014000
 8002af4:	00000400 	.word	0x00000400
 8002af8:	200009d8 	.word	0x200009d8
 8002afc:	20001348 	.word	0x20001348

08002b00 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b0c:	f7ff fff8 	bl	8002b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b10:	480b      	ldr	r0, [pc, #44]	@ (8002b40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b12:	490c      	ldr	r1, [pc, #48]	@ (8002b44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b14:	4a0c      	ldr	r2, [pc, #48]	@ (8002b48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b18:	e002      	b.n	8002b20 <LoopCopyDataInit>

08002b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b1e:	3304      	adds	r3, #4

08002b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b24:	d3f9      	bcc.n	8002b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b26:	4a09      	ldr	r2, [pc, #36]	@ (8002b4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b28:	4c09      	ldr	r4, [pc, #36]	@ (8002b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b2c:	e001      	b.n	8002b32 <LoopFillZerobss>

08002b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b30:	3204      	adds	r2, #4

08002b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b34:	d3fb      	bcc.n	8002b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b36:	f005 fc23 	bl	8008380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b3a:	f7fe fd55 	bl	80015e8 <main>
  bx lr
 8002b3e:	4770      	bx	lr
  ldr r0, =_sdata
 8002b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b44:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002b48:	0800c604 	.word	0x0800c604
  ldr r2, =_sbss
 8002b4c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002b50:	20001344 	.word	0x20001344

08002b54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b54:	e7fe      	b.n	8002b54 <ADC1_IRQHandler>

08002b56 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b60:	2003      	movs	r0, #3
 8002b62:	f000 f955 	bl	8002e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b66:	2000      	movs	r0, #0
 8002b68:	f000 f80e 	bl	8002b88 <HAL_InitTick>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	71fb      	strb	r3, [r7, #7]
 8002b76:	e001      	b.n	8002b7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b78:	f7ff fd0c 	bl	8002594 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b94:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <HAL_InitTick+0x68>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d022      	beq.n	8002be2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b9c:	4b15      	ldr	r3, [pc, #84]	@ (8002bf4 <HAL_InitTick+0x6c>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <HAL_InitTick+0x68>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f962 	bl	8002e7a <HAL_SYSTICK_Config>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10f      	bne.n	8002bdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	d809      	bhi.n	8002bd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bca:	f000 f92c 	bl	8002e26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bce:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf8 <HAL_InitTick+0x70>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	e007      	b.n	8002be6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	e004      	b.n	8002be6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e001      	b.n	8002be6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	2000001c 	.word	0x2000001c
 8002bf4:	20000014 	.word	0x20000014
 8002bf8:	20000018 	.word	0x20000018

08002bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_IncTick+0x1c>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_IncTick+0x20>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	4a03      	ldr	r2, [pc, #12]	@ (8002c18 <HAL_IncTick+0x1c>)
 8002c0c:	6013      	str	r3, [r2, #0]
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	200009dc 	.word	0x200009dc
 8002c1c:	2000001c 	.word	0x2000001c

08002c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b02      	ldr	r3, [pc, #8]	@ (8002c30 <HAL_GetTick+0x10>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	200009dc 	.word	0x200009dc

08002c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c3c:	f7ff fff0 	bl	8002c20 <HAL_GetTick>
 8002c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d004      	beq.n	8002c58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c4e:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <HAL_Delay+0x40>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4413      	add	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c58:	bf00      	nop
 8002c5a:	f7ff ffe1 	bl	8002c20 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d8f7      	bhi.n	8002c5a <HAL_Delay+0x26>
  {
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	2000001c 	.word	0x2000001c

08002c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c88:	4b0c      	ldr	r3, [pc, #48]	@ (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c94:	4013      	ands	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002caa:	4a04      	ldr	r2, [pc, #16]	@ (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	60d3      	str	r3, [r2, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc4:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 0307 	and.w	r3, r3, #7
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db0b      	blt.n	8002d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	4906      	ldr	r1, [pc, #24]	@ (8002d10 <__NVIC_EnableIRQ+0x34>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	e000e100 	.word	0xe000e100

08002d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	db0a      	blt.n	8002d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	490c      	ldr	r1, [pc, #48]	@ (8002d60 <__NVIC_SetPriority+0x4c>)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	0112      	lsls	r2, r2, #4
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	440b      	add	r3, r1
 8002d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d3c:	e00a      	b.n	8002d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	4908      	ldr	r1, [pc, #32]	@ (8002d64 <__NVIC_SetPriority+0x50>)
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	3b04      	subs	r3, #4
 8002d4c:	0112      	lsls	r2, r2, #4
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	440b      	add	r3, r1
 8002d52:	761a      	strb	r2, [r3, #24]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000e100 	.word	0xe000e100
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	@ 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f1c3 0307 	rsb	r3, r3, #7
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	bf28      	it	cs
 8002d86:	2304      	movcs	r3, #4
 8002d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	2b06      	cmp	r3, #6
 8002d90:	d902      	bls.n	8002d98 <NVIC_EncodePriority+0x30>
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3b03      	subs	r3, #3
 8002d96:	e000      	b.n	8002d9a <NVIC_EncodePriority+0x32>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43da      	mvns	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	401a      	ands	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db0:	f04f 31ff 	mov.w	r1, #4294967295
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dba:	43d9      	mvns	r1, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc0:	4313      	orrs	r3, r2
         );
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3724      	adds	r7, #36	@ 0x24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ddc:	d301      	bcc.n	8002de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00f      	b.n	8002e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002de2:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <SysTick_Config+0x40>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dea:	210f      	movs	r1, #15
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	f7ff ff90 	bl	8002d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df4:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <SysTick_Config+0x40>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dfa:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <SysTick_Config+0x40>)
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	e000e010 	.word	0xe000e010

08002e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ff2d 	bl	8002c78 <__NVIC_SetPriorityGrouping>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e38:	f7ff ff42 	bl	8002cc0 <__NVIC_GetPriorityGrouping>
 8002e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	6978      	ldr	r0, [r7, #20]
 8002e44:	f7ff ff90 	bl	8002d68 <NVIC_EncodePriority>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff5f 	bl	8002d14 <__NVIC_SetPriority>
}
 8002e56:	bf00      	nop
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4603      	mov	r3, r0
 8002e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff35 	bl	8002cdc <__NVIC_EnableIRQ>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ffa2 	bl	8002dcc <SysTick_Config>
 8002e88:	4603      	mov	r3, r0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d005      	beq.n	8002eb6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2204      	movs	r2, #4
 8002eae:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
 8002eb4:	e029      	b.n	8002f0a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 020e 	bic.w	r2, r2, #14
 8002ec4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	f003 021c 	and.w	r2, r3, #28
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	4798      	blx	r3
    }
  }
  return status;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f2a:	e160      	b.n	80031ee <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8152 	beq.w	80031e8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d005      	beq.n	8002f5c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d130      	bne.n	8002fbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002f92:	2201      	movs	r2, #1
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 0201 	and.w	r2, r3, #1
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d017      	beq.n	8002ffa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d123      	bne.n	800304e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	08da      	lsrs	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3208      	adds	r2, #8
 800300e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003012:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	220f      	movs	r2, #15
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	08da      	lsrs	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3208      	adds	r2, #8
 8003048:	6939      	ldr	r1, [r7, #16]
 800304a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0203 	and.w	r2, r3, #3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80ac 	beq.w	80031e8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003090:	4b5e      	ldr	r3, [pc, #376]	@ (800320c <HAL_GPIO_Init+0x2f8>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	4a5d      	ldr	r2, [pc, #372]	@ (800320c <HAL_GPIO_Init+0x2f8>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6213      	str	r3, [r2, #32]
 800309c:	4b5b      	ldr	r3, [pc, #364]	@ (800320c <HAL_GPIO_Init+0x2f8>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80030a8:	4a59      	ldr	r2, [pc, #356]	@ (8003210 <HAL_GPIO_Init+0x2fc>)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	089b      	lsrs	r3, r3, #2
 80030ae:	3302      	adds	r3, #2
 80030b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	220f      	movs	r2, #15
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a51      	ldr	r2, [pc, #324]	@ (8003214 <HAL_GPIO_Init+0x300>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d025      	beq.n	8003120 <HAL_GPIO_Init+0x20c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a50      	ldr	r2, [pc, #320]	@ (8003218 <HAL_GPIO_Init+0x304>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d01f      	beq.n	800311c <HAL_GPIO_Init+0x208>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a4f      	ldr	r2, [pc, #316]	@ (800321c <HAL_GPIO_Init+0x308>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d019      	beq.n	8003118 <HAL_GPIO_Init+0x204>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a4e      	ldr	r2, [pc, #312]	@ (8003220 <HAL_GPIO_Init+0x30c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d013      	beq.n	8003114 <HAL_GPIO_Init+0x200>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a4d      	ldr	r2, [pc, #308]	@ (8003224 <HAL_GPIO_Init+0x310>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00d      	beq.n	8003110 <HAL_GPIO_Init+0x1fc>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003228 <HAL_GPIO_Init+0x314>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d007      	beq.n	800310c <HAL_GPIO_Init+0x1f8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a4b      	ldr	r2, [pc, #300]	@ (800322c <HAL_GPIO_Init+0x318>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d101      	bne.n	8003108 <HAL_GPIO_Init+0x1f4>
 8003104:	2306      	movs	r3, #6
 8003106:	e00c      	b.n	8003122 <HAL_GPIO_Init+0x20e>
 8003108:	2307      	movs	r3, #7
 800310a:	e00a      	b.n	8003122 <HAL_GPIO_Init+0x20e>
 800310c:	2305      	movs	r3, #5
 800310e:	e008      	b.n	8003122 <HAL_GPIO_Init+0x20e>
 8003110:	2304      	movs	r3, #4
 8003112:	e006      	b.n	8003122 <HAL_GPIO_Init+0x20e>
 8003114:	2303      	movs	r3, #3
 8003116:	e004      	b.n	8003122 <HAL_GPIO_Init+0x20e>
 8003118:	2302      	movs	r3, #2
 800311a:	e002      	b.n	8003122 <HAL_GPIO_Init+0x20e>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_GPIO_Init+0x20e>
 8003120:	2300      	movs	r3, #0
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	f002 0203 	and.w	r2, r2, #3
 8003128:	0092      	lsls	r2, r2, #2
 800312a:	4093      	lsls	r3, r2
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003132:	4937      	ldr	r1, [pc, #220]	@ (8003210 <HAL_GPIO_Init+0x2fc>)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	3302      	adds	r3, #2
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003140:	4b3b      	ldr	r3, [pc, #236]	@ (8003230 <HAL_GPIO_Init+0x31c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003164:	4a32      	ldr	r2, [pc, #200]	@ (8003230 <HAL_GPIO_Init+0x31c>)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800316a:	4b31      	ldr	r3, [pc, #196]	@ (8003230 <HAL_GPIO_Init+0x31c>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800318e:	4a28      	ldr	r2, [pc, #160]	@ (8003230 <HAL_GPIO_Init+0x31c>)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003194:	4b26      	ldr	r3, [pc, #152]	@ (8003230 <HAL_GPIO_Init+0x31c>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	43db      	mvns	r3, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003230 <HAL_GPIO_Init+0x31c>)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031be:	4b1c      	ldr	r3, [pc, #112]	@ (8003230 <HAL_GPIO_Init+0x31c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031e2:	4a13      	ldr	r2, [pc, #76]	@ (8003230 <HAL_GPIO_Init+0x31c>)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	3301      	adds	r3, #1
 80031ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f47f ae97 	bne.w	8002f2c <HAL_GPIO_Init+0x18>
  }
}
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800
 8003210:	40010000 	.word	0x40010000
 8003214:	40020000 	.word	0x40020000
 8003218:	40020400 	.word	0x40020400
 800321c:	40020800 	.word	0x40020800
 8003220:	40020c00 	.word	0x40020c00
 8003224:	40021000 	.word	0x40021000
 8003228:	40021400 	.word	0x40021400
 800322c:	40021800 	.word	0x40021800
 8003230:	40010400 	.word	0x40010400

08003234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
 8003240:	4613      	mov	r3, r2
 8003242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003244:	787b      	ldrb	r3, [r7, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003250:	e003      	b.n	800325a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	041a      	lsls	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800326e:	4b08      	ldr	r3, [pc, #32]	@ (8003290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d006      	beq.n	8003288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800327a:	4a05      	ldr	r2, [pc, #20]	@ (8003290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe ff2c 	bl	80020e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40010400 	.word	0x40010400

08003294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e12b      	b.n	80034fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff f99a 	bl	80025f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2224      	movs	r2, #36	@ 0x24
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f8:	f001 fd5e 	bl	8004db8 <HAL_RCC_GetPCLK1Freq>
 80032fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4a81      	ldr	r2, [pc, #516]	@ (8003508 <HAL_I2C_Init+0x274>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d807      	bhi.n	8003318 <HAL_I2C_Init+0x84>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a80      	ldr	r2, [pc, #512]	@ (800350c <HAL_I2C_Init+0x278>)
 800330c:	4293      	cmp	r3, r2
 800330e:	bf94      	ite	ls
 8003310:	2301      	movls	r3, #1
 8003312:	2300      	movhi	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e006      	b.n	8003326 <HAL_I2C_Init+0x92>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a7d      	ldr	r2, [pc, #500]	@ (8003510 <HAL_I2C_Init+0x27c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	bf94      	ite	ls
 8003320:	2301      	movls	r3, #1
 8003322:	2300      	movhi	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0e7      	b.n	80034fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a78      	ldr	r2, [pc, #480]	@ (8003514 <HAL_I2C_Init+0x280>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	0c9b      	lsrs	r3, r3, #18
 8003338:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a6a      	ldr	r2, [pc, #424]	@ (8003508 <HAL_I2C_Init+0x274>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d802      	bhi.n	8003368 <HAL_I2C_Init+0xd4>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3301      	adds	r3, #1
 8003366:	e009      	b.n	800337c <HAL_I2C_Init+0xe8>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	4a69      	ldr	r2, [pc, #420]	@ (8003518 <HAL_I2C_Init+0x284>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	3301      	adds	r3, #1
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	430b      	orrs	r3, r1
 8003382:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800338e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	495c      	ldr	r1, [pc, #368]	@ (8003508 <HAL_I2C_Init+0x274>)
 8003398:	428b      	cmp	r3, r1
 800339a:	d819      	bhi.n	80033d0 <HAL_I2C_Init+0x13c>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1e59      	subs	r1, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033aa:	1c59      	adds	r1, r3, #1
 80033ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033b0:	400b      	ands	r3, r1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_I2C_Init+0x138>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1e59      	subs	r1, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c4:	3301      	adds	r3, #1
 80033c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ca:	e051      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 80033cc:	2304      	movs	r3, #4
 80033ce:	e04f      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d111      	bne.n	80033fc <HAL_I2C_Init+0x168>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1e58      	subs	r0, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	440b      	add	r3, r1
 80033e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	e012      	b.n	8003422 <HAL_I2C_Init+0x18e>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1e58      	subs	r0, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	0099      	lsls	r1, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Init+0x196>
 8003426:	2301      	movs	r3, #1
 8003428:	e022      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10e      	bne.n	8003450 <HAL_I2C_Init+0x1bc>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1e58      	subs	r0, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	440b      	add	r3, r1
 8003440:	fbb0 f3f3 	udiv	r3, r0, r3
 8003444:	3301      	adds	r3, #1
 8003446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800344e:	e00f      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	0099      	lsls	r1, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	6809      	ldr	r1, [r1, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800349e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6911      	ldr	r1, [r2, #16]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68d2      	ldr	r2, [r2, #12]
 80034aa:	4311      	orrs	r1, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	000186a0 	.word	0x000186a0
 800350c:	001e847f 	.word	0x001e847f
 8003510:	003d08ff 	.word	0x003d08ff
 8003514:	431bde83 	.word	0x431bde83
 8003518:	10624dd3 	.word	0x10624dd3

0800351c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	4608      	mov	r0, r1
 8003526:	4611      	mov	r1, r2
 8003528:	461a      	mov	r2, r3
 800352a:	4603      	mov	r3, r0
 800352c:	817b      	strh	r3, [r7, #10]
 800352e:	460b      	mov	r3, r1
 8003530:	813b      	strh	r3, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003536:	f7ff fb73 	bl	8002c20 <HAL_GetTick>
 800353a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b20      	cmp	r3, #32
 8003546:	f040 80d9 	bne.w	80036fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2319      	movs	r3, #25
 8003550:	2201      	movs	r2, #1
 8003552:	496d      	ldr	r1, [pc, #436]	@ (8003708 <HAL_I2C_Mem_Write+0x1ec>)
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fc8b 	bl	8003e70 <I2C_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003560:	2302      	movs	r3, #2
 8003562:	e0cc      	b.n	80036fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_I2C_Mem_Write+0x56>
 800356e:	2302      	movs	r3, #2
 8003570:	e0c5      	b.n	80036fe <HAL_I2C_Mem_Write+0x1e2>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d007      	beq.n	8003598 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2221      	movs	r2, #33	@ 0x21
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2240      	movs	r2, #64	@ 0x40
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80035c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4a4d      	ldr	r2, [pc, #308]	@ (800370c <HAL_I2C_Mem_Write+0x1f0>)
 80035d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035da:	88f8      	ldrh	r0, [r7, #6]
 80035dc:	893a      	ldrh	r2, [r7, #8]
 80035de:	8979      	ldrh	r1, [r7, #10]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	4603      	mov	r3, r0
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 fac2 	bl	8003b74 <I2C_RequestMemoryWrite>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d052      	beq.n	800369c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e081      	b.n	80036fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fd50 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	2b04      	cmp	r3, #4
 8003610:	d107      	bne.n	8003622 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003620:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06b      	b.n	80036fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	781a      	ldrb	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b04      	cmp	r3, #4
 8003662:	d11b      	bne.n	800369c <HAL_I2C_Mem_Write+0x180>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	d017      	beq.n	800369c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1aa      	bne.n	80035fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fd43 	bl	8004134 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d107      	bne.n	80036cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e016      	b.n	80036fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e000      	b.n	80036fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
  }
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	00100002 	.word	0x00100002
 800370c:	ffff0000 	.word	0xffff0000

08003710 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08c      	sub	sp, #48	@ 0x30
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	461a      	mov	r2, r3
 800371e:	4603      	mov	r3, r0
 8003720:	817b      	strh	r3, [r7, #10]
 8003722:	460b      	mov	r3, r1
 8003724:	813b      	strh	r3, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800372a:	f7ff fa79 	bl	8002c20 <HAL_GetTick>
 800372e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b20      	cmp	r3, #32
 800373a:	f040 8214 	bne.w	8003b66 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	2319      	movs	r3, #25
 8003744:	2201      	movs	r2, #1
 8003746:	497b      	ldr	r1, [pc, #492]	@ (8003934 <HAL_I2C_Mem_Read+0x224>)
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fb91 	bl	8003e70 <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
 8003756:	e207      	b.n	8003b68 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_I2C_Mem_Read+0x56>
 8003762:	2302      	movs	r3, #2
 8003764:	e200      	b.n	8003b68 <HAL_I2C_Mem_Read+0x458>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d007      	beq.n	800378c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800379a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2222      	movs	r2, #34	@ 0x22
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2240      	movs	r2, #64	@ 0x40
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80037bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003938 <HAL_I2C_Mem_Read+0x228>)
 80037cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ce:	88f8      	ldrh	r0, [r7, #6]
 80037d0:	893a      	ldrh	r2, [r7, #8]
 80037d2:	8979      	ldrh	r1, [r7, #10]
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	4603      	mov	r3, r0
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fa5e 	bl	8003ca0 <I2C_RequestMemoryRead>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e1bc      	b.n	8003b68 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d113      	bne.n	800381e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	623b      	str	r3, [r7, #32]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	623b      	str	r3, [r7, #32]
 800380a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e190      	b.n	8003b40 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003822:	2b01      	cmp	r3, #1
 8003824:	d11b      	bne.n	800385e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e170      	b.n	8003b40 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003862:	2b02      	cmp	r3, #2
 8003864:	d11b      	bne.n	800389e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003874:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003884:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	e150      	b.n	8003b40 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038b4:	e144      	b.n	8003b40 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	f200 80f1 	bhi.w	8003aa2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d123      	bne.n	8003910 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fc79 	bl	80041c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e145      	b.n	8003b68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800390e:	e117      	b.n	8003b40 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003914:	2b02      	cmp	r3, #2
 8003916:	d14e      	bne.n	80039b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391e:	2200      	movs	r2, #0
 8003920:	4906      	ldr	r1, [pc, #24]	@ (800393c <HAL_I2C_Mem_Read+0x22c>)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 faa4 	bl	8003e70 <I2C_WaitOnFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e11a      	b.n	8003b68 <HAL_I2C_Mem_Read+0x458>
 8003932:	bf00      	nop
 8003934:	00100002 	.word	0x00100002
 8003938:	ffff0000 	.word	0xffff0000
 800393c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800394e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039b4:	e0c4      	b.n	8003b40 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039bc:	2200      	movs	r2, #0
 80039be:	496c      	ldr	r1, [pc, #432]	@ (8003b70 <HAL_I2C_Mem_Read+0x460>)
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fa55 	bl	8003e70 <I2C_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0cb      	b.n	8003b68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a18:	2200      	movs	r2, #0
 8003a1a:	4955      	ldr	r1, [pc, #340]	@ (8003b70 <HAL_I2C_Mem_Read+0x460>)
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fa27 	bl	8003e70 <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e09d      	b.n	8003b68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aa0:	e04e      	b.n	8003b40 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fb8c 	bl	80041c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e058      	b.n	8003b68 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d124      	bne.n	8003b40 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d107      	bne.n	8003b0e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b0c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f47f aeb6 	bne.w	80038b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e000      	b.n	8003b68 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
  }
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3728      	adds	r7, #40	@ 0x28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	00010004 	.word	0x00010004

08003b74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	4611      	mov	r1, r2
 8003b80:	461a      	mov	r2, r3
 8003b82:	4603      	mov	r3, r0
 8003b84:	817b      	strh	r3, [r7, #10]
 8003b86:	460b      	mov	r3, r1
 8003b88:	813b      	strh	r3, [r7, #8]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f960 	bl	8003e70 <I2C_WaitOnFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bc4:	d103      	bne.n	8003bce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e05f      	b.n	8003c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bd2:	897b      	ldrh	r3, [r7, #10]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003be0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	6a3a      	ldr	r2, [r7, #32]
 8003be6:	492d      	ldr	r1, [pc, #180]	@ (8003c9c <I2C_RequestMemoryWrite+0x128>)
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f9bb 	bl	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e04c      	b.n	8003c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c10:	6a39      	ldr	r1, [r7, #32]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fa46 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00d      	beq.n	8003c3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d107      	bne.n	8003c36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e02b      	b.n	8003c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d105      	bne.n	8003c4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c40:	893b      	ldrh	r3, [r7, #8]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	611a      	str	r2, [r3, #16]
 8003c4a:	e021      	b.n	8003c90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c4c:	893b      	ldrh	r3, [r7, #8]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5c:	6a39      	ldr	r1, [r7, #32]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fa20 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d107      	bne.n	8003c82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e005      	b.n	8003c92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c86:	893b      	ldrh	r3, [r7, #8]
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	00010002 	.word	0x00010002

08003ca0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	4608      	mov	r0, r1
 8003caa:	4611      	mov	r1, r2
 8003cac:	461a      	mov	r2, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	817b      	strh	r3, [r7, #10]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	813b      	strh	r3, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f8c2 	bl	8003e70 <I2C_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d00:	d103      	bne.n	8003d0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e0aa      	b.n	8003e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d0e:	897b      	ldrh	r3, [r7, #10]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	6a3a      	ldr	r2, [r7, #32]
 8003d22:	4952      	ldr	r1, [pc, #328]	@ (8003e6c <I2C_RequestMemoryRead+0x1cc>)
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f91d 	bl	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e097      	b.n	8003e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d4c:	6a39      	ldr	r1, [r7, #32]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f9a8 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d107      	bne.n	8003d72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e076      	b.n	8003e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d7c:	893b      	ldrh	r3, [r7, #8]
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	611a      	str	r2, [r3, #16]
 8003d86:	e021      	b.n	8003dcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d88:	893b      	ldrh	r3, [r7, #8]
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d98:	6a39      	ldr	r1, [r7, #32]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f982 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d107      	bne.n	8003dbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e050      	b.n	8003e64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc2:	893b      	ldrh	r3, [r7, #8]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dce:	6a39      	ldr	r1, [r7, #32]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f967 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00d      	beq.n	8003df8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d107      	bne.n	8003df4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e035      	b.n	8003e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f82b 	bl	8003e70 <I2C_WaitOnFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00d      	beq.n	8003e3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e2e:	d103      	bne.n	8003e38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e013      	b.n	8003e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e3c:	897b      	ldrh	r3, [r7, #10]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	6a3a      	ldr	r2, [r7, #32]
 8003e50:	4906      	ldr	r1, [pc, #24]	@ (8003e6c <I2C_RequestMemoryRead+0x1cc>)
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f886 	bl	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	00010002 	.word	0x00010002

08003e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e80:	e048      	b.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e88:	d044      	beq.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8a:	f7fe fec9 	bl	8002c20 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d302      	bcc.n	8003ea0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d139      	bne.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	0c1b      	lsrs	r3, r3, #16
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d10d      	bne.n	8003ec6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	43da      	mvns	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	e00c      	b.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	43da      	mvns	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d116      	bne.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e023      	b.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	0c1b      	lsrs	r3, r3, #16
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d10d      	bne.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	43da      	mvns	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	e00c      	b.n	8003f54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	43da      	mvns	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4013      	ands	r3, r2
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d093      	beq.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f72:	e071      	b.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f82:	d123      	bne.n	8003fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb8:	f043 0204 	orr.w	r2, r3, #4
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e067      	b.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d041      	beq.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd4:	f7fe fe24 	bl	8002c20 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d302      	bcc.n	8003fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d136      	bne.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d10c      	bne.n	800400e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	43da      	mvns	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4013      	ands	r3, r2
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	bf14      	ite	ne
 8004006:	2301      	movne	r3, #1
 8004008:	2300      	moveq	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	e00b      	b.n	8004026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	43da      	mvns	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4013      	ands	r3, r2
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf14      	ite	ne
 8004020:	2301      	movne	r3, #1
 8004022:	2300      	moveq	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e021      	b.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	0c1b      	lsrs	r3, r3, #16
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d10c      	bne.n	800407c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	43da      	mvns	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4013      	ands	r3, r2
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf14      	ite	ne
 8004074:	2301      	movne	r3, #1
 8004076:	2300      	moveq	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e00b      	b.n	8004094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	43da      	mvns	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	bf14      	ite	ne
 800408e:	2301      	movne	r3, #1
 8004090:	2300      	moveq	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	f47f af6d 	bne.w	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b0:	e034      	b.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f8e3 	bl	800427e <I2C_IsAcknowledgeFailed>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e034      	b.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d028      	beq.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ca:	f7fe fda9 	bl	8002c20 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d302      	bcc.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d11d      	bne.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ea:	2b80      	cmp	r3, #128	@ 0x80
 80040ec:	d016      	beq.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e007      	b.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004126:	2b80      	cmp	r3, #128	@ 0x80
 8004128:	d1c3      	bne.n	80040b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004140:	e034      	b.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f89b 	bl	800427e <I2C_IsAcknowledgeFailed>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e034      	b.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d028      	beq.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fe fd61 	bl	8002c20 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11d      	bne.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b04      	cmp	r3, #4
 800417c:	d016      	beq.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	f043 0220 	orr.w	r2, r3, #32
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e007      	b.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d1c3      	bne.n	8004142 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041d0:	e049      	b.n	8004266 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d119      	bne.n	8004214 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0210 	mvn.w	r2, #16
 80041e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e030      	b.n	8004276 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004214:	f7fe fd04 	bl	8002c20 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	429a      	cmp	r2, r3
 8004222:	d302      	bcc.n	800422a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d11d      	bne.n	8004266 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004234:	2b40      	cmp	r3, #64	@ 0x40
 8004236:	d016      	beq.n	8004266 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	f043 0220 	orr.w	r2, r3, #32
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e007      	b.n	8004276 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004270:	2b40      	cmp	r3, #64	@ 0x40
 8004272:	d1ae      	bne.n	80041d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004294:	d11b      	bne.n	80042ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800429e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	f043 0204 	orr.w	r2, r3, #4
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
	...

080042dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e31d      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ee:	4b94      	ldr	r3, [pc, #592]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042f8:	4b91      	ldr	r3, [pc, #580]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004300:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d07b      	beq.n	8004406 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d006      	beq.n	8004322 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b0c      	cmp	r3, #12
 8004318:	d10f      	bne.n	800433a <HAL_RCC_OscConfig+0x5e>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004320:	d10b      	bne.n	800433a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004322:	4b87      	ldr	r3, [pc, #540]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d06a      	beq.n	8004404 <HAL_RCC_OscConfig+0x128>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d166      	bne.n	8004404 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e2f7      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d106      	bne.n	8004350 <HAL_RCC_OscConfig+0x74>
 8004342:	4b7f      	ldr	r3, [pc, #508]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a7e      	ldr	r2, [pc, #504]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 8004348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e02d      	b.n	80043ac <HAL_RCC_OscConfig+0xd0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10c      	bne.n	8004372 <HAL_RCC_OscConfig+0x96>
 8004358:	4b79      	ldr	r3, [pc, #484]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a78      	ldr	r2, [pc, #480]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 800435e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b76      	ldr	r3, [pc, #472]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a75      	ldr	r2, [pc, #468]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 800436a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e01c      	b.n	80043ac <HAL_RCC_OscConfig+0xd0>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b05      	cmp	r3, #5
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0xb8>
 800437a:	4b71      	ldr	r3, [pc, #452]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a70      	ldr	r2, [pc, #448]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 8004380:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b6e      	ldr	r3, [pc, #440]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a6d      	ldr	r2, [pc, #436]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e00b      	b.n	80043ac <HAL_RCC_OscConfig+0xd0>
 8004394:	4b6a      	ldr	r3, [pc, #424]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a69      	ldr	r2, [pc, #420]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 800439a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	4b67      	ldr	r3, [pc, #412]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a66      	ldr	r2, [pc, #408]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 80043a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d013      	beq.n	80043dc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7fe fc34 	bl	8002c20 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043bc:	f7fe fc30 	bl	8002c20 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	@ 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e2ad      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0xe0>
 80043da:	e014      	b.n	8004406 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fe fc20 	bl	8002c20 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fe fc1c 	bl	8002c20 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	@ 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e299      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043f6:	4b52      	ldr	r3, [pc, #328]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x108>
 8004402:	e000      	b.n	8004406 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d05a      	beq.n	80044c8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d005      	beq.n	8004424 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2b0c      	cmp	r3, #12
 800441c:	d119      	bne.n	8004452 <HAL_RCC_OscConfig+0x176>
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d116      	bne.n	8004452 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004424:	4b46      	ldr	r3, [pc, #280]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_OscConfig+0x160>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d001      	beq.n	800443c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e276      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443c:	4b40      	ldr	r3, [pc, #256]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	493d      	ldr	r1, [pc, #244]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 800444c:	4313      	orrs	r3, r2
 800444e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004450:	e03a      	b.n	80044c8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d020      	beq.n	800449c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800445a:	4b3a      	ldr	r3, [pc, #232]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fe fbde 	bl	8002c20 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004468:	f7fe fbda 	bl	8002c20 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e257      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800447a:	4b31      	ldr	r3, [pc, #196]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004486:	4b2e      	ldr	r3, [pc, #184]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	492a      	ldr	r1, [pc, #168]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 8004496:	4313      	orrs	r3, r2
 8004498:	604b      	str	r3, [r1, #4]
 800449a:	e015      	b.n	80044c8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449c:	4b29      	ldr	r3, [pc, #164]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a2:	f7fe fbbd 	bl	8002c20 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044aa:	f7fe fbb9 	bl	8002c20 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e236      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044bc:	4b20      	ldr	r3, [pc, #128]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f0      	bne.n	80044aa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80b8 	beq.w	8004646 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d170      	bne.n	80045be <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044dc:	4b18      	ldr	r3, [pc, #96]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_RCC_OscConfig+0x218>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e21a      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1a      	ldr	r2, [r3, #32]
 80044f8:	4b11      	ldr	r3, [pc, #68]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004500:	429a      	cmp	r2, r3
 8004502:	d921      	bls.n	8004548 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fc7d 	bl	8004e08 <RCC_SetFlashLatencyFromMSIRange>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e208      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004518:	4b09      	ldr	r3, [pc, #36]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4906      	ldr	r1, [pc, #24]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 8004526:	4313      	orrs	r3, r2
 8004528:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800452a:	4b05      	ldr	r3, [pc, #20]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	061b      	lsls	r3, r3, #24
 8004538:	4901      	ldr	r1, [pc, #4]	@ (8004540 <HAL_RCC_OscConfig+0x264>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
 800453e:	e020      	b.n	8004582 <HAL_RCC_OscConfig+0x2a6>
 8004540:	40023800 	.word	0x40023800
 8004544:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004548:	4b99      	ldr	r3, [pc, #612]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4996      	ldr	r1, [pc, #600]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004556:	4313      	orrs	r3, r2
 8004558:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800455a:	4b95      	ldr	r3, [pc, #596]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	061b      	lsls	r3, r3, #24
 8004568:	4991      	ldr	r1, [pc, #580]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800456a:	4313      	orrs	r3, r2
 800456c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fc48 	bl	8004e08 <RCC_SetFlashLatencyFromMSIRange>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e1d3      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	0b5b      	lsrs	r3, r3, #13
 8004588:	3301      	adds	r3, #1
 800458a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004592:	4a87      	ldr	r2, [pc, #540]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004594:	6892      	ldr	r2, [r2, #8]
 8004596:	0912      	lsrs	r2, r2, #4
 8004598:	f002 020f 	and.w	r2, r2, #15
 800459c:	4985      	ldr	r1, [pc, #532]	@ (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 800459e:	5c8a      	ldrb	r2, [r1, r2]
 80045a0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80045a2:	4a85      	ldr	r2, [pc, #532]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80045a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045a6:	4b85      	ldr	r3, [pc, #532]	@ (80047bc <HAL_RCC_OscConfig+0x4e0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe faec 	bl	8002b88 <HAL_InitTick>
 80045b0:	4603      	mov	r3, r0
 80045b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d045      	beq.n	8004646 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	e1b5      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d029      	beq.n	800461a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045c6:	4b7e      	ldr	r3, [pc, #504]	@ (80047c0 <HAL_RCC_OscConfig+0x4e4>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fe fb28 	bl	8002c20 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d4:	f7fe fb24 	bl	8002c20 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e1a1      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045e6:	4b72      	ldr	r3, [pc, #456]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f2:	4b6f      	ldr	r3, [pc, #444]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	496c      	ldr	r1, [pc, #432]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004604:	4b6a      	ldr	r3, [pc, #424]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	061b      	lsls	r3, r3, #24
 8004612:	4967      	ldr	r1, [pc, #412]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004614:	4313      	orrs	r3, r2
 8004616:	604b      	str	r3, [r1, #4]
 8004618:	e015      	b.n	8004646 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800461a:	4b69      	ldr	r3, [pc, #420]	@ (80047c0 <HAL_RCC_OscConfig+0x4e4>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fe fafe 	bl	8002c20 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004628:	f7fe fafa 	bl	8002c20 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e177      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800463a:	4b5d      	ldr	r3, [pc, #372]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d030      	beq.n	80046b4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d016      	beq.n	8004688 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465a:	4b5a      	ldr	r3, [pc, #360]	@ (80047c4 <HAL_RCC_OscConfig+0x4e8>)
 800465c:	2201      	movs	r2, #1
 800465e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004660:	f7fe fade 	bl	8002c20 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004668:	f7fe fada 	bl	8002c20 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e157      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800467a:	4b4d      	ldr	r3, [pc, #308]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800467c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0f0      	beq.n	8004668 <HAL_RCC_OscConfig+0x38c>
 8004686:	e015      	b.n	80046b4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004688:	4b4e      	ldr	r3, [pc, #312]	@ (80047c4 <HAL_RCC_OscConfig+0x4e8>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800468e:	f7fe fac7 	bl	8002c20 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004696:	f7fe fac3 	bl	8002c20 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e140      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046a8:	4b41      	ldr	r3, [pc, #260]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80046aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f0      	bne.n	8004696 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80b5 	beq.w	800482c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c6:	4b3a      	ldr	r3, [pc, #232]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10d      	bne.n	80046ee <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	4b37      	ldr	r3, [pc, #220]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	4a36      	ldr	r2, [pc, #216]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80046d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046dc:	6253      	str	r3, [r2, #36]	@ 0x24
 80046de:	4b34      	ldr	r3, [pc, #208]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ea:	2301      	movs	r3, #1
 80046ec:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ee:	4b36      	ldr	r3, [pc, #216]	@ (80047c8 <HAL_RCC_OscConfig+0x4ec>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d118      	bne.n	800472c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fa:	4b33      	ldr	r3, [pc, #204]	@ (80047c8 <HAL_RCC_OscConfig+0x4ec>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a32      	ldr	r2, [pc, #200]	@ (80047c8 <HAL_RCC_OscConfig+0x4ec>)
 8004700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004706:	f7fe fa8b 	bl	8002c20 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470e:	f7fe fa87 	bl	8002c20 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b64      	cmp	r3, #100	@ 0x64
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e104      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	4b29      	ldr	r3, [pc, #164]	@ (80047c8 <HAL_RCC_OscConfig+0x4ec>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d106      	bne.n	8004742 <HAL_RCC_OscConfig+0x466>
 8004734:	4b1e      	ldr	r3, [pc, #120]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004738:	4a1d      	ldr	r2, [pc, #116]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800473a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800473e:	6353      	str	r3, [r2, #52]	@ 0x34
 8004740:	e02d      	b.n	800479e <HAL_RCC_OscConfig+0x4c2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0x488>
 800474a:	4b19      	ldr	r3, [pc, #100]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800474c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474e:	4a18      	ldr	r2, [pc, #96]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004754:	6353      	str	r3, [r2, #52]	@ 0x34
 8004756:	4b16      	ldr	r3, [pc, #88]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475a:	4a15      	ldr	r2, [pc, #84]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800475c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004760:	6353      	str	r3, [r2, #52]	@ 0x34
 8004762:	e01c      	b.n	800479e <HAL_RCC_OscConfig+0x4c2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b05      	cmp	r3, #5
 800476a:	d10c      	bne.n	8004786 <HAL_RCC_OscConfig+0x4aa>
 800476c:	4b10      	ldr	r3, [pc, #64]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800476e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004770:	4a0f      	ldr	r2, [pc, #60]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004772:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004776:	6353      	str	r3, [r2, #52]	@ 0x34
 8004778:	4b0d      	ldr	r3, [pc, #52]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800477a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477c:	4a0c      	ldr	r2, [pc, #48]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800477e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004782:	6353      	str	r3, [r2, #52]	@ 0x34
 8004784:	e00b      	b.n	800479e <HAL_RCC_OscConfig+0x4c2>
 8004786:	4b0a      	ldr	r3, [pc, #40]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800478a:	4a09      	ldr	r2, [pc, #36]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800478c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004790:	6353      	str	r3, [r2, #52]	@ 0x34
 8004792:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004796:	4a06      	ldr	r2, [pc, #24]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004798:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800479c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d024      	beq.n	80047f0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a6:	f7fe fa3b 	bl	8002c20 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047ac:	e019      	b.n	80047e2 <HAL_RCC_OscConfig+0x506>
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800
 80047b4:	0800c218 	.word	0x0800c218
 80047b8:	20000014 	.word	0x20000014
 80047bc:	20000018 	.word	0x20000018
 80047c0:	42470020 	.word	0x42470020
 80047c4:	42470680 	.word	0x42470680
 80047c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047cc:	f7fe fa28 	bl	8002c20 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e0a3      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047e2:	4b54      	ldr	r3, [pc, #336]	@ (8004934 <HAL_RCC_OscConfig+0x658>)
 80047e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0ee      	beq.n	80047cc <HAL_RCC_OscConfig+0x4f0>
 80047ee:	e014      	b.n	800481a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f0:	f7fe fa16 	bl	8002c20 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047f6:	e00a      	b.n	800480e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f8:	f7fe fa12 	bl	8002c20 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e08d      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800480e:	4b49      	ldr	r3, [pc, #292]	@ (8004934 <HAL_RCC_OscConfig+0x658>)
 8004810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004812:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1ee      	bne.n	80047f8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800481a:	7ffb      	ldrb	r3, [r7, #31]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d105      	bne.n	800482c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004820:	4b44      	ldr	r3, [pc, #272]	@ (8004934 <HAL_RCC_OscConfig+0x658>)
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	4a43      	ldr	r2, [pc, #268]	@ (8004934 <HAL_RCC_OscConfig+0x658>)
 8004826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800482a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	2b00      	cmp	r3, #0
 8004832:	d079      	beq.n	8004928 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d056      	beq.n	80048e8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	2b02      	cmp	r3, #2
 8004840:	d13b      	bne.n	80048ba <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	4b3d      	ldr	r3, [pc, #244]	@ (8004938 <HAL_RCC_OscConfig+0x65c>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fe f9ea 	bl	8002c20 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004850:	f7fe f9e6 	bl	8002c20 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e063      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004862:	4b34      	ldr	r3, [pc, #208]	@ (8004934 <HAL_RCC_OscConfig+0x658>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800486e:	4b31      	ldr	r3, [pc, #196]	@ (8004934 <HAL_RCC_OscConfig+0x658>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487e:	4319      	orrs	r1, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	430b      	orrs	r3, r1
 8004886:	492b      	ldr	r1, [pc, #172]	@ (8004934 <HAL_RCC_OscConfig+0x658>)
 8004888:	4313      	orrs	r3, r2
 800488a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800488c:	4b2a      	ldr	r3, [pc, #168]	@ (8004938 <HAL_RCC_OscConfig+0x65c>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004892:	f7fe f9c5 	bl	8002c20 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800489a:	f7fe f9c1 	bl	8002c20 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e03e      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048ac:	4b21      	ldr	r3, [pc, #132]	@ (8004934 <HAL_RCC_OscConfig+0x658>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x5be>
 80048b8:	e036      	b.n	8004928 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004938 <HAL_RCC_OscConfig+0x65c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7fe f9ae 	bl	8002c20 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fe f9aa 	bl	8002c20 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e027      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048da:	4b16      	ldr	r3, [pc, #88]	@ (8004934 <HAL_RCC_OscConfig+0x658>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x5ec>
 80048e6:	e01f      	b.n	8004928 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e01a      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004934 <HAL_RCC_OscConfig+0x658>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	429a      	cmp	r2, r3
 8004906:	d10d      	bne.n	8004924 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d106      	bne.n	8004924 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004920:	429a      	cmp	r2, r3
 8004922:	d001      	beq.n	8004928 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40023800 	.word	0x40023800
 8004938:	42470060 	.word	0x42470060

0800493c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e11a      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004950:	4b8f      	ldr	r3, [pc, #572]	@ (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d919      	bls.n	8004992 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d105      	bne.n	8004970 <HAL_RCC_ClockConfig+0x34>
 8004964:	4b8a      	ldr	r3, [pc, #552]	@ (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a89      	ldr	r2, [pc, #548]	@ (8004b90 <HAL_RCC_ClockConfig+0x254>)
 800496a:	f043 0304 	orr.w	r3, r3, #4
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b87      	ldr	r3, [pc, #540]	@ (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 0201 	bic.w	r2, r3, #1
 8004978:	4985      	ldr	r1, [pc, #532]	@ (8004b90 <HAL_RCC_ClockConfig+0x254>)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	4313      	orrs	r3, r2
 800497e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004980:	4b83      	ldr	r3, [pc, #524]	@ (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d001      	beq.n	8004992 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e0f9      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800499e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	497a      	ldr	r1, [pc, #488]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 808e 	beq.w	8004ada <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049c6:	4b73      	ldr	r3, [pc, #460]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d121      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e0d7      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049de:	4b6d      	ldr	r3, [pc, #436]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d115      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e0cb      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049f6:	4b67      	ldr	r3, [pc, #412]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0bf      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a06:	4b63      	ldr	r3, [pc, #396]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e0b7      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a16:	4b5f      	ldr	r3, [pc, #380]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f023 0203 	bic.w	r2, r3, #3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	495c      	ldr	r1, [pc, #368]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a28:	f7fe f8fa 	bl	8002c20 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d112      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a38:	f7fe f8f2 	bl	8002c20 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e09b      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a4e:	4b51      	ldr	r3, [pc, #324]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d1ee      	bne.n	8004a38 <HAL_RCC_ClockConfig+0xfc>
 8004a5a:	e03e      	b.n	8004ada <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d112      	bne.n	8004a8a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a64:	e00a      	b.n	8004a7c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a66:	f7fe f8db 	bl	8002c20 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e084      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a7c:	4b45      	ldr	r3, [pc, #276]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b0c      	cmp	r3, #12
 8004a86:	d1ee      	bne.n	8004a66 <HAL_RCC_ClockConfig+0x12a>
 8004a88:	e027      	b.n	8004ada <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d11d      	bne.n	8004ace <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a92:	e00a      	b.n	8004aaa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a94:	f7fe f8c4 	bl	8002c20 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e06d      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d1ee      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x158>
 8004ab6:	e010      	b.n	8004ada <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab8:	f7fe f8b2 	bl	8002c20 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e05b      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ace:	4b31      	ldr	r3, [pc, #196]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1ee      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ada:	4b2d      	ldr	r3, [pc, #180]	@ (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d219      	bcs.n	8004b1c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d105      	bne.n	8004afa <HAL_RCC_ClockConfig+0x1be>
 8004aee:	4b28      	ldr	r3, [pc, #160]	@ (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a27      	ldr	r2, [pc, #156]	@ (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004af4:	f043 0304 	orr.w	r3, r3, #4
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4b25      	ldr	r3, [pc, #148]	@ (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	4923      	ldr	r1, [pc, #140]	@ (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	4b21      	ldr	r3, [pc, #132]	@ (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e034      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b28:	4b1a      	ldr	r3, [pc, #104]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4917      	ldr	r1, [pc, #92]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b46:	4b13      	ldr	r3, [pc, #76]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	490f      	ldr	r1, [pc, #60]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b5a:	f000 f823 	bl	8004ba4 <HAL_RCC_GetSysClockFreq>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	490b      	ldr	r1, [pc, #44]	@ (8004b98 <HAL_RCC_ClockConfig+0x25c>)
 8004b6c:	5ccb      	ldrb	r3, [r1, r3]
 8004b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b72:	4a0a      	ldr	r2, [pc, #40]	@ (8004b9c <HAL_RCC_ClockConfig+0x260>)
 8004b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b76:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fe f804 	bl	8002b88 <HAL_InitTick>
 8004b80:	4603      	mov	r3, r0
 8004b82:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b84:	7afb      	ldrb	r3, [r7, #11]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40023c00 	.word	0x40023c00
 8004b94:	40023800 	.word	0x40023800
 8004b98:	0800c218 	.word	0x0800c218
 8004b9c:	20000014 	.word	0x20000014
 8004ba0:	20000018 	.word	0x20000018

08004ba4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba8:	b092      	sub	sp, #72	@ 0x48
 8004baa:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004bac:	4b79      	ldr	r3, [pc, #484]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bb4:	f003 030c 	and.w	r3, r3, #12
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	d00d      	beq.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bbc:	2b0c      	cmp	r3, #12
 8004bbe:	f200 80d5 	bhi.w	8004d6c <HAL_RCC_GetSysClockFreq+0x1c8>
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d002      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x28>
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x2e>
 8004bca:	e0cf      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bcc:	4b72      	ldr	r3, [pc, #456]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004bce:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004bd0:	e0da      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bd2:	4b72      	ldr	r3, [pc, #456]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004bd4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004bd6:	e0d7      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bda:	0c9b      	lsrs	r3, r3, #18
 8004bdc:	f003 020f 	and.w	r2, r3, #15
 8004be0:	4b6f      	ldr	r3, [pc, #444]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004be2:	5c9b      	ldrb	r3, [r3, r2]
 8004be4:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be8:	0d9b      	lsrs	r3, r3, #22
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	3301      	adds	r3, #1
 8004bf0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bf2:	4b68      	ldr	r3, [pc, #416]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d05d      	beq.n	8004cba <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c00:	2200      	movs	r2, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	4611      	mov	r1, r2
 8004c06:	4604      	mov	r4, r0
 8004c08:	460d      	mov	r5, r1
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	462b      	mov	r3, r5
 8004c0e:	f04f 0000 	mov.w	r0, #0
 8004c12:	f04f 0100 	mov.w	r1, #0
 8004c16:	0159      	lsls	r1, r3, #5
 8004c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c1c:	0150      	lsls	r0, r2, #5
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4621      	mov	r1, r4
 8004c24:	1a51      	subs	r1, r2, r1
 8004c26:	6139      	str	r1, [r7, #16]
 8004c28:	4629      	mov	r1, r5
 8004c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	018b      	lsls	r3, r1, #6
 8004c40:	4651      	mov	r1, sl
 8004c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c46:	4651      	mov	r1, sl
 8004c48:	018a      	lsls	r2, r1, #6
 8004c4a:	46d4      	mov	ip, sl
 8004c4c:	ebb2 080c 	subs.w	r8, r2, ip
 8004c50:	4659      	mov	r1, fp
 8004c52:	eb63 0901 	sbc.w	r9, r3, r1
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6a:	4690      	mov	r8, r2
 8004c6c:	4699      	mov	r9, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	eb18 0303 	adds.w	r3, r8, r3
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	462b      	mov	r3, r5
 8004c78:	eb49 0303 	adc.w	r3, r9, r3
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	024b      	lsls	r3, r1, #9
 8004c8e:	4620      	mov	r0, r4
 8004c90:	4629      	mov	r1, r5
 8004c92:	4604      	mov	r4, r0
 8004c94:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004c98:	4601      	mov	r1, r0
 8004c9a:	024a      	lsls	r2, r1, #9
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ca8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cac:	f7fc fa6e 	bl	800118c <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cb8:	e055      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	623b      	str	r3, [r7, #32]
 8004cc0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cc2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	464b      	mov	r3, r9
 8004cca:	f04f 0000 	mov.w	r0, #0
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	0159      	lsls	r1, r3, #5
 8004cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd8:	0150      	lsls	r0, r2, #5
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	46c4      	mov	ip, r8
 8004ce0:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	468c      	mov	ip, r1
 8004cea:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cfa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cfe:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d02:	ebb2 040a 	subs.w	r4, r2, sl
 8004d06:	eb63 050b 	sbc.w	r5, r3, fp
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	00eb      	lsls	r3, r5, #3
 8004d14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d18:	00e2      	lsls	r2, r4, #3
 8004d1a:	4614      	mov	r4, r2
 8004d1c:	461d      	mov	r5, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	18e3      	adds	r3, r4, r3
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	460b      	mov	r3, r1
 8004d26:	eb45 0303 	adc.w	r3, r5, r3
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d38:	4629      	mov	r1, r5
 8004d3a:	028b      	lsls	r3, r1, #10
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	4629      	mov	r1, r5
 8004d40:	4604      	mov	r4, r0
 8004d42:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004d46:	4601      	mov	r1, r0
 8004d48:	028a      	lsls	r2, r1, #10
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d50:	2200      	movs	r2, #0
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	61fa      	str	r2, [r7, #28]
 8004d56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d5a:	f7fc fa17 	bl	800118c <__aeabi_uldivmod>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4613      	mov	r3, r2
 8004d64:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8004d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d68:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004d6a:	e00d      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004d6c:	4b09      	ldr	r3, [pc, #36]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	0b5b      	lsrs	r3, r3, #13
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004d86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3748      	adds	r7, #72	@ 0x48
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	00f42400 	.word	0x00f42400
 8004d9c:	007a1200 	.word	0x007a1200
 8004da0:	0800c20c 	.word	0x0800c20c

08004da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da8:	4b02      	ldr	r3, [pc, #8]	@ (8004db4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004daa:	681b      	ldr	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr
 8004db4:	20000014 	.word	0x20000014

08004db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dbc:	f7ff fff2 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	4903      	ldr	r1, [pc, #12]	@ (8004ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dce:	5ccb      	ldrb	r3, [r1, r3]
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	0800c228 	.word	0x0800c228

08004de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004de4:	f7ff ffde 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004de8:	4602      	mov	r2, r0
 8004dea:	4b05      	ldr	r3, [pc, #20]	@ (8004e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	0adb      	lsrs	r3, r3, #11
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	4903      	ldr	r1, [pc, #12]	@ (8004e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004df6:	5ccb      	ldrb	r3, [r1, r3]
 8004df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40023800 	.word	0x40023800
 8004e04:	0800c228 	.word	0x0800c228

08004e08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e10:	2300      	movs	r3, #0
 8004e12:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004e14:	4b29      	ldr	r3, [pc, #164]	@ (8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d12c      	bne.n	8004e7a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e20:	4b26      	ldr	r3, [pc, #152]	@ (8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004e2c:	4b24      	ldr	r3, [pc, #144]	@ (8004ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	e016      	b.n	8004e66 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e38:	4b20      	ldr	r3, [pc, #128]	@ (8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e42:	6253      	str	r3, [r2, #36]	@ 0x24
 8004e44:	4b1d      	ldr	r3, [pc, #116]	@ (8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004e50:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004e58:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e5a:	4b18      	ldr	r3, [pc, #96]	@ (8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	4a17      	ldr	r2, [pc, #92]	@ (8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e64:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004e6c:	d105      	bne.n	8004e7a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e74:	d101      	bne.n	8004e7a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004e76:	2301      	movs	r3, #1
 8004e78:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d105      	bne.n	8004e8c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004e80:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a0f      	ldr	r2, [pc, #60]	@ (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e86:	f043 0304 	orr.w	r3, r3, #4
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f023 0201 	bic.w	r2, r3, #1
 8004e94:	490b      	ldr	r1, [pc, #44]	@ (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d001      	beq.n	8004eae <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	40023c00 	.word	0x40023c00

08004ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e07b      	b.n	8004fd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d108      	bne.n	8004ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eea:	d009      	beq.n	8004f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	61da      	str	r2, [r3, #28]
 8004ef2:	e005      	b.n	8004f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fd fbae 	bl	800267c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f84:	ea42 0103 	orr.w	r1, r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	f003 0104 	and.w	r1, r3, #4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	f003 0210 	and.w	r2, r3, #16
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b088      	sub	sp, #32
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	603b      	str	r3, [r7, #0]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fea:	f7fd fe19 	bl	8002c20 <HAL_GetTick>
 8004fee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d001      	beq.n	8005004 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005000:	2302      	movs	r3, #2
 8005002:	e12a      	b.n	800525a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_SPI_Transmit+0x36>
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e122      	b.n	800525a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_SPI_Transmit+0x48>
 800501e:	2302      	movs	r3, #2
 8005020:	e11b      	b.n	800525a <HAL_SPI_Transmit+0x280>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2203      	movs	r2, #3
 800502e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	88fa      	ldrh	r2, [r7, #6]
 8005042:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005070:	d10f      	bne.n	8005092 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005080:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005090:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509c:	2b40      	cmp	r3, #64	@ 0x40
 800509e:	d007      	beq.n	80050b0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050b8:	d152      	bne.n	8005160 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <HAL_SPI_Transmit+0xee>
 80050c2:	8b7b      	ldrh	r3, [r7, #26]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d145      	bne.n	8005154 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050cc:	881a      	ldrh	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d8:	1c9a      	adds	r2, r3, #2
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050ec:	e032      	b.n	8005154 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d112      	bne.n	8005122 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005100:	881a      	ldrh	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510c:	1c9a      	adds	r2, r3, #2
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005120:	e018      	b.n	8005154 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005122:	f7fd fd7d 	bl	8002c20 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d803      	bhi.n	800513a <HAL_SPI_Transmit+0x160>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d102      	bne.n	8005140 <HAL_SPI_Transmit+0x166>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e082      	b.n	800525a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1c7      	bne.n	80050ee <HAL_SPI_Transmit+0x114>
 800515e:	e053      	b.n	8005208 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <HAL_SPI_Transmit+0x194>
 8005168:	8b7b      	ldrh	r3, [r7, #26]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d147      	bne.n	80051fe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	330c      	adds	r3, #12
 8005178:	7812      	ldrb	r2, [r2, #0]
 800517a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005194:	e033      	b.n	80051fe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d113      	bne.n	80051cc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	330c      	adds	r3, #12
 80051ae:	7812      	ldrb	r2, [r2, #0]
 80051b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051ca:	e018      	b.n	80051fe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051cc:	f7fd fd28 	bl	8002c20 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d803      	bhi.n	80051e4 <HAL_SPI_Transmit+0x20a>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d102      	bne.n	80051ea <HAL_SPI_Transmit+0x210>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e02d      	b.n	800525a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1c6      	bne.n	8005196 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f9cf 	bl	80055b0 <SPI_EndRxTxTransaction>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005258:	2300      	movs	r3, #0
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3720      	adds	r7, #32
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	099b      	lsrs	r3, r3, #6
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10f      	bne.n	80052a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	099b      	lsrs	r3, r3, #6
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d004      	beq.n	80052a8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	4798      	blx	r3
    return;
 80052a6:	e0d7      	b.n	8005458 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <HAL_SPI_IRQHandler+0x66>
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	09db      	lsrs	r3, r3, #7
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	4798      	blx	r3
    return;
 80052c8:	e0c6      	b.n	8005458 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10c      	bne.n	80052f0 <HAL_SPI_IRQHandler+0x8c>
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	099b      	lsrs	r3, r3, #6
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	0a1b      	lsrs	r3, r3, #8
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80b4 	beq.w	8005458 <HAL_SPI_IRQHandler+0x1f4>
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80ad 	beq.w	8005458 <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	099b      	lsrs	r3, r3, #6
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d023      	beq.n	8005352 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b03      	cmp	r3, #3
 8005314:	d011      	beq.n	800533a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800531a:	f043 0204 	orr.w	r2, r3, #4
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	e00b      	b.n	8005352 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	693b      	ldr	r3, [r7, #16]
        return;
 8005350:	e082      	b.n	8005458 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d014      	beq.n	8005388 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	0a1b      	lsrs	r3, r3, #8
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00c      	beq.n	80053ae <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005398:	f043 0208 	orr.w	r2, r3, #8
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80053a0:	2300      	movs	r3, #0
 80053a2:	60bb      	str	r3, [r7, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	68bb      	ldr	r3, [r7, #8]
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d04f      	beq.n	8005456 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053c4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <HAL_SPI_IRQHandler+0x17e>
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d034      	beq.n	800544c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0203 	bic.w	r2, r2, #3
 80053f0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d011      	beq.n	800541e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053fe:	4a18      	ldr	r2, [pc, #96]	@ (8005460 <HAL_SPI_IRQHandler+0x1fc>)
 8005400:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005406:	4618      	mov	r0, r3
 8005408:	f7fd fd43 	bl	8002e92 <HAL_DMA_Abort_IT>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005416:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005422:	2b00      	cmp	r3, #0
 8005424:	d016      	beq.n	8005454 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800542a:	4a0d      	ldr	r2, [pc, #52]	@ (8005460 <HAL_SPI_IRQHandler+0x1fc>)
 800542c:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005432:	4618      	mov	r0, r3
 8005434:	f7fd fd2d 	bl	8002e92 <HAL_DMA_Abort_IT>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005442:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800544a:	e003      	b.n	8005454 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f809 	bl	8005464 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005452:	e000      	b.n	8005456 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005454:	bf00      	nop
    return;
 8005456:	bf00      	nop
  }
}
 8005458:	3720      	adds	r7, #32
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	08005477 	.word	0x08005477

08005464 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr

08005476 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f7ff ffe7 	bl	8005464 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005496:	bf00      	nop
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054b0:	f7fd fbb6 	bl	8002c20 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	1a9b      	subs	r3, r3, r2
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	4413      	add	r3, r2
 80054be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054c0:	f7fd fbae 	bl	8002c20 <HAL_GetTick>
 80054c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054c6:	4b39      	ldr	r3, [pc, #228]	@ (80055ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	015b      	lsls	r3, r3, #5
 80054cc:	0d1b      	lsrs	r3, r3, #20
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054d6:	e054      	b.n	8005582 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d050      	beq.n	8005582 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054e0:	f7fd fb9e 	bl	8002c20 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d902      	bls.n	80054f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d13d      	bne.n	8005572 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005504:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800550e:	d111      	bne.n	8005534 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005518:	d004      	beq.n	8005524 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005522:	d107      	bne.n	8005534 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005532:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800553c:	d10f      	bne.n	800555e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800555c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e017      	b.n	80055a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	3b01      	subs	r3, #1
 8005580:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4013      	ands	r3, r2
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	429a      	cmp	r2, r3
 8005590:	bf0c      	ite	eq
 8005592:	2301      	moveq	r3, #1
 8005594:	2300      	movne	r3, #0
 8005596:	b2db      	uxtb	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	429a      	cmp	r2, r3
 800559e:	d19b      	bne.n	80054d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3720      	adds	r7, #32
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20000014 	.word	0x20000014

080055b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af02      	add	r7, sp, #8
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2201      	movs	r2, #1
 80055c4:	2102      	movs	r1, #2
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7ff ff6a 	bl	80054a0 <SPI_WaitFlagStateUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d6:	f043 0220 	orr.w	r2, r3, #32
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e032      	b.n	8005648 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005650 <SPI_EndRxTxTransaction+0xa0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005654 <SPI_EndRxTxTransaction+0xa4>)
 80055e8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ec:	0d5b      	lsrs	r3, r3, #21
 80055ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80055f2:	fb02 f303 	mul.w	r3, r2, r3
 80055f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005600:	d112      	bne.n	8005628 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2200      	movs	r2, #0
 800560a:	2180      	movs	r1, #128	@ 0x80
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7ff ff47 	bl	80054a0 <SPI_WaitFlagStateUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d016      	beq.n	8005646 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561c:	f043 0220 	orr.w	r2, r3, #32
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e00f      	b.n	8005648 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	3b01      	subs	r3, #1
 8005632:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800563e:	2b80      	cmp	r3, #128	@ 0x80
 8005640:	d0f2      	beq.n	8005628 <SPI_EndRxTxTransaction+0x78>
 8005642:	e000      	b.n	8005646 <SPI_EndRxTxTransaction+0x96>
        break;
 8005644:	bf00      	nop
  }

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	20000014 	.word	0x20000014
 8005654:	165e9f81 	.word	0x165e9f81

08005658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e031      	b.n	80056ce <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fd f848 	bl	8002714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f000 fcc4 	bl	8006024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d001      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e03a      	b.n	8005766 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005710:	d00e      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x58>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a16      	ldr	r2, [pc, #88]	@ (8005770 <HAL_TIM_Base_Start_IT+0x98>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d009      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x58>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a14      	ldr	r2, [pc, #80]	@ (8005774 <HAL_TIM_Base_Start_IT+0x9c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x58>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a13      	ldr	r2, [pc, #76]	@ (8005778 <HAL_TIM_Base_Start_IT+0xa0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d111      	bne.n	8005754 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b06      	cmp	r3, #6
 8005740:	d010      	beq.n	8005764 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0201 	orr.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005752:	e007      	b.n	8005764 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800
 8005778:	40010800 	.word	0x40010800

0800577c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0201 	bic.w	r2, r2, #1
 8005792:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6a1a      	ldr	r2, [r3, #32]
 800579a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800579e:	4013      	ands	r3, r2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d107      	bne.n	80057b4 <HAL_TIM_Base_Stop_IT+0x38>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0201 	bic.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Return function status */
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e031      	b.n	800583e <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f829 	bl	8005846 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f000 fc0c 	bl	8006024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr

08005858 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <HAL_TIM_PWM_Start_IT+0x28>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	bf14      	ite	ne
 8005878:	2301      	movne	r3, #1
 800587a:	2300      	moveq	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	e022      	b.n	80058c6 <HAL_TIM_PWM_Start_IT+0x6e>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b04      	cmp	r3, #4
 8005884:	d109      	bne.n	800589a <HAL_TIM_PWM_Start_IT+0x42>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b01      	cmp	r3, #1
 8005890:	bf14      	ite	ne
 8005892:	2301      	movne	r3, #1
 8005894:	2300      	moveq	r3, #0
 8005896:	b2db      	uxtb	r3, r3
 8005898:	e015      	b.n	80058c6 <HAL_TIM_PWM_Start_IT+0x6e>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d109      	bne.n	80058b4 <HAL_TIM_PWM_Start_IT+0x5c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	bf14      	ite	ne
 80058ac:	2301      	movne	r3, #1
 80058ae:	2300      	moveq	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	e008      	b.n	80058c6 <HAL_TIM_PWM_Start_IT+0x6e>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e09c      	b.n	8005a08 <HAL_TIM_PWM_Start_IT+0x1b0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <HAL_TIM_PWM_Start_IT+0x86>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80058dc:	e013      	b.n	8005906 <HAL_TIM_PWM_Start_IT+0xae>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_PWM_Start_IT+0x96>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80058ec:	e00b      	b.n	8005906 <HAL_TIM_PWM_Start_IT+0xae>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_PWM_Start_IT+0xa6>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80058fc:	e003      	b.n	8005906 <HAL_TIM_PWM_Start_IT+0xae>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b0c      	cmp	r3, #12
 800590a:	d841      	bhi.n	8005990 <HAL_TIM_PWM_Start_IT+0x138>
 800590c:	a201      	add	r2, pc, #4	@ (adr r2, 8005914 <HAL_TIM_PWM_Start_IT+0xbc>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005949 	.word	0x08005949
 8005918:	08005991 	.word	0x08005991
 800591c:	08005991 	.word	0x08005991
 8005920:	08005991 	.word	0x08005991
 8005924:	0800595b 	.word	0x0800595b
 8005928:	08005991 	.word	0x08005991
 800592c:	08005991 	.word	0x08005991
 8005930:	08005991 	.word	0x08005991
 8005934:	0800596d 	.word	0x0800596d
 8005938:	08005991 	.word	0x08005991
 800593c:	08005991 	.word	0x08005991
 8005940:	08005991 	.word	0x08005991
 8005944:	0800597f 	.word	0x0800597f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0202 	orr.w	r2, r2, #2
 8005956:	60da      	str	r2, [r3, #12]
      break;
 8005958:	e01d      	b.n	8005996 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0204 	orr.w	r2, r2, #4
 8005968:	60da      	str	r2, [r3, #12]
      break;
 800596a:	e014      	b.n	8005996 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0208 	orr.w	r2, r2, #8
 800597a:	60da      	str	r2, [r3, #12]
      break;
 800597c:	e00b      	b.n	8005996 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0210 	orr.w	r2, r2, #16
 800598c:	60da      	str	r2, [r3, #12]
      break;
 800598e:	e002      	b.n	8005996 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
      break;
 8005994:	bf00      	nop
  }

  if (status == HAL_OK)
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d134      	bne.n	8005a06 <HAL_TIM_PWM_Start_IT+0x1ae>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2201      	movs	r2, #1
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fd3e 	bl	8006426 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b2:	d00e      	beq.n	80059d2 <HAL_TIM_PWM_Start_IT+0x17a>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a15      	ldr	r2, [pc, #84]	@ (8005a10 <HAL_TIM_PWM_Start_IT+0x1b8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d009      	beq.n	80059d2 <HAL_TIM_PWM_Start_IT+0x17a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a14      	ldr	r2, [pc, #80]	@ (8005a14 <HAL_TIM_PWM_Start_IT+0x1bc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d004      	beq.n	80059d2 <HAL_TIM_PWM_Start_IT+0x17a>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a12      	ldr	r2, [pc, #72]	@ (8005a18 <HAL_TIM_PWM_Start_IT+0x1c0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d111      	bne.n	80059f6 <HAL_TIM_PWM_Start_IT+0x19e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b06      	cmp	r3, #6
 80059e2:	d010      	beq.n	8005a06 <HAL_TIM_PWM_Start_IT+0x1ae>
      {
        __HAL_TIM_ENABLE(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f4:	e007      	b.n	8005a06 <HAL_TIM_PWM_Start_IT+0x1ae>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0201 	orr.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40000400 	.word	0x40000400
 8005a14:	40000800 	.word	0x40000800
 8005a18:	40010800 	.word	0x40010800

08005a1c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b0c      	cmp	r3, #12
 8005a2e:	d841      	bhi.n	8005ab4 <HAL_TIM_PWM_Stop_IT+0x98>
 8005a30:	a201      	add	r2, pc, #4	@ (adr r2, 8005a38 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a36:	bf00      	nop
 8005a38:	08005a6d 	.word	0x08005a6d
 8005a3c:	08005ab5 	.word	0x08005ab5
 8005a40:	08005ab5 	.word	0x08005ab5
 8005a44:	08005ab5 	.word	0x08005ab5
 8005a48:	08005a7f 	.word	0x08005a7f
 8005a4c:	08005ab5 	.word	0x08005ab5
 8005a50:	08005ab5 	.word	0x08005ab5
 8005a54:	08005ab5 	.word	0x08005ab5
 8005a58:	08005a91 	.word	0x08005a91
 8005a5c:	08005ab5 	.word	0x08005ab5
 8005a60:	08005ab5 	.word	0x08005ab5
 8005a64:	08005ab5 	.word	0x08005ab5
 8005a68:	08005aa3 	.word	0x08005aa3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0202 	bic.w	r2, r2, #2
 8005a7a:	60da      	str	r2, [r3, #12]
      break;
 8005a7c:	e01d      	b.n	8005aba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0204 	bic.w	r2, r2, #4
 8005a8c:	60da      	str	r2, [r3, #12]
      break;
 8005a8e:	e014      	b.n	8005aba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0208 	bic.w	r2, r2, #8
 8005a9e:	60da      	str	r2, [r3, #12]
      break;
 8005aa0:	e00b      	b.n	8005aba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0210 	bic.w	r2, r2, #16
 8005ab0:	60da      	str	r2, [r3, #12]
      break;
 8005ab2:	e002      	b.n	8005aba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d132      	bne.n	8005b26 <HAL_TIM_PWM_Stop_IT+0x10a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fcac 	bl	8006426 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6a1a      	ldr	r2, [r3, #32]
 8005ad4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d107      	bne.n	8005aee <HAL_TIM_PWM_Stop_IT+0xd2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0201 	bic.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d104      	bne.n	8005afe <HAL_TIM_PWM_Stop_IT+0xe2>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8005afc:	e013      	b.n	8005b26 <HAL_TIM_PWM_Stop_IT+0x10a>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d104      	bne.n	8005b0e <HAL_TIM_PWM_Stop_IT+0xf2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8005b0c:	e00b      	b.n	8005b26 <HAL_TIM_PWM_Stop_IT+0x10a>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d104      	bne.n	8005b1e <HAL_TIM_PWM_Stop_IT+0x102>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005b1c:	e003      	b.n	8005b26 <HAL_TIM_PWM_Stop_IT+0x10a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  /* Return function status */
  return status;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d020      	beq.n	8005b94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01b      	beq.n	8005b94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0202 	mvn.w	r2, #2
 8005b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa36 	bl	8005fec <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa29 	bl	8005fda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fa38 	bl	8005ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d020      	beq.n	8005be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01b      	beq.n	8005be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0204 	mvn.w	r2, #4
 8005bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fa10 	bl	8005fec <HAL_TIM_IC_CaptureCallback>
 8005bcc:	e005      	b.n	8005bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa03 	bl	8005fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fa12 	bl	8005ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d020      	beq.n	8005c2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01b      	beq.n	8005c2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0208 	mvn.w	r2, #8
 8005bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2204      	movs	r2, #4
 8005c02:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f9ea 	bl	8005fec <HAL_TIM_IC_CaptureCallback>
 8005c18:	e005      	b.n	8005c26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f9dd 	bl	8005fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f9ec 	bl	8005ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 0310 	and.w	r3, r3, #16
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d020      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01b      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0210 	mvn.w	r2, #16
 8005c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f9c4 	bl	8005fec <HAL_TIM_IC_CaptureCallback>
 8005c64:	e005      	b.n	8005c72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f9b7 	bl	8005fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f9c6 	bl	8005ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00c      	beq.n	8005c9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0201 	mvn.w	r2, #1
 8005c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fc fe5e 	bl	8002958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00c      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f9a8 	bl	8006010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e0ae      	b.n	8005e44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b0c      	cmp	r3, #12
 8005cf2:	f200 809f 	bhi.w	8005e34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005d31 	.word	0x08005d31
 8005d00:	08005e35 	.word	0x08005e35
 8005d04:	08005e35 	.word	0x08005e35
 8005d08:	08005e35 	.word	0x08005e35
 8005d0c:	08005d71 	.word	0x08005d71
 8005d10:	08005e35 	.word	0x08005e35
 8005d14:	08005e35 	.word	0x08005e35
 8005d18:	08005e35 	.word	0x08005e35
 8005d1c:	08005db3 	.word	0x08005db3
 8005d20:	08005e35 	.word	0x08005e35
 8005d24:	08005e35 	.word	0x08005e35
 8005d28:	08005e35 	.word	0x08005e35
 8005d2c:	08005df3 	.word	0x08005df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 f9ea 	bl	8006110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0208 	orr.w	r2, r2, #8
 8005d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699a      	ldr	r2, [r3, #24]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0204 	bic.w	r2, r2, #4
 8005d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6999      	ldr	r1, [r3, #24]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	619a      	str	r2, [r3, #24]
      break;
 8005d6e:	e064      	b.n	8005e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fa06 	bl	8006188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6999      	ldr	r1, [r3, #24]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	021a      	lsls	r2, r3, #8
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	619a      	str	r2, [r3, #24]
      break;
 8005db0:	e043      	b.n	8005e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fa23 	bl	8006204 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0208 	orr.w	r2, r2, #8
 8005dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69da      	ldr	r2, [r3, #28]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0204 	bic.w	r2, r2, #4
 8005ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69d9      	ldr	r1, [r3, #28]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	61da      	str	r2, [r3, #28]
      break;
 8005df0:	e023      	b.n	8005e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fa40 	bl	800627e <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69d9      	ldr	r1, [r3, #28]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	021a      	lsls	r2, r3, #8
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	61da      	str	r2, [r3, #28]
      break;
 8005e32:	e002      	b.n	8005e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
      break;
 8005e38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_TIM_ConfigClockSource+0x1c>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e0b4      	b.n	8005fd2 <HAL_TIM_ConfigClockSource+0x186>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea0:	d03e      	beq.n	8005f20 <HAL_TIM_ConfigClockSource+0xd4>
 8005ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea6:	f200 8087 	bhi.w	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eae:	f000 8086 	beq.w	8005fbe <HAL_TIM_ConfigClockSource+0x172>
 8005eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb6:	d87f      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb8:	2b70      	cmp	r3, #112	@ 0x70
 8005eba:	d01a      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8005ebc:	2b70      	cmp	r3, #112	@ 0x70
 8005ebe:	d87b      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec0:	2b60      	cmp	r3, #96	@ 0x60
 8005ec2:	d050      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0x11a>
 8005ec4:	2b60      	cmp	r3, #96	@ 0x60
 8005ec6:	d877      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec8:	2b50      	cmp	r3, #80	@ 0x50
 8005eca:	d03c      	beq.n	8005f46 <HAL_TIM_ConfigClockSource+0xfa>
 8005ecc:	2b50      	cmp	r3, #80	@ 0x50
 8005ece:	d873      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed0:	2b40      	cmp	r3, #64	@ 0x40
 8005ed2:	d058      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0x13a>
 8005ed4:	2b40      	cmp	r3, #64	@ 0x40
 8005ed6:	d86f      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed8:	2b30      	cmp	r3, #48	@ 0x30
 8005eda:	d064      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8005edc:	2b30      	cmp	r3, #48	@ 0x30
 8005ede:	d86b      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	d060      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d867      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d05c      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8005eec:	2b10      	cmp	r3, #16
 8005eee:	d05a      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8005ef0:	e062      	b.n	8005fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f02:	f000 fa71 	bl	80063e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	609a      	str	r2, [r3, #8]
      break;
 8005f1e:	e04f      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f30:	f000 fa5a 	bl	80063e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f42:	609a      	str	r2, [r3, #8]
      break;
 8005f44:	e03c      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f52:	461a      	mov	r2, r3
 8005f54:	f000 f9d1 	bl	80062fa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2150      	movs	r1, #80	@ 0x50
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fa28 	bl	80063b4 <TIM_ITRx_SetConfig>
      break;
 8005f64:	e02c      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f72:	461a      	mov	r2, r3
 8005f74:	f000 f9ef 	bl	8006356 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2160      	movs	r1, #96	@ 0x60
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fa18 	bl	80063b4 <TIM_ITRx_SetConfig>
      break;
 8005f84:	e01c      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f92:	461a      	mov	r2, r3
 8005f94:	f000 f9b1 	bl	80062fa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2140      	movs	r1, #64	@ 0x40
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fa08 	bl	80063b4 <TIM_ITRx_SetConfig>
      break;
 8005fa4:	e00c      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	f000 f9ff 	bl	80063b4 <TIM_ITRx_SetConfig>
      break;
 8005fb6:	e003      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]
      break;
 8005fbc:	e000      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr

08005fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr
	...

08006024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800603a:	d00f      	beq.n	800605c <TIM_Base_SetConfig+0x38>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a2e      	ldr	r2, [pc, #184]	@ (80060f8 <TIM_Base_SetConfig+0xd4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00b      	beq.n	800605c <TIM_Base_SetConfig+0x38>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a2d      	ldr	r2, [pc, #180]	@ (80060fc <TIM_Base_SetConfig+0xd8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d007      	beq.n	800605c <TIM_Base_SetConfig+0x38>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a2c      	ldr	r2, [pc, #176]	@ (8006100 <TIM_Base_SetConfig+0xdc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d003      	beq.n	800605c <TIM_Base_SetConfig+0x38>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a2b      	ldr	r2, [pc, #172]	@ (8006104 <TIM_Base_SetConfig+0xe0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d108      	bne.n	800606e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006074:	d017      	beq.n	80060a6 <TIM_Base_SetConfig+0x82>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a1f      	ldr	r2, [pc, #124]	@ (80060f8 <TIM_Base_SetConfig+0xd4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <TIM_Base_SetConfig+0x82>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a1e      	ldr	r2, [pc, #120]	@ (80060fc <TIM_Base_SetConfig+0xd8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00f      	beq.n	80060a6 <TIM_Base_SetConfig+0x82>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a1d      	ldr	r2, [pc, #116]	@ (8006100 <TIM_Base_SetConfig+0xdc>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00b      	beq.n	80060a6 <TIM_Base_SetConfig+0x82>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a1c      	ldr	r2, [pc, #112]	@ (8006104 <TIM_Base_SetConfig+0xe0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d007      	beq.n	80060a6 <TIM_Base_SetConfig+0x82>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1b      	ldr	r2, [pc, #108]	@ (8006108 <TIM_Base_SetConfig+0xe4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_Base_SetConfig+0x82>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a1a      	ldr	r2, [pc, #104]	@ (800610c <TIM_Base_SetConfig+0xe8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d108      	bne.n	80060b8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f043 0204 	orr.w	r2, r3, #4
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	601a      	str	r2, [r3, #0]
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr
 80060f8:	40000400 	.word	0x40000400
 80060fc:	40000800 	.word	0x40000800
 8006100:	40000c00 	.word	0x40000c00
 8006104:	40010800 	.word	0x40010800
 8006108:	40010c00 	.word	0x40010c00
 800610c:	40011000 	.word	0x40011000

08006110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f023 0201 	bic.w	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0303 	bic.w	r3, r3, #3
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f023 0302 	bic.w	r3, r3, #2
 8006158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	bc80      	pop	{r7}
 8006186:	4770      	bx	lr

08006188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f023 0210 	bic.w	r2, r3, #16
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	021b      	lsls	r3, r3, #8
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f023 0320 	bic.w	r3, r3, #32
 80061d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	621a      	str	r2, [r3, #32]
}
 80061fa:	bf00      	nop
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0303 	bic.w	r3, r3, #3
 800623a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800624c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	621a      	str	r2, [r3, #32]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr

0800627e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800627e:	b480      	push	{r7}
 8006280:	b087      	sub	sp, #28
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	031b      	lsls	r3, r3, #12
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	621a      	str	r2, [r3, #32]
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr

080062fa <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b087      	sub	sp, #28
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f023 0201 	bic.w	r2, r3, #1
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006324:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f023 030a 	bic.w	r3, r3, #10
 8006336:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	621a      	str	r2, [r3, #32]
}
 800634c:	bf00      	nop
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr

08006356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006356:	b480      	push	{r7}
 8006358:	b087      	sub	sp, #28
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	f023 0210 	bic.w	r2, r3, #16
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	031b      	lsls	r3, r3, #12
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006392:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr

080063b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f043 0307 	orr.w	r3, r3, #7
 80063d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	609a      	str	r2, [r3, #8]
}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr

080063e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	021a      	lsls	r2, r3, #8
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	431a      	orrs	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4313      	orrs	r3, r2
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	609a      	str	r2, [r3, #8]
}
 800641c:	bf00      	nop
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr

08006426 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006426:	b480      	push	{r7}
 8006428:	b087      	sub	sp, #28
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f003 031f 	and.w	r3, r3, #31
 8006438:	2201      	movs	r2, #1
 800643a:	fa02 f303 	lsl.w	r3, r2, r3
 800643e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	43db      	mvns	r3, r3
 8006448:	401a      	ands	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a1a      	ldr	r2, [r3, #32]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	fa01 f303 	lsl.w	r3, r1, r3
 800645e:	431a      	orrs	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	621a      	str	r2, [r3, #32]
}
 8006464:	bf00      	nop
 8006466:	371c      	adds	r7, #28
 8006468:	46bd      	mov	sp, r7
 800646a:	bc80      	pop	{r7}
 800646c:	4770      	bx	lr
	...

08006470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006484:	2302      	movs	r3, #2
 8006486:	e046      	b.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ca:	d00e      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a13      	ldr	r2, [pc, #76]	@ (8006520 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d009      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a12      	ldr	r2, [pc, #72]	@ (8006524 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d004      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a10      	ldr	r2, [pc, #64]	@ (8006528 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d10c      	bne.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr
 8006520:	40000400 	.word	0x40000400
 8006524:	40000800 	.word	0x40000800
 8006528:	40010800 	.word	0x40010800

0800652c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e042      	b.n	80065c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fc f958 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2224      	movs	r2, #36	@ 0x24
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800656e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f971 	bl	8006858 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695a      	ldr	r2, [r3, #20]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08a      	sub	sp, #40	@ 0x28
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	4613      	mov	r3, r2
 80065da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d175      	bne.n	80066d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <HAL_UART_Transmit+0x2c>
 80065f2:	88fb      	ldrh	r3, [r7, #6]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e06e      	b.n	80066da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2221      	movs	r2, #33	@ 0x21
 8006606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800660a:	f7fc fb09 	bl	8002c20 <HAL_GetTick>
 800660e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	88fa      	ldrh	r2, [r7, #6]
 8006614:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	88fa      	ldrh	r2, [r7, #6]
 800661a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006624:	d108      	bne.n	8006638 <HAL_UART_Transmit+0x6c>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	e003      	b.n	8006640 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006640:	e02e      	b.n	80066a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2200      	movs	r2, #0
 800664a:	2180      	movs	r1, #128	@ 0x80
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f848 	bl	80066e2 <UART_WaitOnFlagUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e03a      	b.n	80066da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10b      	bne.n	8006682 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006678:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	3302      	adds	r3, #2
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	e007      	b.n	8006692 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	781a      	ldrb	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	3301      	adds	r3, #1
 8006690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006696:	b29b      	uxth	r3, r3
 8006698:	3b01      	subs	r3, #1
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1cb      	bne.n	8006642 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2200      	movs	r2, #0
 80066b2:	2140      	movs	r1, #64	@ 0x40
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f814 	bl	80066e2 <UART_WaitOnFlagUntilTimeout>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e006      	b.n	80066da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	e000      	b.n	80066da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80066d8:	2302      	movs	r3, #2
  }
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3720      	adds	r7, #32
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b086      	sub	sp, #24
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	603b      	str	r3, [r7, #0]
 80066ee:	4613      	mov	r3, r2
 80066f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f2:	e03b      	b.n	800676c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fa:	d037      	beq.n	800676c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fc:	f7fc fa90 	bl	8002c20 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	6a3a      	ldr	r2, [r7, #32]
 8006708:	429a      	cmp	r2, r3
 800670a:	d302      	bcc.n	8006712 <UART_WaitOnFlagUntilTimeout+0x30>
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e03a      	b.n	800678c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0304 	and.w	r3, r3, #4
 8006720:	2b00      	cmp	r3, #0
 8006722:	d023      	beq.n	800676c <UART_WaitOnFlagUntilTimeout+0x8a>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b80      	cmp	r3, #128	@ 0x80
 8006728:	d020      	beq.n	800676c <UART_WaitOnFlagUntilTimeout+0x8a>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b40      	cmp	r3, #64	@ 0x40
 800672e:	d01d      	beq.n	800676c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	2b08      	cmp	r3, #8
 800673c:	d116      	bne.n	800676c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800673e:	2300      	movs	r3, #0
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f81d 	bl	8006794 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2208      	movs	r2, #8
 800675e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e00f      	b.n	800678c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	4013      	ands	r3, r2
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	429a      	cmp	r2, r3
 800677a:	bf0c      	ite	eq
 800677c:	2301      	moveq	r3, #1
 800677e:	2300      	movne	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	461a      	mov	r2, r3
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	429a      	cmp	r2, r3
 8006788:	d0b4      	beq.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006794:	b480      	push	{r7}
 8006796:	b095      	sub	sp, #84	@ 0x54
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	330c      	adds	r3, #12
 80067ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80067be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e5      	bne.n	800679c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3314      	adds	r3, #20
 80067d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	e853 3f00 	ldrex	r3, [r3]
 80067de:	61fb      	str	r3, [r7, #28]
   return(result);
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f023 0301 	bic.w	r3, r3, #1
 80067e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3314      	adds	r3, #20
 80067ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e5      	bne.n	80067d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006808:	2b01      	cmp	r3, #1
 800680a:	d119      	bne.n	8006840 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	60bb      	str	r3, [r7, #8]
   return(result);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f023 0310 	bic.w	r3, r3, #16
 8006822:	647b      	str	r3, [r7, #68]	@ 0x44
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800682c:	61ba      	str	r2, [r7, #24]
 800682e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6979      	ldr	r1, [r7, #20]
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	613b      	str	r3, [r7, #16]
   return(result);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e5      	bne.n	800680c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800684e:	bf00      	nop
 8006850:	3754      	adds	r7, #84	@ 0x54
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr

08006858 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	431a      	orrs	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	4313      	orrs	r3, r2
 800688c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006898:	f023 030c 	bic.w	r3, r3, #12
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	68b9      	ldr	r1, [r7, #8]
 80068a2:	430b      	orrs	r3, r1
 80068a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699a      	ldr	r2, [r3, #24]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a55      	ldr	r2, [pc, #340]	@ (8006a18 <UART_SetConfig+0x1c0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d103      	bne.n	80068ce <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80068c6:	f7fe fa8b 	bl	8004de0 <HAL_RCC_GetPCLK2Freq>
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	e002      	b.n	80068d4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80068ce:	f7fe fa73 	bl	8004db8 <HAL_RCC_GetPCLK1Freq>
 80068d2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068dc:	d14c      	bne.n	8006978 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	009a      	lsls	r2, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f4:	4a49      	ldr	r2, [pc, #292]	@ (8006a1c <UART_SetConfig+0x1c4>)
 80068f6:	fba2 2303 	umull	r2, r3, r2, r3
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	0119      	lsls	r1, r3, #4
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009a      	lsls	r2, r3, #2
 8006908:	441a      	add	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	fbb2 f2f3 	udiv	r2, r2, r3
 8006914:	4b41      	ldr	r3, [pc, #260]	@ (8006a1c <UART_SetConfig+0x1c4>)
 8006916:	fba3 0302 	umull	r0, r3, r3, r2
 800691a:	095b      	lsrs	r3, r3, #5
 800691c:	2064      	movs	r0, #100	@ 0x64
 800691e:	fb00 f303 	mul.w	r3, r0, r3
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	3332      	adds	r3, #50	@ 0x32
 8006928:	4a3c      	ldr	r2, [pc, #240]	@ (8006a1c <UART_SetConfig+0x1c4>)
 800692a:	fba2 2303 	umull	r2, r3, r2, r3
 800692e:	095b      	lsrs	r3, r3, #5
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006936:	4419      	add	r1, r3
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	009a      	lsls	r2, r3, #2
 8006942:	441a      	add	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	fbb2 f2f3 	udiv	r2, r2, r3
 800694e:	4b33      	ldr	r3, [pc, #204]	@ (8006a1c <UART_SetConfig+0x1c4>)
 8006950:	fba3 0302 	umull	r0, r3, r3, r2
 8006954:	095b      	lsrs	r3, r3, #5
 8006956:	2064      	movs	r0, #100	@ 0x64
 8006958:	fb00 f303 	mul.w	r3, r0, r3
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	3332      	adds	r3, #50	@ 0x32
 8006962:	4a2e      	ldr	r2, [pc, #184]	@ (8006a1c <UART_SetConfig+0x1c4>)
 8006964:	fba2 2303 	umull	r2, r3, r2, r3
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	f003 0207 	and.w	r2, r3, #7
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	440a      	add	r2, r1
 8006974:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006976:	e04a      	b.n	8006a0e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4613      	mov	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	009a      	lsls	r2, r3, #2
 8006982:	441a      	add	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	fbb2 f3f3 	udiv	r3, r2, r3
 800698e:	4a23      	ldr	r2, [pc, #140]	@ (8006a1c <UART_SetConfig+0x1c4>)
 8006990:	fba2 2303 	umull	r2, r3, r2, r3
 8006994:	095b      	lsrs	r3, r3, #5
 8006996:	0119      	lsls	r1, r3, #4
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	009a      	lsls	r2, r3, #2
 80069a2:	441a      	add	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80069ae:	4b1b      	ldr	r3, [pc, #108]	@ (8006a1c <UART_SetConfig+0x1c4>)
 80069b0:	fba3 0302 	umull	r0, r3, r3, r2
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	2064      	movs	r0, #100	@ 0x64
 80069b8:	fb00 f303 	mul.w	r3, r0, r3
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	3332      	adds	r3, #50	@ 0x32
 80069c2:	4a16      	ldr	r2, [pc, #88]	@ (8006a1c <UART_SetConfig+0x1c4>)
 80069c4:	fba2 2303 	umull	r2, r3, r2, r3
 80069c8:	095b      	lsrs	r3, r3, #5
 80069ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069ce:	4419      	add	r1, r3
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	009a      	lsls	r2, r3, #2
 80069da:	441a      	add	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80069e6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a1c <UART_SetConfig+0x1c4>)
 80069e8:	fba3 0302 	umull	r0, r3, r3, r2
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	2064      	movs	r0, #100	@ 0x64
 80069f0:	fb00 f303 	mul.w	r3, r0, r3
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	3332      	adds	r3, #50	@ 0x32
 80069fa:	4a08      	ldr	r2, [pc, #32]	@ (8006a1c <UART_SetConfig+0x1c4>)
 80069fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006a00:	095b      	lsrs	r3, r3, #5
 8006a02:	f003 020f 	and.w	r2, r3, #15
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	609a      	str	r2, [r3, #8]
}
 8006a0e:	bf00      	nop
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40013800 	.word	0x40013800
 8006a1c:	51eb851f 	.word	0x51eb851f

08006a20 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8006a20:	b590      	push	{r4, r7, lr}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	607a      	str	r2, [r7, #4]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	72fb      	strb	r3, [r7, #11]
 8006a30:	4613      	mov	r3, r2
 8006a32:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	685c      	ldr	r4, [r3, #4]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	68d8      	ldr	r0, [r3, #12]
 8006a3c:	893b      	ldrh	r3, [r7, #8]
 8006a3e:	7af9      	ldrb	r1, [r7, #11]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	47a0      	blx	r4
 8006a44:	6178      	str	r0, [r7, #20]

  return ret;
 8006a46:	697b      	ldr	r3, [r7, #20]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd90      	pop	{r4, r7, pc}

08006a50 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	607a      	str	r2, [r7, #4]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	72fb      	strb	r3, [r7, #11]
 8006a60:	4613      	mov	r3, r2
 8006a62:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681c      	ldr	r4, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	68d8      	ldr	r0, [r3, #12]
 8006a6c:	893b      	ldrh	r3, [r7, #8]
 8006a6e:	7af9      	ldrb	r1, [r7, #11]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	47a0      	blx	r4
 8006a74:	6178      	str	r0, [r7, #20]

  return ret;
 8006a76:	697b      	ldr	r3, [r7, #20]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	371c      	adds	r7, #28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd90      	pop	{r4, r7, pc}

08006a80 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 8006a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fa f91c 	bl	8000ccc <__aeabi_i2f>
 8006a94:	4603      	mov	r3, r0
 8006a96:	4904      	ldr	r1, [pc, #16]	@ (8006aa8 <lsm6dso_from_fs2_to_mg+0x28>)
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fa f96b 	bl	8000d74 <__aeabi_fmul>
 8006a9e:	4603      	mov	r3, r0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	3d79db23 	.word	0x3d79db23

08006aac <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006ab8:	f107 0208 	add.w	r2, r7, #8
 8006abc:	2301      	movs	r3, #1
 8006abe:	2110      	movs	r1, #16
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff ffad 	bl	8006a20 <lsm6dso_read_reg>
 8006ac6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10f      	bne.n	8006aee <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	f003 0303 	and.w	r3, r3, #3
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	7a3b      	ldrb	r3, [r7, #8]
 8006ad8:	f362 0383 	bfi	r3, r2, #2, #2
 8006adc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006ade:	f107 0208 	add.w	r2, r7, #8
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	2110      	movs	r1, #16
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff ffb2 	bl	8006a50 <lsm6dso_write_reg>
 8006aec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006aee:	68fb      	ldr	r3, [r7, #12]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006b08:	f107 030c 	add.w	r3, r7, #12
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa78 	bl	8007004 <lsm6dso_fsm_enable_get>
 8006b14:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f040 80c4 	bne.w	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006b1e:	7b3b      	ldrb	r3, [r7, #12]
 8006b20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006b24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006b26:	7b3b      	ldrb	r3, [r7, #12]
 8006b28:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006b2c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006b32:	7b3b      	ldrb	r3, [r7, #12]
 8006b34:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006b3e:	7b3b      	ldrb	r3, [r7, #12]
 8006b40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006b44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006b46:	4313      	orrs	r3, r2
 8006b48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006b4a:	7b3b      	ldrb	r3, [r7, #12]
 8006b4c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006b50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006b52:	4313      	orrs	r3, r2
 8006b54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006b56:	7b3b      	ldrb	r3, [r7, #12]
 8006b58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006b62:	7b3b      	ldrb	r3, [r7, #12]
 8006b64:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006b68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006b6e:	7b3b      	ldrb	r3, [r7, #12]
 8006b70:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006b76:	4313      	orrs	r3, r2
 8006b78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006b7a:	7b7b      	ldrb	r3, [r7, #13]
 8006b7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006b80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006b82:	4313      	orrs	r3, r2
 8006b84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006b86:	7b7b      	ldrb	r3, [r7, #13]
 8006b88:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006b8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006b92:	7b7b      	ldrb	r3, [r7, #13]
 8006b94:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006b9e:	7b7b      	ldrb	r3, [r7, #13]
 8006ba0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006ba4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006baa:	7b7b      	ldrb	r3, [r7, #13]
 8006bac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006bb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006bb6:	7b7b      	ldrb	r3, [r7, #13]
 8006bb8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006bbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006bc2:	7b7b      	ldrb	r3, [r7, #13]
 8006bc4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006bc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006bce:	7b7b      	ldrb	r3, [r7, #13]
 8006bd0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006bd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d163      	bne.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006bde:	f107 030b 	add.w	r3, r7, #11
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fa2f 	bl	8007048 <lsm6dso_fsm_data_rate_get>
 8006bea:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d159      	bne.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d853      	bhi.n	8006ca0 <lsm6dso_xl_data_rate_set+0x1a8>
 8006bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8006c00 <lsm6dso_xl_data_rate_set+0x108>)
 8006bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfe:	bf00      	nop
 8006c00:	08006c11 	.word	0x08006c11
 8006c04:	08006c23 	.word	0x08006c23
 8006c08:	08006c41 	.word	0x08006c41
 8006c0c:	08006c6b 	.word	0x08006c6b
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d102      	bne.n	8006c1c <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8006c16:	2301      	movs	r3, #1
 8006c18:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006c1a:	e044      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8006c1c:	78fb      	ldrb	r3, [r7, #3]
 8006c1e:	75fb      	strb	r3, [r7, #23]
            break;
 8006c20:	e041      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d102      	bne.n	8006c2e <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006c2c:	e03b      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006c2e:	78fb      	ldrb	r3, [r7, #3]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d102      	bne.n	8006c3a <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006c34:	2302      	movs	r3, #2
 8006c36:	75fb      	strb	r3, [r7, #23]
            break;
 8006c38:	e035      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8006c3a:	78fb      	ldrb	r3, [r7, #3]
 8006c3c:	75fb      	strb	r3, [r7, #23]
            break;
 8006c3e:	e032      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d102      	bne.n	8006c4c <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006c46:	2303      	movs	r3, #3
 8006c48:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006c4a:	e02c      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d102      	bne.n	8006c58 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006c52:	2303      	movs	r3, #3
 8006c54:	75fb      	strb	r3, [r7, #23]
            break;
 8006c56:	e026      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d102      	bne.n	8006c64 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	75fb      	strb	r3, [r7, #23]
            break;
 8006c62:	e020      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	75fb      	strb	r3, [r7, #23]
            break;
 8006c68:	e01d      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006c6a:	78fb      	ldrb	r3, [r7, #3]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d102      	bne.n	8006c76 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006c70:	2304      	movs	r3, #4
 8006c72:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006c74:	e017      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006c76:	78fb      	ldrb	r3, [r7, #3]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d102      	bne.n	8006c82 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006c7c:	2304      	movs	r3, #4
 8006c7e:	75fb      	strb	r3, [r7, #23]
            break;
 8006c80:	e011      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d102      	bne.n	8006c8e <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006c88:	2304      	movs	r3, #4
 8006c8a:	75fb      	strb	r3, [r7, #23]
            break;
 8006c8c:	e00b      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8006c8e:	78fb      	ldrb	r3, [r7, #3]
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d102      	bne.n	8006c9a <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006c94:	2304      	movs	r3, #4
 8006c96:	75fb      	strb	r3, [r7, #23]
            break;
 8006c98:	e005      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8006c9a:	78fb      	ldrb	r3, [r7, #3]
 8006c9c:	75fb      	strb	r3, [r7, #23]
            break;
 8006c9e:	e002      	b.n	8006ca6 <lsm6dso_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	75fb      	strb	r3, [r7, #23]
            break;
 8006ca4:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d107      	bne.n	8006cbc <lsm6dso_xl_data_rate_set+0x1c4>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006cac:	f107 0208 	add.w	r2, r7, #8
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	2110      	movs	r1, #16
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff feb3 	bl	8006a20 <lsm6dso_read_reg>
 8006cba:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10f      	bne.n	8006ce2 <lsm6dso_xl_data_rate_set+0x1ea>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	7a3b      	ldrb	r3, [r7, #8]
 8006ccc:	f362 1307 	bfi	r3, r2, #4, #4
 8006cd0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006cd2:	f107 0208 	add.w	r2, r7, #8
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	2110      	movs	r1, #16
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff feb8 	bl	8006a50 <lsm6dso_write_reg>
 8006ce0:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006ce2:	693b      	ldr	r3, [r7, #16]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006cf8:	f107 0208 	add.w	r2, r7, #8
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	2101      	movs	r1, #1
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff fe8d 	bl	8006a20 <lsm6dso_read_reg>
 8006d06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10f      	bne.n	8006d2e <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	7a3b      	ldrb	r3, [r7, #8]
 8006d18:	f362 1387 	bfi	r3, r2, #6, #2
 8006d1c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006d1e:	f107 0208 	add.w	r2, r7, #8
 8006d22:	2301      	movs	r3, #1
 8006d24:	2101      	movs	r1, #1
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7ff fe92 	bl	8006a50 <lsm6dso_write_reg>
 8006d2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8006d42:	2301      	movs	r3, #1
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	210f      	movs	r1, #15
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff fe69 	bl	8006a20 <lsm6dso_read_reg>
 8006d4e:	60f8      	str	r0, [r7, #12]

  return ret;
 8006d50:	68fb      	ldr	r3, [r7, #12]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	460b      	mov	r3, r1
 8006d64:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006d66:	f107 0208 	add.w	r2, r7, #8
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	2112      	movs	r1, #18
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff fe56 	bl	8006a20 <lsm6dso_read_reg>
 8006d74:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10f      	bne.n	8006d9c <lsm6dso_reset_set+0x42>
  {
    reg.sw_reset = val;
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	7a3b      	ldrb	r3, [r7, #8]
 8006d86:	f362 0300 	bfi	r3, r2, #0, #1
 8006d8a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006d8c:	f107 0208 	add.w	r2, r7, #8
 8006d90:	2301      	movs	r3, #1
 8006d92:	2112      	movs	r1, #18
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff fe5b 	bl	8006a50 <lsm6dso_write_reg>
 8006d9a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006db0:	f107 0208 	add.w	r2, r7, #8
 8006db4:	2301      	movs	r3, #1
 8006db6:	2112      	movs	r1, #18
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff fe31 	bl	8006a20 <lsm6dso_read_reg>
 8006dbe:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8006dc0:	7a3b      	ldrb	r3, [r7, #8]
 8006dc2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	701a      	strb	r2, [r3, #0]

  return ret;
 8006dce:	68fb      	ldr	r3, [r7, #12]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006de4:	f107 020c 	add.w	r2, r7, #12
 8006de8:	2301      	movs	r3, #1
 8006dea:	2118      	movs	r1, #24
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff fe17 	bl	8006a20 <lsm6dso_read_reg>
 8006df2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d111      	bne.n	8006e1e <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006dfa:	78fb      	ldrb	r3, [r7, #3]
 8006dfc:	09db      	lsrs	r3, r3, #7
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	7b3b      	ldrb	r3, [r7, #12]
 8006e08:	f362 0341 	bfi	r3, r2, #1, #1
 8006e0c:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006e0e:	f107 020c 	add.w	r2, r7, #12
 8006e12:	2301      	movs	r3, #1
 8006e14:	2118      	movs	r1, #24
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff fe1a 	bl	8006a50 <lsm6dso_write_reg>
 8006e1c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d107      	bne.n	8006e34 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8006e24:	f107 0210 	add.w	r2, r7, #16
 8006e28:	2301      	movs	r3, #1
 8006e2a:	2162      	movs	r1, #98	@ 0x62
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff fdf7 	bl	8006a20 <lsm6dso_read_reg>
 8006e32:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10f      	bne.n	8006e5a <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	f003 0303 	and.w	r3, r3, #3
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	7c3b      	ldrb	r3, [r7, #16]
 8006e44:	f362 03c4 	bfi	r3, r2, #3, #2
 8006e48:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8006e4a:	f107 0210 	add.w	r2, r7, #16
 8006e4e:	2301      	movs	r3, #1
 8006e50:	2162      	movs	r1, #98	@ 0x62
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff fdfc 	bl	8006a50 <lsm6dso_write_reg>
 8006e58:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8006e5a:	697b      	ldr	r3, [r7, #20]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <lsm6dso_fifo_watermark_set>:
  * @param  val      change the values of wtm in reg FIFO_CTRL1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	807b      	strh	r3, [r7, #2]
  lsm6dso_fifo_ctrl1_t fifo_ctrl1;
  lsm6dso_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL2,
 8006e70:	f107 020c 	add.w	r2, r7, #12
 8006e74:	2301      	movs	r3, #1
 8006e76:	2108      	movs	r1, #8
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7ff fdd1 	bl	8006a20 <lsm6dso_read_reg>
 8006e7e:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d114      	bne.n	8006eb0 <lsm6dso_fifo_watermark_set+0x4c>
  {
    fifo_ctrl1.wtm = 0x00FFU & (uint8_t)val;
 8006e86:	887b      	ldrh	r3, [r7, #2]
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.wtm = (uint8_t)((0x0100U & val) >> 8);
 8006e8c:	887b      	ldrh	r3, [r7, #2]
 8006e8e:	0a1b      	lsrs	r3, r3, #8
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	7b3b      	ldrb	r3, [r7, #12]
 8006e9a:	f362 0300 	bfi	r3, r2, #0, #1
 8006e9e:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL1,
 8006ea0:	f107 0210 	add.w	r2, r7, #16
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	2107      	movs	r1, #7
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff fdd1 	bl	8006a50 <lsm6dso_write_reg>
 8006eae:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl1, 1);
  }

  if (ret == 0)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d107      	bne.n	8006ec6 <lsm6dso_fifo_watermark_set+0x62>
  {
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL2,
 8006eb6:	f107 020c 	add.w	r2, r7, #12
 8006eba:	2301      	movs	r3, #1
 8006ebc:	2108      	movs	r1, #8
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7ff fdc6 	bl	8006a50 <lsm6dso_write_reg>
 8006ec4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl2, 1);
  }

  return ret;
 8006ec6:	697b      	ldr	r3, [r7, #20]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <lsm6dso_fifo_xl_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_xl_t val)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8006edc:	f107 0208 	add.w	r2, r7, #8
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	2109      	movs	r1, #9
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7ff fd9b 	bl	8006a20 <lsm6dso_read_reg>
 8006eea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10f      	bne.n	8006f12 <lsm6dso_fifo_xl_batch_set+0x42>
  {
    reg.bdr_xl = (uint8_t)val;
 8006ef2:	78fb      	ldrb	r3, [r7, #3]
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	7a3b      	ldrb	r3, [r7, #8]
 8006efc:	f362 0303 	bfi	r3, r2, #0, #4
 8006f00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8006f02:	f107 0208 	add.w	r2, r7, #8
 8006f06:	2301      	movs	r3, #1
 8006f08:	2109      	movs	r1, #9
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff fda0 	bl	8006a50 <lsm6dso_write_reg>
 8006f10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006f12:	68fb      	ldr	r3, [r7, #12]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <lsm6dso_fifo_gy_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_gy_t val)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8006f28:	f107 0208 	add.w	r2, r7, #8
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	2109      	movs	r1, #9
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff fd75 	bl	8006a20 <lsm6dso_read_reg>
 8006f36:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10f      	bne.n	8006f5e <lsm6dso_fifo_gy_batch_set+0x42>
  {
    reg.bdr_gy = (uint8_t)val;
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	f003 030f 	and.w	r3, r3, #15
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	7a3b      	ldrb	r3, [r7, #8]
 8006f48:	f362 1307 	bfi	r3, r2, #4, #4
 8006f4c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8006f4e:	f107 0208 	add.w	r2, r7, #8
 8006f52:	2301      	movs	r3, #1
 8006f54:	2109      	movs	r1, #9
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff fd7a 	bl	8006a50 <lsm6dso_write_reg>
 8006f5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006f74:	f107 0208 	add.w	r2, r7, #8
 8006f78:	2301      	movs	r3, #1
 8006f7a:	210a      	movs	r1, #10
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff fd4f 	bl	8006a20 <lsm6dso_read_reg>
 8006f82:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10f      	bne.n	8006faa <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8006f8a:	78fb      	ldrb	r3, [r7, #3]
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	7a3b      	ldrb	r3, [r7, #8]
 8006f94:	f362 0302 	bfi	r3, r2, #0, #3
 8006f98:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006f9a:	f107 0208 	add.w	r2, r7, #8
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	210a      	movs	r1, #10
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff fd54 	bl	8006a50 <lsm6dso_write_reg>
 8006fa8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006faa:	68fb      	ldr	r3, [r7, #12]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <lsm6dso_fifo_data_level_get>:
  * @param  val      change the values of diff_fifo in reg FIFO_STATUS1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_data_level_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  lsm6dso_fifo_status1_t fifo_status1;
  lsm6dso_fifo_status2_t fifo_status2;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_STATUS1,
 8006fbe:	f107 0210 	add.w	r2, r7, #16
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	213a      	movs	r1, #58	@ 0x3a
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff fd2a 	bl	8006a20 <lsm6dso_read_reg>
 8006fcc:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_status1, 1);

  if (ret == 0)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d112      	bne.n	8006ffa <lsm6dso_fifo_data_level_get+0x46>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_STATUS2,
 8006fd4:	f107 020c 	add.w	r2, r7, #12
 8006fd8:	2301      	movs	r3, #1
 8006fda:	213b      	movs	r1, #59	@ 0x3b
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff fd1f 	bl	8006a20 <lsm6dso_read_reg>
 8006fe2:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&fifo_status2, 1);
    *val = ((uint16_t)fifo_status2.diff_fifo << 8) +
 8006fe4:	7b3b      	ldrb	r3, [r7, #12]
 8006fe6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	021b      	lsls	r3, r3, #8
 8006fee:	b29b      	uxth	r3, r3
           (uint16_t)fifo_status1.diff_fifo;
 8006ff0:	7c3a      	ldrb	r2, [r7, #16]
    *val = ((uint16_t)fifo_status2.diff_fifo << 8) +
 8006ff2:	4413      	add	r3, r2
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8006ffa:	697b      	ldr	r3, [r7, #20]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800700e:	2102      	movs	r1, #2
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff fe6b 	bl	8006cec <lsm6dso_mem_bank_set>
 8007016:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 800701e:	2302      	movs	r3, #2
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	2146      	movs	r1, #70	@ 0x46
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff fcfb 	bl	8006a20 <lsm6dso_read_reg>
 800702a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d104      	bne.n	800703c <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007032:	2100      	movs	r1, #0
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff fe59 	bl	8006cec <lsm6dso_mem_bank_set>
 800703a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800703c:	68fb      	ldr	r3, [r7, #12]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007052:	2102      	movs	r1, #2
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff fe49 	bl	8006cec <lsm6dso_mem_bank_set>
 800705a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d107      	bne.n	8007072 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8007062:	f107 0208 	add.w	r2, r7, #8
 8007066:	2301      	movs	r3, #1
 8007068:	215f      	movs	r1, #95	@ 0x5f
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff fcd8 	bl	8006a20 <lsm6dso_read_reg>
 8007070:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d12a      	bne.n	80070ce <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8007078:	7a3b      	ldrb	r3, [r7, #8]
 800707a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b03      	cmp	r3, #3
 8007082:	d81b      	bhi.n	80070bc <lsm6dso_fsm_data_rate_get+0x74>
 8007084:	a201      	add	r2, pc, #4	@ (adr r2, 800708c <lsm6dso_fsm_data_rate_get+0x44>)
 8007086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708a:	bf00      	nop
 800708c:	0800709d 	.word	0x0800709d
 8007090:	080070a5 	.word	0x080070a5
 8007094:	080070ad 	.word	0x080070ad
 8007098:	080070b5 	.word	0x080070b5
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2200      	movs	r2, #0
 80070a0:	701a      	strb	r2, [r3, #0]
        break;
 80070a2:	e00f      	b.n	80070c4 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2201      	movs	r2, #1
 80070a8:	701a      	strb	r2, [r3, #0]
        break;
 80070aa:	e00b      	b.n	80070c4 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2202      	movs	r2, #2
 80070b0:	701a      	strb	r2, [r3, #0]
        break;
 80070b2:	e007      	b.n	80070c4 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2203      	movs	r2, #3
 80070b8:	701a      	strb	r2, [r3, #0]
        break;
 80070ba:	e003      	b.n	80070c4 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2200      	movs	r2, #0
 80070c0:	701a      	strb	r2, [r3, #0]
        break;
 80070c2:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80070c4:	2100      	movs	r1, #0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff fe10 	bl	8006cec <lsm6dso_mem_bank_set>
 80070cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80070ce:	68fb      	ldr	r3, [r7, #12]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80070dc:	2201      	movs	r2, #1
 80070de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80070e2:	4802      	ldr	r0, [pc, #8]	@ (80070ec <SPI_CS_High+0x14>)
 80070e4:	f7fc f8a6 	bl	8003234 <HAL_GPIO_WritePin>
}
 80070e8:	bf00      	nop
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	40020000 	.word	0x40020000

080070f0 <SPI_CS_Low>:

 void SPI_CS_Low()
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80070f4:	2200      	movs	r2, #0
 80070f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80070fa:	4802      	ldr	r0, [pc, #8]	@ (8007104 <SPI_CS_Low+0x14>)
 80070fc:	f7fc f89a 	bl	8003234 <HAL_GPIO_WritePin>
}
 8007100:	bf00      	nop
 8007102:	bd80      	pop	{r7, pc}
 8007104:	40020000 	.word	0x40020000

08007108 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 800710c:	2107      	movs	r1, #7
 800710e:	200b      	movs	r0, #11
 8007110:	f000 f884 	bl	800721c <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8007114:	2100      	movs	r1, #0
 8007116:	2009      	movs	r0, #9
 8007118:	f000 f880 	bl	800721c <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 800711c:	f000 f809 	bl	8007132 <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8007120:	f000 f80f 	bl	8007142 <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8007124:	f000 f827 	bl	8007176 <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8007128:	200f      	movs	r0, #15
 800712a:	f000 f812 	bl	8007152 <MAX7219_SetBrightness>
}
 800712e:	bf00      	nop
 8007130:	bd80      	pop	{r7, pc}

08007132 <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8007136:	2101      	movs	r1, #1
 8007138:	200c      	movs	r0, #12
 800713a:	f000 f86f 	bl	800721c <MAX7219_Write>
}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}

08007142 <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8007146:	2100      	movs	r1, #0
 8007148:	200f      	movs	r0, #15
 800714a:	f000 f867 	bl	800721c <MAX7219_Write>
}
 800714e:	bf00      	nop
 8007150:	bd80      	pop	{r7, pc}

08007152 <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	4603      	mov	r3, r0
 800715a:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	4619      	mov	r1, r3
 8007168:	200a      	movs	r0, #10
 800716a:	f000 f857 	bl	800721c <MAX7219_Write>
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 800717c:	2300      	movs	r3, #0
 800717e:	71fb      	strb	r3, [r7, #7]
 8007180:	e007      	b.n	8007192 <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	2100      	movs	r1, #0
 8007186:	4618      	mov	r0, r3
 8007188:	f000 f848 	bl	800721c <MAX7219_Write>
  for (i=0; i < 8; i++)
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	3301      	adds	r3, #1
 8007190:	71fb      	strb	r3, [r7, #7]
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	2b07      	cmp	r3, #7
 8007196:	d9f4      	bls.n	8007182 <MAX7219_Clear+0xc>
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <MAX7219_DisplayChar>:
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	4603      	mov	r3, r0
 80071aa:	460a      	mov	r2, r1
 80071ac:	71fb      	strb	r3, [r7, #7]
 80071ae:	4613      	mov	r3, r2
 80071b0:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode(character));
 80071b2:	79bb      	ldrb	r3, [r7, #6]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 f80b 	bl	80071d0 <MAX7219_LookupCode>
 80071ba:	4603      	mov	r3, r0
 80071bc:	461a      	mov	r2, r3
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	4611      	mov	r1, r2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 f82a 	bl	800721c <MAX7219_Write>
}
 80071c8:	bf00      	nop
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]
 80071de:	e00f      	b.n	8007200 <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	4a0d      	ldr	r2, [pc, #52]	@ (8007218 <MAX7219_LookupCode+0x48>)
 80071e4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80071e8:	79fa      	ldrb	r2, [r7, #7]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d105      	bne.n	80071fa <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	4a09      	ldr	r2, [pc, #36]	@ (8007218 <MAX7219_LookupCode+0x48>)
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	4413      	add	r3, r2
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	e009      	b.n	800720e <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	3301      	adds	r3, #1
 80071fe:	73fb      	strb	r3, [r7, #15]
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	4a05      	ldr	r2, [pc, #20]	@ (8007218 <MAX7219_LookupCode+0x48>)
 8007204:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e9      	bne.n	80071e0 <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr
 8007218:	0800c230 	.word	0x0800c230

0800721c <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	460a      	mov	r2, r1
 8007226:	71fb      	strb	r3, [r7, #7]
 8007228:	4613      	mov	r3, r2
 800722a:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 800722c:	f7ff ff60 	bl	80070f0 <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8007230:	79fb      	ldrb	r3, [r7, #7]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f80c 	bl	8007250 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8007238:	79bb      	ldrb	r3, [r7, #6]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 f808 	bl	8007250 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 8007240:	f7ff ff4a 	bl	80070d8 <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 8007244:	f7ff ff54 	bl	80070f0 <SPI_CS_Low>
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 800725a:	1df9      	adds	r1, r7, #7
 800725c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007260:	2201      	movs	r2, #1
 8007262:	4803      	ldr	r0, [pc, #12]	@ (8007270 <MAX7219_SendByte+0x20>)
 8007264:	f7fd feb9 	bl	8004fda <HAL_SPI_Transmit>
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	2000025c 	.word	0x2000025c

08007274 <_fminf>:
 8007274:	f002 bef6 	b.w	800a064 <fminf>

08007278 <neai_classification_init>:
 8007278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800727c:	4605      	mov	r5, r0
 800727e:	6800      	ldr	r0, [r0, #0]
 8007280:	f7f9 ff64 	bl	800114c <__aeabi_f2uiz>
 8007284:	4604      	mov	r4, r0
 8007286:	6868      	ldr	r0, [r5, #4]
 8007288:	f7f9 ff60 	bl	800114c <__aeabi_f2uiz>
 800728c:	4b4a      	ldr	r3, [pc, #296]	@ (80073b8 <neai_classification_init+0x140>)
 800728e:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 80073bc <neai_classification_init+0x144>
 8007292:	6018      	str	r0, [r3, #0]
 8007294:	1823      	adds	r3, r4, r0
 8007296:	4a4a      	ldr	r2, [pc, #296]	@ (80073c0 <neai_classification_init+0x148>)
 8007298:	f105 0808 	add.w	r8, r5, #8
 800729c:	3302      	adds	r3, #2
 800729e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80072a2:	f8df e120 	ldr.w	lr, [pc, #288]	@ 80073c4 <neai_classification_init+0x14c>
 80072a6:	f8cc 8000 	str.w	r8, [ip]
 80072aa:	f100 0c02 	add.w	ip, r0, #2
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	eb0c 0244 	add.w	r2, ip, r4, lsl #1
 80072b4:	eb05 038c 	add.w	r3, r5, ip, lsl #2
 80072b8:	4f43      	ldr	r7, [pc, #268]	@ (80073c8 <neai_classification_init+0x150>)
 80072ba:	4e44      	ldr	r6, [pc, #272]	@ (80073cc <neai_classification_init+0x154>)
 80072bc:	f8ce 3000 	str.w	r3, [lr]
 80072c0:	18a3      	adds	r3, r4, r2
 80072c2:	441c      	add	r4, r3
 80072c4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80072c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80072cc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80072d0:	493f      	ldr	r1, [pc, #252]	@ (80073d0 <neai_classification_init+0x158>)
 80072d2:	603a      	str	r2, [r7, #0]
 80072d4:	6033      	str	r3, [r6, #0]
 80072d6:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80072da:	f7f9 fedf 	bl	800109c <__aeabi_fcmpeq>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d057      	beq.n	8007392 <neai_classification_init+0x11a>
 80072e2:	493c      	ldr	r1, [pc, #240]	@ (80073d4 <neai_classification_init+0x15c>)
 80072e4:	6860      	ldr	r0, [r4, #4]
 80072e6:	f7f9 fed9 	bl	800109c <__aeabi_fcmpeq>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d051      	beq.n	8007392 <neai_classification_init+0x11a>
 80072ee:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 80072f2:	68a0      	ldr	r0, [r4, #8]
 80072f4:	f7f9 fed2 	bl	800109c <__aeabi_fcmpeq>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d04a      	beq.n	8007392 <neai_classification_init+0x11a>
 80072fc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007300:	68e0      	ldr	r0, [r4, #12]
 8007302:	f7f9 fecb 	bl	800109c <__aeabi_fcmpeq>
 8007306:	2800      	cmp	r0, #0
 8007308:	d043      	beq.n	8007392 <neai_classification_init+0x11a>
 800730a:	2100      	movs	r1, #0
 800730c:	6920      	ldr	r0, [r4, #16]
 800730e:	f7f9 fec5 	bl	800109c <__aeabi_fcmpeq>
 8007312:	2800      	cmp	r0, #0
 8007314:	d03d      	beq.n	8007392 <neai_classification_init+0x11a>
 8007316:	2100      	movs	r1, #0
 8007318:	6960      	ldr	r0, [r4, #20]
 800731a:	f7f9 febf 	bl	800109c <__aeabi_fcmpeq>
 800731e:	2800      	cmp	r0, #0
 8007320:	d037      	beq.n	8007392 <neai_classification_init+0x11a>
 8007322:	2100      	movs	r1, #0
 8007324:	69a0      	ldr	r0, [r4, #24]
 8007326:	f7f9 feb9 	bl	800109c <__aeabi_fcmpeq>
 800732a:	2800      	cmp	r0, #0
 800732c:	d031      	beq.n	8007392 <neai_classification_init+0x11a>
 800732e:	2100      	movs	r1, #0
 8007330:	69e0      	ldr	r0, [r4, #28]
 8007332:	f7f9 feb3 	bl	800109c <__aeabi_fcmpeq>
 8007336:	b360      	cbz	r0, 8007392 <neai_classification_init+0x11a>
 8007338:	4927      	ldr	r1, [pc, #156]	@ (80073d8 <neai_classification_init+0x160>)
 800733a:	6a20      	ldr	r0, [r4, #32]
 800733c:	f7f9 feae 	bl	800109c <__aeabi_fcmpeq>
 8007340:	b338      	cbz	r0, 8007392 <neai_classification_init+0x11a>
 8007342:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007346:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007348:	f7f9 fea8 	bl	800109c <__aeabi_fcmpeq>
 800734c:	b308      	cbz	r0, 8007392 <neai_classification_init+0x11a>
 800734e:	2100      	movs	r1, #0
 8007350:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8007352:	f7f9 fea3 	bl	800109c <__aeabi_fcmpeq>
 8007356:	b1e0      	cbz	r0, 8007392 <neai_classification_init+0x11a>
 8007358:	491e      	ldr	r1, [pc, #120]	@ (80073d4 <neai_classification_init+0x15c>)
 800735a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800735c:	f7f9 fe9e 	bl	800109c <__aeabi_fcmpeq>
 8007360:	b1b8      	cbz	r0, 8007392 <neai_classification_init+0x11a>
 8007362:	2100      	movs	r1, #0
 8007364:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007366:	f7f9 fe99 	bl	800109c <__aeabi_fcmpeq>
 800736a:	b190      	cbz	r0, 8007392 <neai_classification_init+0x11a>
 800736c:	2100      	movs	r1, #0
 800736e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8007370:	f7f9 fe94 	bl	800109c <__aeabi_fcmpeq>
 8007374:	b168      	cbz	r0, 8007392 <neai_classification_init+0x11a>
 8007376:	2100      	movs	r1, #0
 8007378:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800737a:	f7f9 fe8f 	bl	800109c <__aeabi_fcmpeq>
 800737e:	b140      	cbz	r0, 8007392 <neai_classification_init+0x11a>
 8007380:	4916      	ldr	r1, [pc, #88]	@ (80073dc <neai_classification_init+0x164>)
 8007382:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007384:	f7f9 fe8a 	bl	800109c <__aeabi_fcmpeq>
 8007388:	2800      	cmp	r0, #0
 800738a:	bf0c      	ite	eq
 800738c:	237d      	moveq	r3, #125	@ 0x7d
 800738e:	2300      	movne	r3, #0
 8007390:	e000      	b.n	8007394 <neai_classification_init+0x11c>
 8007392:	237d      	movs	r3, #125	@ 0x7d
 8007394:	4c12      	ldr	r4, [pc, #72]	@ (80073e0 <neai_classification_init+0x168>)
 8007396:	4913      	ldr	r1, [pc, #76]	@ (80073e4 <neai_classification_init+0x16c>)
 8007398:	4813      	ldr	r0, [pc, #76]	@ (80073e8 <neai_classification_init+0x170>)
 800739a:	7023      	strb	r3, [r4, #0]
 800739c:	f7ff ff6a 	bl	8007274 <_fminf>
 80073a0:	4911      	ldr	r1, [pc, #68]	@ (80073e8 <neai_classification_init+0x170>)
 80073a2:	f7f9 fe7b 	bl	800109c <__aeabi_fcmpeq>
 80073a6:	b110      	cbz	r0, 80073ae <neai_classification_init+0x136>
 80073a8:	7820      	ldrb	r0, [r4, #0]
 80073aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ae:	2381      	movs	r3, #129	@ 0x81
 80073b0:	7023      	strb	r3, [r4, #0]
 80073b2:	4618      	mov	r0, r3
 80073b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b8:	200009f4 	.word	0x200009f4
 80073bc:	200009f0 	.word	0x200009f0
 80073c0:	200009e8 	.word	0x200009e8
 80073c4:	200009ec 	.word	0x200009ec
 80073c8:	200009e4 	.word	0x200009e4
 80073cc:	200009e0 	.word	0x200009e0
 80073d0:	40a00000 	.word	0x40a00000
 80073d4:	40400000 	.word	0x40400000
 80073d8:	42c80000 	.word	0x42c80000
 80073dc:	49742400 	.word	0x49742400
 80073e0:	20000020 	.word	0x20000020
 80073e4:	40066666 	.word	0x40066666
 80073e8:	3f8ccccd 	.word	0x3f8ccccd

080073ec <neai_classification>:
 80073ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	4b7b      	ldr	r3, [pc, #492]	@ (80075e0 <neai_classification+0x1f4>)
 80073f2:	b087      	sub	sp, #28
 80073f4:	781d      	ldrb	r5, [r3, #0]
 80073f6:	9101      	str	r1, [sp, #4]
 80073f8:	9204      	str	r2, [sp, #16]
 80073fa:	b115      	cbz	r5, 8007402 <neai_classification+0x16>
 80073fc:	2d81      	cmp	r5, #129	@ 0x81
 80073fe:	f040 80de 	bne.w	80075be <neai_classification+0x1d2>
 8007402:	4f78      	ldr	r7, [pc, #480]	@ (80075e4 <neai_classification+0x1f8>)
 8007404:	4604      	mov	r4, r0
 8007406:	46b9      	mov	r9, r7
 8007408:	2600      	movs	r6, #0
 800740a:	f8df 81dc 	ldr.w	r8, [pc, #476]	@ 80075e8 <neai_classification+0x1fc>
 800740e:	2300      	movs	r3, #0
 8007410:	4a76      	ldr	r2, [pc, #472]	@ (80075ec <neai_classification+0x200>)
 8007412:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8007416:	3303      	adds	r3, #3
 8007418:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800741c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007420:	d1f7      	bne.n	8007412 <neai_classification+0x26>
 8007422:	4648      	mov	r0, r9
 8007424:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007428:	4641      	mov	r1, r8
 800742a:	3601      	adds	r6, #1
 800742c:	f000 ffdd 	bl	80083ea <memcpy>
 8007430:	2e03      	cmp	r6, #3
 8007432:	f509 7900 	add.w	r9, r9, #512	@ 0x200
 8007436:	f104 0404 	add.w	r4, r4, #4
 800743a:	d1e8      	bne.n	800740e <neai_classification+0x22>
 800743c:	2600      	movs	r6, #0
 800743e:	9b01      	ldr	r3, [sp, #4]
 8007440:	601e      	str	r6, [r3, #0]
 8007442:	605e      	str	r6, [r3, #4]
 8007444:	609e      	str	r6, [r3, #8]
 8007446:	4b6a      	ldr	r3, [pc, #424]	@ (80075f0 <neai_classification+0x204>)
 8007448:	681c      	ldr	r4, [r3, #0]
 800744a:	2c00      	cmp	r4, #0
 800744c:	d06c      	beq.n	8007528 <neai_classification+0x13c>
 800744e:	4a69      	ldr	r2, [pc, #420]	@ (80075f4 <neai_classification+0x208>)
 8007450:	4b69      	ldr	r3, [pc, #420]	@ (80075f8 <neai_classification+0x20c>)
 8007452:	f8d2 9000 	ldr.w	r9, [r2]
 8007456:	4a69      	ldr	r2, [pc, #420]	@ (80075fc <neai_classification+0x210>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f8d2 8000 	ldr.w	r8, [r2]
 800745e:	4a68      	ldr	r2, [pc, #416]	@ (8007600 <neai_classification+0x214>)
 8007460:	4620      	mov	r0, r4
 8007462:	f8d2 b000 	ldr.w	fp, [r2]
 8007466:	4a67      	ldr	r2, [pc, #412]	@ (8007604 <neai_classification+0x218>)
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	f8d2 a000 	ldr.w	sl, [r2]
 800746e:	f7f9 fc29 	bl	8000cc4 <__aeabi_ui2f>
 8007472:	4601      	mov	r1, r0
 8007474:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007478:	f7f9 fd30 	bl	8000edc <__aeabi_fdiv>
 800747c:	9b00      	ldr	r3, [sp, #0]
 800747e:	9002      	str	r0, [sp, #8]
 8007480:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007484:	3b04      	subs	r3, #4
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	1f23      	subs	r3, r4, #4
 800748a:	9303      	str	r3, [sp, #12]
 800748c:	9505      	str	r5, [sp, #20]
 800748e:	9b00      	ldr	r3, [sp, #0]
 8007490:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	f7f9 fe59 	bl	800114c <__aeabi_f2uiz>
 800749a:	4605      	mov	r5, r0
 800749c:	4604      	mov	r4, r0
 800749e:	e00a      	b.n	80074b6 <neai_classification+0xca>
 80074a0:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 80074a4:	4631      	mov	r1, r6
 80074a6:	4620      	mov	r0, r4
 80074a8:	f7f9 fe02 	bl	80010b0 <__aeabi_fcmplt>
 80074ac:	b9b8      	cbnz	r0, 80074de <neai_classification+0xf2>
 80074ae:	4620      	mov	r0, r4
 80074b0:	f7f9 fe4c 	bl	800114c <__aeabi_f2uiz>
 80074b4:	1944      	adds	r4, r0, r5
 80074b6:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 80074ba:	f7f9 fe47 	bl	800114c <__aeabi_f2uiz>
 80074be:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 80074c2:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80074c6:	f7f9 fdf3 	bl	80010b0 <__aeabi_fcmplt>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d1e8      	bne.n	80074a0 <neai_classification+0xb4>
 80074ce:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 80074d2:	4631      	mov	r1, r6
 80074d4:	4620      	mov	r0, r4
 80074d6:	f7f9 fdeb 	bl	80010b0 <__aeabi_fcmplt>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d0e7      	beq.n	80074ae <neai_classification+0xc2>
 80074de:	f104 4000 	add.w	r0, r4, #2147483648	@ 0x80000000
 80074e2:	f7f9 fe33 	bl	800114c <__aeabi_f2uiz>
 80074e6:	b284      	uxth	r4, r0
 80074e8:	9d01      	ldr	r5, [sp, #4]
 80074ea:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80074ee:	3c01      	subs	r4, #1
 80074f0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80074f4:	9902      	ldr	r1, [sp, #8]
 80074f6:	f7f9 fb35 	bl	8000b64 <__addsf3>
 80074fa:	9b00      	ldr	r3, [sp, #0]
 80074fc:	9a03      	ldr	r2, [sp, #12]
 80074fe:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8007502:	4293      	cmp	r3, r2
 8007504:	d1c3      	bne.n	800748e <neai_classification+0xa2>
 8007506:	462b      	mov	r3, r5
 8007508:	685c      	ldr	r4, [r3, #4]
 800750a:	681f      	ldr	r7, [r3, #0]
 800750c:	4620      	mov	r0, r4
 800750e:	4639      	mov	r1, r7
 8007510:	9d05      	ldr	r5, [sp, #20]
 8007512:	689e      	ldr	r6, [r3, #8]
 8007514:	f7f9 fdea 	bl	80010ec <__aeabi_fcmpgt>
 8007518:	2800      	cmp	r0, #0
 800751a:	d058      	beq.n	80075ce <neai_classification+0x1e2>
 800751c:	4631      	mov	r1, r6
 800751e:	4620      	mov	r0, r4
 8007520:	f7f9 fdc6 	bl	80010b0 <__aeabi_fcmplt>
 8007524:	2800      	cmp	r0, #0
 8007526:	d050      	beq.n	80075ca <neai_classification+0x1de>
 8007528:	f04f 0800 	mov.w	r8, #0
 800752c:	f04f 4782 	mov.w	r7, #1090519040	@ 0x41000000
 8007530:	9b01      	ldr	r3, [sp, #4]
 8007532:	f1a3 0904 	sub.w	r9, r3, #4
 8007536:	f103 0408 	add.w	r4, r3, #8
 800753a:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800753e:	4631      	mov	r1, r6
 8007540:	f7f9 fb0e 	bl	8000b60 <__aeabi_fsub>
 8007544:	4639      	mov	r1, r7
 8007546:	f7f9 fc15 	bl	8000d74 <__aeabi_fmul>
 800754a:	f002 fd5d 	bl	800a008 <expf>
 800754e:	4601      	mov	r1, r0
 8007550:	4640      	mov	r0, r8
 8007552:	f8c9 1000 	str.w	r1, [r9]
 8007556:	f7f9 fb05 	bl	8000b64 <__addsf3>
 800755a:	45a1      	cmp	r9, r4
 800755c:	4680      	mov	r8, r0
 800755e:	d1ec      	bne.n	800753a <neai_classification+0x14e>
 8007560:	4601      	mov	r1, r0
 8007562:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007566:	f7f9 fcb9 	bl	8000edc <__aeabi_fdiv>
 800756a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800756e:	4607      	mov	r7, r0
 8007570:	f8d8 1000 	ldr.w	r1, [r8]
 8007574:	f7f9 fbfe 	bl	8000d74 <__aeabi_fmul>
 8007578:	4606      	mov	r6, r0
 800757a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800757e:	4638      	mov	r0, r7
 8007580:	f8c8 6000 	str.w	r6, [r8]
 8007584:	f7f9 fbf6 	bl	8000d74 <__aeabi_fmul>
 8007588:	4604      	mov	r4, r0
 800758a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800758e:	4638      	mov	r0, r7
 8007590:	f8c8 4004 	str.w	r4, [r8, #4]
 8007594:	f7f9 fbee 	bl	8000d74 <__aeabi_fmul>
 8007598:	4631      	mov	r1, r6
 800759a:	4607      	mov	r7, r0
 800759c:	f8c8 0008 	str.w	r0, [r8, #8]
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7f9 fda3 	bl	80010ec <__aeabi_fcmpgt>
 80075a6:	b970      	cbnz	r0, 80075c6 <neai_classification+0x1da>
 80075a8:	4634      	mov	r4, r6
 80075aa:	2601      	movs	r6, #1
 80075ac:	4639      	mov	r1, r7
 80075ae:	4620      	mov	r0, r4
 80075b0:	f7f9 fd7e 	bl	80010b0 <__aeabi_fcmplt>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	bf18      	it	ne
 80075b8:	2603      	movne	r6, #3
 80075ba:	9b04      	ldr	r3, [sp, #16]
 80075bc:	801e      	strh	r6, [r3, #0]
 80075be:	4628      	mov	r0, r5
 80075c0:	b007      	add	sp, #28
 80075c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c6:	2602      	movs	r6, #2
 80075c8:	e7f0      	b.n	80075ac <neai_classification+0x1c0>
 80075ca:	4626      	mov	r6, r4
 80075cc:	e7ac      	b.n	8007528 <neai_classification+0x13c>
 80075ce:	463c      	mov	r4, r7
 80075d0:	4631      	mov	r1, r6
 80075d2:	4620      	mov	r0, r4
 80075d4:	f7f9 fd6c 	bl	80010b0 <__aeabi_fcmplt>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d1a5      	bne.n	8007528 <neai_classification+0x13c>
 80075dc:	e7f5      	b.n	80075ca <neai_classification+0x1de>
 80075de:	bf00      	nop
 80075e0:	20000020 	.word	0x20000020
 80075e4:	20000bf8 	.word	0x20000bf8
 80075e8:	200009f8 	.word	0x200009f8
 80075ec:	200009f4 	.word	0x200009f4
 80075f0:	200009f4 	.word	0x200009f4
 80075f4:	200009ec 	.word	0x200009ec
 80075f8:	200009f0 	.word	0x200009f0
 80075fc:	200009e0 	.word	0x200009e0
 8007600:	200009e4 	.word	0x200009e4
 8007604:	200009e8 	.word	0x200009e8

08007608 <__cvt>:
 8007608:	2b00      	cmp	r3, #0
 800760a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800760e:	461d      	mov	r5, r3
 8007610:	bfbb      	ittet	lt
 8007612:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007616:	461d      	movlt	r5, r3
 8007618:	2300      	movge	r3, #0
 800761a:	232d      	movlt	r3, #45	@ 0x2d
 800761c:	b088      	sub	sp, #32
 800761e:	4614      	mov	r4, r2
 8007620:	bfb8      	it	lt
 8007622:	4614      	movlt	r4, r2
 8007624:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007626:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007628:	7013      	strb	r3, [r2, #0]
 800762a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800762c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007630:	f023 0820 	bic.w	r8, r3, #32
 8007634:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007638:	d005      	beq.n	8007646 <__cvt+0x3e>
 800763a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800763e:	d100      	bne.n	8007642 <__cvt+0x3a>
 8007640:	3601      	adds	r6, #1
 8007642:	2302      	movs	r3, #2
 8007644:	e000      	b.n	8007648 <__cvt+0x40>
 8007646:	2303      	movs	r3, #3
 8007648:	aa07      	add	r2, sp, #28
 800764a:	9204      	str	r2, [sp, #16]
 800764c:	aa06      	add	r2, sp, #24
 800764e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007652:	e9cd 3600 	strd	r3, r6, [sp]
 8007656:	4622      	mov	r2, r4
 8007658:	462b      	mov	r3, r5
 800765a:	f000 ff5d 	bl	8008518 <_dtoa_r>
 800765e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007662:	4607      	mov	r7, r0
 8007664:	d119      	bne.n	800769a <__cvt+0x92>
 8007666:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007668:	07db      	lsls	r3, r3, #31
 800766a:	d50e      	bpl.n	800768a <__cvt+0x82>
 800766c:	eb00 0906 	add.w	r9, r0, r6
 8007670:	2200      	movs	r2, #0
 8007672:	2300      	movs	r3, #0
 8007674:	4620      	mov	r0, r4
 8007676:	4629      	mov	r1, r5
 8007678:	f7f9 f9ae 	bl	80009d8 <__aeabi_dcmpeq>
 800767c:	b108      	cbz	r0, 8007682 <__cvt+0x7a>
 800767e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007682:	2230      	movs	r2, #48	@ 0x30
 8007684:	9b07      	ldr	r3, [sp, #28]
 8007686:	454b      	cmp	r3, r9
 8007688:	d31e      	bcc.n	80076c8 <__cvt+0xc0>
 800768a:	4638      	mov	r0, r7
 800768c:	9b07      	ldr	r3, [sp, #28]
 800768e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007690:	1bdb      	subs	r3, r3, r7
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	b008      	add	sp, #32
 8007696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800769a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800769e:	eb00 0906 	add.w	r9, r0, r6
 80076a2:	d1e5      	bne.n	8007670 <__cvt+0x68>
 80076a4:	7803      	ldrb	r3, [r0, #0]
 80076a6:	2b30      	cmp	r3, #48	@ 0x30
 80076a8:	d10a      	bne.n	80076c0 <__cvt+0xb8>
 80076aa:	2200      	movs	r2, #0
 80076ac:	2300      	movs	r3, #0
 80076ae:	4620      	mov	r0, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	f7f9 f991 	bl	80009d8 <__aeabi_dcmpeq>
 80076b6:	b918      	cbnz	r0, 80076c0 <__cvt+0xb8>
 80076b8:	f1c6 0601 	rsb	r6, r6, #1
 80076bc:	f8ca 6000 	str.w	r6, [sl]
 80076c0:	f8da 3000 	ldr.w	r3, [sl]
 80076c4:	4499      	add	r9, r3
 80076c6:	e7d3      	b.n	8007670 <__cvt+0x68>
 80076c8:	1c59      	adds	r1, r3, #1
 80076ca:	9107      	str	r1, [sp, #28]
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	e7d9      	b.n	8007684 <__cvt+0x7c>

080076d0 <__exponent>:
 80076d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076d2:	2900      	cmp	r1, #0
 80076d4:	bfb6      	itet	lt
 80076d6:	232d      	movlt	r3, #45	@ 0x2d
 80076d8:	232b      	movge	r3, #43	@ 0x2b
 80076da:	4249      	neglt	r1, r1
 80076dc:	2909      	cmp	r1, #9
 80076de:	7002      	strb	r2, [r0, #0]
 80076e0:	7043      	strb	r3, [r0, #1]
 80076e2:	dd29      	ble.n	8007738 <__exponent+0x68>
 80076e4:	f10d 0307 	add.w	r3, sp, #7
 80076e8:	461d      	mov	r5, r3
 80076ea:	270a      	movs	r7, #10
 80076ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80076f0:	461a      	mov	r2, r3
 80076f2:	fb07 1416 	mls	r4, r7, r6, r1
 80076f6:	3430      	adds	r4, #48	@ 0x30
 80076f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80076fc:	460c      	mov	r4, r1
 80076fe:	2c63      	cmp	r4, #99	@ 0x63
 8007700:	4631      	mov	r1, r6
 8007702:	f103 33ff 	add.w	r3, r3, #4294967295
 8007706:	dcf1      	bgt.n	80076ec <__exponent+0x1c>
 8007708:	3130      	adds	r1, #48	@ 0x30
 800770a:	1e94      	subs	r4, r2, #2
 800770c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007710:	4623      	mov	r3, r4
 8007712:	1c41      	adds	r1, r0, #1
 8007714:	42ab      	cmp	r3, r5
 8007716:	d30a      	bcc.n	800772e <__exponent+0x5e>
 8007718:	f10d 0309 	add.w	r3, sp, #9
 800771c:	1a9b      	subs	r3, r3, r2
 800771e:	42ac      	cmp	r4, r5
 8007720:	bf88      	it	hi
 8007722:	2300      	movhi	r3, #0
 8007724:	3302      	adds	r3, #2
 8007726:	4403      	add	r3, r0
 8007728:	1a18      	subs	r0, r3, r0
 800772a:	b003      	add	sp, #12
 800772c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800772e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007732:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007736:	e7ed      	b.n	8007714 <__exponent+0x44>
 8007738:	2330      	movs	r3, #48	@ 0x30
 800773a:	3130      	adds	r1, #48	@ 0x30
 800773c:	7083      	strb	r3, [r0, #2]
 800773e:	70c1      	strb	r1, [r0, #3]
 8007740:	1d03      	adds	r3, r0, #4
 8007742:	e7f1      	b.n	8007728 <__exponent+0x58>

08007744 <_printf_float>:
 8007744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	b091      	sub	sp, #68	@ 0x44
 800774a:	460c      	mov	r4, r1
 800774c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007750:	4616      	mov	r6, r2
 8007752:	461f      	mov	r7, r3
 8007754:	4605      	mov	r5, r0
 8007756:	f000 fdc3 	bl	80082e0 <_localeconv_r>
 800775a:	6803      	ldr	r3, [r0, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	9308      	str	r3, [sp, #32]
 8007760:	f7f8 fd0e 	bl	8000180 <strlen>
 8007764:	2300      	movs	r3, #0
 8007766:	930e      	str	r3, [sp, #56]	@ 0x38
 8007768:	f8d8 3000 	ldr.w	r3, [r8]
 800776c:	9009      	str	r0, [sp, #36]	@ 0x24
 800776e:	3307      	adds	r3, #7
 8007770:	f023 0307 	bic.w	r3, r3, #7
 8007774:	f103 0208 	add.w	r2, r3, #8
 8007778:	f894 a018 	ldrb.w	sl, [r4, #24]
 800777c:	f8d4 b000 	ldr.w	fp, [r4]
 8007780:	f8c8 2000 	str.w	r2, [r8]
 8007784:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007788:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800778c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800778e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007792:	f04f 32ff 	mov.w	r2, #4294967295
 8007796:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800779a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800779e:	4b9c      	ldr	r3, [pc, #624]	@ (8007a10 <_printf_float+0x2cc>)
 80077a0:	f7f9 f94c 	bl	8000a3c <__aeabi_dcmpun>
 80077a4:	bb70      	cbnz	r0, 8007804 <_printf_float+0xc0>
 80077a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80077aa:	f04f 32ff 	mov.w	r2, #4294967295
 80077ae:	4b98      	ldr	r3, [pc, #608]	@ (8007a10 <_printf_float+0x2cc>)
 80077b0:	f7f9 f926 	bl	8000a00 <__aeabi_dcmple>
 80077b4:	bb30      	cbnz	r0, 8007804 <_printf_float+0xc0>
 80077b6:	2200      	movs	r2, #0
 80077b8:	2300      	movs	r3, #0
 80077ba:	4640      	mov	r0, r8
 80077bc:	4649      	mov	r1, r9
 80077be:	f7f9 f915 	bl	80009ec <__aeabi_dcmplt>
 80077c2:	b110      	cbz	r0, 80077ca <_printf_float+0x86>
 80077c4:	232d      	movs	r3, #45	@ 0x2d
 80077c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077ca:	4a92      	ldr	r2, [pc, #584]	@ (8007a14 <_printf_float+0x2d0>)
 80077cc:	4b92      	ldr	r3, [pc, #584]	@ (8007a18 <_printf_float+0x2d4>)
 80077ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80077d2:	bf8c      	ite	hi
 80077d4:	4690      	movhi	r8, r2
 80077d6:	4698      	movls	r8, r3
 80077d8:	2303      	movs	r3, #3
 80077da:	f04f 0900 	mov.w	r9, #0
 80077de:	6123      	str	r3, [r4, #16]
 80077e0:	f02b 0304 	bic.w	r3, fp, #4
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	4633      	mov	r3, r6
 80077e8:	4621      	mov	r1, r4
 80077ea:	4628      	mov	r0, r5
 80077ec:	9700      	str	r7, [sp, #0]
 80077ee:	aa0f      	add	r2, sp, #60	@ 0x3c
 80077f0:	f000 f9d4 	bl	8007b9c <_printf_common>
 80077f4:	3001      	adds	r0, #1
 80077f6:	f040 8090 	bne.w	800791a <_printf_float+0x1d6>
 80077fa:	f04f 30ff 	mov.w	r0, #4294967295
 80077fe:	b011      	add	sp, #68	@ 0x44
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	4642      	mov	r2, r8
 8007806:	464b      	mov	r3, r9
 8007808:	4640      	mov	r0, r8
 800780a:	4649      	mov	r1, r9
 800780c:	f7f9 f916 	bl	8000a3c <__aeabi_dcmpun>
 8007810:	b148      	cbz	r0, 8007826 <_printf_float+0xe2>
 8007812:	464b      	mov	r3, r9
 8007814:	2b00      	cmp	r3, #0
 8007816:	bfb8      	it	lt
 8007818:	232d      	movlt	r3, #45	@ 0x2d
 800781a:	4a80      	ldr	r2, [pc, #512]	@ (8007a1c <_printf_float+0x2d8>)
 800781c:	bfb8      	it	lt
 800781e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007822:	4b7f      	ldr	r3, [pc, #508]	@ (8007a20 <_printf_float+0x2dc>)
 8007824:	e7d3      	b.n	80077ce <_printf_float+0x8a>
 8007826:	6863      	ldr	r3, [r4, #4]
 8007828:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	d13f      	bne.n	80078b0 <_printf_float+0x16c>
 8007830:	2306      	movs	r3, #6
 8007832:	6063      	str	r3, [r4, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	9206      	str	r2, [sp, #24]
 800783e:	aa0e      	add	r2, sp, #56	@ 0x38
 8007840:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007844:	aa0d      	add	r2, sp, #52	@ 0x34
 8007846:	9203      	str	r2, [sp, #12]
 8007848:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800784c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007850:	6863      	ldr	r3, [r4, #4]
 8007852:	4642      	mov	r2, r8
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4628      	mov	r0, r5
 8007858:	464b      	mov	r3, r9
 800785a:	910a      	str	r1, [sp, #40]	@ 0x28
 800785c:	f7ff fed4 	bl	8007608 <__cvt>
 8007860:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007862:	4680      	mov	r8, r0
 8007864:	2947      	cmp	r1, #71	@ 0x47
 8007866:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007868:	d128      	bne.n	80078bc <_printf_float+0x178>
 800786a:	1cc8      	adds	r0, r1, #3
 800786c:	db02      	blt.n	8007874 <_printf_float+0x130>
 800786e:	6863      	ldr	r3, [r4, #4]
 8007870:	4299      	cmp	r1, r3
 8007872:	dd40      	ble.n	80078f6 <_printf_float+0x1b2>
 8007874:	f1aa 0a02 	sub.w	sl, sl, #2
 8007878:	fa5f fa8a 	uxtb.w	sl, sl
 800787c:	4652      	mov	r2, sl
 800787e:	3901      	subs	r1, #1
 8007880:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007884:	910d      	str	r1, [sp, #52]	@ 0x34
 8007886:	f7ff ff23 	bl	80076d0 <__exponent>
 800788a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800788c:	4681      	mov	r9, r0
 800788e:	1813      	adds	r3, r2, r0
 8007890:	2a01      	cmp	r2, #1
 8007892:	6123      	str	r3, [r4, #16]
 8007894:	dc02      	bgt.n	800789c <_printf_float+0x158>
 8007896:	6822      	ldr	r2, [r4, #0]
 8007898:	07d2      	lsls	r2, r2, #31
 800789a:	d501      	bpl.n	80078a0 <_printf_float+0x15c>
 800789c:	3301      	adds	r3, #1
 800789e:	6123      	str	r3, [r4, #16]
 80078a0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d09e      	beq.n	80077e6 <_printf_float+0xa2>
 80078a8:	232d      	movs	r3, #45	@ 0x2d
 80078aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078ae:	e79a      	b.n	80077e6 <_printf_float+0xa2>
 80078b0:	2947      	cmp	r1, #71	@ 0x47
 80078b2:	d1bf      	bne.n	8007834 <_printf_float+0xf0>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1bd      	bne.n	8007834 <_printf_float+0xf0>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e7ba      	b.n	8007832 <_printf_float+0xee>
 80078bc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078c0:	d9dc      	bls.n	800787c <_printf_float+0x138>
 80078c2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80078c6:	d118      	bne.n	80078fa <_printf_float+0x1b6>
 80078c8:	2900      	cmp	r1, #0
 80078ca:	6863      	ldr	r3, [r4, #4]
 80078cc:	dd0b      	ble.n	80078e6 <_printf_float+0x1a2>
 80078ce:	6121      	str	r1, [r4, #16]
 80078d0:	b913      	cbnz	r3, 80078d8 <_printf_float+0x194>
 80078d2:	6822      	ldr	r2, [r4, #0]
 80078d4:	07d0      	lsls	r0, r2, #31
 80078d6:	d502      	bpl.n	80078de <_printf_float+0x19a>
 80078d8:	3301      	adds	r3, #1
 80078da:	440b      	add	r3, r1
 80078dc:	6123      	str	r3, [r4, #16]
 80078de:	f04f 0900 	mov.w	r9, #0
 80078e2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80078e4:	e7dc      	b.n	80078a0 <_printf_float+0x15c>
 80078e6:	b913      	cbnz	r3, 80078ee <_printf_float+0x1aa>
 80078e8:	6822      	ldr	r2, [r4, #0]
 80078ea:	07d2      	lsls	r2, r2, #31
 80078ec:	d501      	bpl.n	80078f2 <_printf_float+0x1ae>
 80078ee:	3302      	adds	r3, #2
 80078f0:	e7f4      	b.n	80078dc <_printf_float+0x198>
 80078f2:	2301      	movs	r3, #1
 80078f4:	e7f2      	b.n	80078dc <_printf_float+0x198>
 80078f6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80078fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078fc:	4299      	cmp	r1, r3
 80078fe:	db05      	blt.n	800790c <_printf_float+0x1c8>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	6121      	str	r1, [r4, #16]
 8007904:	07d8      	lsls	r0, r3, #31
 8007906:	d5ea      	bpl.n	80078de <_printf_float+0x19a>
 8007908:	1c4b      	adds	r3, r1, #1
 800790a:	e7e7      	b.n	80078dc <_printf_float+0x198>
 800790c:	2900      	cmp	r1, #0
 800790e:	bfcc      	ite	gt
 8007910:	2201      	movgt	r2, #1
 8007912:	f1c1 0202 	rsble	r2, r1, #2
 8007916:	4413      	add	r3, r2
 8007918:	e7e0      	b.n	80078dc <_printf_float+0x198>
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	055a      	lsls	r2, r3, #21
 800791e:	d407      	bmi.n	8007930 <_printf_float+0x1ec>
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	4642      	mov	r2, r8
 8007924:	4631      	mov	r1, r6
 8007926:	4628      	mov	r0, r5
 8007928:	47b8      	blx	r7
 800792a:	3001      	adds	r0, #1
 800792c:	d12b      	bne.n	8007986 <_printf_float+0x242>
 800792e:	e764      	b.n	80077fa <_printf_float+0xb6>
 8007930:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007934:	f240 80dc 	bls.w	8007af0 <_printf_float+0x3ac>
 8007938:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800793c:	2200      	movs	r2, #0
 800793e:	2300      	movs	r3, #0
 8007940:	f7f9 f84a 	bl	80009d8 <__aeabi_dcmpeq>
 8007944:	2800      	cmp	r0, #0
 8007946:	d033      	beq.n	80079b0 <_printf_float+0x26c>
 8007948:	2301      	movs	r3, #1
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	4a35      	ldr	r2, [pc, #212]	@ (8007a24 <_printf_float+0x2e0>)
 8007950:	47b8      	blx	r7
 8007952:	3001      	adds	r0, #1
 8007954:	f43f af51 	beq.w	80077fa <_printf_float+0xb6>
 8007958:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800795c:	4543      	cmp	r3, r8
 800795e:	db02      	blt.n	8007966 <_printf_float+0x222>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	07d8      	lsls	r0, r3, #31
 8007964:	d50f      	bpl.n	8007986 <_printf_float+0x242>
 8007966:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800796a:	4631      	mov	r1, r6
 800796c:	4628      	mov	r0, r5
 800796e:	47b8      	blx	r7
 8007970:	3001      	adds	r0, #1
 8007972:	f43f af42 	beq.w	80077fa <_printf_float+0xb6>
 8007976:	f04f 0900 	mov.w	r9, #0
 800797a:	f108 38ff 	add.w	r8, r8, #4294967295
 800797e:	f104 0a1a 	add.w	sl, r4, #26
 8007982:	45c8      	cmp	r8, r9
 8007984:	dc09      	bgt.n	800799a <_printf_float+0x256>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	079b      	lsls	r3, r3, #30
 800798a:	f100 8102 	bmi.w	8007b92 <_printf_float+0x44e>
 800798e:	68e0      	ldr	r0, [r4, #12]
 8007990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007992:	4298      	cmp	r0, r3
 8007994:	bfb8      	it	lt
 8007996:	4618      	movlt	r0, r3
 8007998:	e731      	b.n	80077fe <_printf_float+0xba>
 800799a:	2301      	movs	r3, #1
 800799c:	4652      	mov	r2, sl
 800799e:	4631      	mov	r1, r6
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b8      	blx	r7
 80079a4:	3001      	adds	r0, #1
 80079a6:	f43f af28 	beq.w	80077fa <_printf_float+0xb6>
 80079aa:	f109 0901 	add.w	r9, r9, #1
 80079ae:	e7e8      	b.n	8007982 <_printf_float+0x23e>
 80079b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	dc38      	bgt.n	8007a28 <_printf_float+0x2e4>
 80079b6:	2301      	movs	r3, #1
 80079b8:	4631      	mov	r1, r6
 80079ba:	4628      	mov	r0, r5
 80079bc:	4a19      	ldr	r2, [pc, #100]	@ (8007a24 <_printf_float+0x2e0>)
 80079be:	47b8      	blx	r7
 80079c0:	3001      	adds	r0, #1
 80079c2:	f43f af1a 	beq.w	80077fa <_printf_float+0xb6>
 80079c6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80079ca:	ea59 0303 	orrs.w	r3, r9, r3
 80079ce:	d102      	bne.n	80079d6 <_printf_float+0x292>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	07d9      	lsls	r1, r3, #31
 80079d4:	d5d7      	bpl.n	8007986 <_printf_float+0x242>
 80079d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80079da:	4631      	mov	r1, r6
 80079dc:	4628      	mov	r0, r5
 80079de:	47b8      	blx	r7
 80079e0:	3001      	adds	r0, #1
 80079e2:	f43f af0a 	beq.w	80077fa <_printf_float+0xb6>
 80079e6:	f04f 0a00 	mov.w	sl, #0
 80079ea:	f104 0b1a 	add.w	fp, r4, #26
 80079ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079f0:	425b      	negs	r3, r3
 80079f2:	4553      	cmp	r3, sl
 80079f4:	dc01      	bgt.n	80079fa <_printf_float+0x2b6>
 80079f6:	464b      	mov	r3, r9
 80079f8:	e793      	b.n	8007922 <_printf_float+0x1de>
 80079fa:	2301      	movs	r3, #1
 80079fc:	465a      	mov	r2, fp
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	47b8      	blx	r7
 8007a04:	3001      	adds	r0, #1
 8007a06:	f43f aef8 	beq.w	80077fa <_printf_float+0xb6>
 8007a0a:	f10a 0a01 	add.w	sl, sl, #1
 8007a0e:	e7ee      	b.n	80079ee <_printf_float+0x2aa>
 8007a10:	7fefffff 	.word	0x7fefffff
 8007a14:	0800c26e 	.word	0x0800c26e
 8007a18:	0800c26a 	.word	0x0800c26a
 8007a1c:	0800c276 	.word	0x0800c276
 8007a20:	0800c272 	.word	0x0800c272
 8007a24:	0800c27a 	.word	0x0800c27a
 8007a28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a2a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007a2e:	4553      	cmp	r3, sl
 8007a30:	bfa8      	it	ge
 8007a32:	4653      	movge	r3, sl
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	4699      	mov	r9, r3
 8007a38:	dc36      	bgt.n	8007aa8 <_printf_float+0x364>
 8007a3a:	f04f 0b00 	mov.w	fp, #0
 8007a3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a42:	f104 021a 	add.w	r2, r4, #26
 8007a46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a48:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a4a:	eba3 0309 	sub.w	r3, r3, r9
 8007a4e:	455b      	cmp	r3, fp
 8007a50:	dc31      	bgt.n	8007ab6 <_printf_float+0x372>
 8007a52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a54:	459a      	cmp	sl, r3
 8007a56:	dc3a      	bgt.n	8007ace <_printf_float+0x38a>
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	07da      	lsls	r2, r3, #31
 8007a5c:	d437      	bmi.n	8007ace <_printf_float+0x38a>
 8007a5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a60:	ebaa 0903 	sub.w	r9, sl, r3
 8007a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a66:	ebaa 0303 	sub.w	r3, sl, r3
 8007a6a:	4599      	cmp	r9, r3
 8007a6c:	bfa8      	it	ge
 8007a6e:	4699      	movge	r9, r3
 8007a70:	f1b9 0f00 	cmp.w	r9, #0
 8007a74:	dc33      	bgt.n	8007ade <_printf_float+0x39a>
 8007a76:	f04f 0800 	mov.w	r8, #0
 8007a7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a7e:	f104 0b1a 	add.w	fp, r4, #26
 8007a82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a84:	ebaa 0303 	sub.w	r3, sl, r3
 8007a88:	eba3 0309 	sub.w	r3, r3, r9
 8007a8c:	4543      	cmp	r3, r8
 8007a8e:	f77f af7a 	ble.w	8007986 <_printf_float+0x242>
 8007a92:	2301      	movs	r3, #1
 8007a94:	465a      	mov	r2, fp
 8007a96:	4631      	mov	r1, r6
 8007a98:	4628      	mov	r0, r5
 8007a9a:	47b8      	blx	r7
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	f43f aeac 	beq.w	80077fa <_printf_float+0xb6>
 8007aa2:	f108 0801 	add.w	r8, r8, #1
 8007aa6:	e7ec      	b.n	8007a82 <_printf_float+0x33e>
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4628      	mov	r0, r5
 8007aae:	47b8      	blx	r7
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d1c2      	bne.n	8007a3a <_printf_float+0x2f6>
 8007ab4:	e6a1      	b.n	80077fa <_printf_float+0xb6>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	920a      	str	r2, [sp, #40]	@ 0x28
 8007abe:	47b8      	blx	r7
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	f43f ae9a 	beq.w	80077fa <_printf_float+0xb6>
 8007ac6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ac8:	f10b 0b01 	add.w	fp, fp, #1
 8007acc:	e7bb      	b.n	8007a46 <_printf_float+0x302>
 8007ace:	4631      	mov	r1, r6
 8007ad0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	47b8      	blx	r7
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d1c0      	bne.n	8007a5e <_printf_float+0x31a>
 8007adc:	e68d      	b.n	80077fa <_printf_float+0xb6>
 8007ade:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ae0:	464b      	mov	r3, r9
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	4442      	add	r2, r8
 8007ae8:	47b8      	blx	r7
 8007aea:	3001      	adds	r0, #1
 8007aec:	d1c3      	bne.n	8007a76 <_printf_float+0x332>
 8007aee:	e684      	b.n	80077fa <_printf_float+0xb6>
 8007af0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007af4:	f1ba 0f01 	cmp.w	sl, #1
 8007af8:	dc01      	bgt.n	8007afe <_printf_float+0x3ba>
 8007afa:	07db      	lsls	r3, r3, #31
 8007afc:	d536      	bpl.n	8007b6c <_printf_float+0x428>
 8007afe:	2301      	movs	r3, #1
 8007b00:	4642      	mov	r2, r8
 8007b02:	4631      	mov	r1, r6
 8007b04:	4628      	mov	r0, r5
 8007b06:	47b8      	blx	r7
 8007b08:	3001      	adds	r0, #1
 8007b0a:	f43f ae76 	beq.w	80077fa <_printf_float+0xb6>
 8007b0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b12:	4631      	mov	r1, r6
 8007b14:	4628      	mov	r0, r5
 8007b16:	47b8      	blx	r7
 8007b18:	3001      	adds	r0, #1
 8007b1a:	f43f ae6e 	beq.w	80077fa <_printf_float+0xb6>
 8007b1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b22:	2200      	movs	r2, #0
 8007b24:	2300      	movs	r3, #0
 8007b26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b2a:	f7f8 ff55 	bl	80009d8 <__aeabi_dcmpeq>
 8007b2e:	b9c0      	cbnz	r0, 8007b62 <_printf_float+0x41e>
 8007b30:	4653      	mov	r3, sl
 8007b32:	f108 0201 	add.w	r2, r8, #1
 8007b36:	4631      	mov	r1, r6
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b8      	blx	r7
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d10c      	bne.n	8007b5a <_printf_float+0x416>
 8007b40:	e65b      	b.n	80077fa <_printf_float+0xb6>
 8007b42:	2301      	movs	r3, #1
 8007b44:	465a      	mov	r2, fp
 8007b46:	4631      	mov	r1, r6
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b8      	blx	r7
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	f43f ae54 	beq.w	80077fa <_printf_float+0xb6>
 8007b52:	f108 0801 	add.w	r8, r8, #1
 8007b56:	45d0      	cmp	r8, sl
 8007b58:	dbf3      	blt.n	8007b42 <_printf_float+0x3fe>
 8007b5a:	464b      	mov	r3, r9
 8007b5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007b60:	e6e0      	b.n	8007924 <_printf_float+0x1e0>
 8007b62:	f04f 0800 	mov.w	r8, #0
 8007b66:	f104 0b1a 	add.w	fp, r4, #26
 8007b6a:	e7f4      	b.n	8007b56 <_printf_float+0x412>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	4642      	mov	r2, r8
 8007b70:	e7e1      	b.n	8007b36 <_printf_float+0x3f2>
 8007b72:	2301      	movs	r3, #1
 8007b74:	464a      	mov	r2, r9
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	f43f ae3c 	beq.w	80077fa <_printf_float+0xb6>
 8007b82:	f108 0801 	add.w	r8, r8, #1
 8007b86:	68e3      	ldr	r3, [r4, #12]
 8007b88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007b8a:	1a5b      	subs	r3, r3, r1
 8007b8c:	4543      	cmp	r3, r8
 8007b8e:	dcf0      	bgt.n	8007b72 <_printf_float+0x42e>
 8007b90:	e6fd      	b.n	800798e <_printf_float+0x24a>
 8007b92:	f04f 0800 	mov.w	r8, #0
 8007b96:	f104 0919 	add.w	r9, r4, #25
 8007b9a:	e7f4      	b.n	8007b86 <_printf_float+0x442>

08007b9c <_printf_common>:
 8007b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba0:	4616      	mov	r6, r2
 8007ba2:	4698      	mov	r8, r3
 8007ba4:	688a      	ldr	r2, [r1, #8]
 8007ba6:	690b      	ldr	r3, [r1, #16]
 8007ba8:	4607      	mov	r7, r0
 8007baa:	4293      	cmp	r3, r2
 8007bac:	bfb8      	it	lt
 8007bae:	4613      	movlt	r3, r2
 8007bb0:	6033      	str	r3, [r6, #0]
 8007bb2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bbc:	b10a      	cbz	r2, 8007bc2 <_printf_common+0x26>
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	6033      	str	r3, [r6, #0]
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	0699      	lsls	r1, r3, #26
 8007bc6:	bf42      	ittt	mi
 8007bc8:	6833      	ldrmi	r3, [r6, #0]
 8007bca:	3302      	addmi	r3, #2
 8007bcc:	6033      	strmi	r3, [r6, #0]
 8007bce:	6825      	ldr	r5, [r4, #0]
 8007bd0:	f015 0506 	ands.w	r5, r5, #6
 8007bd4:	d106      	bne.n	8007be4 <_printf_common+0x48>
 8007bd6:	f104 0a19 	add.w	sl, r4, #25
 8007bda:	68e3      	ldr	r3, [r4, #12]
 8007bdc:	6832      	ldr	r2, [r6, #0]
 8007bde:	1a9b      	subs	r3, r3, r2
 8007be0:	42ab      	cmp	r3, r5
 8007be2:	dc2b      	bgt.n	8007c3c <_printf_common+0xa0>
 8007be4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007be8:	6822      	ldr	r2, [r4, #0]
 8007bea:	3b00      	subs	r3, #0
 8007bec:	bf18      	it	ne
 8007bee:	2301      	movne	r3, #1
 8007bf0:	0692      	lsls	r2, r2, #26
 8007bf2:	d430      	bmi.n	8007c56 <_printf_common+0xba>
 8007bf4:	4641      	mov	r1, r8
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bfc:	47c8      	blx	r9
 8007bfe:	3001      	adds	r0, #1
 8007c00:	d023      	beq.n	8007c4a <_printf_common+0xae>
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	6922      	ldr	r2, [r4, #16]
 8007c06:	f003 0306 	and.w	r3, r3, #6
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	bf14      	ite	ne
 8007c0e:	2500      	movne	r5, #0
 8007c10:	6833      	ldreq	r3, [r6, #0]
 8007c12:	f04f 0600 	mov.w	r6, #0
 8007c16:	bf08      	it	eq
 8007c18:	68e5      	ldreq	r5, [r4, #12]
 8007c1a:	f104 041a 	add.w	r4, r4, #26
 8007c1e:	bf08      	it	eq
 8007c20:	1aed      	subeq	r5, r5, r3
 8007c22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007c26:	bf08      	it	eq
 8007c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	bfc4      	itt	gt
 8007c30:	1a9b      	subgt	r3, r3, r2
 8007c32:	18ed      	addgt	r5, r5, r3
 8007c34:	42b5      	cmp	r5, r6
 8007c36:	d11a      	bne.n	8007c6e <_printf_common+0xd2>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	e008      	b.n	8007c4e <_printf_common+0xb2>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	4652      	mov	r2, sl
 8007c40:	4641      	mov	r1, r8
 8007c42:	4638      	mov	r0, r7
 8007c44:	47c8      	blx	r9
 8007c46:	3001      	adds	r0, #1
 8007c48:	d103      	bne.n	8007c52 <_printf_common+0xb6>
 8007c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c52:	3501      	adds	r5, #1
 8007c54:	e7c1      	b.n	8007bda <_printf_common+0x3e>
 8007c56:	2030      	movs	r0, #48	@ 0x30
 8007c58:	18e1      	adds	r1, r4, r3
 8007c5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c64:	4422      	add	r2, r4
 8007c66:	3302      	adds	r3, #2
 8007c68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c6c:	e7c2      	b.n	8007bf4 <_printf_common+0x58>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	4622      	mov	r2, r4
 8007c72:	4641      	mov	r1, r8
 8007c74:	4638      	mov	r0, r7
 8007c76:	47c8      	blx	r9
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d0e6      	beq.n	8007c4a <_printf_common+0xae>
 8007c7c:	3601      	adds	r6, #1
 8007c7e:	e7d9      	b.n	8007c34 <_printf_common+0x98>

08007c80 <_printf_i>:
 8007c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c84:	7e0f      	ldrb	r7, [r1, #24]
 8007c86:	4691      	mov	r9, r2
 8007c88:	2f78      	cmp	r7, #120	@ 0x78
 8007c8a:	4680      	mov	r8, r0
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	469a      	mov	sl, r3
 8007c90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c96:	d807      	bhi.n	8007ca8 <_printf_i+0x28>
 8007c98:	2f62      	cmp	r7, #98	@ 0x62
 8007c9a:	d80a      	bhi.n	8007cb2 <_printf_i+0x32>
 8007c9c:	2f00      	cmp	r7, #0
 8007c9e:	f000 80d1 	beq.w	8007e44 <_printf_i+0x1c4>
 8007ca2:	2f58      	cmp	r7, #88	@ 0x58
 8007ca4:	f000 80b8 	beq.w	8007e18 <_printf_i+0x198>
 8007ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cb0:	e03a      	b.n	8007d28 <_printf_i+0xa8>
 8007cb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cb6:	2b15      	cmp	r3, #21
 8007cb8:	d8f6      	bhi.n	8007ca8 <_printf_i+0x28>
 8007cba:	a101      	add	r1, pc, #4	@ (adr r1, 8007cc0 <_printf_i+0x40>)
 8007cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cc0:	08007d19 	.word	0x08007d19
 8007cc4:	08007d2d 	.word	0x08007d2d
 8007cc8:	08007ca9 	.word	0x08007ca9
 8007ccc:	08007ca9 	.word	0x08007ca9
 8007cd0:	08007ca9 	.word	0x08007ca9
 8007cd4:	08007ca9 	.word	0x08007ca9
 8007cd8:	08007d2d 	.word	0x08007d2d
 8007cdc:	08007ca9 	.word	0x08007ca9
 8007ce0:	08007ca9 	.word	0x08007ca9
 8007ce4:	08007ca9 	.word	0x08007ca9
 8007ce8:	08007ca9 	.word	0x08007ca9
 8007cec:	08007e2b 	.word	0x08007e2b
 8007cf0:	08007d57 	.word	0x08007d57
 8007cf4:	08007de5 	.word	0x08007de5
 8007cf8:	08007ca9 	.word	0x08007ca9
 8007cfc:	08007ca9 	.word	0x08007ca9
 8007d00:	08007e4d 	.word	0x08007e4d
 8007d04:	08007ca9 	.word	0x08007ca9
 8007d08:	08007d57 	.word	0x08007d57
 8007d0c:	08007ca9 	.word	0x08007ca9
 8007d10:	08007ca9 	.word	0x08007ca9
 8007d14:	08007ded 	.word	0x08007ded
 8007d18:	6833      	ldr	r3, [r6, #0]
 8007d1a:	1d1a      	adds	r2, r3, #4
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6032      	str	r2, [r6, #0]
 8007d20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e09c      	b.n	8007e66 <_printf_i+0x1e6>
 8007d2c:	6833      	ldr	r3, [r6, #0]
 8007d2e:	6820      	ldr	r0, [r4, #0]
 8007d30:	1d19      	adds	r1, r3, #4
 8007d32:	6031      	str	r1, [r6, #0]
 8007d34:	0606      	lsls	r6, r0, #24
 8007d36:	d501      	bpl.n	8007d3c <_printf_i+0xbc>
 8007d38:	681d      	ldr	r5, [r3, #0]
 8007d3a:	e003      	b.n	8007d44 <_printf_i+0xc4>
 8007d3c:	0645      	lsls	r5, r0, #25
 8007d3e:	d5fb      	bpl.n	8007d38 <_printf_i+0xb8>
 8007d40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d44:	2d00      	cmp	r5, #0
 8007d46:	da03      	bge.n	8007d50 <_printf_i+0xd0>
 8007d48:	232d      	movs	r3, #45	@ 0x2d
 8007d4a:	426d      	negs	r5, r5
 8007d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d50:	230a      	movs	r3, #10
 8007d52:	4858      	ldr	r0, [pc, #352]	@ (8007eb4 <_printf_i+0x234>)
 8007d54:	e011      	b.n	8007d7a <_printf_i+0xfa>
 8007d56:	6821      	ldr	r1, [r4, #0]
 8007d58:	6833      	ldr	r3, [r6, #0]
 8007d5a:	0608      	lsls	r0, r1, #24
 8007d5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d60:	d402      	bmi.n	8007d68 <_printf_i+0xe8>
 8007d62:	0649      	lsls	r1, r1, #25
 8007d64:	bf48      	it	mi
 8007d66:	b2ad      	uxthmi	r5, r5
 8007d68:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d6a:	6033      	str	r3, [r6, #0]
 8007d6c:	bf14      	ite	ne
 8007d6e:	230a      	movne	r3, #10
 8007d70:	2308      	moveq	r3, #8
 8007d72:	4850      	ldr	r0, [pc, #320]	@ (8007eb4 <_printf_i+0x234>)
 8007d74:	2100      	movs	r1, #0
 8007d76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d7a:	6866      	ldr	r6, [r4, #4]
 8007d7c:	2e00      	cmp	r6, #0
 8007d7e:	60a6      	str	r6, [r4, #8]
 8007d80:	db05      	blt.n	8007d8e <_printf_i+0x10e>
 8007d82:	6821      	ldr	r1, [r4, #0]
 8007d84:	432e      	orrs	r6, r5
 8007d86:	f021 0104 	bic.w	r1, r1, #4
 8007d8a:	6021      	str	r1, [r4, #0]
 8007d8c:	d04b      	beq.n	8007e26 <_printf_i+0x1a6>
 8007d8e:	4616      	mov	r6, r2
 8007d90:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d94:	fb03 5711 	mls	r7, r3, r1, r5
 8007d98:	5dc7      	ldrb	r7, [r0, r7]
 8007d9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d9e:	462f      	mov	r7, r5
 8007da0:	42bb      	cmp	r3, r7
 8007da2:	460d      	mov	r5, r1
 8007da4:	d9f4      	bls.n	8007d90 <_printf_i+0x110>
 8007da6:	2b08      	cmp	r3, #8
 8007da8:	d10b      	bne.n	8007dc2 <_printf_i+0x142>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	07df      	lsls	r7, r3, #31
 8007dae:	d508      	bpl.n	8007dc2 <_printf_i+0x142>
 8007db0:	6923      	ldr	r3, [r4, #16]
 8007db2:	6861      	ldr	r1, [r4, #4]
 8007db4:	4299      	cmp	r1, r3
 8007db6:	bfde      	ittt	le
 8007db8:	2330      	movle	r3, #48	@ 0x30
 8007dba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007dbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007dc2:	1b92      	subs	r2, r2, r6
 8007dc4:	6122      	str	r2, [r4, #16]
 8007dc6:	464b      	mov	r3, r9
 8007dc8:	4621      	mov	r1, r4
 8007dca:	4640      	mov	r0, r8
 8007dcc:	f8cd a000 	str.w	sl, [sp]
 8007dd0:	aa03      	add	r2, sp, #12
 8007dd2:	f7ff fee3 	bl	8007b9c <_printf_common>
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	d14a      	bne.n	8007e70 <_printf_i+0x1f0>
 8007dda:	f04f 30ff 	mov.w	r0, #4294967295
 8007dde:	b004      	add	sp, #16
 8007de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	f043 0320 	orr.w	r3, r3, #32
 8007dea:	6023      	str	r3, [r4, #0]
 8007dec:	2778      	movs	r7, #120	@ 0x78
 8007dee:	4832      	ldr	r0, [pc, #200]	@ (8007eb8 <_printf_i+0x238>)
 8007df0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	6831      	ldr	r1, [r6, #0]
 8007df8:	061f      	lsls	r7, r3, #24
 8007dfa:	f851 5b04 	ldr.w	r5, [r1], #4
 8007dfe:	d402      	bmi.n	8007e06 <_printf_i+0x186>
 8007e00:	065f      	lsls	r7, r3, #25
 8007e02:	bf48      	it	mi
 8007e04:	b2ad      	uxthmi	r5, r5
 8007e06:	6031      	str	r1, [r6, #0]
 8007e08:	07d9      	lsls	r1, r3, #31
 8007e0a:	bf44      	itt	mi
 8007e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8007e10:	6023      	strmi	r3, [r4, #0]
 8007e12:	b11d      	cbz	r5, 8007e1c <_printf_i+0x19c>
 8007e14:	2310      	movs	r3, #16
 8007e16:	e7ad      	b.n	8007d74 <_printf_i+0xf4>
 8007e18:	4826      	ldr	r0, [pc, #152]	@ (8007eb4 <_printf_i+0x234>)
 8007e1a:	e7e9      	b.n	8007df0 <_printf_i+0x170>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	f023 0320 	bic.w	r3, r3, #32
 8007e22:	6023      	str	r3, [r4, #0]
 8007e24:	e7f6      	b.n	8007e14 <_printf_i+0x194>
 8007e26:	4616      	mov	r6, r2
 8007e28:	e7bd      	b.n	8007da6 <_printf_i+0x126>
 8007e2a:	6833      	ldr	r3, [r6, #0]
 8007e2c:	6825      	ldr	r5, [r4, #0]
 8007e2e:	1d18      	adds	r0, r3, #4
 8007e30:	6961      	ldr	r1, [r4, #20]
 8007e32:	6030      	str	r0, [r6, #0]
 8007e34:	062e      	lsls	r6, r5, #24
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	d501      	bpl.n	8007e3e <_printf_i+0x1be>
 8007e3a:	6019      	str	r1, [r3, #0]
 8007e3c:	e002      	b.n	8007e44 <_printf_i+0x1c4>
 8007e3e:	0668      	lsls	r0, r5, #25
 8007e40:	d5fb      	bpl.n	8007e3a <_printf_i+0x1ba>
 8007e42:	8019      	strh	r1, [r3, #0]
 8007e44:	2300      	movs	r3, #0
 8007e46:	4616      	mov	r6, r2
 8007e48:	6123      	str	r3, [r4, #16]
 8007e4a:	e7bc      	b.n	8007dc6 <_printf_i+0x146>
 8007e4c:	6833      	ldr	r3, [r6, #0]
 8007e4e:	2100      	movs	r1, #0
 8007e50:	1d1a      	adds	r2, r3, #4
 8007e52:	6032      	str	r2, [r6, #0]
 8007e54:	681e      	ldr	r6, [r3, #0]
 8007e56:	6862      	ldr	r2, [r4, #4]
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f000 fab8 	bl	80083ce <memchr>
 8007e5e:	b108      	cbz	r0, 8007e64 <_printf_i+0x1e4>
 8007e60:	1b80      	subs	r0, r0, r6
 8007e62:	6060      	str	r0, [r4, #4]
 8007e64:	6863      	ldr	r3, [r4, #4]
 8007e66:	6123      	str	r3, [r4, #16]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e6e:	e7aa      	b.n	8007dc6 <_printf_i+0x146>
 8007e70:	4632      	mov	r2, r6
 8007e72:	4649      	mov	r1, r9
 8007e74:	4640      	mov	r0, r8
 8007e76:	6923      	ldr	r3, [r4, #16]
 8007e78:	47d0      	blx	sl
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	d0ad      	beq.n	8007dda <_printf_i+0x15a>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	079b      	lsls	r3, r3, #30
 8007e82:	d413      	bmi.n	8007eac <_printf_i+0x22c>
 8007e84:	68e0      	ldr	r0, [r4, #12]
 8007e86:	9b03      	ldr	r3, [sp, #12]
 8007e88:	4298      	cmp	r0, r3
 8007e8a:	bfb8      	it	lt
 8007e8c:	4618      	movlt	r0, r3
 8007e8e:	e7a6      	b.n	8007dde <_printf_i+0x15e>
 8007e90:	2301      	movs	r3, #1
 8007e92:	4632      	mov	r2, r6
 8007e94:	4649      	mov	r1, r9
 8007e96:	4640      	mov	r0, r8
 8007e98:	47d0      	blx	sl
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	d09d      	beq.n	8007dda <_printf_i+0x15a>
 8007e9e:	3501      	adds	r5, #1
 8007ea0:	68e3      	ldr	r3, [r4, #12]
 8007ea2:	9903      	ldr	r1, [sp, #12]
 8007ea4:	1a5b      	subs	r3, r3, r1
 8007ea6:	42ab      	cmp	r3, r5
 8007ea8:	dcf2      	bgt.n	8007e90 <_printf_i+0x210>
 8007eaa:	e7eb      	b.n	8007e84 <_printf_i+0x204>
 8007eac:	2500      	movs	r5, #0
 8007eae:	f104 0619 	add.w	r6, r4, #25
 8007eb2:	e7f5      	b.n	8007ea0 <_printf_i+0x220>
 8007eb4:	0800c27c 	.word	0x0800c27c
 8007eb8:	0800c28d 	.word	0x0800c28d

08007ebc <std>:
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	b510      	push	{r4, lr}
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007eca:	6083      	str	r3, [r0, #8]
 8007ecc:	8181      	strh	r1, [r0, #12]
 8007ece:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ed0:	81c2      	strh	r2, [r0, #14]
 8007ed2:	6183      	str	r3, [r0, #24]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	2208      	movs	r2, #8
 8007ed8:	305c      	adds	r0, #92	@ 0x5c
 8007eda:	f000 f9f9 	bl	80082d0 <memset>
 8007ede:	4b0d      	ldr	r3, [pc, #52]	@ (8007f14 <std+0x58>)
 8007ee0:	6224      	str	r4, [r4, #32]
 8007ee2:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8007f18 <std+0x5c>)
 8007ee6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8007f1c <std+0x60>)
 8007eea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007eec:	4b0c      	ldr	r3, [pc, #48]	@ (8007f20 <std+0x64>)
 8007eee:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8007f24 <std+0x68>)
 8007ef2:	429c      	cmp	r4, r3
 8007ef4:	d006      	beq.n	8007f04 <std+0x48>
 8007ef6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007efa:	4294      	cmp	r4, r2
 8007efc:	d002      	beq.n	8007f04 <std+0x48>
 8007efe:	33d0      	adds	r3, #208	@ 0xd0
 8007f00:	429c      	cmp	r4, r3
 8007f02:	d105      	bne.n	8007f10 <std+0x54>
 8007f04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f0c:	f000 ba5c 	b.w	80083c8 <__retarget_lock_init_recursive>
 8007f10:	bd10      	pop	{r4, pc}
 8007f12:	bf00      	nop
 8007f14:	08008121 	.word	0x08008121
 8007f18:	08008143 	.word	0x08008143
 8007f1c:	0800817b 	.word	0x0800817b
 8007f20:	0800819f 	.word	0x0800819f
 8007f24:	200011f8 	.word	0x200011f8

08007f28 <stdio_exit_handler>:
 8007f28:	4a02      	ldr	r2, [pc, #8]	@ (8007f34 <stdio_exit_handler+0xc>)
 8007f2a:	4903      	ldr	r1, [pc, #12]	@ (8007f38 <stdio_exit_handler+0x10>)
 8007f2c:	4803      	ldr	r0, [pc, #12]	@ (8007f3c <stdio_exit_handler+0x14>)
 8007f2e:	f000 b869 	b.w	8008004 <_fwalk_sglue>
 8007f32:	bf00      	nop
 8007f34:	20000024 	.word	0x20000024
 8007f38:	08009d31 	.word	0x08009d31
 8007f3c:	20000034 	.word	0x20000034

08007f40 <cleanup_stdio>:
 8007f40:	6841      	ldr	r1, [r0, #4]
 8007f42:	4b0c      	ldr	r3, [pc, #48]	@ (8007f74 <cleanup_stdio+0x34>)
 8007f44:	b510      	push	{r4, lr}
 8007f46:	4299      	cmp	r1, r3
 8007f48:	4604      	mov	r4, r0
 8007f4a:	d001      	beq.n	8007f50 <cleanup_stdio+0x10>
 8007f4c:	f001 fef0 	bl	8009d30 <_fflush_r>
 8007f50:	68a1      	ldr	r1, [r4, #8]
 8007f52:	4b09      	ldr	r3, [pc, #36]	@ (8007f78 <cleanup_stdio+0x38>)
 8007f54:	4299      	cmp	r1, r3
 8007f56:	d002      	beq.n	8007f5e <cleanup_stdio+0x1e>
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f001 fee9 	bl	8009d30 <_fflush_r>
 8007f5e:	68e1      	ldr	r1, [r4, #12]
 8007f60:	4b06      	ldr	r3, [pc, #24]	@ (8007f7c <cleanup_stdio+0x3c>)
 8007f62:	4299      	cmp	r1, r3
 8007f64:	d004      	beq.n	8007f70 <cleanup_stdio+0x30>
 8007f66:	4620      	mov	r0, r4
 8007f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f6c:	f001 bee0 	b.w	8009d30 <_fflush_r>
 8007f70:	bd10      	pop	{r4, pc}
 8007f72:	bf00      	nop
 8007f74:	200011f8 	.word	0x200011f8
 8007f78:	20001260 	.word	0x20001260
 8007f7c:	200012c8 	.word	0x200012c8

08007f80 <global_stdio_init.part.0>:
 8007f80:	b510      	push	{r4, lr}
 8007f82:	4b0b      	ldr	r3, [pc, #44]	@ (8007fb0 <global_stdio_init.part.0+0x30>)
 8007f84:	4c0b      	ldr	r4, [pc, #44]	@ (8007fb4 <global_stdio_init.part.0+0x34>)
 8007f86:	4a0c      	ldr	r2, [pc, #48]	@ (8007fb8 <global_stdio_init.part.0+0x38>)
 8007f88:	4620      	mov	r0, r4
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	2104      	movs	r1, #4
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f7ff ff94 	bl	8007ebc <std>
 8007f94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f98:	2201      	movs	r2, #1
 8007f9a:	2109      	movs	r1, #9
 8007f9c:	f7ff ff8e 	bl	8007ebc <std>
 8007fa0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007faa:	2112      	movs	r1, #18
 8007fac:	f7ff bf86 	b.w	8007ebc <std>
 8007fb0:	20001330 	.word	0x20001330
 8007fb4:	200011f8 	.word	0x200011f8
 8007fb8:	08007f29 	.word	0x08007f29

08007fbc <__sfp_lock_acquire>:
 8007fbc:	4801      	ldr	r0, [pc, #4]	@ (8007fc4 <__sfp_lock_acquire+0x8>)
 8007fbe:	f000 ba04 	b.w	80083ca <__retarget_lock_acquire_recursive>
 8007fc2:	bf00      	nop
 8007fc4:	20001339 	.word	0x20001339

08007fc8 <__sfp_lock_release>:
 8007fc8:	4801      	ldr	r0, [pc, #4]	@ (8007fd0 <__sfp_lock_release+0x8>)
 8007fca:	f000 b9ff 	b.w	80083cc <__retarget_lock_release_recursive>
 8007fce:	bf00      	nop
 8007fd0:	20001339 	.word	0x20001339

08007fd4 <__sinit>:
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	f7ff fff0 	bl	8007fbc <__sfp_lock_acquire>
 8007fdc:	6a23      	ldr	r3, [r4, #32]
 8007fde:	b11b      	cbz	r3, 8007fe8 <__sinit+0x14>
 8007fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe4:	f7ff bff0 	b.w	8007fc8 <__sfp_lock_release>
 8007fe8:	4b04      	ldr	r3, [pc, #16]	@ (8007ffc <__sinit+0x28>)
 8007fea:	6223      	str	r3, [r4, #32]
 8007fec:	4b04      	ldr	r3, [pc, #16]	@ (8008000 <__sinit+0x2c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1f5      	bne.n	8007fe0 <__sinit+0xc>
 8007ff4:	f7ff ffc4 	bl	8007f80 <global_stdio_init.part.0>
 8007ff8:	e7f2      	b.n	8007fe0 <__sinit+0xc>
 8007ffa:	bf00      	nop
 8007ffc:	08007f41 	.word	0x08007f41
 8008000:	20001330 	.word	0x20001330

08008004 <_fwalk_sglue>:
 8008004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008008:	4607      	mov	r7, r0
 800800a:	4688      	mov	r8, r1
 800800c:	4614      	mov	r4, r2
 800800e:	2600      	movs	r6, #0
 8008010:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008014:	f1b9 0901 	subs.w	r9, r9, #1
 8008018:	d505      	bpl.n	8008026 <_fwalk_sglue+0x22>
 800801a:	6824      	ldr	r4, [r4, #0]
 800801c:	2c00      	cmp	r4, #0
 800801e:	d1f7      	bne.n	8008010 <_fwalk_sglue+0xc>
 8008020:	4630      	mov	r0, r6
 8008022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008026:	89ab      	ldrh	r3, [r5, #12]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d907      	bls.n	800803c <_fwalk_sglue+0x38>
 800802c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008030:	3301      	adds	r3, #1
 8008032:	d003      	beq.n	800803c <_fwalk_sglue+0x38>
 8008034:	4629      	mov	r1, r5
 8008036:	4638      	mov	r0, r7
 8008038:	47c0      	blx	r8
 800803a:	4306      	orrs	r6, r0
 800803c:	3568      	adds	r5, #104	@ 0x68
 800803e:	e7e9      	b.n	8008014 <_fwalk_sglue+0x10>

08008040 <iprintf>:
 8008040:	b40f      	push	{r0, r1, r2, r3}
 8008042:	b507      	push	{r0, r1, r2, lr}
 8008044:	4906      	ldr	r1, [pc, #24]	@ (8008060 <iprintf+0x20>)
 8008046:	ab04      	add	r3, sp, #16
 8008048:	6808      	ldr	r0, [r1, #0]
 800804a:	f853 2b04 	ldr.w	r2, [r3], #4
 800804e:	6881      	ldr	r1, [r0, #8]
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	f001 fcd5 	bl	8009a00 <_vfiprintf_r>
 8008056:	b003      	add	sp, #12
 8008058:	f85d eb04 	ldr.w	lr, [sp], #4
 800805c:	b004      	add	sp, #16
 800805e:	4770      	bx	lr
 8008060:	20000030 	.word	0x20000030

08008064 <_puts_r>:
 8008064:	6a03      	ldr	r3, [r0, #32]
 8008066:	b570      	push	{r4, r5, r6, lr}
 8008068:	4605      	mov	r5, r0
 800806a:	460e      	mov	r6, r1
 800806c:	6884      	ldr	r4, [r0, #8]
 800806e:	b90b      	cbnz	r3, 8008074 <_puts_r+0x10>
 8008070:	f7ff ffb0 	bl	8007fd4 <__sinit>
 8008074:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008076:	07db      	lsls	r3, r3, #31
 8008078:	d405      	bmi.n	8008086 <_puts_r+0x22>
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	0598      	lsls	r0, r3, #22
 800807e:	d402      	bmi.n	8008086 <_puts_r+0x22>
 8008080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008082:	f000 f9a2 	bl	80083ca <__retarget_lock_acquire_recursive>
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	0719      	lsls	r1, r3, #28
 800808a:	d502      	bpl.n	8008092 <_puts_r+0x2e>
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d135      	bne.n	80080fe <_puts_r+0x9a>
 8008092:	4621      	mov	r1, r4
 8008094:	4628      	mov	r0, r5
 8008096:	f000 f8c5 	bl	8008224 <__swsetup_r>
 800809a:	b380      	cbz	r0, 80080fe <_puts_r+0x9a>
 800809c:	f04f 35ff 	mov.w	r5, #4294967295
 80080a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080a2:	07da      	lsls	r2, r3, #31
 80080a4:	d405      	bmi.n	80080b2 <_puts_r+0x4e>
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	059b      	lsls	r3, r3, #22
 80080aa:	d402      	bmi.n	80080b2 <_puts_r+0x4e>
 80080ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080ae:	f000 f98d 	bl	80083cc <__retarget_lock_release_recursive>
 80080b2:	4628      	mov	r0, r5
 80080b4:	bd70      	pop	{r4, r5, r6, pc}
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	da04      	bge.n	80080c4 <_puts_r+0x60>
 80080ba:	69a2      	ldr	r2, [r4, #24]
 80080bc:	429a      	cmp	r2, r3
 80080be:	dc17      	bgt.n	80080f0 <_puts_r+0x8c>
 80080c0:	290a      	cmp	r1, #10
 80080c2:	d015      	beq.n	80080f0 <_puts_r+0x8c>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	1c5a      	adds	r2, r3, #1
 80080c8:	6022      	str	r2, [r4, #0]
 80080ca:	7019      	strb	r1, [r3, #0]
 80080cc:	68a3      	ldr	r3, [r4, #8]
 80080ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080d2:	3b01      	subs	r3, #1
 80080d4:	60a3      	str	r3, [r4, #8]
 80080d6:	2900      	cmp	r1, #0
 80080d8:	d1ed      	bne.n	80080b6 <_puts_r+0x52>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	da11      	bge.n	8008102 <_puts_r+0x9e>
 80080de:	4622      	mov	r2, r4
 80080e0:	210a      	movs	r1, #10
 80080e2:	4628      	mov	r0, r5
 80080e4:	f000 f85f 	bl	80081a6 <__swbuf_r>
 80080e8:	3001      	adds	r0, #1
 80080ea:	d0d7      	beq.n	800809c <_puts_r+0x38>
 80080ec:	250a      	movs	r5, #10
 80080ee:	e7d7      	b.n	80080a0 <_puts_r+0x3c>
 80080f0:	4622      	mov	r2, r4
 80080f2:	4628      	mov	r0, r5
 80080f4:	f000 f857 	bl	80081a6 <__swbuf_r>
 80080f8:	3001      	adds	r0, #1
 80080fa:	d1e7      	bne.n	80080cc <_puts_r+0x68>
 80080fc:	e7ce      	b.n	800809c <_puts_r+0x38>
 80080fe:	3e01      	subs	r6, #1
 8008100:	e7e4      	b.n	80080cc <_puts_r+0x68>
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	1c5a      	adds	r2, r3, #1
 8008106:	6022      	str	r2, [r4, #0]
 8008108:	220a      	movs	r2, #10
 800810a:	701a      	strb	r2, [r3, #0]
 800810c:	e7ee      	b.n	80080ec <_puts_r+0x88>
	...

08008110 <puts>:
 8008110:	4b02      	ldr	r3, [pc, #8]	@ (800811c <puts+0xc>)
 8008112:	4601      	mov	r1, r0
 8008114:	6818      	ldr	r0, [r3, #0]
 8008116:	f7ff bfa5 	b.w	8008064 <_puts_r>
 800811a:	bf00      	nop
 800811c:	20000030 	.word	0x20000030

08008120 <__sread>:
 8008120:	b510      	push	{r4, lr}
 8008122:	460c      	mov	r4, r1
 8008124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008128:	f000 f900 	bl	800832c <_read_r>
 800812c:	2800      	cmp	r0, #0
 800812e:	bfab      	itete	ge
 8008130:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008132:	89a3      	ldrhlt	r3, [r4, #12]
 8008134:	181b      	addge	r3, r3, r0
 8008136:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800813a:	bfac      	ite	ge
 800813c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800813e:	81a3      	strhlt	r3, [r4, #12]
 8008140:	bd10      	pop	{r4, pc}

08008142 <__swrite>:
 8008142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008146:	461f      	mov	r7, r3
 8008148:	898b      	ldrh	r3, [r1, #12]
 800814a:	4605      	mov	r5, r0
 800814c:	05db      	lsls	r3, r3, #23
 800814e:	460c      	mov	r4, r1
 8008150:	4616      	mov	r6, r2
 8008152:	d505      	bpl.n	8008160 <__swrite+0x1e>
 8008154:	2302      	movs	r3, #2
 8008156:	2200      	movs	r2, #0
 8008158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815c:	f000 f8d4 	bl	8008308 <_lseek_r>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	4632      	mov	r2, r6
 8008164:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008168:	81a3      	strh	r3, [r4, #12]
 800816a:	4628      	mov	r0, r5
 800816c:	463b      	mov	r3, r7
 800816e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008176:	f000 b8eb 	b.w	8008350 <_write_r>

0800817a <__sseek>:
 800817a:	b510      	push	{r4, lr}
 800817c:	460c      	mov	r4, r1
 800817e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008182:	f000 f8c1 	bl	8008308 <_lseek_r>
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	bf15      	itete	ne
 800818c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800818e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008192:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008196:	81a3      	strheq	r3, [r4, #12]
 8008198:	bf18      	it	ne
 800819a:	81a3      	strhne	r3, [r4, #12]
 800819c:	bd10      	pop	{r4, pc}

0800819e <__sclose>:
 800819e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a2:	f000 b8a1 	b.w	80082e8 <_close_r>

080081a6 <__swbuf_r>:
 80081a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a8:	460e      	mov	r6, r1
 80081aa:	4614      	mov	r4, r2
 80081ac:	4605      	mov	r5, r0
 80081ae:	b118      	cbz	r0, 80081b8 <__swbuf_r+0x12>
 80081b0:	6a03      	ldr	r3, [r0, #32]
 80081b2:	b90b      	cbnz	r3, 80081b8 <__swbuf_r+0x12>
 80081b4:	f7ff ff0e 	bl	8007fd4 <__sinit>
 80081b8:	69a3      	ldr	r3, [r4, #24]
 80081ba:	60a3      	str	r3, [r4, #8]
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	071a      	lsls	r2, r3, #28
 80081c0:	d501      	bpl.n	80081c6 <__swbuf_r+0x20>
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	b943      	cbnz	r3, 80081d8 <__swbuf_r+0x32>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4628      	mov	r0, r5
 80081ca:	f000 f82b 	bl	8008224 <__swsetup_r>
 80081ce:	b118      	cbz	r0, 80081d8 <__swbuf_r+0x32>
 80081d0:	f04f 37ff 	mov.w	r7, #4294967295
 80081d4:	4638      	mov	r0, r7
 80081d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	6922      	ldr	r2, [r4, #16]
 80081dc:	b2f6      	uxtb	r6, r6
 80081de:	1a98      	subs	r0, r3, r2
 80081e0:	6963      	ldr	r3, [r4, #20]
 80081e2:	4637      	mov	r7, r6
 80081e4:	4283      	cmp	r3, r0
 80081e6:	dc05      	bgt.n	80081f4 <__swbuf_r+0x4e>
 80081e8:	4621      	mov	r1, r4
 80081ea:	4628      	mov	r0, r5
 80081ec:	f001 fda0 	bl	8009d30 <_fflush_r>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d1ed      	bne.n	80081d0 <__swbuf_r+0x2a>
 80081f4:	68a3      	ldr	r3, [r4, #8]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	60a3      	str	r3, [r4, #8]
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	6022      	str	r2, [r4, #0]
 8008200:	701e      	strb	r6, [r3, #0]
 8008202:	6962      	ldr	r2, [r4, #20]
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	429a      	cmp	r2, r3
 8008208:	d004      	beq.n	8008214 <__swbuf_r+0x6e>
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	07db      	lsls	r3, r3, #31
 800820e:	d5e1      	bpl.n	80081d4 <__swbuf_r+0x2e>
 8008210:	2e0a      	cmp	r6, #10
 8008212:	d1df      	bne.n	80081d4 <__swbuf_r+0x2e>
 8008214:	4621      	mov	r1, r4
 8008216:	4628      	mov	r0, r5
 8008218:	f001 fd8a 	bl	8009d30 <_fflush_r>
 800821c:	2800      	cmp	r0, #0
 800821e:	d0d9      	beq.n	80081d4 <__swbuf_r+0x2e>
 8008220:	e7d6      	b.n	80081d0 <__swbuf_r+0x2a>
	...

08008224 <__swsetup_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4b29      	ldr	r3, [pc, #164]	@ (80082cc <__swsetup_r+0xa8>)
 8008228:	4605      	mov	r5, r0
 800822a:	6818      	ldr	r0, [r3, #0]
 800822c:	460c      	mov	r4, r1
 800822e:	b118      	cbz	r0, 8008238 <__swsetup_r+0x14>
 8008230:	6a03      	ldr	r3, [r0, #32]
 8008232:	b90b      	cbnz	r3, 8008238 <__swsetup_r+0x14>
 8008234:	f7ff fece 	bl	8007fd4 <__sinit>
 8008238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800823c:	0719      	lsls	r1, r3, #28
 800823e:	d422      	bmi.n	8008286 <__swsetup_r+0x62>
 8008240:	06da      	lsls	r2, r3, #27
 8008242:	d407      	bmi.n	8008254 <__swsetup_r+0x30>
 8008244:	2209      	movs	r2, #9
 8008246:	602a      	str	r2, [r5, #0]
 8008248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800824c:	f04f 30ff 	mov.w	r0, #4294967295
 8008250:	81a3      	strh	r3, [r4, #12]
 8008252:	e033      	b.n	80082bc <__swsetup_r+0x98>
 8008254:	0758      	lsls	r0, r3, #29
 8008256:	d512      	bpl.n	800827e <__swsetup_r+0x5a>
 8008258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800825a:	b141      	cbz	r1, 800826e <__swsetup_r+0x4a>
 800825c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008260:	4299      	cmp	r1, r3
 8008262:	d002      	beq.n	800826a <__swsetup_r+0x46>
 8008264:	4628      	mov	r0, r5
 8008266:	f000 ff2b 	bl	80090c0 <_free_r>
 800826a:	2300      	movs	r3, #0
 800826c:	6363      	str	r3, [r4, #52]	@ 0x34
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008274:	81a3      	strh	r3, [r4, #12]
 8008276:	2300      	movs	r3, #0
 8008278:	6063      	str	r3, [r4, #4]
 800827a:	6923      	ldr	r3, [r4, #16]
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	f043 0308 	orr.w	r3, r3, #8
 8008284:	81a3      	strh	r3, [r4, #12]
 8008286:	6923      	ldr	r3, [r4, #16]
 8008288:	b94b      	cbnz	r3, 800829e <__swsetup_r+0x7a>
 800828a:	89a3      	ldrh	r3, [r4, #12]
 800828c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008294:	d003      	beq.n	800829e <__swsetup_r+0x7a>
 8008296:	4621      	mov	r1, r4
 8008298:	4628      	mov	r0, r5
 800829a:	f001 fd96 	bl	8009dca <__smakebuf_r>
 800829e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082a2:	f013 0201 	ands.w	r2, r3, #1
 80082a6:	d00a      	beq.n	80082be <__swsetup_r+0x9a>
 80082a8:	2200      	movs	r2, #0
 80082aa:	60a2      	str	r2, [r4, #8]
 80082ac:	6962      	ldr	r2, [r4, #20]
 80082ae:	4252      	negs	r2, r2
 80082b0:	61a2      	str	r2, [r4, #24]
 80082b2:	6922      	ldr	r2, [r4, #16]
 80082b4:	b942      	cbnz	r2, 80082c8 <__swsetup_r+0xa4>
 80082b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082ba:	d1c5      	bne.n	8008248 <__swsetup_r+0x24>
 80082bc:	bd38      	pop	{r3, r4, r5, pc}
 80082be:	0799      	lsls	r1, r3, #30
 80082c0:	bf58      	it	pl
 80082c2:	6962      	ldrpl	r2, [r4, #20]
 80082c4:	60a2      	str	r2, [r4, #8]
 80082c6:	e7f4      	b.n	80082b2 <__swsetup_r+0x8e>
 80082c8:	2000      	movs	r0, #0
 80082ca:	e7f7      	b.n	80082bc <__swsetup_r+0x98>
 80082cc:	20000030 	.word	0x20000030

080082d0 <memset>:
 80082d0:	4603      	mov	r3, r0
 80082d2:	4402      	add	r2, r0
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d100      	bne.n	80082da <memset+0xa>
 80082d8:	4770      	bx	lr
 80082da:	f803 1b01 	strb.w	r1, [r3], #1
 80082de:	e7f9      	b.n	80082d4 <memset+0x4>

080082e0 <_localeconv_r>:
 80082e0:	4800      	ldr	r0, [pc, #0]	@ (80082e4 <_localeconv_r+0x4>)
 80082e2:	4770      	bx	lr
 80082e4:	20000170 	.word	0x20000170

080082e8 <_close_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	2300      	movs	r3, #0
 80082ec:	4d05      	ldr	r5, [pc, #20]	@ (8008304 <_close_r+0x1c>)
 80082ee:	4604      	mov	r4, r0
 80082f0:	4608      	mov	r0, r1
 80082f2:	602b      	str	r3, [r5, #0]
 80082f4:	f7fa fb9d 	bl	8002a32 <_close>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d102      	bne.n	8008302 <_close_r+0x1a>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	b103      	cbz	r3, 8008302 <_close_r+0x1a>
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	bd38      	pop	{r3, r4, r5, pc}
 8008304:	20001334 	.word	0x20001334

08008308 <_lseek_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4604      	mov	r4, r0
 800830c:	4608      	mov	r0, r1
 800830e:	4611      	mov	r1, r2
 8008310:	2200      	movs	r2, #0
 8008312:	4d05      	ldr	r5, [pc, #20]	@ (8008328 <_lseek_r+0x20>)
 8008314:	602a      	str	r2, [r5, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	f7fa fbaf 	bl	8002a7a <_lseek>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_lseek_r+0x1e>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_lseek_r+0x1e>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	20001334 	.word	0x20001334

0800832c <_read_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4604      	mov	r4, r0
 8008330:	4608      	mov	r0, r1
 8008332:	4611      	mov	r1, r2
 8008334:	2200      	movs	r2, #0
 8008336:	4d05      	ldr	r5, [pc, #20]	@ (800834c <_read_r+0x20>)
 8008338:	602a      	str	r2, [r5, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	f7fa fb40 	bl	80029c0 <_read>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_read_r+0x1e>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_read_r+0x1e>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	20001334 	.word	0x20001334

08008350 <_write_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	2200      	movs	r2, #0
 800835a:	4d05      	ldr	r5, [pc, #20]	@ (8008370 <_write_r+0x20>)
 800835c:	602a      	str	r2, [r5, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	f7fa fb4b 	bl	80029fa <_write>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d102      	bne.n	800836e <_write_r+0x1e>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	b103      	cbz	r3, 800836e <_write_r+0x1e>
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	20001334 	.word	0x20001334

08008374 <__errno>:
 8008374:	4b01      	ldr	r3, [pc, #4]	@ (800837c <__errno+0x8>)
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	20000030 	.word	0x20000030

08008380 <__libc_init_array>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	2600      	movs	r6, #0
 8008384:	4d0c      	ldr	r5, [pc, #48]	@ (80083b8 <__libc_init_array+0x38>)
 8008386:	4c0d      	ldr	r4, [pc, #52]	@ (80083bc <__libc_init_array+0x3c>)
 8008388:	1b64      	subs	r4, r4, r5
 800838a:	10a4      	asrs	r4, r4, #2
 800838c:	42a6      	cmp	r6, r4
 800838e:	d109      	bne.n	80083a4 <__libc_init_array+0x24>
 8008390:	f001 ffae 	bl	800a2f0 <_init>
 8008394:	2600      	movs	r6, #0
 8008396:	4d0a      	ldr	r5, [pc, #40]	@ (80083c0 <__libc_init_array+0x40>)
 8008398:	4c0a      	ldr	r4, [pc, #40]	@ (80083c4 <__libc_init_array+0x44>)
 800839a:	1b64      	subs	r4, r4, r5
 800839c:	10a4      	asrs	r4, r4, #2
 800839e:	42a6      	cmp	r6, r4
 80083a0:	d105      	bne.n	80083ae <__libc_init_array+0x2e>
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a8:	4798      	blx	r3
 80083aa:	3601      	adds	r6, #1
 80083ac:	e7ee      	b.n	800838c <__libc_init_array+0xc>
 80083ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b2:	4798      	blx	r3
 80083b4:	3601      	adds	r6, #1
 80083b6:	e7f2      	b.n	800839e <__libc_init_array+0x1e>
 80083b8:	0800c5fc 	.word	0x0800c5fc
 80083bc:	0800c5fc 	.word	0x0800c5fc
 80083c0:	0800c5fc 	.word	0x0800c5fc
 80083c4:	0800c600 	.word	0x0800c600

080083c8 <__retarget_lock_init_recursive>:
 80083c8:	4770      	bx	lr

080083ca <__retarget_lock_acquire_recursive>:
 80083ca:	4770      	bx	lr

080083cc <__retarget_lock_release_recursive>:
 80083cc:	4770      	bx	lr

080083ce <memchr>:
 80083ce:	4603      	mov	r3, r0
 80083d0:	b510      	push	{r4, lr}
 80083d2:	b2c9      	uxtb	r1, r1
 80083d4:	4402      	add	r2, r0
 80083d6:	4293      	cmp	r3, r2
 80083d8:	4618      	mov	r0, r3
 80083da:	d101      	bne.n	80083e0 <memchr+0x12>
 80083dc:	2000      	movs	r0, #0
 80083de:	e003      	b.n	80083e8 <memchr+0x1a>
 80083e0:	7804      	ldrb	r4, [r0, #0]
 80083e2:	3301      	adds	r3, #1
 80083e4:	428c      	cmp	r4, r1
 80083e6:	d1f6      	bne.n	80083d6 <memchr+0x8>
 80083e8:	bd10      	pop	{r4, pc}

080083ea <memcpy>:
 80083ea:	440a      	add	r2, r1
 80083ec:	4291      	cmp	r1, r2
 80083ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80083f2:	d100      	bne.n	80083f6 <memcpy+0xc>
 80083f4:	4770      	bx	lr
 80083f6:	b510      	push	{r4, lr}
 80083f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083fc:	4291      	cmp	r1, r2
 80083fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008402:	d1f9      	bne.n	80083f8 <memcpy+0xe>
 8008404:	bd10      	pop	{r4, pc}

08008406 <quorem>:
 8008406:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840a:	6903      	ldr	r3, [r0, #16]
 800840c:	690c      	ldr	r4, [r1, #16]
 800840e:	4607      	mov	r7, r0
 8008410:	42a3      	cmp	r3, r4
 8008412:	db7e      	blt.n	8008512 <quorem+0x10c>
 8008414:	3c01      	subs	r4, #1
 8008416:	00a3      	lsls	r3, r4, #2
 8008418:	f100 0514 	add.w	r5, r0, #20
 800841c:	f101 0814 	add.w	r8, r1, #20
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800842c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008430:	3301      	adds	r3, #1
 8008432:	429a      	cmp	r2, r3
 8008434:	fbb2 f6f3 	udiv	r6, r2, r3
 8008438:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800843c:	d32e      	bcc.n	800849c <quorem+0x96>
 800843e:	f04f 0a00 	mov.w	sl, #0
 8008442:	46c4      	mov	ip, r8
 8008444:	46ae      	mov	lr, r5
 8008446:	46d3      	mov	fp, sl
 8008448:	f85c 3b04 	ldr.w	r3, [ip], #4
 800844c:	b298      	uxth	r0, r3
 800844e:	fb06 a000 	mla	r0, r6, r0, sl
 8008452:	0c1b      	lsrs	r3, r3, #16
 8008454:	0c02      	lsrs	r2, r0, #16
 8008456:	fb06 2303 	mla	r3, r6, r3, r2
 800845a:	f8de 2000 	ldr.w	r2, [lr]
 800845e:	b280      	uxth	r0, r0
 8008460:	b292      	uxth	r2, r2
 8008462:	1a12      	subs	r2, r2, r0
 8008464:	445a      	add	r2, fp
 8008466:	f8de 0000 	ldr.w	r0, [lr]
 800846a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800846e:	b29b      	uxth	r3, r3
 8008470:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008474:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008478:	b292      	uxth	r2, r2
 800847a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800847e:	45e1      	cmp	r9, ip
 8008480:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008484:	f84e 2b04 	str.w	r2, [lr], #4
 8008488:	d2de      	bcs.n	8008448 <quorem+0x42>
 800848a:	9b00      	ldr	r3, [sp, #0]
 800848c:	58eb      	ldr	r3, [r5, r3]
 800848e:	b92b      	cbnz	r3, 800849c <quorem+0x96>
 8008490:	9b01      	ldr	r3, [sp, #4]
 8008492:	3b04      	subs	r3, #4
 8008494:	429d      	cmp	r5, r3
 8008496:	461a      	mov	r2, r3
 8008498:	d32f      	bcc.n	80084fa <quorem+0xf4>
 800849a:	613c      	str	r4, [r7, #16]
 800849c:	4638      	mov	r0, r7
 800849e:	f001 f97f 	bl	80097a0 <__mcmp>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	db25      	blt.n	80084f2 <quorem+0xec>
 80084a6:	4629      	mov	r1, r5
 80084a8:	2000      	movs	r0, #0
 80084aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80084ae:	f8d1 c000 	ldr.w	ip, [r1]
 80084b2:	fa1f fe82 	uxth.w	lr, r2
 80084b6:	fa1f f38c 	uxth.w	r3, ip
 80084ba:	eba3 030e 	sub.w	r3, r3, lr
 80084be:	4403      	add	r3, r0
 80084c0:	0c12      	lsrs	r2, r2, #16
 80084c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80084c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084d0:	45c1      	cmp	r9, r8
 80084d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80084d6:	f841 3b04 	str.w	r3, [r1], #4
 80084da:	d2e6      	bcs.n	80084aa <quorem+0xa4>
 80084dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084e4:	b922      	cbnz	r2, 80084f0 <quorem+0xea>
 80084e6:	3b04      	subs	r3, #4
 80084e8:	429d      	cmp	r5, r3
 80084ea:	461a      	mov	r2, r3
 80084ec:	d30b      	bcc.n	8008506 <quorem+0x100>
 80084ee:	613c      	str	r4, [r7, #16]
 80084f0:	3601      	adds	r6, #1
 80084f2:	4630      	mov	r0, r6
 80084f4:	b003      	add	sp, #12
 80084f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fa:	6812      	ldr	r2, [r2, #0]
 80084fc:	3b04      	subs	r3, #4
 80084fe:	2a00      	cmp	r2, #0
 8008500:	d1cb      	bne.n	800849a <quorem+0x94>
 8008502:	3c01      	subs	r4, #1
 8008504:	e7c6      	b.n	8008494 <quorem+0x8e>
 8008506:	6812      	ldr	r2, [r2, #0]
 8008508:	3b04      	subs	r3, #4
 800850a:	2a00      	cmp	r2, #0
 800850c:	d1ef      	bne.n	80084ee <quorem+0xe8>
 800850e:	3c01      	subs	r4, #1
 8008510:	e7ea      	b.n	80084e8 <quorem+0xe2>
 8008512:	2000      	movs	r0, #0
 8008514:	e7ee      	b.n	80084f4 <quorem+0xee>
	...

08008518 <_dtoa_r>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	4614      	mov	r4, r2
 800851e:	461d      	mov	r5, r3
 8008520:	69c7      	ldr	r7, [r0, #28]
 8008522:	b097      	sub	sp, #92	@ 0x5c
 8008524:	4681      	mov	r9, r0
 8008526:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800852a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800852c:	b97f      	cbnz	r7, 800854e <_dtoa_r+0x36>
 800852e:	2010      	movs	r0, #16
 8008530:	f000 fe0e 	bl	8009150 <malloc>
 8008534:	4602      	mov	r2, r0
 8008536:	f8c9 001c 	str.w	r0, [r9, #28]
 800853a:	b920      	cbnz	r0, 8008546 <_dtoa_r+0x2e>
 800853c:	21ef      	movs	r1, #239	@ 0xef
 800853e:	4bac      	ldr	r3, [pc, #688]	@ (80087f0 <_dtoa_r+0x2d8>)
 8008540:	48ac      	ldr	r0, [pc, #688]	@ (80087f4 <_dtoa_r+0x2dc>)
 8008542:	f001 fcb1 	bl	8009ea8 <__assert_func>
 8008546:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800854a:	6007      	str	r7, [r0, #0]
 800854c:	60c7      	str	r7, [r0, #12]
 800854e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008552:	6819      	ldr	r1, [r3, #0]
 8008554:	b159      	cbz	r1, 800856e <_dtoa_r+0x56>
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	2301      	movs	r3, #1
 800855a:	4093      	lsls	r3, r2
 800855c:	604a      	str	r2, [r1, #4]
 800855e:	608b      	str	r3, [r1, #8]
 8008560:	4648      	mov	r0, r9
 8008562:	f000 feeb 	bl	800933c <_Bfree>
 8008566:	2200      	movs	r2, #0
 8008568:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	1e2b      	subs	r3, r5, #0
 8008570:	bfaf      	iteee	ge
 8008572:	2300      	movge	r3, #0
 8008574:	2201      	movlt	r2, #1
 8008576:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800857a:	9307      	strlt	r3, [sp, #28]
 800857c:	bfa8      	it	ge
 800857e:	6033      	strge	r3, [r6, #0]
 8008580:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008584:	4b9c      	ldr	r3, [pc, #624]	@ (80087f8 <_dtoa_r+0x2e0>)
 8008586:	bfb8      	it	lt
 8008588:	6032      	strlt	r2, [r6, #0]
 800858a:	ea33 0308 	bics.w	r3, r3, r8
 800858e:	d112      	bne.n	80085b6 <_dtoa_r+0x9e>
 8008590:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008594:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800859c:	4323      	orrs	r3, r4
 800859e:	f000 855e 	beq.w	800905e <_dtoa_r+0xb46>
 80085a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80087fc <_dtoa_r+0x2e4>
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 8560 	beq.w	800906e <_dtoa_r+0xb56>
 80085ae:	f10a 0303 	add.w	r3, sl, #3
 80085b2:	f000 bd5a 	b.w	800906a <_dtoa_r+0xb52>
 80085b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80085be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085c2:	2200      	movs	r2, #0
 80085c4:	2300      	movs	r3, #0
 80085c6:	f7f8 fa07 	bl	80009d8 <__aeabi_dcmpeq>
 80085ca:	4607      	mov	r7, r0
 80085cc:	b158      	cbz	r0, 80085e6 <_dtoa_r+0xce>
 80085ce:	2301      	movs	r3, #1
 80085d0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085d6:	b113      	cbz	r3, 80085de <_dtoa_r+0xc6>
 80085d8:	4b89      	ldr	r3, [pc, #548]	@ (8008800 <_dtoa_r+0x2e8>)
 80085da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80085dc:	6013      	str	r3, [r2, #0]
 80085de:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008804 <_dtoa_r+0x2ec>
 80085e2:	f000 bd44 	b.w	800906e <_dtoa_r+0xb56>
 80085e6:	ab14      	add	r3, sp, #80	@ 0x50
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	ab15      	add	r3, sp, #84	@ 0x54
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	4648      	mov	r0, r9
 80085f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80085f4:	f001 f984 	bl	8009900 <__d2b>
 80085f8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80085fc:	9003      	str	r0, [sp, #12]
 80085fe:	2e00      	cmp	r6, #0
 8008600:	d078      	beq.n	80086f4 <_dtoa_r+0x1dc>
 8008602:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008606:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008608:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800860c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008610:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008614:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008618:	9712      	str	r7, [sp, #72]	@ 0x48
 800861a:	4619      	mov	r1, r3
 800861c:	2200      	movs	r2, #0
 800861e:	4b7a      	ldr	r3, [pc, #488]	@ (8008808 <_dtoa_r+0x2f0>)
 8008620:	f7f7 fdba 	bl	8000198 <__aeabi_dsub>
 8008624:	a36c      	add	r3, pc, #432	@ (adr r3, 80087d8 <_dtoa_r+0x2c0>)
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f7f7 ff6d 	bl	8000508 <__aeabi_dmul>
 800862e:	a36c      	add	r3, pc, #432	@ (adr r3, 80087e0 <_dtoa_r+0x2c8>)
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	f7f7 fdb2 	bl	800019c <__adddf3>
 8008638:	4604      	mov	r4, r0
 800863a:	4630      	mov	r0, r6
 800863c:	460d      	mov	r5, r1
 800863e:	f7f7 fef9 	bl	8000434 <__aeabi_i2d>
 8008642:	a369      	add	r3, pc, #420	@ (adr r3, 80087e8 <_dtoa_r+0x2d0>)
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	f7f7 ff5e 	bl	8000508 <__aeabi_dmul>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4620      	mov	r0, r4
 8008652:	4629      	mov	r1, r5
 8008654:	f7f7 fda2 	bl	800019c <__adddf3>
 8008658:	4604      	mov	r4, r0
 800865a:	460d      	mov	r5, r1
 800865c:	f7f8 fa04 	bl	8000a68 <__aeabi_d2iz>
 8008660:	2200      	movs	r2, #0
 8008662:	4607      	mov	r7, r0
 8008664:	2300      	movs	r3, #0
 8008666:	4620      	mov	r0, r4
 8008668:	4629      	mov	r1, r5
 800866a:	f7f8 f9bf 	bl	80009ec <__aeabi_dcmplt>
 800866e:	b140      	cbz	r0, 8008682 <_dtoa_r+0x16a>
 8008670:	4638      	mov	r0, r7
 8008672:	f7f7 fedf 	bl	8000434 <__aeabi_i2d>
 8008676:	4622      	mov	r2, r4
 8008678:	462b      	mov	r3, r5
 800867a:	f7f8 f9ad 	bl	80009d8 <__aeabi_dcmpeq>
 800867e:	b900      	cbnz	r0, 8008682 <_dtoa_r+0x16a>
 8008680:	3f01      	subs	r7, #1
 8008682:	2f16      	cmp	r7, #22
 8008684:	d854      	bhi.n	8008730 <_dtoa_r+0x218>
 8008686:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800868a:	4b60      	ldr	r3, [pc, #384]	@ (800880c <_dtoa_r+0x2f4>)
 800868c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	f7f8 f9aa 	bl	80009ec <__aeabi_dcmplt>
 8008698:	2800      	cmp	r0, #0
 800869a:	d04b      	beq.n	8008734 <_dtoa_r+0x21c>
 800869c:	2300      	movs	r3, #0
 800869e:	3f01      	subs	r7, #1
 80086a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086a4:	1b9b      	subs	r3, r3, r6
 80086a6:	1e5a      	subs	r2, r3, #1
 80086a8:	bf49      	itett	mi
 80086aa:	f1c3 0301 	rsbmi	r3, r3, #1
 80086ae:	2300      	movpl	r3, #0
 80086b0:	9304      	strmi	r3, [sp, #16]
 80086b2:	2300      	movmi	r3, #0
 80086b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80086b6:	bf54      	ite	pl
 80086b8:	9304      	strpl	r3, [sp, #16]
 80086ba:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80086bc:	2f00      	cmp	r7, #0
 80086be:	db3b      	blt.n	8008738 <_dtoa_r+0x220>
 80086c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c2:	970e      	str	r7, [sp, #56]	@ 0x38
 80086c4:	443b      	add	r3, r7
 80086c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086c8:	2300      	movs	r3, #0
 80086ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80086cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086ce:	2b09      	cmp	r3, #9
 80086d0:	d865      	bhi.n	800879e <_dtoa_r+0x286>
 80086d2:	2b05      	cmp	r3, #5
 80086d4:	bfc4      	itt	gt
 80086d6:	3b04      	subgt	r3, #4
 80086d8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80086da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086dc:	bfc8      	it	gt
 80086de:	2400      	movgt	r4, #0
 80086e0:	f1a3 0302 	sub.w	r3, r3, #2
 80086e4:	bfd8      	it	le
 80086e6:	2401      	movle	r4, #1
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d864      	bhi.n	80087b6 <_dtoa_r+0x29e>
 80086ec:	e8df f003 	tbb	[pc, r3]
 80086f0:	2c385553 	.word	0x2c385553
 80086f4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80086f8:	441e      	add	r6, r3
 80086fa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80086fe:	2b20      	cmp	r3, #32
 8008700:	bfc1      	itttt	gt
 8008702:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008706:	fa08 f803 	lslgt.w	r8, r8, r3
 800870a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800870e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008712:	bfd6      	itet	le
 8008714:	f1c3 0320 	rsble	r3, r3, #32
 8008718:	ea48 0003 	orrgt.w	r0, r8, r3
 800871c:	fa04 f003 	lslle.w	r0, r4, r3
 8008720:	f7f7 fe78 	bl	8000414 <__aeabi_ui2d>
 8008724:	2201      	movs	r2, #1
 8008726:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800872a:	3e01      	subs	r6, #1
 800872c:	9212      	str	r2, [sp, #72]	@ 0x48
 800872e:	e774      	b.n	800861a <_dtoa_r+0x102>
 8008730:	2301      	movs	r3, #1
 8008732:	e7b5      	b.n	80086a0 <_dtoa_r+0x188>
 8008734:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008736:	e7b4      	b.n	80086a2 <_dtoa_r+0x18a>
 8008738:	9b04      	ldr	r3, [sp, #16]
 800873a:	1bdb      	subs	r3, r3, r7
 800873c:	9304      	str	r3, [sp, #16]
 800873e:	427b      	negs	r3, r7
 8008740:	930a      	str	r3, [sp, #40]	@ 0x28
 8008742:	2300      	movs	r3, #0
 8008744:	930e      	str	r3, [sp, #56]	@ 0x38
 8008746:	e7c1      	b.n	80086cc <_dtoa_r+0x1b4>
 8008748:	2301      	movs	r3, #1
 800874a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800874c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800874e:	eb07 0b03 	add.w	fp, r7, r3
 8008752:	f10b 0301 	add.w	r3, fp, #1
 8008756:	2b01      	cmp	r3, #1
 8008758:	9308      	str	r3, [sp, #32]
 800875a:	bfb8      	it	lt
 800875c:	2301      	movlt	r3, #1
 800875e:	e006      	b.n	800876e <_dtoa_r+0x256>
 8008760:	2301      	movs	r3, #1
 8008762:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008764:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008766:	2b00      	cmp	r3, #0
 8008768:	dd28      	ble.n	80087bc <_dtoa_r+0x2a4>
 800876a:	469b      	mov	fp, r3
 800876c:	9308      	str	r3, [sp, #32]
 800876e:	2100      	movs	r1, #0
 8008770:	2204      	movs	r2, #4
 8008772:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008776:	f102 0514 	add.w	r5, r2, #20
 800877a:	429d      	cmp	r5, r3
 800877c:	d926      	bls.n	80087cc <_dtoa_r+0x2b4>
 800877e:	6041      	str	r1, [r0, #4]
 8008780:	4648      	mov	r0, r9
 8008782:	f000 fd9b 	bl	80092bc <_Balloc>
 8008786:	4682      	mov	sl, r0
 8008788:	2800      	cmp	r0, #0
 800878a:	d143      	bne.n	8008814 <_dtoa_r+0x2fc>
 800878c:	4602      	mov	r2, r0
 800878e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008792:	4b1f      	ldr	r3, [pc, #124]	@ (8008810 <_dtoa_r+0x2f8>)
 8008794:	e6d4      	b.n	8008540 <_dtoa_r+0x28>
 8008796:	2300      	movs	r3, #0
 8008798:	e7e3      	b.n	8008762 <_dtoa_r+0x24a>
 800879a:	2300      	movs	r3, #0
 800879c:	e7d5      	b.n	800874a <_dtoa_r+0x232>
 800879e:	2401      	movs	r4, #1
 80087a0:	2300      	movs	r3, #0
 80087a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80087a4:	9320      	str	r3, [sp, #128]	@ 0x80
 80087a6:	f04f 3bff 	mov.w	fp, #4294967295
 80087aa:	2200      	movs	r2, #0
 80087ac:	2312      	movs	r3, #18
 80087ae:	f8cd b020 	str.w	fp, [sp, #32]
 80087b2:	9221      	str	r2, [sp, #132]	@ 0x84
 80087b4:	e7db      	b.n	800876e <_dtoa_r+0x256>
 80087b6:	2301      	movs	r3, #1
 80087b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087ba:	e7f4      	b.n	80087a6 <_dtoa_r+0x28e>
 80087bc:	f04f 0b01 	mov.w	fp, #1
 80087c0:	465b      	mov	r3, fp
 80087c2:	f8cd b020 	str.w	fp, [sp, #32]
 80087c6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80087ca:	e7d0      	b.n	800876e <_dtoa_r+0x256>
 80087cc:	3101      	adds	r1, #1
 80087ce:	0052      	lsls	r2, r2, #1
 80087d0:	e7d1      	b.n	8008776 <_dtoa_r+0x25e>
 80087d2:	bf00      	nop
 80087d4:	f3af 8000 	nop.w
 80087d8:	636f4361 	.word	0x636f4361
 80087dc:	3fd287a7 	.word	0x3fd287a7
 80087e0:	8b60c8b3 	.word	0x8b60c8b3
 80087e4:	3fc68a28 	.word	0x3fc68a28
 80087e8:	509f79fb 	.word	0x509f79fb
 80087ec:	3fd34413 	.word	0x3fd34413
 80087f0:	0800c2ab 	.word	0x0800c2ab
 80087f4:	0800c2c2 	.word	0x0800c2c2
 80087f8:	7ff00000 	.word	0x7ff00000
 80087fc:	0800c2a7 	.word	0x0800c2a7
 8008800:	0800c27b 	.word	0x0800c27b
 8008804:	0800c27a 	.word	0x0800c27a
 8008808:	3ff80000 	.word	0x3ff80000
 800880c:	0800c410 	.word	0x0800c410
 8008810:	0800c31a 	.word	0x0800c31a
 8008814:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008818:	6018      	str	r0, [r3, #0]
 800881a:	9b08      	ldr	r3, [sp, #32]
 800881c:	2b0e      	cmp	r3, #14
 800881e:	f200 80a1 	bhi.w	8008964 <_dtoa_r+0x44c>
 8008822:	2c00      	cmp	r4, #0
 8008824:	f000 809e 	beq.w	8008964 <_dtoa_r+0x44c>
 8008828:	2f00      	cmp	r7, #0
 800882a:	dd33      	ble.n	8008894 <_dtoa_r+0x37c>
 800882c:	4b9c      	ldr	r3, [pc, #624]	@ (8008aa0 <_dtoa_r+0x588>)
 800882e:	f007 020f 	and.w	r2, r7, #15
 8008832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008836:	05f8      	lsls	r0, r7, #23
 8008838:	e9d3 3400 	ldrd	r3, r4, [r3]
 800883c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008840:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008844:	d516      	bpl.n	8008874 <_dtoa_r+0x35c>
 8008846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800884a:	4b96      	ldr	r3, [pc, #600]	@ (8008aa4 <_dtoa_r+0x58c>)
 800884c:	2603      	movs	r6, #3
 800884e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008852:	f7f7 ff83 	bl	800075c <__aeabi_ddiv>
 8008856:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800885a:	f004 040f 	and.w	r4, r4, #15
 800885e:	4d91      	ldr	r5, [pc, #580]	@ (8008aa4 <_dtoa_r+0x58c>)
 8008860:	b954      	cbnz	r4, 8008878 <_dtoa_r+0x360>
 8008862:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800886a:	f7f7 ff77 	bl	800075c <__aeabi_ddiv>
 800886e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008872:	e028      	b.n	80088c6 <_dtoa_r+0x3ae>
 8008874:	2602      	movs	r6, #2
 8008876:	e7f2      	b.n	800885e <_dtoa_r+0x346>
 8008878:	07e1      	lsls	r1, r4, #31
 800887a:	d508      	bpl.n	800888e <_dtoa_r+0x376>
 800887c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008880:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008884:	f7f7 fe40 	bl	8000508 <__aeabi_dmul>
 8008888:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800888c:	3601      	adds	r6, #1
 800888e:	1064      	asrs	r4, r4, #1
 8008890:	3508      	adds	r5, #8
 8008892:	e7e5      	b.n	8008860 <_dtoa_r+0x348>
 8008894:	f000 80af 	beq.w	80089f6 <_dtoa_r+0x4de>
 8008898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800889c:	427c      	negs	r4, r7
 800889e:	4b80      	ldr	r3, [pc, #512]	@ (8008aa0 <_dtoa_r+0x588>)
 80088a0:	f004 020f 	and.w	r2, r4, #15
 80088a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	f7f7 fe2c 	bl	8000508 <__aeabi_dmul>
 80088b0:	2602      	movs	r6, #2
 80088b2:	2300      	movs	r3, #0
 80088b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80088b8:	4d7a      	ldr	r5, [pc, #488]	@ (8008aa4 <_dtoa_r+0x58c>)
 80088ba:	1124      	asrs	r4, r4, #4
 80088bc:	2c00      	cmp	r4, #0
 80088be:	f040 808f 	bne.w	80089e0 <_dtoa_r+0x4c8>
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1d3      	bne.n	800886e <_dtoa_r+0x356>
 80088c6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80088ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 8094 	beq.w	80089fa <_dtoa_r+0x4e2>
 80088d2:	2200      	movs	r2, #0
 80088d4:	4620      	mov	r0, r4
 80088d6:	4629      	mov	r1, r5
 80088d8:	4b73      	ldr	r3, [pc, #460]	@ (8008aa8 <_dtoa_r+0x590>)
 80088da:	f7f8 f887 	bl	80009ec <__aeabi_dcmplt>
 80088de:	2800      	cmp	r0, #0
 80088e0:	f000 808b 	beq.w	80089fa <_dtoa_r+0x4e2>
 80088e4:	9b08      	ldr	r3, [sp, #32]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 8087 	beq.w	80089fa <_dtoa_r+0x4e2>
 80088ec:	f1bb 0f00 	cmp.w	fp, #0
 80088f0:	dd34      	ble.n	800895c <_dtoa_r+0x444>
 80088f2:	4620      	mov	r0, r4
 80088f4:	2200      	movs	r2, #0
 80088f6:	4629      	mov	r1, r5
 80088f8:	4b6c      	ldr	r3, [pc, #432]	@ (8008aac <_dtoa_r+0x594>)
 80088fa:	f7f7 fe05 	bl	8000508 <__aeabi_dmul>
 80088fe:	465c      	mov	r4, fp
 8008900:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008904:	f107 38ff 	add.w	r8, r7, #4294967295
 8008908:	3601      	adds	r6, #1
 800890a:	4630      	mov	r0, r6
 800890c:	f7f7 fd92 	bl	8000434 <__aeabi_i2d>
 8008910:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008914:	f7f7 fdf8 	bl	8000508 <__aeabi_dmul>
 8008918:	2200      	movs	r2, #0
 800891a:	4b65      	ldr	r3, [pc, #404]	@ (8008ab0 <_dtoa_r+0x598>)
 800891c:	f7f7 fc3e 	bl	800019c <__adddf3>
 8008920:	4605      	mov	r5, r0
 8008922:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008926:	2c00      	cmp	r4, #0
 8008928:	d16a      	bne.n	8008a00 <_dtoa_r+0x4e8>
 800892a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800892e:	2200      	movs	r2, #0
 8008930:	4b60      	ldr	r3, [pc, #384]	@ (8008ab4 <_dtoa_r+0x59c>)
 8008932:	f7f7 fc31 	bl	8000198 <__aeabi_dsub>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800893e:	462a      	mov	r2, r5
 8008940:	4633      	mov	r3, r6
 8008942:	f7f8 f871 	bl	8000a28 <__aeabi_dcmpgt>
 8008946:	2800      	cmp	r0, #0
 8008948:	f040 8298 	bne.w	8008e7c <_dtoa_r+0x964>
 800894c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008950:	462a      	mov	r2, r5
 8008952:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008956:	f7f8 f849 	bl	80009ec <__aeabi_dcmplt>
 800895a:	bb38      	cbnz	r0, 80089ac <_dtoa_r+0x494>
 800895c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008960:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008964:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008966:	2b00      	cmp	r3, #0
 8008968:	f2c0 8157 	blt.w	8008c1a <_dtoa_r+0x702>
 800896c:	2f0e      	cmp	r7, #14
 800896e:	f300 8154 	bgt.w	8008c1a <_dtoa_r+0x702>
 8008972:	4b4b      	ldr	r3, [pc, #300]	@ (8008aa0 <_dtoa_r+0x588>)
 8008974:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008978:	e9d3 3400 	ldrd	r3, r4, [r3]
 800897c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008980:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008982:	2b00      	cmp	r3, #0
 8008984:	f280 80e5 	bge.w	8008b52 <_dtoa_r+0x63a>
 8008988:	9b08      	ldr	r3, [sp, #32]
 800898a:	2b00      	cmp	r3, #0
 800898c:	f300 80e1 	bgt.w	8008b52 <_dtoa_r+0x63a>
 8008990:	d10c      	bne.n	80089ac <_dtoa_r+0x494>
 8008992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008996:	2200      	movs	r2, #0
 8008998:	4b46      	ldr	r3, [pc, #280]	@ (8008ab4 <_dtoa_r+0x59c>)
 800899a:	f7f7 fdb5 	bl	8000508 <__aeabi_dmul>
 800899e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089a2:	f7f8 f837 	bl	8000a14 <__aeabi_dcmpge>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f000 8266 	beq.w	8008e78 <_dtoa_r+0x960>
 80089ac:	2400      	movs	r4, #0
 80089ae:	4625      	mov	r5, r4
 80089b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089b2:	4656      	mov	r6, sl
 80089b4:	ea6f 0803 	mvn.w	r8, r3
 80089b8:	2700      	movs	r7, #0
 80089ba:	4621      	mov	r1, r4
 80089bc:	4648      	mov	r0, r9
 80089be:	f000 fcbd 	bl	800933c <_Bfree>
 80089c2:	2d00      	cmp	r5, #0
 80089c4:	f000 80bd 	beq.w	8008b42 <_dtoa_r+0x62a>
 80089c8:	b12f      	cbz	r7, 80089d6 <_dtoa_r+0x4be>
 80089ca:	42af      	cmp	r7, r5
 80089cc:	d003      	beq.n	80089d6 <_dtoa_r+0x4be>
 80089ce:	4639      	mov	r1, r7
 80089d0:	4648      	mov	r0, r9
 80089d2:	f000 fcb3 	bl	800933c <_Bfree>
 80089d6:	4629      	mov	r1, r5
 80089d8:	4648      	mov	r0, r9
 80089da:	f000 fcaf 	bl	800933c <_Bfree>
 80089de:	e0b0      	b.n	8008b42 <_dtoa_r+0x62a>
 80089e0:	07e2      	lsls	r2, r4, #31
 80089e2:	d505      	bpl.n	80089f0 <_dtoa_r+0x4d8>
 80089e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089e8:	f7f7 fd8e 	bl	8000508 <__aeabi_dmul>
 80089ec:	2301      	movs	r3, #1
 80089ee:	3601      	adds	r6, #1
 80089f0:	1064      	asrs	r4, r4, #1
 80089f2:	3508      	adds	r5, #8
 80089f4:	e762      	b.n	80088bc <_dtoa_r+0x3a4>
 80089f6:	2602      	movs	r6, #2
 80089f8:	e765      	b.n	80088c6 <_dtoa_r+0x3ae>
 80089fa:	46b8      	mov	r8, r7
 80089fc:	9c08      	ldr	r4, [sp, #32]
 80089fe:	e784      	b.n	800890a <_dtoa_r+0x3f2>
 8008a00:	4b27      	ldr	r3, [pc, #156]	@ (8008aa0 <_dtoa_r+0x588>)
 8008a02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a0c:	4454      	add	r4, sl
 8008a0e:	2900      	cmp	r1, #0
 8008a10:	d054      	beq.n	8008abc <_dtoa_r+0x5a4>
 8008a12:	2000      	movs	r0, #0
 8008a14:	4928      	ldr	r1, [pc, #160]	@ (8008ab8 <_dtoa_r+0x5a0>)
 8008a16:	f7f7 fea1 	bl	800075c <__aeabi_ddiv>
 8008a1a:	4633      	mov	r3, r6
 8008a1c:	462a      	mov	r2, r5
 8008a1e:	f7f7 fbbb 	bl	8000198 <__aeabi_dsub>
 8008a22:	4656      	mov	r6, sl
 8008a24:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a2c:	f7f8 f81c 	bl	8000a68 <__aeabi_d2iz>
 8008a30:	4605      	mov	r5, r0
 8008a32:	f7f7 fcff 	bl	8000434 <__aeabi_i2d>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a3e:	f7f7 fbab 	bl	8000198 <__aeabi_dsub>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	3530      	adds	r5, #48	@ 0x30
 8008a48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008a4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a50:	f806 5b01 	strb.w	r5, [r6], #1
 8008a54:	f7f7 ffca 	bl	80009ec <__aeabi_dcmplt>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d172      	bne.n	8008b42 <_dtoa_r+0x62a>
 8008a5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a60:	2000      	movs	r0, #0
 8008a62:	4911      	ldr	r1, [pc, #68]	@ (8008aa8 <_dtoa_r+0x590>)
 8008a64:	f7f7 fb98 	bl	8000198 <__aeabi_dsub>
 8008a68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a6c:	f7f7 ffbe 	bl	80009ec <__aeabi_dcmplt>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	f040 80b4 	bne.w	8008bde <_dtoa_r+0x6c6>
 8008a76:	42a6      	cmp	r6, r4
 8008a78:	f43f af70 	beq.w	800895c <_dtoa_r+0x444>
 8008a7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a80:	2200      	movs	r2, #0
 8008a82:	4b0a      	ldr	r3, [pc, #40]	@ (8008aac <_dtoa_r+0x594>)
 8008a84:	f7f7 fd40 	bl	8000508 <__aeabi_dmul>
 8008a88:	2200      	movs	r2, #0
 8008a8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a92:	4b06      	ldr	r3, [pc, #24]	@ (8008aac <_dtoa_r+0x594>)
 8008a94:	f7f7 fd38 	bl	8000508 <__aeabi_dmul>
 8008a98:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a9c:	e7c4      	b.n	8008a28 <_dtoa_r+0x510>
 8008a9e:	bf00      	nop
 8008aa0:	0800c410 	.word	0x0800c410
 8008aa4:	0800c3e8 	.word	0x0800c3e8
 8008aa8:	3ff00000 	.word	0x3ff00000
 8008aac:	40240000 	.word	0x40240000
 8008ab0:	401c0000 	.word	0x401c0000
 8008ab4:	40140000 	.word	0x40140000
 8008ab8:	3fe00000 	.word	0x3fe00000
 8008abc:	4631      	mov	r1, r6
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f7f7 fd22 	bl	8000508 <__aeabi_dmul>
 8008ac4:	4656      	mov	r6, sl
 8008ac6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008aca:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008acc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ad0:	f7f7 ffca 	bl	8000a68 <__aeabi_d2iz>
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	f7f7 fcad 	bl	8000434 <__aeabi_i2d>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ae2:	f7f7 fb59 	bl	8000198 <__aeabi_dsub>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	3530      	adds	r5, #48	@ 0x30
 8008aec:	f806 5b01 	strb.w	r5, [r6], #1
 8008af0:	42a6      	cmp	r6, r4
 8008af2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008af6:	f04f 0200 	mov.w	r2, #0
 8008afa:	d124      	bne.n	8008b46 <_dtoa_r+0x62e>
 8008afc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b00:	4bae      	ldr	r3, [pc, #696]	@ (8008dbc <_dtoa_r+0x8a4>)
 8008b02:	f7f7 fb4b 	bl	800019c <__adddf3>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b0e:	f7f7 ff8b 	bl	8000a28 <__aeabi_dcmpgt>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d163      	bne.n	8008bde <_dtoa_r+0x6c6>
 8008b16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	49a7      	ldr	r1, [pc, #668]	@ (8008dbc <_dtoa_r+0x8a4>)
 8008b1e:	f7f7 fb3b 	bl	8000198 <__aeabi_dsub>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b2a:	f7f7 ff5f 	bl	80009ec <__aeabi_dcmplt>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	f43f af14 	beq.w	800895c <_dtoa_r+0x444>
 8008b34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008b36:	1e73      	subs	r3, r6, #1
 8008b38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b3e:	2b30      	cmp	r3, #48	@ 0x30
 8008b40:	d0f8      	beq.n	8008b34 <_dtoa_r+0x61c>
 8008b42:	4647      	mov	r7, r8
 8008b44:	e03b      	b.n	8008bbe <_dtoa_r+0x6a6>
 8008b46:	4b9e      	ldr	r3, [pc, #632]	@ (8008dc0 <_dtoa_r+0x8a8>)
 8008b48:	f7f7 fcde 	bl	8000508 <__aeabi_dmul>
 8008b4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b50:	e7bc      	b.n	8008acc <_dtoa_r+0x5b4>
 8008b52:	4656      	mov	r6, sl
 8008b54:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008b58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	4629      	mov	r1, r5
 8008b60:	f7f7 fdfc 	bl	800075c <__aeabi_ddiv>
 8008b64:	f7f7 ff80 	bl	8000a68 <__aeabi_d2iz>
 8008b68:	4680      	mov	r8, r0
 8008b6a:	f7f7 fc63 	bl	8000434 <__aeabi_i2d>
 8008b6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b72:	f7f7 fcc9 	bl	8000508 <__aeabi_dmul>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	f7f7 fb0b 	bl	8000198 <__aeabi_dsub>
 8008b82:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b86:	9d08      	ldr	r5, [sp, #32]
 8008b88:	f806 4b01 	strb.w	r4, [r6], #1
 8008b8c:	eba6 040a 	sub.w	r4, r6, sl
 8008b90:	42a5      	cmp	r5, r4
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	d133      	bne.n	8008c00 <_dtoa_r+0x6e8>
 8008b98:	f7f7 fb00 	bl	800019c <__adddf3>
 8008b9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	460d      	mov	r5, r1
 8008ba4:	f7f7 ff40 	bl	8000a28 <__aeabi_dcmpgt>
 8008ba8:	b9c0      	cbnz	r0, 8008bdc <_dtoa_r+0x6c4>
 8008baa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bae:	4620      	mov	r0, r4
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	f7f7 ff11 	bl	80009d8 <__aeabi_dcmpeq>
 8008bb6:	b110      	cbz	r0, 8008bbe <_dtoa_r+0x6a6>
 8008bb8:	f018 0f01 	tst.w	r8, #1
 8008bbc:	d10e      	bne.n	8008bdc <_dtoa_r+0x6c4>
 8008bbe:	4648      	mov	r0, r9
 8008bc0:	9903      	ldr	r1, [sp, #12]
 8008bc2:	f000 fbbb 	bl	800933c <_Bfree>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	7033      	strb	r3, [r6, #0]
 8008bca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008bcc:	3701      	adds	r7, #1
 8008bce:	601f      	str	r7, [r3, #0]
 8008bd0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 824b 	beq.w	800906e <_dtoa_r+0xb56>
 8008bd8:	601e      	str	r6, [r3, #0]
 8008bda:	e248      	b.n	800906e <_dtoa_r+0xb56>
 8008bdc:	46b8      	mov	r8, r7
 8008bde:	4633      	mov	r3, r6
 8008be0:	461e      	mov	r6, r3
 8008be2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008be6:	2a39      	cmp	r2, #57	@ 0x39
 8008be8:	d106      	bne.n	8008bf8 <_dtoa_r+0x6e0>
 8008bea:	459a      	cmp	sl, r3
 8008bec:	d1f8      	bne.n	8008be0 <_dtoa_r+0x6c8>
 8008bee:	2230      	movs	r2, #48	@ 0x30
 8008bf0:	f108 0801 	add.w	r8, r8, #1
 8008bf4:	f88a 2000 	strb.w	r2, [sl]
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	3201      	adds	r2, #1
 8008bfc:	701a      	strb	r2, [r3, #0]
 8008bfe:	e7a0      	b.n	8008b42 <_dtoa_r+0x62a>
 8008c00:	2200      	movs	r2, #0
 8008c02:	4b6f      	ldr	r3, [pc, #444]	@ (8008dc0 <_dtoa_r+0x8a8>)
 8008c04:	f7f7 fc80 	bl	8000508 <__aeabi_dmul>
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	460d      	mov	r5, r1
 8008c10:	f7f7 fee2 	bl	80009d8 <__aeabi_dcmpeq>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d09f      	beq.n	8008b58 <_dtoa_r+0x640>
 8008c18:	e7d1      	b.n	8008bbe <_dtoa_r+0x6a6>
 8008c1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c1c:	2a00      	cmp	r2, #0
 8008c1e:	f000 80ea 	beq.w	8008df6 <_dtoa_r+0x8de>
 8008c22:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c24:	2a01      	cmp	r2, #1
 8008c26:	f300 80cd 	bgt.w	8008dc4 <_dtoa_r+0x8ac>
 8008c2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c2c:	2a00      	cmp	r2, #0
 8008c2e:	f000 80c1 	beq.w	8008db4 <_dtoa_r+0x89c>
 8008c32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c38:	9e04      	ldr	r6, [sp, #16]
 8008c3a:	9a04      	ldr	r2, [sp, #16]
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	441a      	add	r2, r3
 8008c40:	9204      	str	r2, [sp, #16]
 8008c42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c44:	4648      	mov	r0, r9
 8008c46:	441a      	add	r2, r3
 8008c48:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c4a:	f000 fc2b 	bl	80094a4 <__i2b>
 8008c4e:	4605      	mov	r5, r0
 8008c50:	b166      	cbz	r6, 8008c6c <_dtoa_r+0x754>
 8008c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	dd09      	ble.n	8008c6c <_dtoa_r+0x754>
 8008c58:	42b3      	cmp	r3, r6
 8008c5a:	bfa8      	it	ge
 8008c5c:	4633      	movge	r3, r6
 8008c5e:	9a04      	ldr	r2, [sp, #16]
 8008c60:	1af6      	subs	r6, r6, r3
 8008c62:	1ad2      	subs	r2, r2, r3
 8008c64:	9204      	str	r2, [sp, #16]
 8008c66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c6e:	b30b      	cbz	r3, 8008cb4 <_dtoa_r+0x79c>
 8008c70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 80c6 	beq.w	8008e04 <_dtoa_r+0x8ec>
 8008c78:	2c00      	cmp	r4, #0
 8008c7a:	f000 80c0 	beq.w	8008dfe <_dtoa_r+0x8e6>
 8008c7e:	4629      	mov	r1, r5
 8008c80:	4622      	mov	r2, r4
 8008c82:	4648      	mov	r0, r9
 8008c84:	f000 fcc6 	bl	8009614 <__pow5mult>
 8008c88:	9a03      	ldr	r2, [sp, #12]
 8008c8a:	4601      	mov	r1, r0
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	4648      	mov	r0, r9
 8008c90:	f000 fc1e 	bl	80094d0 <__multiply>
 8008c94:	9903      	ldr	r1, [sp, #12]
 8008c96:	4680      	mov	r8, r0
 8008c98:	4648      	mov	r0, r9
 8008c9a:	f000 fb4f 	bl	800933c <_Bfree>
 8008c9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ca0:	1b1b      	subs	r3, r3, r4
 8008ca2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ca4:	f000 80b1 	beq.w	8008e0a <_dtoa_r+0x8f2>
 8008ca8:	4641      	mov	r1, r8
 8008caa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008cac:	4648      	mov	r0, r9
 8008cae:	f000 fcb1 	bl	8009614 <__pow5mult>
 8008cb2:	9003      	str	r0, [sp, #12]
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	4648      	mov	r0, r9
 8008cb8:	f000 fbf4 	bl	80094a4 <__i2b>
 8008cbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 81d8 	beq.w	8009076 <_dtoa_r+0xb5e>
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	4601      	mov	r1, r0
 8008cca:	4648      	mov	r0, r9
 8008ccc:	f000 fca2 	bl	8009614 <__pow5mult>
 8008cd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	f300 809f 	bgt.w	8008e18 <_dtoa_r+0x900>
 8008cda:	9b06      	ldr	r3, [sp, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f040 8097 	bne.w	8008e10 <_dtoa_r+0x8f8>
 8008ce2:	9b07      	ldr	r3, [sp, #28]
 8008ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f040 8093 	bne.w	8008e14 <_dtoa_r+0x8fc>
 8008cee:	9b07      	ldr	r3, [sp, #28]
 8008cf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cf4:	0d1b      	lsrs	r3, r3, #20
 8008cf6:	051b      	lsls	r3, r3, #20
 8008cf8:	b133      	cbz	r3, 8008d08 <_dtoa_r+0x7f0>
 8008cfa:	9b04      	ldr	r3, [sp, #16]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	9304      	str	r3, [sp, #16]
 8008d00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d02:	3301      	adds	r3, #1
 8008d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d06:	2301      	movs	r3, #1
 8008d08:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 81b8 	beq.w	8009082 <_dtoa_r+0xb6a>
 8008d12:	6923      	ldr	r3, [r4, #16]
 8008d14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d18:	6918      	ldr	r0, [r3, #16]
 8008d1a:	f000 fb77 	bl	800940c <__hi0bits>
 8008d1e:	f1c0 0020 	rsb	r0, r0, #32
 8008d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d24:	4418      	add	r0, r3
 8008d26:	f010 001f 	ands.w	r0, r0, #31
 8008d2a:	f000 8082 	beq.w	8008e32 <_dtoa_r+0x91a>
 8008d2e:	f1c0 0320 	rsb	r3, r0, #32
 8008d32:	2b04      	cmp	r3, #4
 8008d34:	dd73      	ble.n	8008e1e <_dtoa_r+0x906>
 8008d36:	9b04      	ldr	r3, [sp, #16]
 8008d38:	f1c0 001c 	rsb	r0, r0, #28
 8008d3c:	4403      	add	r3, r0
 8008d3e:	9304      	str	r3, [sp, #16]
 8008d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d42:	4406      	add	r6, r0
 8008d44:	4403      	add	r3, r0
 8008d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d48:	9b04      	ldr	r3, [sp, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	dd05      	ble.n	8008d5a <_dtoa_r+0x842>
 8008d4e:	461a      	mov	r2, r3
 8008d50:	4648      	mov	r0, r9
 8008d52:	9903      	ldr	r1, [sp, #12]
 8008d54:	f000 fcb8 	bl	80096c8 <__lshift>
 8008d58:	9003      	str	r0, [sp, #12]
 8008d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dd05      	ble.n	8008d6c <_dtoa_r+0x854>
 8008d60:	4621      	mov	r1, r4
 8008d62:	461a      	mov	r2, r3
 8008d64:	4648      	mov	r0, r9
 8008d66:	f000 fcaf 	bl	80096c8 <__lshift>
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d061      	beq.n	8008e36 <_dtoa_r+0x91e>
 8008d72:	4621      	mov	r1, r4
 8008d74:	9803      	ldr	r0, [sp, #12]
 8008d76:	f000 fd13 	bl	80097a0 <__mcmp>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	da5b      	bge.n	8008e36 <_dtoa_r+0x91e>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	220a      	movs	r2, #10
 8008d82:	4648      	mov	r0, r9
 8008d84:	9903      	ldr	r1, [sp, #12]
 8008d86:	f000 fafb 	bl	8009380 <__multadd>
 8008d8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d8c:	f107 38ff 	add.w	r8, r7, #4294967295
 8008d90:	9003      	str	r0, [sp, #12]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 8177 	beq.w	8009086 <_dtoa_r+0xb6e>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	220a      	movs	r2, #10
 8008d9e:	4648      	mov	r0, r9
 8008da0:	f000 faee 	bl	8009380 <__multadd>
 8008da4:	f1bb 0f00 	cmp.w	fp, #0
 8008da8:	4605      	mov	r5, r0
 8008daa:	dc6f      	bgt.n	8008e8c <_dtoa_r+0x974>
 8008dac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	dc49      	bgt.n	8008e46 <_dtoa_r+0x92e>
 8008db2:	e06b      	b.n	8008e8c <_dtoa_r+0x974>
 8008db4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008db6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008dba:	e73c      	b.n	8008c36 <_dtoa_r+0x71e>
 8008dbc:	3fe00000 	.word	0x3fe00000
 8008dc0:	40240000 	.word	0x40240000
 8008dc4:	9b08      	ldr	r3, [sp, #32]
 8008dc6:	1e5c      	subs	r4, r3, #1
 8008dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dca:	42a3      	cmp	r3, r4
 8008dcc:	db09      	blt.n	8008de2 <_dtoa_r+0x8ca>
 8008dce:	1b1c      	subs	r4, r3, r4
 8008dd0:	9b08      	ldr	r3, [sp, #32]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f6bf af30 	bge.w	8008c38 <_dtoa_r+0x720>
 8008dd8:	9b04      	ldr	r3, [sp, #16]
 8008dda:	9a08      	ldr	r2, [sp, #32]
 8008ddc:	1a9e      	subs	r6, r3, r2
 8008dde:	2300      	movs	r3, #0
 8008de0:	e72b      	b.n	8008c3a <_dtoa_r+0x722>
 8008de2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008de4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008de6:	1ae3      	subs	r3, r4, r3
 8008de8:	441a      	add	r2, r3
 8008dea:	940a      	str	r4, [sp, #40]	@ 0x28
 8008dec:	9e04      	ldr	r6, [sp, #16]
 8008dee:	2400      	movs	r4, #0
 8008df0:	9b08      	ldr	r3, [sp, #32]
 8008df2:	920e      	str	r2, [sp, #56]	@ 0x38
 8008df4:	e721      	b.n	8008c3a <_dtoa_r+0x722>
 8008df6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008df8:	9e04      	ldr	r6, [sp, #16]
 8008dfa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008dfc:	e728      	b.n	8008c50 <_dtoa_r+0x738>
 8008dfe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008e02:	e751      	b.n	8008ca8 <_dtoa_r+0x790>
 8008e04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e06:	9903      	ldr	r1, [sp, #12]
 8008e08:	e750      	b.n	8008cac <_dtoa_r+0x794>
 8008e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e0e:	e751      	b.n	8008cb4 <_dtoa_r+0x79c>
 8008e10:	2300      	movs	r3, #0
 8008e12:	e779      	b.n	8008d08 <_dtoa_r+0x7f0>
 8008e14:	9b06      	ldr	r3, [sp, #24]
 8008e16:	e777      	b.n	8008d08 <_dtoa_r+0x7f0>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e1c:	e779      	b.n	8008d12 <_dtoa_r+0x7fa>
 8008e1e:	d093      	beq.n	8008d48 <_dtoa_r+0x830>
 8008e20:	9a04      	ldr	r2, [sp, #16]
 8008e22:	331c      	adds	r3, #28
 8008e24:	441a      	add	r2, r3
 8008e26:	9204      	str	r2, [sp, #16]
 8008e28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e2a:	441e      	add	r6, r3
 8008e2c:	441a      	add	r2, r3
 8008e2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e30:	e78a      	b.n	8008d48 <_dtoa_r+0x830>
 8008e32:	4603      	mov	r3, r0
 8008e34:	e7f4      	b.n	8008e20 <_dtoa_r+0x908>
 8008e36:	9b08      	ldr	r3, [sp, #32]
 8008e38:	46b8      	mov	r8, r7
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dc20      	bgt.n	8008e80 <_dtoa_r+0x968>
 8008e3e:	469b      	mov	fp, r3
 8008e40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	dd1e      	ble.n	8008e84 <_dtoa_r+0x96c>
 8008e46:	f1bb 0f00 	cmp.w	fp, #0
 8008e4a:	f47f adb1 	bne.w	80089b0 <_dtoa_r+0x498>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	465b      	mov	r3, fp
 8008e52:	2205      	movs	r2, #5
 8008e54:	4648      	mov	r0, r9
 8008e56:	f000 fa93 	bl	8009380 <__multadd>
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	9803      	ldr	r0, [sp, #12]
 8008e60:	f000 fc9e 	bl	80097a0 <__mcmp>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	f77f ada3 	ble.w	80089b0 <_dtoa_r+0x498>
 8008e6a:	4656      	mov	r6, sl
 8008e6c:	2331      	movs	r3, #49	@ 0x31
 8008e6e:	f108 0801 	add.w	r8, r8, #1
 8008e72:	f806 3b01 	strb.w	r3, [r6], #1
 8008e76:	e59f      	b.n	80089b8 <_dtoa_r+0x4a0>
 8008e78:	46b8      	mov	r8, r7
 8008e7a:	9c08      	ldr	r4, [sp, #32]
 8008e7c:	4625      	mov	r5, r4
 8008e7e:	e7f4      	b.n	8008e6a <_dtoa_r+0x952>
 8008e80:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008e84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f000 8101 	beq.w	800908e <_dtoa_r+0xb76>
 8008e8c:	2e00      	cmp	r6, #0
 8008e8e:	dd05      	ble.n	8008e9c <_dtoa_r+0x984>
 8008e90:	4629      	mov	r1, r5
 8008e92:	4632      	mov	r2, r6
 8008e94:	4648      	mov	r0, r9
 8008e96:	f000 fc17 	bl	80096c8 <__lshift>
 8008e9a:	4605      	mov	r5, r0
 8008e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d05c      	beq.n	8008f5c <_dtoa_r+0xa44>
 8008ea2:	4648      	mov	r0, r9
 8008ea4:	6869      	ldr	r1, [r5, #4]
 8008ea6:	f000 fa09 	bl	80092bc <_Balloc>
 8008eaa:	4606      	mov	r6, r0
 8008eac:	b928      	cbnz	r0, 8008eba <_dtoa_r+0x9a2>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008eb4:	4b80      	ldr	r3, [pc, #512]	@ (80090b8 <_dtoa_r+0xba0>)
 8008eb6:	f7ff bb43 	b.w	8008540 <_dtoa_r+0x28>
 8008eba:	692a      	ldr	r2, [r5, #16]
 8008ebc:	f105 010c 	add.w	r1, r5, #12
 8008ec0:	3202      	adds	r2, #2
 8008ec2:	0092      	lsls	r2, r2, #2
 8008ec4:	300c      	adds	r0, #12
 8008ec6:	f7ff fa90 	bl	80083ea <memcpy>
 8008eca:	2201      	movs	r2, #1
 8008ecc:	4631      	mov	r1, r6
 8008ece:	4648      	mov	r0, r9
 8008ed0:	f000 fbfa 	bl	80096c8 <__lshift>
 8008ed4:	462f      	mov	r7, r5
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	f10a 0301 	add.w	r3, sl, #1
 8008edc:	9304      	str	r3, [sp, #16]
 8008ede:	eb0a 030b 	add.w	r3, sl, fp
 8008ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ee4:	9b06      	ldr	r3, [sp, #24]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	4621      	mov	r1, r4
 8008ef0:	9803      	ldr	r0, [sp, #12]
 8008ef2:	f103 3bff 	add.w	fp, r3, #4294967295
 8008ef6:	f7ff fa86 	bl	8008406 <quorem>
 8008efa:	4603      	mov	r3, r0
 8008efc:	4639      	mov	r1, r7
 8008efe:	3330      	adds	r3, #48	@ 0x30
 8008f00:	9006      	str	r0, [sp, #24]
 8008f02:	9803      	ldr	r0, [sp, #12]
 8008f04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f06:	f000 fc4b 	bl	80097a0 <__mcmp>
 8008f0a:	462a      	mov	r2, r5
 8008f0c:	9008      	str	r0, [sp, #32]
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4648      	mov	r0, r9
 8008f12:	f000 fc61 	bl	80097d8 <__mdiff>
 8008f16:	68c2      	ldr	r2, [r0, #12]
 8008f18:	4606      	mov	r6, r0
 8008f1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f1c:	bb02      	cbnz	r2, 8008f60 <_dtoa_r+0xa48>
 8008f1e:	4601      	mov	r1, r0
 8008f20:	9803      	ldr	r0, [sp, #12]
 8008f22:	f000 fc3d 	bl	80097a0 <__mcmp>
 8008f26:	4602      	mov	r2, r0
 8008f28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4648      	mov	r0, r9
 8008f2e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8008f32:	f000 fa03 	bl	800933c <_Bfree>
 8008f36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008f3a:	9e04      	ldr	r6, [sp, #16]
 8008f3c:	ea42 0103 	orr.w	r1, r2, r3
 8008f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f42:	4319      	orrs	r1, r3
 8008f44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f46:	d10d      	bne.n	8008f64 <_dtoa_r+0xa4c>
 8008f48:	2b39      	cmp	r3, #57	@ 0x39
 8008f4a:	d027      	beq.n	8008f9c <_dtoa_r+0xa84>
 8008f4c:	9a08      	ldr	r2, [sp, #32]
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	dd01      	ble.n	8008f56 <_dtoa_r+0xa3e>
 8008f52:	9b06      	ldr	r3, [sp, #24]
 8008f54:	3331      	adds	r3, #49	@ 0x31
 8008f56:	f88b 3000 	strb.w	r3, [fp]
 8008f5a:	e52e      	b.n	80089ba <_dtoa_r+0x4a2>
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	e7b9      	b.n	8008ed4 <_dtoa_r+0x9bc>
 8008f60:	2201      	movs	r2, #1
 8008f62:	e7e2      	b.n	8008f2a <_dtoa_r+0xa12>
 8008f64:	9908      	ldr	r1, [sp, #32]
 8008f66:	2900      	cmp	r1, #0
 8008f68:	db04      	blt.n	8008f74 <_dtoa_r+0xa5c>
 8008f6a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8008f6c:	4301      	orrs	r1, r0
 8008f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f70:	4301      	orrs	r1, r0
 8008f72:	d120      	bne.n	8008fb6 <_dtoa_r+0xa9e>
 8008f74:	2a00      	cmp	r2, #0
 8008f76:	ddee      	ble.n	8008f56 <_dtoa_r+0xa3e>
 8008f78:	2201      	movs	r2, #1
 8008f7a:	9903      	ldr	r1, [sp, #12]
 8008f7c:	4648      	mov	r0, r9
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	f000 fba2 	bl	80096c8 <__lshift>
 8008f84:	4621      	mov	r1, r4
 8008f86:	9003      	str	r0, [sp, #12]
 8008f88:	f000 fc0a 	bl	80097a0 <__mcmp>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	dc02      	bgt.n	8008f98 <_dtoa_r+0xa80>
 8008f92:	d1e0      	bne.n	8008f56 <_dtoa_r+0xa3e>
 8008f94:	07da      	lsls	r2, r3, #31
 8008f96:	d5de      	bpl.n	8008f56 <_dtoa_r+0xa3e>
 8008f98:	2b39      	cmp	r3, #57	@ 0x39
 8008f9a:	d1da      	bne.n	8008f52 <_dtoa_r+0xa3a>
 8008f9c:	2339      	movs	r3, #57	@ 0x39
 8008f9e:	f88b 3000 	strb.w	r3, [fp]
 8008fa2:	4633      	mov	r3, r6
 8008fa4:	461e      	mov	r6, r3
 8008fa6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	2a39      	cmp	r2, #57	@ 0x39
 8008fae:	d04e      	beq.n	800904e <_dtoa_r+0xb36>
 8008fb0:	3201      	adds	r2, #1
 8008fb2:	701a      	strb	r2, [r3, #0]
 8008fb4:	e501      	b.n	80089ba <_dtoa_r+0x4a2>
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	dd03      	ble.n	8008fc2 <_dtoa_r+0xaaa>
 8008fba:	2b39      	cmp	r3, #57	@ 0x39
 8008fbc:	d0ee      	beq.n	8008f9c <_dtoa_r+0xa84>
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	e7c9      	b.n	8008f56 <_dtoa_r+0xa3e>
 8008fc2:	9a04      	ldr	r2, [sp, #16]
 8008fc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008fc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008fca:	428a      	cmp	r2, r1
 8008fcc:	d028      	beq.n	8009020 <_dtoa_r+0xb08>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	220a      	movs	r2, #10
 8008fd2:	9903      	ldr	r1, [sp, #12]
 8008fd4:	4648      	mov	r0, r9
 8008fd6:	f000 f9d3 	bl	8009380 <__multadd>
 8008fda:	42af      	cmp	r7, r5
 8008fdc:	9003      	str	r0, [sp, #12]
 8008fde:	f04f 0300 	mov.w	r3, #0
 8008fe2:	f04f 020a 	mov.w	r2, #10
 8008fe6:	4639      	mov	r1, r7
 8008fe8:	4648      	mov	r0, r9
 8008fea:	d107      	bne.n	8008ffc <_dtoa_r+0xae4>
 8008fec:	f000 f9c8 	bl	8009380 <__multadd>
 8008ff0:	4607      	mov	r7, r0
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	9b04      	ldr	r3, [sp, #16]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	9304      	str	r3, [sp, #16]
 8008ffa:	e777      	b.n	8008eec <_dtoa_r+0x9d4>
 8008ffc:	f000 f9c0 	bl	8009380 <__multadd>
 8009000:	4629      	mov	r1, r5
 8009002:	4607      	mov	r7, r0
 8009004:	2300      	movs	r3, #0
 8009006:	220a      	movs	r2, #10
 8009008:	4648      	mov	r0, r9
 800900a:	f000 f9b9 	bl	8009380 <__multadd>
 800900e:	4605      	mov	r5, r0
 8009010:	e7f0      	b.n	8008ff4 <_dtoa_r+0xadc>
 8009012:	f1bb 0f00 	cmp.w	fp, #0
 8009016:	bfcc      	ite	gt
 8009018:	465e      	movgt	r6, fp
 800901a:	2601      	movle	r6, #1
 800901c:	2700      	movs	r7, #0
 800901e:	4456      	add	r6, sl
 8009020:	2201      	movs	r2, #1
 8009022:	9903      	ldr	r1, [sp, #12]
 8009024:	4648      	mov	r0, r9
 8009026:	9304      	str	r3, [sp, #16]
 8009028:	f000 fb4e 	bl	80096c8 <__lshift>
 800902c:	4621      	mov	r1, r4
 800902e:	9003      	str	r0, [sp, #12]
 8009030:	f000 fbb6 	bl	80097a0 <__mcmp>
 8009034:	2800      	cmp	r0, #0
 8009036:	dcb4      	bgt.n	8008fa2 <_dtoa_r+0xa8a>
 8009038:	d102      	bne.n	8009040 <_dtoa_r+0xb28>
 800903a:	9b04      	ldr	r3, [sp, #16]
 800903c:	07db      	lsls	r3, r3, #31
 800903e:	d4b0      	bmi.n	8008fa2 <_dtoa_r+0xa8a>
 8009040:	4633      	mov	r3, r6
 8009042:	461e      	mov	r6, r3
 8009044:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009048:	2a30      	cmp	r2, #48	@ 0x30
 800904a:	d0fa      	beq.n	8009042 <_dtoa_r+0xb2a>
 800904c:	e4b5      	b.n	80089ba <_dtoa_r+0x4a2>
 800904e:	459a      	cmp	sl, r3
 8009050:	d1a8      	bne.n	8008fa4 <_dtoa_r+0xa8c>
 8009052:	2331      	movs	r3, #49	@ 0x31
 8009054:	f108 0801 	add.w	r8, r8, #1
 8009058:	f88a 3000 	strb.w	r3, [sl]
 800905c:	e4ad      	b.n	80089ba <_dtoa_r+0x4a2>
 800905e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009060:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80090bc <_dtoa_r+0xba4>
 8009064:	b11b      	cbz	r3, 800906e <_dtoa_r+0xb56>
 8009066:	f10a 0308 	add.w	r3, sl, #8
 800906a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	4650      	mov	r0, sl
 8009070:	b017      	add	sp, #92	@ 0x5c
 8009072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009076:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009078:	2b01      	cmp	r3, #1
 800907a:	f77f ae2e 	ble.w	8008cda <_dtoa_r+0x7c2>
 800907e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009080:	930a      	str	r3, [sp, #40]	@ 0x28
 8009082:	2001      	movs	r0, #1
 8009084:	e64d      	b.n	8008d22 <_dtoa_r+0x80a>
 8009086:	f1bb 0f00 	cmp.w	fp, #0
 800908a:	f77f aed9 	ble.w	8008e40 <_dtoa_r+0x928>
 800908e:	4656      	mov	r6, sl
 8009090:	4621      	mov	r1, r4
 8009092:	9803      	ldr	r0, [sp, #12]
 8009094:	f7ff f9b7 	bl	8008406 <quorem>
 8009098:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800909c:	f806 3b01 	strb.w	r3, [r6], #1
 80090a0:	eba6 020a 	sub.w	r2, r6, sl
 80090a4:	4593      	cmp	fp, r2
 80090a6:	ddb4      	ble.n	8009012 <_dtoa_r+0xafa>
 80090a8:	2300      	movs	r3, #0
 80090aa:	220a      	movs	r2, #10
 80090ac:	4648      	mov	r0, r9
 80090ae:	9903      	ldr	r1, [sp, #12]
 80090b0:	f000 f966 	bl	8009380 <__multadd>
 80090b4:	9003      	str	r0, [sp, #12]
 80090b6:	e7eb      	b.n	8009090 <_dtoa_r+0xb78>
 80090b8:	0800c31a 	.word	0x0800c31a
 80090bc:	0800c29e 	.word	0x0800c29e

080090c0 <_free_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4605      	mov	r5, r0
 80090c4:	2900      	cmp	r1, #0
 80090c6:	d040      	beq.n	800914a <_free_r+0x8a>
 80090c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090cc:	1f0c      	subs	r4, r1, #4
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	bfb8      	it	lt
 80090d2:	18e4      	addlt	r4, r4, r3
 80090d4:	f000 f8e6 	bl	80092a4 <__malloc_lock>
 80090d8:	4a1c      	ldr	r2, [pc, #112]	@ (800914c <_free_r+0x8c>)
 80090da:	6813      	ldr	r3, [r2, #0]
 80090dc:	b933      	cbnz	r3, 80090ec <_free_r+0x2c>
 80090de:	6063      	str	r3, [r4, #4]
 80090e0:	6014      	str	r4, [r2, #0]
 80090e2:	4628      	mov	r0, r5
 80090e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090e8:	f000 b8e2 	b.w	80092b0 <__malloc_unlock>
 80090ec:	42a3      	cmp	r3, r4
 80090ee:	d908      	bls.n	8009102 <_free_r+0x42>
 80090f0:	6820      	ldr	r0, [r4, #0]
 80090f2:	1821      	adds	r1, r4, r0
 80090f4:	428b      	cmp	r3, r1
 80090f6:	bf01      	itttt	eq
 80090f8:	6819      	ldreq	r1, [r3, #0]
 80090fa:	685b      	ldreq	r3, [r3, #4]
 80090fc:	1809      	addeq	r1, r1, r0
 80090fe:	6021      	streq	r1, [r4, #0]
 8009100:	e7ed      	b.n	80090de <_free_r+0x1e>
 8009102:	461a      	mov	r2, r3
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	b10b      	cbz	r3, 800910c <_free_r+0x4c>
 8009108:	42a3      	cmp	r3, r4
 800910a:	d9fa      	bls.n	8009102 <_free_r+0x42>
 800910c:	6811      	ldr	r1, [r2, #0]
 800910e:	1850      	adds	r0, r2, r1
 8009110:	42a0      	cmp	r0, r4
 8009112:	d10b      	bne.n	800912c <_free_r+0x6c>
 8009114:	6820      	ldr	r0, [r4, #0]
 8009116:	4401      	add	r1, r0
 8009118:	1850      	adds	r0, r2, r1
 800911a:	4283      	cmp	r3, r0
 800911c:	6011      	str	r1, [r2, #0]
 800911e:	d1e0      	bne.n	80090e2 <_free_r+0x22>
 8009120:	6818      	ldr	r0, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	4408      	add	r0, r1
 8009126:	6010      	str	r0, [r2, #0]
 8009128:	6053      	str	r3, [r2, #4]
 800912a:	e7da      	b.n	80090e2 <_free_r+0x22>
 800912c:	d902      	bls.n	8009134 <_free_r+0x74>
 800912e:	230c      	movs	r3, #12
 8009130:	602b      	str	r3, [r5, #0]
 8009132:	e7d6      	b.n	80090e2 <_free_r+0x22>
 8009134:	6820      	ldr	r0, [r4, #0]
 8009136:	1821      	adds	r1, r4, r0
 8009138:	428b      	cmp	r3, r1
 800913a:	bf01      	itttt	eq
 800913c:	6819      	ldreq	r1, [r3, #0]
 800913e:	685b      	ldreq	r3, [r3, #4]
 8009140:	1809      	addeq	r1, r1, r0
 8009142:	6021      	streq	r1, [r4, #0]
 8009144:	6063      	str	r3, [r4, #4]
 8009146:	6054      	str	r4, [r2, #4]
 8009148:	e7cb      	b.n	80090e2 <_free_r+0x22>
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	20001340 	.word	0x20001340

08009150 <malloc>:
 8009150:	4b02      	ldr	r3, [pc, #8]	@ (800915c <malloc+0xc>)
 8009152:	4601      	mov	r1, r0
 8009154:	6818      	ldr	r0, [r3, #0]
 8009156:	f000 b825 	b.w	80091a4 <_malloc_r>
 800915a:	bf00      	nop
 800915c:	20000030 	.word	0x20000030

08009160 <sbrk_aligned>:
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	4e0f      	ldr	r6, [pc, #60]	@ (80091a0 <sbrk_aligned+0x40>)
 8009164:	460c      	mov	r4, r1
 8009166:	6831      	ldr	r1, [r6, #0]
 8009168:	4605      	mov	r5, r0
 800916a:	b911      	cbnz	r1, 8009172 <sbrk_aligned+0x12>
 800916c:	f000 fe8c 	bl	8009e88 <_sbrk_r>
 8009170:	6030      	str	r0, [r6, #0]
 8009172:	4621      	mov	r1, r4
 8009174:	4628      	mov	r0, r5
 8009176:	f000 fe87 	bl	8009e88 <_sbrk_r>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	d103      	bne.n	8009186 <sbrk_aligned+0x26>
 800917e:	f04f 34ff 	mov.w	r4, #4294967295
 8009182:	4620      	mov	r0, r4
 8009184:	bd70      	pop	{r4, r5, r6, pc}
 8009186:	1cc4      	adds	r4, r0, #3
 8009188:	f024 0403 	bic.w	r4, r4, #3
 800918c:	42a0      	cmp	r0, r4
 800918e:	d0f8      	beq.n	8009182 <sbrk_aligned+0x22>
 8009190:	1a21      	subs	r1, r4, r0
 8009192:	4628      	mov	r0, r5
 8009194:	f000 fe78 	bl	8009e88 <_sbrk_r>
 8009198:	3001      	adds	r0, #1
 800919a:	d1f2      	bne.n	8009182 <sbrk_aligned+0x22>
 800919c:	e7ef      	b.n	800917e <sbrk_aligned+0x1e>
 800919e:	bf00      	nop
 80091a0:	2000133c 	.word	0x2000133c

080091a4 <_malloc_r>:
 80091a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a8:	1ccd      	adds	r5, r1, #3
 80091aa:	f025 0503 	bic.w	r5, r5, #3
 80091ae:	3508      	adds	r5, #8
 80091b0:	2d0c      	cmp	r5, #12
 80091b2:	bf38      	it	cc
 80091b4:	250c      	movcc	r5, #12
 80091b6:	2d00      	cmp	r5, #0
 80091b8:	4606      	mov	r6, r0
 80091ba:	db01      	blt.n	80091c0 <_malloc_r+0x1c>
 80091bc:	42a9      	cmp	r1, r5
 80091be:	d904      	bls.n	80091ca <_malloc_r+0x26>
 80091c0:	230c      	movs	r3, #12
 80091c2:	6033      	str	r3, [r6, #0]
 80091c4:	2000      	movs	r0, #0
 80091c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80092a0 <_malloc_r+0xfc>
 80091ce:	f000 f869 	bl	80092a4 <__malloc_lock>
 80091d2:	f8d8 3000 	ldr.w	r3, [r8]
 80091d6:	461c      	mov	r4, r3
 80091d8:	bb44      	cbnz	r4, 800922c <_malloc_r+0x88>
 80091da:	4629      	mov	r1, r5
 80091dc:	4630      	mov	r0, r6
 80091de:	f7ff ffbf 	bl	8009160 <sbrk_aligned>
 80091e2:	1c43      	adds	r3, r0, #1
 80091e4:	4604      	mov	r4, r0
 80091e6:	d158      	bne.n	800929a <_malloc_r+0xf6>
 80091e8:	f8d8 4000 	ldr.w	r4, [r8]
 80091ec:	4627      	mov	r7, r4
 80091ee:	2f00      	cmp	r7, #0
 80091f0:	d143      	bne.n	800927a <_malloc_r+0xd6>
 80091f2:	2c00      	cmp	r4, #0
 80091f4:	d04b      	beq.n	800928e <_malloc_r+0xea>
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	4639      	mov	r1, r7
 80091fa:	4630      	mov	r0, r6
 80091fc:	eb04 0903 	add.w	r9, r4, r3
 8009200:	f000 fe42 	bl	8009e88 <_sbrk_r>
 8009204:	4581      	cmp	r9, r0
 8009206:	d142      	bne.n	800928e <_malloc_r+0xea>
 8009208:	6821      	ldr	r1, [r4, #0]
 800920a:	4630      	mov	r0, r6
 800920c:	1a6d      	subs	r5, r5, r1
 800920e:	4629      	mov	r1, r5
 8009210:	f7ff ffa6 	bl	8009160 <sbrk_aligned>
 8009214:	3001      	adds	r0, #1
 8009216:	d03a      	beq.n	800928e <_malloc_r+0xea>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	442b      	add	r3, r5
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	f8d8 3000 	ldr.w	r3, [r8]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	bb62      	cbnz	r2, 8009280 <_malloc_r+0xdc>
 8009226:	f8c8 7000 	str.w	r7, [r8]
 800922a:	e00f      	b.n	800924c <_malloc_r+0xa8>
 800922c:	6822      	ldr	r2, [r4, #0]
 800922e:	1b52      	subs	r2, r2, r5
 8009230:	d420      	bmi.n	8009274 <_malloc_r+0xd0>
 8009232:	2a0b      	cmp	r2, #11
 8009234:	d917      	bls.n	8009266 <_malloc_r+0xc2>
 8009236:	1961      	adds	r1, r4, r5
 8009238:	42a3      	cmp	r3, r4
 800923a:	6025      	str	r5, [r4, #0]
 800923c:	bf18      	it	ne
 800923e:	6059      	strne	r1, [r3, #4]
 8009240:	6863      	ldr	r3, [r4, #4]
 8009242:	bf08      	it	eq
 8009244:	f8c8 1000 	streq.w	r1, [r8]
 8009248:	5162      	str	r2, [r4, r5]
 800924a:	604b      	str	r3, [r1, #4]
 800924c:	4630      	mov	r0, r6
 800924e:	f000 f82f 	bl	80092b0 <__malloc_unlock>
 8009252:	f104 000b 	add.w	r0, r4, #11
 8009256:	1d23      	adds	r3, r4, #4
 8009258:	f020 0007 	bic.w	r0, r0, #7
 800925c:	1ac2      	subs	r2, r0, r3
 800925e:	bf1c      	itt	ne
 8009260:	1a1b      	subne	r3, r3, r0
 8009262:	50a3      	strne	r3, [r4, r2]
 8009264:	e7af      	b.n	80091c6 <_malloc_r+0x22>
 8009266:	6862      	ldr	r2, [r4, #4]
 8009268:	42a3      	cmp	r3, r4
 800926a:	bf0c      	ite	eq
 800926c:	f8c8 2000 	streq.w	r2, [r8]
 8009270:	605a      	strne	r2, [r3, #4]
 8009272:	e7eb      	b.n	800924c <_malloc_r+0xa8>
 8009274:	4623      	mov	r3, r4
 8009276:	6864      	ldr	r4, [r4, #4]
 8009278:	e7ae      	b.n	80091d8 <_malloc_r+0x34>
 800927a:	463c      	mov	r4, r7
 800927c:	687f      	ldr	r7, [r7, #4]
 800927e:	e7b6      	b.n	80091ee <_malloc_r+0x4a>
 8009280:	461a      	mov	r2, r3
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	42a3      	cmp	r3, r4
 8009286:	d1fb      	bne.n	8009280 <_malloc_r+0xdc>
 8009288:	2300      	movs	r3, #0
 800928a:	6053      	str	r3, [r2, #4]
 800928c:	e7de      	b.n	800924c <_malloc_r+0xa8>
 800928e:	230c      	movs	r3, #12
 8009290:	4630      	mov	r0, r6
 8009292:	6033      	str	r3, [r6, #0]
 8009294:	f000 f80c 	bl	80092b0 <__malloc_unlock>
 8009298:	e794      	b.n	80091c4 <_malloc_r+0x20>
 800929a:	6005      	str	r5, [r0, #0]
 800929c:	e7d6      	b.n	800924c <_malloc_r+0xa8>
 800929e:	bf00      	nop
 80092a0:	20001340 	.word	0x20001340

080092a4 <__malloc_lock>:
 80092a4:	4801      	ldr	r0, [pc, #4]	@ (80092ac <__malloc_lock+0x8>)
 80092a6:	f7ff b890 	b.w	80083ca <__retarget_lock_acquire_recursive>
 80092aa:	bf00      	nop
 80092ac:	20001338 	.word	0x20001338

080092b0 <__malloc_unlock>:
 80092b0:	4801      	ldr	r0, [pc, #4]	@ (80092b8 <__malloc_unlock+0x8>)
 80092b2:	f7ff b88b 	b.w	80083cc <__retarget_lock_release_recursive>
 80092b6:	bf00      	nop
 80092b8:	20001338 	.word	0x20001338

080092bc <_Balloc>:
 80092bc:	b570      	push	{r4, r5, r6, lr}
 80092be:	69c6      	ldr	r6, [r0, #28]
 80092c0:	4604      	mov	r4, r0
 80092c2:	460d      	mov	r5, r1
 80092c4:	b976      	cbnz	r6, 80092e4 <_Balloc+0x28>
 80092c6:	2010      	movs	r0, #16
 80092c8:	f7ff ff42 	bl	8009150 <malloc>
 80092cc:	4602      	mov	r2, r0
 80092ce:	61e0      	str	r0, [r4, #28]
 80092d0:	b920      	cbnz	r0, 80092dc <_Balloc+0x20>
 80092d2:	216b      	movs	r1, #107	@ 0x6b
 80092d4:	4b17      	ldr	r3, [pc, #92]	@ (8009334 <_Balloc+0x78>)
 80092d6:	4818      	ldr	r0, [pc, #96]	@ (8009338 <_Balloc+0x7c>)
 80092d8:	f000 fde6 	bl	8009ea8 <__assert_func>
 80092dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092e0:	6006      	str	r6, [r0, #0]
 80092e2:	60c6      	str	r6, [r0, #12]
 80092e4:	69e6      	ldr	r6, [r4, #28]
 80092e6:	68f3      	ldr	r3, [r6, #12]
 80092e8:	b183      	cbz	r3, 800930c <_Balloc+0x50>
 80092ea:	69e3      	ldr	r3, [r4, #28]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092f2:	b9b8      	cbnz	r0, 8009324 <_Balloc+0x68>
 80092f4:	2101      	movs	r1, #1
 80092f6:	fa01 f605 	lsl.w	r6, r1, r5
 80092fa:	1d72      	adds	r2, r6, #5
 80092fc:	4620      	mov	r0, r4
 80092fe:	0092      	lsls	r2, r2, #2
 8009300:	f000 fdf0 	bl	8009ee4 <_calloc_r>
 8009304:	b160      	cbz	r0, 8009320 <_Balloc+0x64>
 8009306:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800930a:	e00e      	b.n	800932a <_Balloc+0x6e>
 800930c:	2221      	movs	r2, #33	@ 0x21
 800930e:	2104      	movs	r1, #4
 8009310:	4620      	mov	r0, r4
 8009312:	f000 fde7 	bl	8009ee4 <_calloc_r>
 8009316:	69e3      	ldr	r3, [r4, #28]
 8009318:	60f0      	str	r0, [r6, #12]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1e4      	bne.n	80092ea <_Balloc+0x2e>
 8009320:	2000      	movs	r0, #0
 8009322:	bd70      	pop	{r4, r5, r6, pc}
 8009324:	6802      	ldr	r2, [r0, #0]
 8009326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800932a:	2300      	movs	r3, #0
 800932c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009330:	e7f7      	b.n	8009322 <_Balloc+0x66>
 8009332:	bf00      	nop
 8009334:	0800c2ab 	.word	0x0800c2ab
 8009338:	0800c32b 	.word	0x0800c32b

0800933c <_Bfree>:
 800933c:	b570      	push	{r4, r5, r6, lr}
 800933e:	69c6      	ldr	r6, [r0, #28]
 8009340:	4605      	mov	r5, r0
 8009342:	460c      	mov	r4, r1
 8009344:	b976      	cbnz	r6, 8009364 <_Bfree+0x28>
 8009346:	2010      	movs	r0, #16
 8009348:	f7ff ff02 	bl	8009150 <malloc>
 800934c:	4602      	mov	r2, r0
 800934e:	61e8      	str	r0, [r5, #28]
 8009350:	b920      	cbnz	r0, 800935c <_Bfree+0x20>
 8009352:	218f      	movs	r1, #143	@ 0x8f
 8009354:	4b08      	ldr	r3, [pc, #32]	@ (8009378 <_Bfree+0x3c>)
 8009356:	4809      	ldr	r0, [pc, #36]	@ (800937c <_Bfree+0x40>)
 8009358:	f000 fda6 	bl	8009ea8 <__assert_func>
 800935c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009360:	6006      	str	r6, [r0, #0]
 8009362:	60c6      	str	r6, [r0, #12]
 8009364:	b13c      	cbz	r4, 8009376 <_Bfree+0x3a>
 8009366:	69eb      	ldr	r3, [r5, #28]
 8009368:	6862      	ldr	r2, [r4, #4]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009370:	6021      	str	r1, [r4, #0]
 8009372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009376:	bd70      	pop	{r4, r5, r6, pc}
 8009378:	0800c2ab 	.word	0x0800c2ab
 800937c:	0800c32b 	.word	0x0800c32b

08009380 <__multadd>:
 8009380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009384:	4607      	mov	r7, r0
 8009386:	460c      	mov	r4, r1
 8009388:	461e      	mov	r6, r3
 800938a:	2000      	movs	r0, #0
 800938c:	690d      	ldr	r5, [r1, #16]
 800938e:	f101 0c14 	add.w	ip, r1, #20
 8009392:	f8dc 3000 	ldr.w	r3, [ip]
 8009396:	3001      	adds	r0, #1
 8009398:	b299      	uxth	r1, r3
 800939a:	fb02 6101 	mla	r1, r2, r1, r6
 800939e:	0c1e      	lsrs	r6, r3, #16
 80093a0:	0c0b      	lsrs	r3, r1, #16
 80093a2:	fb02 3306 	mla	r3, r2, r6, r3
 80093a6:	b289      	uxth	r1, r1
 80093a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093ac:	4285      	cmp	r5, r0
 80093ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093b2:	f84c 1b04 	str.w	r1, [ip], #4
 80093b6:	dcec      	bgt.n	8009392 <__multadd+0x12>
 80093b8:	b30e      	cbz	r6, 80093fe <__multadd+0x7e>
 80093ba:	68a3      	ldr	r3, [r4, #8]
 80093bc:	42ab      	cmp	r3, r5
 80093be:	dc19      	bgt.n	80093f4 <__multadd+0x74>
 80093c0:	6861      	ldr	r1, [r4, #4]
 80093c2:	4638      	mov	r0, r7
 80093c4:	3101      	adds	r1, #1
 80093c6:	f7ff ff79 	bl	80092bc <_Balloc>
 80093ca:	4680      	mov	r8, r0
 80093cc:	b928      	cbnz	r0, 80093da <__multadd+0x5a>
 80093ce:	4602      	mov	r2, r0
 80093d0:	21ba      	movs	r1, #186	@ 0xba
 80093d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009404 <__multadd+0x84>)
 80093d4:	480c      	ldr	r0, [pc, #48]	@ (8009408 <__multadd+0x88>)
 80093d6:	f000 fd67 	bl	8009ea8 <__assert_func>
 80093da:	6922      	ldr	r2, [r4, #16]
 80093dc:	f104 010c 	add.w	r1, r4, #12
 80093e0:	3202      	adds	r2, #2
 80093e2:	0092      	lsls	r2, r2, #2
 80093e4:	300c      	adds	r0, #12
 80093e6:	f7ff f800 	bl	80083ea <memcpy>
 80093ea:	4621      	mov	r1, r4
 80093ec:	4638      	mov	r0, r7
 80093ee:	f7ff ffa5 	bl	800933c <_Bfree>
 80093f2:	4644      	mov	r4, r8
 80093f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093f8:	3501      	adds	r5, #1
 80093fa:	615e      	str	r6, [r3, #20]
 80093fc:	6125      	str	r5, [r4, #16]
 80093fe:	4620      	mov	r0, r4
 8009400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009404:	0800c31a 	.word	0x0800c31a
 8009408:	0800c32b 	.word	0x0800c32b

0800940c <__hi0bits>:
 800940c:	4603      	mov	r3, r0
 800940e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009412:	bf3a      	itte	cc
 8009414:	0403      	lslcc	r3, r0, #16
 8009416:	2010      	movcc	r0, #16
 8009418:	2000      	movcs	r0, #0
 800941a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800941e:	bf3c      	itt	cc
 8009420:	021b      	lslcc	r3, r3, #8
 8009422:	3008      	addcc	r0, #8
 8009424:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009428:	bf3c      	itt	cc
 800942a:	011b      	lslcc	r3, r3, #4
 800942c:	3004      	addcc	r0, #4
 800942e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009432:	bf3c      	itt	cc
 8009434:	009b      	lslcc	r3, r3, #2
 8009436:	3002      	addcc	r0, #2
 8009438:	2b00      	cmp	r3, #0
 800943a:	db05      	blt.n	8009448 <__hi0bits+0x3c>
 800943c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009440:	f100 0001 	add.w	r0, r0, #1
 8009444:	bf08      	it	eq
 8009446:	2020      	moveq	r0, #32
 8009448:	4770      	bx	lr

0800944a <__lo0bits>:
 800944a:	6803      	ldr	r3, [r0, #0]
 800944c:	4602      	mov	r2, r0
 800944e:	f013 0007 	ands.w	r0, r3, #7
 8009452:	d00b      	beq.n	800946c <__lo0bits+0x22>
 8009454:	07d9      	lsls	r1, r3, #31
 8009456:	d421      	bmi.n	800949c <__lo0bits+0x52>
 8009458:	0798      	lsls	r0, r3, #30
 800945a:	bf49      	itett	mi
 800945c:	085b      	lsrmi	r3, r3, #1
 800945e:	089b      	lsrpl	r3, r3, #2
 8009460:	2001      	movmi	r0, #1
 8009462:	6013      	strmi	r3, [r2, #0]
 8009464:	bf5c      	itt	pl
 8009466:	2002      	movpl	r0, #2
 8009468:	6013      	strpl	r3, [r2, #0]
 800946a:	4770      	bx	lr
 800946c:	b299      	uxth	r1, r3
 800946e:	b909      	cbnz	r1, 8009474 <__lo0bits+0x2a>
 8009470:	2010      	movs	r0, #16
 8009472:	0c1b      	lsrs	r3, r3, #16
 8009474:	b2d9      	uxtb	r1, r3
 8009476:	b909      	cbnz	r1, 800947c <__lo0bits+0x32>
 8009478:	3008      	adds	r0, #8
 800947a:	0a1b      	lsrs	r3, r3, #8
 800947c:	0719      	lsls	r1, r3, #28
 800947e:	bf04      	itt	eq
 8009480:	091b      	lsreq	r3, r3, #4
 8009482:	3004      	addeq	r0, #4
 8009484:	0799      	lsls	r1, r3, #30
 8009486:	bf04      	itt	eq
 8009488:	089b      	lsreq	r3, r3, #2
 800948a:	3002      	addeq	r0, #2
 800948c:	07d9      	lsls	r1, r3, #31
 800948e:	d403      	bmi.n	8009498 <__lo0bits+0x4e>
 8009490:	085b      	lsrs	r3, r3, #1
 8009492:	f100 0001 	add.w	r0, r0, #1
 8009496:	d003      	beq.n	80094a0 <__lo0bits+0x56>
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	4770      	bx	lr
 800949c:	2000      	movs	r0, #0
 800949e:	4770      	bx	lr
 80094a0:	2020      	movs	r0, #32
 80094a2:	4770      	bx	lr

080094a4 <__i2b>:
 80094a4:	b510      	push	{r4, lr}
 80094a6:	460c      	mov	r4, r1
 80094a8:	2101      	movs	r1, #1
 80094aa:	f7ff ff07 	bl	80092bc <_Balloc>
 80094ae:	4602      	mov	r2, r0
 80094b0:	b928      	cbnz	r0, 80094be <__i2b+0x1a>
 80094b2:	f240 1145 	movw	r1, #325	@ 0x145
 80094b6:	4b04      	ldr	r3, [pc, #16]	@ (80094c8 <__i2b+0x24>)
 80094b8:	4804      	ldr	r0, [pc, #16]	@ (80094cc <__i2b+0x28>)
 80094ba:	f000 fcf5 	bl	8009ea8 <__assert_func>
 80094be:	2301      	movs	r3, #1
 80094c0:	6144      	str	r4, [r0, #20]
 80094c2:	6103      	str	r3, [r0, #16]
 80094c4:	bd10      	pop	{r4, pc}
 80094c6:	bf00      	nop
 80094c8:	0800c31a 	.word	0x0800c31a
 80094cc:	0800c32b 	.word	0x0800c32b

080094d0 <__multiply>:
 80094d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d4:	4617      	mov	r7, r2
 80094d6:	690a      	ldr	r2, [r1, #16]
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	4689      	mov	r9, r1
 80094dc:	429a      	cmp	r2, r3
 80094de:	bfa2      	ittt	ge
 80094e0:	463b      	movge	r3, r7
 80094e2:	460f      	movge	r7, r1
 80094e4:	4699      	movge	r9, r3
 80094e6:	693d      	ldr	r5, [r7, #16]
 80094e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	eb05 060a 	add.w	r6, r5, sl
 80094f4:	42b3      	cmp	r3, r6
 80094f6:	b085      	sub	sp, #20
 80094f8:	bfb8      	it	lt
 80094fa:	3101      	addlt	r1, #1
 80094fc:	f7ff fede 	bl	80092bc <_Balloc>
 8009500:	b930      	cbnz	r0, 8009510 <__multiply+0x40>
 8009502:	4602      	mov	r2, r0
 8009504:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009508:	4b40      	ldr	r3, [pc, #256]	@ (800960c <__multiply+0x13c>)
 800950a:	4841      	ldr	r0, [pc, #260]	@ (8009610 <__multiply+0x140>)
 800950c:	f000 fccc 	bl	8009ea8 <__assert_func>
 8009510:	f100 0414 	add.w	r4, r0, #20
 8009514:	4623      	mov	r3, r4
 8009516:	2200      	movs	r2, #0
 8009518:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800951c:	4573      	cmp	r3, lr
 800951e:	d320      	bcc.n	8009562 <__multiply+0x92>
 8009520:	f107 0814 	add.w	r8, r7, #20
 8009524:	f109 0114 	add.w	r1, r9, #20
 8009528:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800952c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009530:	9302      	str	r3, [sp, #8]
 8009532:	1beb      	subs	r3, r5, r7
 8009534:	3b15      	subs	r3, #21
 8009536:	f023 0303 	bic.w	r3, r3, #3
 800953a:	3304      	adds	r3, #4
 800953c:	3715      	adds	r7, #21
 800953e:	42bd      	cmp	r5, r7
 8009540:	bf38      	it	cc
 8009542:	2304      	movcc	r3, #4
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	9b02      	ldr	r3, [sp, #8]
 8009548:	9103      	str	r1, [sp, #12]
 800954a:	428b      	cmp	r3, r1
 800954c:	d80c      	bhi.n	8009568 <__multiply+0x98>
 800954e:	2e00      	cmp	r6, #0
 8009550:	dd03      	ble.n	800955a <__multiply+0x8a>
 8009552:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009556:	2b00      	cmp	r3, #0
 8009558:	d055      	beq.n	8009606 <__multiply+0x136>
 800955a:	6106      	str	r6, [r0, #16]
 800955c:	b005      	add	sp, #20
 800955e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009562:	f843 2b04 	str.w	r2, [r3], #4
 8009566:	e7d9      	b.n	800951c <__multiply+0x4c>
 8009568:	f8b1 a000 	ldrh.w	sl, [r1]
 800956c:	f1ba 0f00 	cmp.w	sl, #0
 8009570:	d01f      	beq.n	80095b2 <__multiply+0xe2>
 8009572:	46c4      	mov	ip, r8
 8009574:	46a1      	mov	r9, r4
 8009576:	2700      	movs	r7, #0
 8009578:	f85c 2b04 	ldr.w	r2, [ip], #4
 800957c:	f8d9 3000 	ldr.w	r3, [r9]
 8009580:	fa1f fb82 	uxth.w	fp, r2
 8009584:	b29b      	uxth	r3, r3
 8009586:	fb0a 330b 	mla	r3, sl, fp, r3
 800958a:	443b      	add	r3, r7
 800958c:	f8d9 7000 	ldr.w	r7, [r9]
 8009590:	0c12      	lsrs	r2, r2, #16
 8009592:	0c3f      	lsrs	r7, r7, #16
 8009594:	fb0a 7202 	mla	r2, sl, r2, r7
 8009598:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800959c:	b29b      	uxth	r3, r3
 800959e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095a2:	4565      	cmp	r5, ip
 80095a4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80095a8:	f849 3b04 	str.w	r3, [r9], #4
 80095ac:	d8e4      	bhi.n	8009578 <__multiply+0xa8>
 80095ae:	9b01      	ldr	r3, [sp, #4]
 80095b0:	50e7      	str	r7, [r4, r3]
 80095b2:	9b03      	ldr	r3, [sp, #12]
 80095b4:	3104      	adds	r1, #4
 80095b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80095ba:	f1b9 0f00 	cmp.w	r9, #0
 80095be:	d020      	beq.n	8009602 <__multiply+0x132>
 80095c0:	4647      	mov	r7, r8
 80095c2:	46a4      	mov	ip, r4
 80095c4:	f04f 0a00 	mov.w	sl, #0
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	f8b7 b000 	ldrh.w	fp, [r7]
 80095ce:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	fb09 220b 	mla	r2, r9, fp, r2
 80095d8:	4452      	add	r2, sl
 80095da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095de:	f84c 3b04 	str.w	r3, [ip], #4
 80095e2:	f857 3b04 	ldr.w	r3, [r7], #4
 80095e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095ea:	f8bc 3000 	ldrh.w	r3, [ip]
 80095ee:	42bd      	cmp	r5, r7
 80095f0:	fb09 330a 	mla	r3, r9, sl, r3
 80095f4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80095f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095fc:	d8e5      	bhi.n	80095ca <__multiply+0xfa>
 80095fe:	9a01      	ldr	r2, [sp, #4]
 8009600:	50a3      	str	r3, [r4, r2]
 8009602:	3404      	adds	r4, #4
 8009604:	e79f      	b.n	8009546 <__multiply+0x76>
 8009606:	3e01      	subs	r6, #1
 8009608:	e7a1      	b.n	800954e <__multiply+0x7e>
 800960a:	bf00      	nop
 800960c:	0800c31a 	.word	0x0800c31a
 8009610:	0800c32b 	.word	0x0800c32b

08009614 <__pow5mult>:
 8009614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009618:	4615      	mov	r5, r2
 800961a:	f012 0203 	ands.w	r2, r2, #3
 800961e:	4607      	mov	r7, r0
 8009620:	460e      	mov	r6, r1
 8009622:	d007      	beq.n	8009634 <__pow5mult+0x20>
 8009624:	4c25      	ldr	r4, [pc, #148]	@ (80096bc <__pow5mult+0xa8>)
 8009626:	3a01      	subs	r2, #1
 8009628:	2300      	movs	r3, #0
 800962a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800962e:	f7ff fea7 	bl	8009380 <__multadd>
 8009632:	4606      	mov	r6, r0
 8009634:	10ad      	asrs	r5, r5, #2
 8009636:	d03d      	beq.n	80096b4 <__pow5mult+0xa0>
 8009638:	69fc      	ldr	r4, [r7, #28]
 800963a:	b97c      	cbnz	r4, 800965c <__pow5mult+0x48>
 800963c:	2010      	movs	r0, #16
 800963e:	f7ff fd87 	bl	8009150 <malloc>
 8009642:	4602      	mov	r2, r0
 8009644:	61f8      	str	r0, [r7, #28]
 8009646:	b928      	cbnz	r0, 8009654 <__pow5mult+0x40>
 8009648:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800964c:	4b1c      	ldr	r3, [pc, #112]	@ (80096c0 <__pow5mult+0xac>)
 800964e:	481d      	ldr	r0, [pc, #116]	@ (80096c4 <__pow5mult+0xb0>)
 8009650:	f000 fc2a 	bl	8009ea8 <__assert_func>
 8009654:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009658:	6004      	str	r4, [r0, #0]
 800965a:	60c4      	str	r4, [r0, #12]
 800965c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009660:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009664:	b94c      	cbnz	r4, 800967a <__pow5mult+0x66>
 8009666:	f240 2171 	movw	r1, #625	@ 0x271
 800966a:	4638      	mov	r0, r7
 800966c:	f7ff ff1a 	bl	80094a4 <__i2b>
 8009670:	2300      	movs	r3, #0
 8009672:	4604      	mov	r4, r0
 8009674:	f8c8 0008 	str.w	r0, [r8, #8]
 8009678:	6003      	str	r3, [r0, #0]
 800967a:	f04f 0900 	mov.w	r9, #0
 800967e:	07eb      	lsls	r3, r5, #31
 8009680:	d50a      	bpl.n	8009698 <__pow5mult+0x84>
 8009682:	4631      	mov	r1, r6
 8009684:	4622      	mov	r2, r4
 8009686:	4638      	mov	r0, r7
 8009688:	f7ff ff22 	bl	80094d0 <__multiply>
 800968c:	4680      	mov	r8, r0
 800968e:	4631      	mov	r1, r6
 8009690:	4638      	mov	r0, r7
 8009692:	f7ff fe53 	bl	800933c <_Bfree>
 8009696:	4646      	mov	r6, r8
 8009698:	106d      	asrs	r5, r5, #1
 800969a:	d00b      	beq.n	80096b4 <__pow5mult+0xa0>
 800969c:	6820      	ldr	r0, [r4, #0]
 800969e:	b938      	cbnz	r0, 80096b0 <__pow5mult+0x9c>
 80096a0:	4622      	mov	r2, r4
 80096a2:	4621      	mov	r1, r4
 80096a4:	4638      	mov	r0, r7
 80096a6:	f7ff ff13 	bl	80094d0 <__multiply>
 80096aa:	6020      	str	r0, [r4, #0]
 80096ac:	f8c0 9000 	str.w	r9, [r0]
 80096b0:	4604      	mov	r4, r0
 80096b2:	e7e4      	b.n	800967e <__pow5mult+0x6a>
 80096b4:	4630      	mov	r0, r6
 80096b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ba:	bf00      	nop
 80096bc:	0800c3dc 	.word	0x0800c3dc
 80096c0:	0800c2ab 	.word	0x0800c2ab
 80096c4:	0800c32b 	.word	0x0800c32b

080096c8 <__lshift>:
 80096c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096cc:	460c      	mov	r4, r1
 80096ce:	4607      	mov	r7, r0
 80096d0:	4691      	mov	r9, r2
 80096d2:	6923      	ldr	r3, [r4, #16]
 80096d4:	6849      	ldr	r1, [r1, #4]
 80096d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096da:	68a3      	ldr	r3, [r4, #8]
 80096dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096e0:	f108 0601 	add.w	r6, r8, #1
 80096e4:	42b3      	cmp	r3, r6
 80096e6:	db0b      	blt.n	8009700 <__lshift+0x38>
 80096e8:	4638      	mov	r0, r7
 80096ea:	f7ff fde7 	bl	80092bc <_Balloc>
 80096ee:	4605      	mov	r5, r0
 80096f0:	b948      	cbnz	r0, 8009706 <__lshift+0x3e>
 80096f2:	4602      	mov	r2, r0
 80096f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80096f8:	4b27      	ldr	r3, [pc, #156]	@ (8009798 <__lshift+0xd0>)
 80096fa:	4828      	ldr	r0, [pc, #160]	@ (800979c <__lshift+0xd4>)
 80096fc:	f000 fbd4 	bl	8009ea8 <__assert_func>
 8009700:	3101      	adds	r1, #1
 8009702:	005b      	lsls	r3, r3, #1
 8009704:	e7ee      	b.n	80096e4 <__lshift+0x1c>
 8009706:	2300      	movs	r3, #0
 8009708:	f100 0114 	add.w	r1, r0, #20
 800970c:	f100 0210 	add.w	r2, r0, #16
 8009710:	4618      	mov	r0, r3
 8009712:	4553      	cmp	r3, sl
 8009714:	db33      	blt.n	800977e <__lshift+0xb6>
 8009716:	6920      	ldr	r0, [r4, #16]
 8009718:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800971c:	f104 0314 	add.w	r3, r4, #20
 8009720:	f019 091f 	ands.w	r9, r9, #31
 8009724:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009728:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800972c:	d02b      	beq.n	8009786 <__lshift+0xbe>
 800972e:	468a      	mov	sl, r1
 8009730:	2200      	movs	r2, #0
 8009732:	f1c9 0e20 	rsb	lr, r9, #32
 8009736:	6818      	ldr	r0, [r3, #0]
 8009738:	fa00 f009 	lsl.w	r0, r0, r9
 800973c:	4310      	orrs	r0, r2
 800973e:	f84a 0b04 	str.w	r0, [sl], #4
 8009742:	f853 2b04 	ldr.w	r2, [r3], #4
 8009746:	459c      	cmp	ip, r3
 8009748:	fa22 f20e 	lsr.w	r2, r2, lr
 800974c:	d8f3      	bhi.n	8009736 <__lshift+0x6e>
 800974e:	ebac 0304 	sub.w	r3, ip, r4
 8009752:	3b15      	subs	r3, #21
 8009754:	f023 0303 	bic.w	r3, r3, #3
 8009758:	3304      	adds	r3, #4
 800975a:	f104 0015 	add.w	r0, r4, #21
 800975e:	4560      	cmp	r0, ip
 8009760:	bf88      	it	hi
 8009762:	2304      	movhi	r3, #4
 8009764:	50ca      	str	r2, [r1, r3]
 8009766:	b10a      	cbz	r2, 800976c <__lshift+0xa4>
 8009768:	f108 0602 	add.w	r6, r8, #2
 800976c:	3e01      	subs	r6, #1
 800976e:	4638      	mov	r0, r7
 8009770:	4621      	mov	r1, r4
 8009772:	612e      	str	r6, [r5, #16]
 8009774:	f7ff fde2 	bl	800933c <_Bfree>
 8009778:	4628      	mov	r0, r5
 800977a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009782:	3301      	adds	r3, #1
 8009784:	e7c5      	b.n	8009712 <__lshift+0x4a>
 8009786:	3904      	subs	r1, #4
 8009788:	f853 2b04 	ldr.w	r2, [r3], #4
 800978c:	459c      	cmp	ip, r3
 800978e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009792:	d8f9      	bhi.n	8009788 <__lshift+0xc0>
 8009794:	e7ea      	b.n	800976c <__lshift+0xa4>
 8009796:	bf00      	nop
 8009798:	0800c31a 	.word	0x0800c31a
 800979c:	0800c32b 	.word	0x0800c32b

080097a0 <__mcmp>:
 80097a0:	4603      	mov	r3, r0
 80097a2:	690a      	ldr	r2, [r1, #16]
 80097a4:	6900      	ldr	r0, [r0, #16]
 80097a6:	b530      	push	{r4, r5, lr}
 80097a8:	1a80      	subs	r0, r0, r2
 80097aa:	d10e      	bne.n	80097ca <__mcmp+0x2a>
 80097ac:	3314      	adds	r3, #20
 80097ae:	3114      	adds	r1, #20
 80097b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80097b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80097b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80097bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80097c0:	4295      	cmp	r5, r2
 80097c2:	d003      	beq.n	80097cc <__mcmp+0x2c>
 80097c4:	d205      	bcs.n	80097d2 <__mcmp+0x32>
 80097c6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ca:	bd30      	pop	{r4, r5, pc}
 80097cc:	42a3      	cmp	r3, r4
 80097ce:	d3f3      	bcc.n	80097b8 <__mcmp+0x18>
 80097d0:	e7fb      	b.n	80097ca <__mcmp+0x2a>
 80097d2:	2001      	movs	r0, #1
 80097d4:	e7f9      	b.n	80097ca <__mcmp+0x2a>
	...

080097d8 <__mdiff>:
 80097d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097dc:	4689      	mov	r9, r1
 80097de:	4606      	mov	r6, r0
 80097e0:	4611      	mov	r1, r2
 80097e2:	4648      	mov	r0, r9
 80097e4:	4614      	mov	r4, r2
 80097e6:	f7ff ffdb 	bl	80097a0 <__mcmp>
 80097ea:	1e05      	subs	r5, r0, #0
 80097ec:	d112      	bne.n	8009814 <__mdiff+0x3c>
 80097ee:	4629      	mov	r1, r5
 80097f0:	4630      	mov	r0, r6
 80097f2:	f7ff fd63 	bl	80092bc <_Balloc>
 80097f6:	4602      	mov	r2, r0
 80097f8:	b928      	cbnz	r0, 8009806 <__mdiff+0x2e>
 80097fa:	f240 2137 	movw	r1, #567	@ 0x237
 80097fe:	4b3e      	ldr	r3, [pc, #248]	@ (80098f8 <__mdiff+0x120>)
 8009800:	483e      	ldr	r0, [pc, #248]	@ (80098fc <__mdiff+0x124>)
 8009802:	f000 fb51 	bl	8009ea8 <__assert_func>
 8009806:	2301      	movs	r3, #1
 8009808:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800980c:	4610      	mov	r0, r2
 800980e:	b003      	add	sp, #12
 8009810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009814:	bfbc      	itt	lt
 8009816:	464b      	movlt	r3, r9
 8009818:	46a1      	movlt	r9, r4
 800981a:	4630      	mov	r0, r6
 800981c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009820:	bfba      	itte	lt
 8009822:	461c      	movlt	r4, r3
 8009824:	2501      	movlt	r5, #1
 8009826:	2500      	movge	r5, #0
 8009828:	f7ff fd48 	bl	80092bc <_Balloc>
 800982c:	4602      	mov	r2, r0
 800982e:	b918      	cbnz	r0, 8009838 <__mdiff+0x60>
 8009830:	f240 2145 	movw	r1, #581	@ 0x245
 8009834:	4b30      	ldr	r3, [pc, #192]	@ (80098f8 <__mdiff+0x120>)
 8009836:	e7e3      	b.n	8009800 <__mdiff+0x28>
 8009838:	f100 0b14 	add.w	fp, r0, #20
 800983c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009840:	f109 0310 	add.w	r3, r9, #16
 8009844:	60c5      	str	r5, [r0, #12]
 8009846:	f04f 0c00 	mov.w	ip, #0
 800984a:	f109 0514 	add.w	r5, r9, #20
 800984e:	46d9      	mov	r9, fp
 8009850:	6926      	ldr	r6, [r4, #16]
 8009852:	f104 0e14 	add.w	lr, r4, #20
 8009856:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800985a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	9b01      	ldr	r3, [sp, #4]
 8009862:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009866:	f853 af04 	ldr.w	sl, [r3, #4]!
 800986a:	b281      	uxth	r1, r0
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	fa1f f38a 	uxth.w	r3, sl
 8009872:	1a5b      	subs	r3, r3, r1
 8009874:	0c00      	lsrs	r0, r0, #16
 8009876:	4463      	add	r3, ip
 8009878:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800987c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009880:	b29b      	uxth	r3, r3
 8009882:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009886:	4576      	cmp	r6, lr
 8009888:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800988c:	f849 3b04 	str.w	r3, [r9], #4
 8009890:	d8e6      	bhi.n	8009860 <__mdiff+0x88>
 8009892:	1b33      	subs	r3, r6, r4
 8009894:	3b15      	subs	r3, #21
 8009896:	f023 0303 	bic.w	r3, r3, #3
 800989a:	3415      	adds	r4, #21
 800989c:	3304      	adds	r3, #4
 800989e:	42a6      	cmp	r6, r4
 80098a0:	bf38      	it	cc
 80098a2:	2304      	movcc	r3, #4
 80098a4:	441d      	add	r5, r3
 80098a6:	445b      	add	r3, fp
 80098a8:	461e      	mov	r6, r3
 80098aa:	462c      	mov	r4, r5
 80098ac:	4544      	cmp	r4, r8
 80098ae:	d30e      	bcc.n	80098ce <__mdiff+0xf6>
 80098b0:	f108 0103 	add.w	r1, r8, #3
 80098b4:	1b49      	subs	r1, r1, r5
 80098b6:	f021 0103 	bic.w	r1, r1, #3
 80098ba:	3d03      	subs	r5, #3
 80098bc:	45a8      	cmp	r8, r5
 80098be:	bf38      	it	cc
 80098c0:	2100      	movcc	r1, #0
 80098c2:	440b      	add	r3, r1
 80098c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098c8:	b199      	cbz	r1, 80098f2 <__mdiff+0x11a>
 80098ca:	6117      	str	r7, [r2, #16]
 80098cc:	e79e      	b.n	800980c <__mdiff+0x34>
 80098ce:	46e6      	mov	lr, ip
 80098d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80098d4:	fa1f fc81 	uxth.w	ip, r1
 80098d8:	44f4      	add	ip, lr
 80098da:	0c08      	lsrs	r0, r1, #16
 80098dc:	4471      	add	r1, lr
 80098de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80098e2:	b289      	uxth	r1, r1
 80098e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80098e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098ec:	f846 1b04 	str.w	r1, [r6], #4
 80098f0:	e7dc      	b.n	80098ac <__mdiff+0xd4>
 80098f2:	3f01      	subs	r7, #1
 80098f4:	e7e6      	b.n	80098c4 <__mdiff+0xec>
 80098f6:	bf00      	nop
 80098f8:	0800c31a 	.word	0x0800c31a
 80098fc:	0800c32b 	.word	0x0800c32b

08009900 <__d2b>:
 8009900:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009904:	2101      	movs	r1, #1
 8009906:	4690      	mov	r8, r2
 8009908:	4699      	mov	r9, r3
 800990a:	9e08      	ldr	r6, [sp, #32]
 800990c:	f7ff fcd6 	bl	80092bc <_Balloc>
 8009910:	4604      	mov	r4, r0
 8009912:	b930      	cbnz	r0, 8009922 <__d2b+0x22>
 8009914:	4602      	mov	r2, r0
 8009916:	f240 310f 	movw	r1, #783	@ 0x30f
 800991a:	4b23      	ldr	r3, [pc, #140]	@ (80099a8 <__d2b+0xa8>)
 800991c:	4823      	ldr	r0, [pc, #140]	@ (80099ac <__d2b+0xac>)
 800991e:	f000 fac3 	bl	8009ea8 <__assert_func>
 8009922:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009926:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800992a:	b10d      	cbz	r5, 8009930 <__d2b+0x30>
 800992c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	f1b8 0300 	subs.w	r3, r8, #0
 8009936:	d024      	beq.n	8009982 <__d2b+0x82>
 8009938:	4668      	mov	r0, sp
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	f7ff fd85 	bl	800944a <__lo0bits>
 8009940:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009944:	b1d8      	cbz	r0, 800997e <__d2b+0x7e>
 8009946:	f1c0 0320 	rsb	r3, r0, #32
 800994a:	fa02 f303 	lsl.w	r3, r2, r3
 800994e:	430b      	orrs	r3, r1
 8009950:	40c2      	lsrs	r2, r0
 8009952:	6163      	str	r3, [r4, #20]
 8009954:	9201      	str	r2, [sp, #4]
 8009956:	9b01      	ldr	r3, [sp, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	bf0c      	ite	eq
 800995c:	2201      	moveq	r2, #1
 800995e:	2202      	movne	r2, #2
 8009960:	61a3      	str	r3, [r4, #24]
 8009962:	6122      	str	r2, [r4, #16]
 8009964:	b1ad      	cbz	r5, 8009992 <__d2b+0x92>
 8009966:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800996a:	4405      	add	r5, r0
 800996c:	6035      	str	r5, [r6, #0]
 800996e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009974:	6018      	str	r0, [r3, #0]
 8009976:	4620      	mov	r0, r4
 8009978:	b002      	add	sp, #8
 800997a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800997e:	6161      	str	r1, [r4, #20]
 8009980:	e7e9      	b.n	8009956 <__d2b+0x56>
 8009982:	a801      	add	r0, sp, #4
 8009984:	f7ff fd61 	bl	800944a <__lo0bits>
 8009988:	9b01      	ldr	r3, [sp, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	6163      	str	r3, [r4, #20]
 800998e:	3020      	adds	r0, #32
 8009990:	e7e7      	b.n	8009962 <__d2b+0x62>
 8009992:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009996:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800999a:	6030      	str	r0, [r6, #0]
 800999c:	6918      	ldr	r0, [r3, #16]
 800999e:	f7ff fd35 	bl	800940c <__hi0bits>
 80099a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099a6:	e7e4      	b.n	8009972 <__d2b+0x72>
 80099a8:	0800c31a 	.word	0x0800c31a
 80099ac:	0800c32b 	.word	0x0800c32b

080099b0 <__sfputc_r>:
 80099b0:	6893      	ldr	r3, [r2, #8]
 80099b2:	b410      	push	{r4}
 80099b4:	3b01      	subs	r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	6093      	str	r3, [r2, #8]
 80099ba:	da07      	bge.n	80099cc <__sfputc_r+0x1c>
 80099bc:	6994      	ldr	r4, [r2, #24]
 80099be:	42a3      	cmp	r3, r4
 80099c0:	db01      	blt.n	80099c6 <__sfputc_r+0x16>
 80099c2:	290a      	cmp	r1, #10
 80099c4:	d102      	bne.n	80099cc <__sfputc_r+0x1c>
 80099c6:	bc10      	pop	{r4}
 80099c8:	f7fe bbed 	b.w	80081a6 <__swbuf_r>
 80099cc:	6813      	ldr	r3, [r2, #0]
 80099ce:	1c58      	adds	r0, r3, #1
 80099d0:	6010      	str	r0, [r2, #0]
 80099d2:	7019      	strb	r1, [r3, #0]
 80099d4:	4608      	mov	r0, r1
 80099d6:	bc10      	pop	{r4}
 80099d8:	4770      	bx	lr

080099da <__sfputs_r>:
 80099da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099dc:	4606      	mov	r6, r0
 80099de:	460f      	mov	r7, r1
 80099e0:	4614      	mov	r4, r2
 80099e2:	18d5      	adds	r5, r2, r3
 80099e4:	42ac      	cmp	r4, r5
 80099e6:	d101      	bne.n	80099ec <__sfputs_r+0x12>
 80099e8:	2000      	movs	r0, #0
 80099ea:	e007      	b.n	80099fc <__sfputs_r+0x22>
 80099ec:	463a      	mov	r2, r7
 80099ee:	4630      	mov	r0, r6
 80099f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f4:	f7ff ffdc 	bl	80099b0 <__sfputc_r>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d1f3      	bne.n	80099e4 <__sfputs_r+0xa>
 80099fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a00 <_vfiprintf_r>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	460d      	mov	r5, r1
 8009a06:	4614      	mov	r4, r2
 8009a08:	4698      	mov	r8, r3
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	b09d      	sub	sp, #116	@ 0x74
 8009a0e:	b118      	cbz	r0, 8009a18 <_vfiprintf_r+0x18>
 8009a10:	6a03      	ldr	r3, [r0, #32]
 8009a12:	b90b      	cbnz	r3, 8009a18 <_vfiprintf_r+0x18>
 8009a14:	f7fe fade 	bl	8007fd4 <__sinit>
 8009a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a1a:	07d9      	lsls	r1, r3, #31
 8009a1c:	d405      	bmi.n	8009a2a <_vfiprintf_r+0x2a>
 8009a1e:	89ab      	ldrh	r3, [r5, #12]
 8009a20:	059a      	lsls	r2, r3, #22
 8009a22:	d402      	bmi.n	8009a2a <_vfiprintf_r+0x2a>
 8009a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a26:	f7fe fcd0 	bl	80083ca <__retarget_lock_acquire_recursive>
 8009a2a:	89ab      	ldrh	r3, [r5, #12]
 8009a2c:	071b      	lsls	r3, r3, #28
 8009a2e:	d501      	bpl.n	8009a34 <_vfiprintf_r+0x34>
 8009a30:	692b      	ldr	r3, [r5, #16]
 8009a32:	b99b      	cbnz	r3, 8009a5c <_vfiprintf_r+0x5c>
 8009a34:	4629      	mov	r1, r5
 8009a36:	4630      	mov	r0, r6
 8009a38:	f7fe fbf4 	bl	8008224 <__swsetup_r>
 8009a3c:	b170      	cbz	r0, 8009a5c <_vfiprintf_r+0x5c>
 8009a3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a40:	07dc      	lsls	r4, r3, #31
 8009a42:	d504      	bpl.n	8009a4e <_vfiprintf_r+0x4e>
 8009a44:	f04f 30ff 	mov.w	r0, #4294967295
 8009a48:	b01d      	add	sp, #116	@ 0x74
 8009a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4e:	89ab      	ldrh	r3, [r5, #12]
 8009a50:	0598      	lsls	r0, r3, #22
 8009a52:	d4f7      	bmi.n	8009a44 <_vfiprintf_r+0x44>
 8009a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a56:	f7fe fcb9 	bl	80083cc <__retarget_lock_release_recursive>
 8009a5a:	e7f3      	b.n	8009a44 <_vfiprintf_r+0x44>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a60:	2320      	movs	r3, #32
 8009a62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a66:	2330      	movs	r3, #48	@ 0x30
 8009a68:	f04f 0901 	mov.w	r9, #1
 8009a6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a70:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009c1c <_vfiprintf_r+0x21c>
 8009a74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a78:	4623      	mov	r3, r4
 8009a7a:	469a      	mov	sl, r3
 8009a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a80:	b10a      	cbz	r2, 8009a86 <_vfiprintf_r+0x86>
 8009a82:	2a25      	cmp	r2, #37	@ 0x25
 8009a84:	d1f9      	bne.n	8009a7a <_vfiprintf_r+0x7a>
 8009a86:	ebba 0b04 	subs.w	fp, sl, r4
 8009a8a:	d00b      	beq.n	8009aa4 <_vfiprintf_r+0xa4>
 8009a8c:	465b      	mov	r3, fp
 8009a8e:	4622      	mov	r2, r4
 8009a90:	4629      	mov	r1, r5
 8009a92:	4630      	mov	r0, r6
 8009a94:	f7ff ffa1 	bl	80099da <__sfputs_r>
 8009a98:	3001      	adds	r0, #1
 8009a9a:	f000 80a7 	beq.w	8009bec <_vfiprintf_r+0x1ec>
 8009a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009aa0:	445a      	add	r2, fp
 8009aa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f000 809f 	beq.w	8009bec <_vfiprintf_r+0x1ec>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ab8:	f10a 0a01 	add.w	sl, sl, #1
 8009abc:	9304      	str	r3, [sp, #16]
 8009abe:	9307      	str	r3, [sp, #28]
 8009ac0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ac4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ac6:	4654      	mov	r4, sl
 8009ac8:	2205      	movs	r2, #5
 8009aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ace:	4853      	ldr	r0, [pc, #332]	@ (8009c1c <_vfiprintf_r+0x21c>)
 8009ad0:	f7fe fc7d 	bl	80083ce <memchr>
 8009ad4:	9a04      	ldr	r2, [sp, #16]
 8009ad6:	b9d8      	cbnz	r0, 8009b10 <_vfiprintf_r+0x110>
 8009ad8:	06d1      	lsls	r1, r2, #27
 8009ada:	bf44      	itt	mi
 8009adc:	2320      	movmi	r3, #32
 8009ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ae2:	0713      	lsls	r3, r2, #28
 8009ae4:	bf44      	itt	mi
 8009ae6:	232b      	movmi	r3, #43	@ 0x2b
 8009ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aec:	f89a 3000 	ldrb.w	r3, [sl]
 8009af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009af2:	d015      	beq.n	8009b20 <_vfiprintf_r+0x120>
 8009af4:	4654      	mov	r4, sl
 8009af6:	2000      	movs	r0, #0
 8009af8:	f04f 0c0a 	mov.w	ip, #10
 8009afc:	9a07      	ldr	r2, [sp, #28]
 8009afe:	4621      	mov	r1, r4
 8009b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b04:	3b30      	subs	r3, #48	@ 0x30
 8009b06:	2b09      	cmp	r3, #9
 8009b08:	d94b      	bls.n	8009ba2 <_vfiprintf_r+0x1a2>
 8009b0a:	b1b0      	cbz	r0, 8009b3a <_vfiprintf_r+0x13a>
 8009b0c:	9207      	str	r2, [sp, #28]
 8009b0e:	e014      	b.n	8009b3a <_vfiprintf_r+0x13a>
 8009b10:	eba0 0308 	sub.w	r3, r0, r8
 8009b14:	fa09 f303 	lsl.w	r3, r9, r3
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	46a2      	mov	sl, r4
 8009b1c:	9304      	str	r3, [sp, #16]
 8009b1e:	e7d2      	b.n	8009ac6 <_vfiprintf_r+0xc6>
 8009b20:	9b03      	ldr	r3, [sp, #12]
 8009b22:	1d19      	adds	r1, r3, #4
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	9103      	str	r1, [sp, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	bfbb      	ittet	lt
 8009b2c:	425b      	neglt	r3, r3
 8009b2e:	f042 0202 	orrlt.w	r2, r2, #2
 8009b32:	9307      	strge	r3, [sp, #28]
 8009b34:	9307      	strlt	r3, [sp, #28]
 8009b36:	bfb8      	it	lt
 8009b38:	9204      	strlt	r2, [sp, #16]
 8009b3a:	7823      	ldrb	r3, [r4, #0]
 8009b3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b3e:	d10a      	bne.n	8009b56 <_vfiprintf_r+0x156>
 8009b40:	7863      	ldrb	r3, [r4, #1]
 8009b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b44:	d132      	bne.n	8009bac <_vfiprintf_r+0x1ac>
 8009b46:	9b03      	ldr	r3, [sp, #12]
 8009b48:	3402      	adds	r4, #2
 8009b4a:	1d1a      	adds	r2, r3, #4
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	9203      	str	r2, [sp, #12]
 8009b50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b54:	9305      	str	r3, [sp, #20]
 8009b56:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009c20 <_vfiprintf_r+0x220>
 8009b5a:	2203      	movs	r2, #3
 8009b5c:	4650      	mov	r0, sl
 8009b5e:	7821      	ldrb	r1, [r4, #0]
 8009b60:	f7fe fc35 	bl	80083ce <memchr>
 8009b64:	b138      	cbz	r0, 8009b76 <_vfiprintf_r+0x176>
 8009b66:	2240      	movs	r2, #64	@ 0x40
 8009b68:	9b04      	ldr	r3, [sp, #16]
 8009b6a:	eba0 000a 	sub.w	r0, r0, sl
 8009b6e:	4082      	lsls	r2, r0
 8009b70:	4313      	orrs	r3, r2
 8009b72:	3401      	adds	r4, #1
 8009b74:	9304      	str	r3, [sp, #16]
 8009b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b7a:	2206      	movs	r2, #6
 8009b7c:	4829      	ldr	r0, [pc, #164]	@ (8009c24 <_vfiprintf_r+0x224>)
 8009b7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b82:	f7fe fc24 	bl	80083ce <memchr>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d03f      	beq.n	8009c0a <_vfiprintf_r+0x20a>
 8009b8a:	4b27      	ldr	r3, [pc, #156]	@ (8009c28 <_vfiprintf_r+0x228>)
 8009b8c:	bb1b      	cbnz	r3, 8009bd6 <_vfiprintf_r+0x1d6>
 8009b8e:	9b03      	ldr	r3, [sp, #12]
 8009b90:	3307      	adds	r3, #7
 8009b92:	f023 0307 	bic.w	r3, r3, #7
 8009b96:	3308      	adds	r3, #8
 8009b98:	9303      	str	r3, [sp, #12]
 8009b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b9c:	443b      	add	r3, r7
 8009b9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ba0:	e76a      	b.n	8009a78 <_vfiprintf_r+0x78>
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009baa:	e7a8      	b.n	8009afe <_vfiprintf_r+0xfe>
 8009bac:	2300      	movs	r3, #0
 8009bae:	f04f 0c0a 	mov.w	ip, #10
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	3401      	adds	r4, #1
 8009bb6:	9305      	str	r3, [sp, #20]
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bbe:	3a30      	subs	r2, #48	@ 0x30
 8009bc0:	2a09      	cmp	r2, #9
 8009bc2:	d903      	bls.n	8009bcc <_vfiprintf_r+0x1cc>
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d0c6      	beq.n	8009b56 <_vfiprintf_r+0x156>
 8009bc8:	9105      	str	r1, [sp, #20]
 8009bca:	e7c4      	b.n	8009b56 <_vfiprintf_r+0x156>
 8009bcc:	4604      	mov	r4, r0
 8009bce:	2301      	movs	r3, #1
 8009bd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bd4:	e7f0      	b.n	8009bb8 <_vfiprintf_r+0x1b8>
 8009bd6:	ab03      	add	r3, sp, #12
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	462a      	mov	r2, r5
 8009bdc:	4630      	mov	r0, r6
 8009bde:	4b13      	ldr	r3, [pc, #76]	@ (8009c2c <_vfiprintf_r+0x22c>)
 8009be0:	a904      	add	r1, sp, #16
 8009be2:	f7fd fdaf 	bl	8007744 <_printf_float>
 8009be6:	4607      	mov	r7, r0
 8009be8:	1c78      	adds	r0, r7, #1
 8009bea:	d1d6      	bne.n	8009b9a <_vfiprintf_r+0x19a>
 8009bec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bee:	07d9      	lsls	r1, r3, #31
 8009bf0:	d405      	bmi.n	8009bfe <_vfiprintf_r+0x1fe>
 8009bf2:	89ab      	ldrh	r3, [r5, #12]
 8009bf4:	059a      	lsls	r2, r3, #22
 8009bf6:	d402      	bmi.n	8009bfe <_vfiprintf_r+0x1fe>
 8009bf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bfa:	f7fe fbe7 	bl	80083cc <__retarget_lock_release_recursive>
 8009bfe:	89ab      	ldrh	r3, [r5, #12]
 8009c00:	065b      	lsls	r3, r3, #25
 8009c02:	f53f af1f 	bmi.w	8009a44 <_vfiprintf_r+0x44>
 8009c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c08:	e71e      	b.n	8009a48 <_vfiprintf_r+0x48>
 8009c0a:	ab03      	add	r3, sp, #12
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	462a      	mov	r2, r5
 8009c10:	4630      	mov	r0, r6
 8009c12:	4b06      	ldr	r3, [pc, #24]	@ (8009c2c <_vfiprintf_r+0x22c>)
 8009c14:	a904      	add	r1, sp, #16
 8009c16:	f7fe f833 	bl	8007c80 <_printf_i>
 8009c1a:	e7e4      	b.n	8009be6 <_vfiprintf_r+0x1e6>
 8009c1c:	0800c384 	.word	0x0800c384
 8009c20:	0800c38a 	.word	0x0800c38a
 8009c24:	0800c38e 	.word	0x0800c38e
 8009c28:	08007745 	.word	0x08007745
 8009c2c:	080099db 	.word	0x080099db

08009c30 <__sflush_r>:
 8009c30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c36:	0716      	lsls	r6, r2, #28
 8009c38:	4605      	mov	r5, r0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	d454      	bmi.n	8009ce8 <__sflush_r+0xb8>
 8009c3e:	684b      	ldr	r3, [r1, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	dc02      	bgt.n	8009c4a <__sflush_r+0x1a>
 8009c44:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	dd48      	ble.n	8009cdc <__sflush_r+0xac>
 8009c4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c4c:	2e00      	cmp	r6, #0
 8009c4e:	d045      	beq.n	8009cdc <__sflush_r+0xac>
 8009c50:	2300      	movs	r3, #0
 8009c52:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c56:	682f      	ldr	r7, [r5, #0]
 8009c58:	6a21      	ldr	r1, [r4, #32]
 8009c5a:	602b      	str	r3, [r5, #0]
 8009c5c:	d030      	beq.n	8009cc0 <__sflush_r+0x90>
 8009c5e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	0759      	lsls	r1, r3, #29
 8009c64:	d505      	bpl.n	8009c72 <__sflush_r+0x42>
 8009c66:	6863      	ldr	r3, [r4, #4]
 8009c68:	1ad2      	subs	r2, r2, r3
 8009c6a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c6c:	b10b      	cbz	r3, 8009c72 <__sflush_r+0x42>
 8009c6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c70:	1ad2      	subs	r2, r2, r3
 8009c72:	2300      	movs	r3, #0
 8009c74:	4628      	mov	r0, r5
 8009c76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c78:	6a21      	ldr	r1, [r4, #32]
 8009c7a:	47b0      	blx	r6
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	d106      	bne.n	8009c90 <__sflush_r+0x60>
 8009c82:	6829      	ldr	r1, [r5, #0]
 8009c84:	291d      	cmp	r1, #29
 8009c86:	d82b      	bhi.n	8009ce0 <__sflush_r+0xb0>
 8009c88:	4a28      	ldr	r2, [pc, #160]	@ (8009d2c <__sflush_r+0xfc>)
 8009c8a:	40ca      	lsrs	r2, r1
 8009c8c:	07d6      	lsls	r6, r2, #31
 8009c8e:	d527      	bpl.n	8009ce0 <__sflush_r+0xb0>
 8009c90:	2200      	movs	r2, #0
 8009c92:	6062      	str	r2, [r4, #4]
 8009c94:	6922      	ldr	r2, [r4, #16]
 8009c96:	04d9      	lsls	r1, r3, #19
 8009c98:	6022      	str	r2, [r4, #0]
 8009c9a:	d504      	bpl.n	8009ca6 <__sflush_r+0x76>
 8009c9c:	1c42      	adds	r2, r0, #1
 8009c9e:	d101      	bne.n	8009ca4 <__sflush_r+0x74>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	b903      	cbnz	r3, 8009ca6 <__sflush_r+0x76>
 8009ca4:	6560      	str	r0, [r4, #84]	@ 0x54
 8009ca6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ca8:	602f      	str	r7, [r5, #0]
 8009caa:	b1b9      	cbz	r1, 8009cdc <__sflush_r+0xac>
 8009cac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cb0:	4299      	cmp	r1, r3
 8009cb2:	d002      	beq.n	8009cba <__sflush_r+0x8a>
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f7ff fa03 	bl	80090c0 <_free_r>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cbe:	e00d      	b.n	8009cdc <__sflush_r+0xac>
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	47b0      	blx	r6
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	1c50      	adds	r0, r2, #1
 8009cca:	d1c9      	bne.n	8009c60 <__sflush_r+0x30>
 8009ccc:	682b      	ldr	r3, [r5, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0c6      	beq.n	8009c60 <__sflush_r+0x30>
 8009cd2:	2b1d      	cmp	r3, #29
 8009cd4:	d001      	beq.n	8009cda <__sflush_r+0xaa>
 8009cd6:	2b16      	cmp	r3, #22
 8009cd8:	d11d      	bne.n	8009d16 <__sflush_r+0xe6>
 8009cda:	602f      	str	r7, [r5, #0]
 8009cdc:	2000      	movs	r0, #0
 8009cde:	e021      	b.n	8009d24 <__sflush_r+0xf4>
 8009ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ce4:	b21b      	sxth	r3, r3
 8009ce6:	e01a      	b.n	8009d1e <__sflush_r+0xee>
 8009ce8:	690f      	ldr	r7, [r1, #16]
 8009cea:	2f00      	cmp	r7, #0
 8009cec:	d0f6      	beq.n	8009cdc <__sflush_r+0xac>
 8009cee:	0793      	lsls	r3, r2, #30
 8009cf0:	bf18      	it	ne
 8009cf2:	2300      	movne	r3, #0
 8009cf4:	680e      	ldr	r6, [r1, #0]
 8009cf6:	bf08      	it	eq
 8009cf8:	694b      	ldreq	r3, [r1, #20]
 8009cfa:	1bf6      	subs	r6, r6, r7
 8009cfc:	600f      	str	r7, [r1, #0]
 8009cfe:	608b      	str	r3, [r1, #8]
 8009d00:	2e00      	cmp	r6, #0
 8009d02:	ddeb      	ble.n	8009cdc <__sflush_r+0xac>
 8009d04:	4633      	mov	r3, r6
 8009d06:	463a      	mov	r2, r7
 8009d08:	4628      	mov	r0, r5
 8009d0a:	6a21      	ldr	r1, [r4, #32]
 8009d0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009d10:	47e0      	blx	ip
 8009d12:	2800      	cmp	r0, #0
 8009d14:	dc07      	bgt.n	8009d26 <__sflush_r+0xf6>
 8009d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d22:	81a3      	strh	r3, [r4, #12]
 8009d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d26:	4407      	add	r7, r0
 8009d28:	1a36      	subs	r6, r6, r0
 8009d2a:	e7e9      	b.n	8009d00 <__sflush_r+0xd0>
 8009d2c:	20400001 	.word	0x20400001

08009d30 <_fflush_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	690b      	ldr	r3, [r1, #16]
 8009d34:	4605      	mov	r5, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	b913      	cbnz	r3, 8009d40 <_fflush_r+0x10>
 8009d3a:	2500      	movs	r5, #0
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	bd38      	pop	{r3, r4, r5, pc}
 8009d40:	b118      	cbz	r0, 8009d4a <_fflush_r+0x1a>
 8009d42:	6a03      	ldr	r3, [r0, #32]
 8009d44:	b90b      	cbnz	r3, 8009d4a <_fflush_r+0x1a>
 8009d46:	f7fe f945 	bl	8007fd4 <__sinit>
 8009d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0f3      	beq.n	8009d3a <_fflush_r+0xa>
 8009d52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d54:	07d0      	lsls	r0, r2, #31
 8009d56:	d404      	bmi.n	8009d62 <_fflush_r+0x32>
 8009d58:	0599      	lsls	r1, r3, #22
 8009d5a:	d402      	bmi.n	8009d62 <_fflush_r+0x32>
 8009d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d5e:	f7fe fb34 	bl	80083ca <__retarget_lock_acquire_recursive>
 8009d62:	4628      	mov	r0, r5
 8009d64:	4621      	mov	r1, r4
 8009d66:	f7ff ff63 	bl	8009c30 <__sflush_r>
 8009d6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	07da      	lsls	r2, r3, #31
 8009d70:	d4e4      	bmi.n	8009d3c <_fflush_r+0xc>
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	059b      	lsls	r3, r3, #22
 8009d76:	d4e1      	bmi.n	8009d3c <_fflush_r+0xc>
 8009d78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d7a:	f7fe fb27 	bl	80083cc <__retarget_lock_release_recursive>
 8009d7e:	e7dd      	b.n	8009d3c <_fflush_r+0xc>

08009d80 <__swhatbuf_r>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	460c      	mov	r4, r1
 8009d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d88:	4615      	mov	r5, r2
 8009d8a:	2900      	cmp	r1, #0
 8009d8c:	461e      	mov	r6, r3
 8009d8e:	b096      	sub	sp, #88	@ 0x58
 8009d90:	da0c      	bge.n	8009dac <__swhatbuf_r+0x2c>
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	2100      	movs	r1, #0
 8009d96:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d9a:	bf14      	ite	ne
 8009d9c:	2340      	movne	r3, #64	@ 0x40
 8009d9e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009da2:	2000      	movs	r0, #0
 8009da4:	6031      	str	r1, [r6, #0]
 8009da6:	602b      	str	r3, [r5, #0]
 8009da8:	b016      	add	sp, #88	@ 0x58
 8009daa:	bd70      	pop	{r4, r5, r6, pc}
 8009dac:	466a      	mov	r2, sp
 8009dae:	f000 f849 	bl	8009e44 <_fstat_r>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	dbed      	blt.n	8009d92 <__swhatbuf_r+0x12>
 8009db6:	9901      	ldr	r1, [sp, #4]
 8009db8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009dbc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009dc0:	4259      	negs	r1, r3
 8009dc2:	4159      	adcs	r1, r3
 8009dc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dc8:	e7eb      	b.n	8009da2 <__swhatbuf_r+0x22>

08009dca <__smakebuf_r>:
 8009dca:	898b      	ldrh	r3, [r1, #12]
 8009dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dce:	079d      	lsls	r5, r3, #30
 8009dd0:	4606      	mov	r6, r0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	d507      	bpl.n	8009de6 <__smakebuf_r+0x1c>
 8009dd6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009dda:	6023      	str	r3, [r4, #0]
 8009ddc:	6123      	str	r3, [r4, #16]
 8009dde:	2301      	movs	r3, #1
 8009de0:	6163      	str	r3, [r4, #20]
 8009de2:	b003      	add	sp, #12
 8009de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009de6:	466a      	mov	r2, sp
 8009de8:	ab01      	add	r3, sp, #4
 8009dea:	f7ff ffc9 	bl	8009d80 <__swhatbuf_r>
 8009dee:	9f00      	ldr	r7, [sp, #0]
 8009df0:	4605      	mov	r5, r0
 8009df2:	4639      	mov	r1, r7
 8009df4:	4630      	mov	r0, r6
 8009df6:	f7ff f9d5 	bl	80091a4 <_malloc_r>
 8009dfa:	b948      	cbnz	r0, 8009e10 <__smakebuf_r+0x46>
 8009dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e00:	059a      	lsls	r2, r3, #22
 8009e02:	d4ee      	bmi.n	8009de2 <__smakebuf_r+0x18>
 8009e04:	f023 0303 	bic.w	r3, r3, #3
 8009e08:	f043 0302 	orr.w	r3, r3, #2
 8009e0c:	81a3      	strh	r3, [r4, #12]
 8009e0e:	e7e2      	b.n	8009dd6 <__smakebuf_r+0xc>
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e1a:	81a3      	strh	r3, [r4, #12]
 8009e1c:	9b01      	ldr	r3, [sp, #4]
 8009e1e:	6020      	str	r0, [r4, #0]
 8009e20:	b15b      	cbz	r3, 8009e3a <__smakebuf_r+0x70>
 8009e22:	4630      	mov	r0, r6
 8009e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e28:	f000 f81e 	bl	8009e68 <_isatty_r>
 8009e2c:	b128      	cbz	r0, 8009e3a <__smakebuf_r+0x70>
 8009e2e:	89a3      	ldrh	r3, [r4, #12]
 8009e30:	f023 0303 	bic.w	r3, r3, #3
 8009e34:	f043 0301 	orr.w	r3, r3, #1
 8009e38:	81a3      	strh	r3, [r4, #12]
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	431d      	orrs	r5, r3
 8009e3e:	81a5      	strh	r5, [r4, #12]
 8009e40:	e7cf      	b.n	8009de2 <__smakebuf_r+0x18>
	...

08009e44 <_fstat_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	2300      	movs	r3, #0
 8009e48:	4d06      	ldr	r5, [pc, #24]	@ (8009e64 <_fstat_r+0x20>)
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	4611      	mov	r1, r2
 8009e50:	602b      	str	r3, [r5, #0]
 8009e52:	f7f8 fdf9 	bl	8002a48 <_fstat>
 8009e56:	1c43      	adds	r3, r0, #1
 8009e58:	d102      	bne.n	8009e60 <_fstat_r+0x1c>
 8009e5a:	682b      	ldr	r3, [r5, #0]
 8009e5c:	b103      	cbz	r3, 8009e60 <_fstat_r+0x1c>
 8009e5e:	6023      	str	r3, [r4, #0]
 8009e60:	bd38      	pop	{r3, r4, r5, pc}
 8009e62:	bf00      	nop
 8009e64:	20001334 	.word	0x20001334

08009e68 <_isatty_r>:
 8009e68:	b538      	push	{r3, r4, r5, lr}
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	4d05      	ldr	r5, [pc, #20]	@ (8009e84 <_isatty_r+0x1c>)
 8009e6e:	4604      	mov	r4, r0
 8009e70:	4608      	mov	r0, r1
 8009e72:	602b      	str	r3, [r5, #0]
 8009e74:	f7f8 fdf7 	bl	8002a66 <_isatty>
 8009e78:	1c43      	adds	r3, r0, #1
 8009e7a:	d102      	bne.n	8009e82 <_isatty_r+0x1a>
 8009e7c:	682b      	ldr	r3, [r5, #0]
 8009e7e:	b103      	cbz	r3, 8009e82 <_isatty_r+0x1a>
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	bd38      	pop	{r3, r4, r5, pc}
 8009e84:	20001334 	.word	0x20001334

08009e88 <_sbrk_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	4d05      	ldr	r5, [pc, #20]	@ (8009ea4 <_sbrk_r+0x1c>)
 8009e8e:	4604      	mov	r4, r0
 8009e90:	4608      	mov	r0, r1
 8009e92:	602b      	str	r3, [r5, #0]
 8009e94:	f7f8 fdfe 	bl	8002a94 <_sbrk>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_sbrk_r+0x1a>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_sbrk_r+0x1a>
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	20001334 	.word	0x20001334

08009ea8 <__assert_func>:
 8009ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009eaa:	4614      	mov	r4, r2
 8009eac:	461a      	mov	r2, r3
 8009eae:	4b09      	ldr	r3, [pc, #36]	@ (8009ed4 <__assert_func+0x2c>)
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68d8      	ldr	r0, [r3, #12]
 8009eb6:	b14c      	cbz	r4, 8009ecc <__assert_func+0x24>
 8009eb8:	4b07      	ldr	r3, [pc, #28]	@ (8009ed8 <__assert_func+0x30>)
 8009eba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ebe:	9100      	str	r1, [sp, #0]
 8009ec0:	462b      	mov	r3, r5
 8009ec2:	4906      	ldr	r1, [pc, #24]	@ (8009edc <__assert_func+0x34>)
 8009ec4:	f000 f842 	bl	8009f4c <fiprintf>
 8009ec8:	f000 f852 	bl	8009f70 <abort>
 8009ecc:	4b04      	ldr	r3, [pc, #16]	@ (8009ee0 <__assert_func+0x38>)
 8009ece:	461c      	mov	r4, r3
 8009ed0:	e7f3      	b.n	8009eba <__assert_func+0x12>
 8009ed2:	bf00      	nop
 8009ed4:	20000030 	.word	0x20000030
 8009ed8:	0800c39f 	.word	0x0800c39f
 8009edc:	0800c3ac 	.word	0x0800c3ac
 8009ee0:	0800c3da 	.word	0x0800c3da

08009ee4 <_calloc_r>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	fba1 5402 	umull	r5, r4, r1, r2
 8009eea:	b934      	cbnz	r4, 8009efa <_calloc_r+0x16>
 8009eec:	4629      	mov	r1, r5
 8009eee:	f7ff f959 	bl	80091a4 <_malloc_r>
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	b928      	cbnz	r0, 8009f02 <_calloc_r+0x1e>
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	bd70      	pop	{r4, r5, r6, pc}
 8009efa:	220c      	movs	r2, #12
 8009efc:	2600      	movs	r6, #0
 8009efe:	6002      	str	r2, [r0, #0]
 8009f00:	e7f9      	b.n	8009ef6 <_calloc_r+0x12>
 8009f02:	462a      	mov	r2, r5
 8009f04:	4621      	mov	r1, r4
 8009f06:	f7fe f9e3 	bl	80082d0 <memset>
 8009f0a:	e7f4      	b.n	8009ef6 <_calloc_r+0x12>

08009f0c <__ascii_mbtowc>:
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	b901      	cbnz	r1, 8009f12 <__ascii_mbtowc+0x6>
 8009f10:	a901      	add	r1, sp, #4
 8009f12:	b142      	cbz	r2, 8009f26 <__ascii_mbtowc+0x1a>
 8009f14:	b14b      	cbz	r3, 8009f2a <__ascii_mbtowc+0x1e>
 8009f16:	7813      	ldrb	r3, [r2, #0]
 8009f18:	600b      	str	r3, [r1, #0]
 8009f1a:	7812      	ldrb	r2, [r2, #0]
 8009f1c:	1e10      	subs	r0, r2, #0
 8009f1e:	bf18      	it	ne
 8009f20:	2001      	movne	r0, #1
 8009f22:	b002      	add	sp, #8
 8009f24:	4770      	bx	lr
 8009f26:	4610      	mov	r0, r2
 8009f28:	e7fb      	b.n	8009f22 <__ascii_mbtowc+0x16>
 8009f2a:	f06f 0001 	mvn.w	r0, #1
 8009f2e:	e7f8      	b.n	8009f22 <__ascii_mbtowc+0x16>

08009f30 <__ascii_wctomb>:
 8009f30:	4603      	mov	r3, r0
 8009f32:	4608      	mov	r0, r1
 8009f34:	b141      	cbz	r1, 8009f48 <__ascii_wctomb+0x18>
 8009f36:	2aff      	cmp	r2, #255	@ 0xff
 8009f38:	d904      	bls.n	8009f44 <__ascii_wctomb+0x14>
 8009f3a:	228a      	movs	r2, #138	@ 0x8a
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	4770      	bx	lr
 8009f44:	2001      	movs	r0, #1
 8009f46:	700a      	strb	r2, [r1, #0]
 8009f48:	4770      	bx	lr
	...

08009f4c <fiprintf>:
 8009f4c:	b40e      	push	{r1, r2, r3}
 8009f4e:	b503      	push	{r0, r1, lr}
 8009f50:	4601      	mov	r1, r0
 8009f52:	ab03      	add	r3, sp, #12
 8009f54:	4805      	ldr	r0, [pc, #20]	@ (8009f6c <fiprintf+0x20>)
 8009f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f5a:	6800      	ldr	r0, [r0, #0]
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	f7ff fd4f 	bl	8009a00 <_vfiprintf_r>
 8009f62:	b002      	add	sp, #8
 8009f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f68:	b003      	add	sp, #12
 8009f6a:	4770      	bx	lr
 8009f6c:	20000030 	.word	0x20000030

08009f70 <abort>:
 8009f70:	2006      	movs	r0, #6
 8009f72:	b508      	push	{r3, lr}
 8009f74:	f000 f82c 	bl	8009fd0 <raise>
 8009f78:	2001      	movs	r0, #1
 8009f7a:	f7f8 fd16 	bl	80029aa <_exit>

08009f7e <_raise_r>:
 8009f7e:	291f      	cmp	r1, #31
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	4605      	mov	r5, r0
 8009f84:	460c      	mov	r4, r1
 8009f86:	d904      	bls.n	8009f92 <_raise_r+0x14>
 8009f88:	2316      	movs	r3, #22
 8009f8a:	6003      	str	r3, [r0, #0]
 8009f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f90:	bd38      	pop	{r3, r4, r5, pc}
 8009f92:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f94:	b112      	cbz	r2, 8009f9c <_raise_r+0x1e>
 8009f96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f9a:	b94b      	cbnz	r3, 8009fb0 <_raise_r+0x32>
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	f000 f831 	bl	800a004 <_getpid_r>
 8009fa2:	4622      	mov	r2, r4
 8009fa4:	4601      	mov	r1, r0
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fac:	f000 b818 	b.w	8009fe0 <_kill_r>
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d00a      	beq.n	8009fca <_raise_r+0x4c>
 8009fb4:	1c59      	adds	r1, r3, #1
 8009fb6:	d103      	bne.n	8009fc0 <_raise_r+0x42>
 8009fb8:	2316      	movs	r3, #22
 8009fba:	6003      	str	r3, [r0, #0]
 8009fbc:	2001      	movs	r0, #1
 8009fbe:	e7e7      	b.n	8009f90 <_raise_r+0x12>
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fc8:	4798      	blx	r3
 8009fca:	2000      	movs	r0, #0
 8009fcc:	e7e0      	b.n	8009f90 <_raise_r+0x12>
	...

08009fd0 <raise>:
 8009fd0:	4b02      	ldr	r3, [pc, #8]	@ (8009fdc <raise+0xc>)
 8009fd2:	4601      	mov	r1, r0
 8009fd4:	6818      	ldr	r0, [r3, #0]
 8009fd6:	f7ff bfd2 	b.w	8009f7e <_raise_r>
 8009fda:	bf00      	nop
 8009fdc:	20000030 	.word	0x20000030

08009fe0 <_kill_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	4d06      	ldr	r5, [pc, #24]	@ (800a000 <_kill_r+0x20>)
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	4608      	mov	r0, r1
 8009fea:	4611      	mov	r1, r2
 8009fec:	602b      	str	r3, [r5, #0]
 8009fee:	f7f8 fccc 	bl	800298a <_kill>
 8009ff2:	1c43      	adds	r3, r0, #1
 8009ff4:	d102      	bne.n	8009ffc <_kill_r+0x1c>
 8009ff6:	682b      	ldr	r3, [r5, #0]
 8009ff8:	b103      	cbz	r3, 8009ffc <_kill_r+0x1c>
 8009ffa:	6023      	str	r3, [r4, #0]
 8009ffc:	bd38      	pop	{r3, r4, r5, pc}
 8009ffe:	bf00      	nop
 800a000:	20001334 	.word	0x20001334

0800a004 <_getpid_r>:
 800a004:	f7f8 bcba 	b.w	800297c <_getpid>

0800a008 <expf>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4605      	mov	r5, r0
 800a00c:	f000 f85a 	bl	800a0c4 <__ieee754_expf>
 800a010:	4604      	mov	r4, r0
 800a012:	4628      	mov	r0, r5
 800a014:	f000 f81e 	bl	800a054 <finitef>
 800a018:	b150      	cbz	r0, 800a030 <expf+0x28>
 800a01a:	4628      	mov	r0, r5
 800a01c:	490b      	ldr	r1, [pc, #44]	@ (800a04c <expf+0x44>)
 800a01e:	f7f7 f865 	bl	80010ec <__aeabi_fcmpgt>
 800a022:	b138      	cbz	r0, 800a034 <expf+0x2c>
 800a024:	f7fe f9a6 	bl	8008374 <__errno>
 800a028:	2322      	movs	r3, #34	@ 0x22
 800a02a:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 800a02e:	6003      	str	r3, [r0, #0]
 800a030:	4620      	mov	r0, r4
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	4628      	mov	r0, r5
 800a036:	4906      	ldr	r1, [pc, #24]	@ (800a050 <expf+0x48>)
 800a038:	f7f7 f83a 	bl	80010b0 <__aeabi_fcmplt>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d0f7      	beq.n	800a030 <expf+0x28>
 800a040:	f7fe f998 	bl	8008374 <__errno>
 800a044:	2322      	movs	r3, #34	@ 0x22
 800a046:	2400      	movs	r4, #0
 800a048:	6003      	str	r3, [r0, #0]
 800a04a:	e7f1      	b.n	800a030 <expf+0x28>
 800a04c:	42b17217 	.word	0x42b17217
 800a050:	c2cff1b5 	.word	0xc2cff1b5

0800a054 <finitef>:
 800a054:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a058:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800a05c:	bfac      	ite	ge
 800a05e:	2000      	movge	r0, #0
 800a060:	2001      	movlt	r0, #1
 800a062:	4770      	bx	lr

0800a064 <fminf>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	4604      	mov	r4, r0
 800a068:	460d      	mov	r5, r1
 800a06a:	f000 f811 	bl	800a090 <__fpclassifyf>
 800a06e:	b910      	cbnz	r0, 800a076 <fminf+0x12>
 800a070:	462c      	mov	r4, r5
 800a072:	4620      	mov	r0, r4
 800a074:	bd38      	pop	{r3, r4, r5, pc}
 800a076:	4628      	mov	r0, r5
 800a078:	f000 f80a 	bl	800a090 <__fpclassifyf>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	d0f8      	beq.n	800a072 <fminf+0xe>
 800a080:	4629      	mov	r1, r5
 800a082:	4620      	mov	r0, r4
 800a084:	f7f7 f814 	bl	80010b0 <__aeabi_fcmplt>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d0f1      	beq.n	800a070 <fminf+0xc>
 800a08c:	e7f1      	b.n	800a072 <fminf+0xe>
	...

0800a090 <__fpclassifyf>:
 800a090:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800a094:	d00d      	beq.n	800a0b2 <__fpclassifyf+0x22>
 800a096:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a09a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a09e:	d30a      	bcc.n	800a0b6 <__fpclassifyf+0x26>
 800a0a0:	4b07      	ldr	r3, [pc, #28]	@ (800a0c0 <__fpclassifyf+0x30>)
 800a0a2:	1e42      	subs	r2, r0, #1
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d908      	bls.n	800a0ba <__fpclassifyf+0x2a>
 800a0a8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a0ac:	4258      	negs	r0, r3
 800a0ae:	4158      	adcs	r0, r3
 800a0b0:	4770      	bx	lr
 800a0b2:	2002      	movs	r0, #2
 800a0b4:	4770      	bx	lr
 800a0b6:	2004      	movs	r0, #4
 800a0b8:	4770      	bx	lr
 800a0ba:	2003      	movs	r0, #3
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	007ffffe 	.word	0x007ffffe

0800a0c4 <__ieee754_expf>:
 800a0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a0cc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	d904      	bls.n	800a0de <__ieee754_expf+0x1a>
 800a0d4:	4601      	mov	r1, r0
 800a0d6:	f7f6 fd45 	bl	8000b64 <__addsf3>
 800a0da:	4604      	mov	r4, r0
 800a0dc:	e005      	b.n	800a0ea <__ieee754_expf+0x26>
 800a0de:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 800a0e2:	d105      	bne.n	800a0f0 <__ieee754_expf+0x2c>
 800a0e4:	2e00      	cmp	r6, #0
 800a0e6:	f040 80c3 	bne.w	800a270 <__ieee754_expf+0x1ac>
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0f0:	4960      	ldr	r1, [pc, #384]	@ (800a274 <__ieee754_expf+0x1b0>)
 800a0f2:	4288      	cmp	r0, r1
 800a0f4:	dd04      	ble.n	800a100 <__ieee754_expf+0x3c>
 800a0f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	f000 b8f3 	b.w	800a2e6 <__math_oflowf>
 800a100:	2800      	cmp	r0, #0
 800a102:	da07      	bge.n	800a114 <__ieee754_expf+0x50>
 800a104:	4a5c      	ldr	r2, [pc, #368]	@ (800a278 <__ieee754_expf+0x1b4>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d904      	bls.n	800a114 <__ieee754_expf+0x50>
 800a10a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a10e:	2000      	movs	r0, #0
 800a110:	f000 b8e5 	b.w	800a2de <__math_uflowf>
 800a114:	4a59      	ldr	r2, [pc, #356]	@ (800a27c <__ieee754_expf+0x1b8>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d971      	bls.n	800a1fe <__ieee754_expf+0x13a>
 800a11a:	4a59      	ldr	r2, [pc, #356]	@ (800a280 <__ieee754_expf+0x1bc>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d851      	bhi.n	800a1c4 <__ieee754_expf+0x100>
 800a120:	4b58      	ldr	r3, [pc, #352]	@ (800a284 <__ieee754_expf+0x1c0>)
 800a122:	4620      	mov	r0, r4
 800a124:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800a128:	f7f6 fd1a 	bl	8000b60 <__aeabi_fsub>
 800a12c:	4605      	mov	r5, r0
 800a12e:	4b56      	ldr	r3, [pc, #344]	@ (800a288 <__ieee754_expf+0x1c4>)
 800a130:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 800a134:	f086 0301 	eor.w	r3, r6, #1
 800a138:	eba3 0806 	sub.w	r8, r3, r6
 800a13c:	4639      	mov	r1, r7
 800a13e:	4628      	mov	r0, r5
 800a140:	f7f6 fd0e 	bl	8000b60 <__aeabi_fsub>
 800a144:	4604      	mov	r4, r0
 800a146:	4621      	mov	r1, r4
 800a148:	4620      	mov	r0, r4
 800a14a:	f7f6 fe13 	bl	8000d74 <__aeabi_fmul>
 800a14e:	4606      	mov	r6, r0
 800a150:	494e      	ldr	r1, [pc, #312]	@ (800a28c <__ieee754_expf+0x1c8>)
 800a152:	f7f6 fe0f 	bl	8000d74 <__aeabi_fmul>
 800a156:	494e      	ldr	r1, [pc, #312]	@ (800a290 <__ieee754_expf+0x1cc>)
 800a158:	f7f6 fd02 	bl	8000b60 <__aeabi_fsub>
 800a15c:	4631      	mov	r1, r6
 800a15e:	f7f6 fe09 	bl	8000d74 <__aeabi_fmul>
 800a162:	494c      	ldr	r1, [pc, #304]	@ (800a294 <__ieee754_expf+0x1d0>)
 800a164:	f7f6 fcfe 	bl	8000b64 <__addsf3>
 800a168:	4631      	mov	r1, r6
 800a16a:	f7f6 fe03 	bl	8000d74 <__aeabi_fmul>
 800a16e:	494a      	ldr	r1, [pc, #296]	@ (800a298 <__ieee754_expf+0x1d4>)
 800a170:	f7f6 fcf6 	bl	8000b60 <__aeabi_fsub>
 800a174:	4631      	mov	r1, r6
 800a176:	f7f6 fdfd 	bl	8000d74 <__aeabi_fmul>
 800a17a:	4948      	ldr	r1, [pc, #288]	@ (800a29c <__ieee754_expf+0x1d8>)
 800a17c:	f7f6 fcf2 	bl	8000b64 <__addsf3>
 800a180:	4631      	mov	r1, r6
 800a182:	f7f6 fdf7 	bl	8000d74 <__aeabi_fmul>
 800a186:	4601      	mov	r1, r0
 800a188:	4620      	mov	r0, r4
 800a18a:	f7f6 fce9 	bl	8000b60 <__aeabi_fsub>
 800a18e:	4601      	mov	r1, r0
 800a190:	4606      	mov	r6, r0
 800a192:	4620      	mov	r0, r4
 800a194:	f7f6 fdee 	bl	8000d74 <__aeabi_fmul>
 800a198:	4681      	mov	r9, r0
 800a19a:	f1b8 0f00 	cmp.w	r8, #0
 800a19e:	d143      	bne.n	800a228 <__ieee754_expf+0x164>
 800a1a0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7f6 fcdb 	bl	8000b60 <__aeabi_fsub>
 800a1aa:	4601      	mov	r1, r0
 800a1ac:	4648      	mov	r0, r9
 800a1ae:	f7f6 fe95 	bl	8000edc <__aeabi_fdiv>
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	f7f6 fcd4 	bl	8000b60 <__aeabi_fsub>
 800a1b8:	4601      	mov	r1, r0
 800a1ba:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a1be:	f7f6 fccf 	bl	8000b60 <__aeabi_fsub>
 800a1c2:	e78a      	b.n	800a0da <__ieee754_expf+0x16>
 800a1c4:	4936      	ldr	r1, [pc, #216]	@ (800a2a0 <__ieee754_expf+0x1dc>)
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f7f6 fdd4 	bl	8000d74 <__aeabi_fmul>
 800a1cc:	4b35      	ldr	r3, [pc, #212]	@ (800a2a4 <__ieee754_expf+0x1e0>)
 800a1ce:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800a1d2:	f7f6 fcc7 	bl	8000b64 <__addsf3>
 800a1d6:	f7f6 ff93 	bl	8001100 <__aeabi_f2iz>
 800a1da:	4680      	mov	r8, r0
 800a1dc:	f7f6 fd76 	bl	8000ccc <__aeabi_i2f>
 800a1e0:	4931      	ldr	r1, [pc, #196]	@ (800a2a8 <__ieee754_expf+0x1e4>)
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	f7f6 fdc6 	bl	8000d74 <__aeabi_fmul>
 800a1e8:	4601      	mov	r1, r0
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f7f6 fcb8 	bl	8000b60 <__aeabi_fsub>
 800a1f0:	492e      	ldr	r1, [pc, #184]	@ (800a2ac <__ieee754_expf+0x1e8>)
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f7f6 fdbd 	bl	8000d74 <__aeabi_fmul>
 800a1fa:	4607      	mov	r7, r0
 800a1fc:	e79e      	b.n	800a13c <__ieee754_expf+0x78>
 800a1fe:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800a202:	d20c      	bcs.n	800a21e <__ieee754_expf+0x15a>
 800a204:	492a      	ldr	r1, [pc, #168]	@ (800a2b0 <__ieee754_expf+0x1ec>)
 800a206:	4620      	mov	r0, r4
 800a208:	f7f6 fcac 	bl	8000b64 <__addsf3>
 800a20c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a210:	f7f6 ff6c 	bl	80010ec <__aeabi_fcmpgt>
 800a214:	b130      	cbz	r0, 800a224 <__ieee754_expf+0x160>
 800a216:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a21a:	4620      	mov	r0, r4
 800a21c:	e75b      	b.n	800a0d6 <__ieee754_expf+0x12>
 800a21e:	f04f 0800 	mov.w	r8, #0
 800a222:	e790      	b.n	800a146 <__ieee754_expf+0x82>
 800a224:	4680      	mov	r8, r0
 800a226:	e78e      	b.n	800a146 <__ieee754_expf+0x82>
 800a228:	4631      	mov	r1, r6
 800a22a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800a22e:	f7f6 fc97 	bl	8000b60 <__aeabi_fsub>
 800a232:	4601      	mov	r1, r0
 800a234:	4648      	mov	r0, r9
 800a236:	f7f6 fe51 	bl	8000edc <__aeabi_fdiv>
 800a23a:	4601      	mov	r1, r0
 800a23c:	4638      	mov	r0, r7
 800a23e:	f7f6 fc8f 	bl	8000b60 <__aeabi_fsub>
 800a242:	4629      	mov	r1, r5
 800a244:	f7f6 fc8c 	bl	8000b60 <__aeabi_fsub>
 800a248:	4601      	mov	r1, r0
 800a24a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a24e:	f7f6 fc87 	bl	8000b60 <__aeabi_fsub>
 800a252:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 800a256:	db02      	blt.n	800a25e <__ieee754_expf+0x19a>
 800a258:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 800a25c:	e745      	b.n	800a0ea <__ieee754_expf+0x26>
 800a25e:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 800a262:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 800a266:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 800a26a:	f7f6 fd83 	bl	8000d74 <__aeabi_fmul>
 800a26e:	e734      	b.n	800a0da <__ieee754_expf+0x16>
 800a270:	2400      	movs	r4, #0
 800a272:	e73a      	b.n	800a0ea <__ieee754_expf+0x26>
 800a274:	42b17217 	.word	0x42b17217
 800a278:	42cff1b5 	.word	0x42cff1b5
 800a27c:	3eb17218 	.word	0x3eb17218
 800a280:	3f851591 	.word	0x3f851591
 800a284:	0800c5e4 	.word	0x0800c5e4
 800a288:	0800c5dc 	.word	0x0800c5dc
 800a28c:	3331bb4c 	.word	0x3331bb4c
 800a290:	35ddea0e 	.word	0x35ddea0e
 800a294:	388ab355 	.word	0x388ab355
 800a298:	3b360b61 	.word	0x3b360b61
 800a29c:	3e2aaaab 	.word	0x3e2aaaab
 800a2a0:	3fb8aa3b 	.word	0x3fb8aa3b
 800a2a4:	0800c5ec 	.word	0x0800c5ec
 800a2a8:	3f317180 	.word	0x3f317180
 800a2ac:	3717f7d1 	.word	0x3717f7d1
 800a2b0:	7149f2ca 	.word	0x7149f2ca

0800a2b4 <with_errnof>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	460d      	mov	r5, r1
 800a2ba:	f7fe f85b 	bl	8008374 <__errno>
 800a2be:	6005      	str	r5, [r0, #0]
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}

0800a2c4 <xflowf>:
 800a2c4:	b508      	push	{r3, lr}
 800a2c6:	b140      	cbz	r0, 800a2da <xflowf+0x16>
 800a2c8:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800a2cc:	f7f6 fd52 	bl	8000d74 <__aeabi_fmul>
 800a2d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a2d4:	2122      	movs	r1, #34	@ 0x22
 800a2d6:	f7ff bfed 	b.w	800a2b4 <with_errnof>
 800a2da:	4608      	mov	r0, r1
 800a2dc:	e7f6      	b.n	800a2cc <xflowf+0x8>

0800a2de <__math_uflowf>:
 800a2de:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800a2e2:	f7ff bfef 	b.w	800a2c4 <xflowf>

0800a2e6 <__math_oflowf>:
 800a2e6:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800a2ea:	f7ff bfeb 	b.w	800a2c4 <xflowf>
	...

0800a2f0 <_init>:
 800a2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f2:	bf00      	nop
 800a2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2f6:	bc08      	pop	{r3}
 800a2f8:	469e      	mov	lr, r3
 800a2fa:	4770      	bx	lr

0800a2fc <_fini>:
 800a2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fe:	bf00      	nop
 800a300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a302:	bc08      	pop	{r3}
 800a304:	469e      	mov	lr, r3
 800a306:	4770      	bx	lr
