
SafeGuard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000879c  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d54  080088e0  080088e0  000098e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d634  0800d634  0000f1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d634  0800d634  0000e634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d63c  0800d63c  0000f1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d63c  0800d63c  0000e63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d640  0800d640  0000e640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800d644  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed0  200001f0  0800d834  0000f1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c0  0800d834  000100c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163ff  00000000  00000000  0000f219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b65  00000000  00000000  00025618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00027180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff4  00000000  00000000  00028608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001764e  00000000  00000000  000295fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001171f  00000000  00000000  00040c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092224  00000000  00000000  00052369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  000e458d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d40  00000000  00000000  000e4614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000eb354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	080088c4 	.word	0x080088c4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	080088c4 	.word	0x080088c4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmpun>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001108:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800110c:	d102      	bne.n	8001114 <__aeabi_fcmpun+0x14>
 800110e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001112:	d108      	bne.n	8001126 <__aeabi_fcmpun+0x26>
 8001114:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001118:	d102      	bne.n	8001120 <__aeabi_fcmpun+0x20>
 800111a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111e:	d102      	bne.n	8001126 <__aeabi_fcmpun+0x26>
 8001120:	f04f 0000 	mov.w	r0, #0
 8001124:	4770      	bx	lr
 8001126:	f04f 0001 	mov.w	r0, #1
 800112a:	4770      	bx	lr

0800112c <__aeabi_f2iz>:
 800112c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001130:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001134:	d30f      	bcc.n	8001156 <__aeabi_f2iz+0x2a>
 8001136:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800113a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800113e:	d90d      	bls.n	800115c <__aeabi_f2iz+0x30>
 8001140:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001144:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001148:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	bf18      	it	ne
 8001152:	4240      	negne	r0, r0
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr
 800115c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001160:	d101      	bne.n	8001166 <__aeabi_f2iz+0x3a>
 8001162:	0242      	lsls	r2, r0, #9
 8001164:	d105      	bne.n	8001172 <__aeabi_f2iz+0x46>
 8001166:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800116a:	bf08      	it	eq
 800116c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001170:	4770      	bx	lr
 8001172:	f04f 0000 	mov.w	r0, #0
 8001176:	4770      	bx	lr

08001178 <__aeabi_f2uiz>:
 8001178:	0042      	lsls	r2, r0, #1
 800117a:	d20e      	bcs.n	800119a <__aeabi_f2uiz+0x22>
 800117c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001180:	d30b      	bcc.n	800119a <__aeabi_f2uiz+0x22>
 8001182:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001186:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800118a:	d409      	bmi.n	80011a0 <__aeabi_f2uiz+0x28>
 800118c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001190:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001194:	fa23 f002 	lsr.w	r0, r3, r2
 8001198:	4770      	bx	lr
 800119a:	f04f 0000 	mov.w	r0, #0
 800119e:	4770      	bx	lr
 80011a0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011a4:	d101      	bne.n	80011aa <__aeabi_f2uiz+0x32>
 80011a6:	0242      	lsls	r2, r0, #9
 80011a8:	d102      	bne.n	80011b0 <__aeabi_f2uiz+0x38>
 80011aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011ae:	4770      	bx	lr
 80011b0:	f04f 0000 	mov.w	r0, #0
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <__aeabi_uldivmod>:
 80011b8:	b953      	cbnz	r3, 80011d0 <__aeabi_uldivmod+0x18>
 80011ba:	b94a      	cbnz	r2, 80011d0 <__aeabi_uldivmod+0x18>
 80011bc:	2900      	cmp	r1, #0
 80011be:	bf08      	it	eq
 80011c0:	2800      	cmpeq	r0, #0
 80011c2:	bf1c      	itt	ne
 80011c4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80011c8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80011cc:	f000 b98c 	b.w	80014e8 <__aeabi_idiv0>
 80011d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011d8:	f000 f806 	bl	80011e8 <__udivmoddi4>
 80011dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011e4:	b004      	add	sp, #16
 80011e6:	4770      	bx	lr

080011e8 <__udivmoddi4>:
 80011e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011ec:	9d08      	ldr	r5, [sp, #32]
 80011ee:	468e      	mov	lr, r1
 80011f0:	4604      	mov	r4, r0
 80011f2:	4688      	mov	r8, r1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d14a      	bne.n	800128e <__udivmoddi4+0xa6>
 80011f8:	428a      	cmp	r2, r1
 80011fa:	4617      	mov	r7, r2
 80011fc:	d962      	bls.n	80012c4 <__udivmoddi4+0xdc>
 80011fe:	fab2 f682 	clz	r6, r2
 8001202:	b14e      	cbz	r6, 8001218 <__udivmoddi4+0x30>
 8001204:	f1c6 0320 	rsb	r3, r6, #32
 8001208:	fa01 f806 	lsl.w	r8, r1, r6
 800120c:	fa20 f303 	lsr.w	r3, r0, r3
 8001210:	40b7      	lsls	r7, r6
 8001212:	ea43 0808 	orr.w	r8, r3, r8
 8001216:	40b4      	lsls	r4, r6
 8001218:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800121c:	fbb8 f1fe 	udiv	r1, r8, lr
 8001220:	fa1f fc87 	uxth.w	ip, r7
 8001224:	fb0e 8811 	mls	r8, lr, r1, r8
 8001228:	fb01 f20c 	mul.w	r2, r1, ip
 800122c:	0c23      	lsrs	r3, r4, #16
 800122e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001232:	429a      	cmp	r2, r3
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x62>
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800123c:	f080 80eb 	bcs.w	8001416 <__udivmoddi4+0x22e>
 8001240:	429a      	cmp	r2, r3
 8001242:	f240 80e8 	bls.w	8001416 <__udivmoddi4+0x22e>
 8001246:	3902      	subs	r1, #2
 8001248:	443b      	add	r3, r7
 800124a:	1a9a      	subs	r2, r3, r2
 800124c:	fbb2 f0fe 	udiv	r0, r2, lr
 8001250:	fb0e 2210 	mls	r2, lr, r0, r2
 8001254:	fb00 fc0c 	mul.w	ip, r0, ip
 8001258:	b2a3      	uxth	r3, r4
 800125a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800125e:	459c      	cmp	ip, r3
 8001260:	d909      	bls.n	8001276 <__udivmoddi4+0x8e>
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8001268:	f080 80d7 	bcs.w	800141a <__udivmoddi4+0x232>
 800126c:	459c      	cmp	ip, r3
 800126e:	f240 80d4 	bls.w	800141a <__udivmoddi4+0x232>
 8001272:	443b      	add	r3, r7
 8001274:	3802      	subs	r0, #2
 8001276:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800127a:	2100      	movs	r1, #0
 800127c:	eba3 030c 	sub.w	r3, r3, ip
 8001280:	b11d      	cbz	r5, 800128a <__udivmoddi4+0xa2>
 8001282:	2200      	movs	r2, #0
 8001284:	40f3      	lsrs	r3, r6
 8001286:	e9c5 3200 	strd	r3, r2, [r5]
 800128a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800128e:	428b      	cmp	r3, r1
 8001290:	d905      	bls.n	800129e <__udivmoddi4+0xb6>
 8001292:	b10d      	cbz	r5, 8001298 <__udivmoddi4+0xb0>
 8001294:	e9c5 0100 	strd	r0, r1, [r5]
 8001298:	2100      	movs	r1, #0
 800129a:	4608      	mov	r0, r1
 800129c:	e7f5      	b.n	800128a <__udivmoddi4+0xa2>
 800129e:	fab3 f183 	clz	r1, r3
 80012a2:	2900      	cmp	r1, #0
 80012a4:	d146      	bne.n	8001334 <__udivmoddi4+0x14c>
 80012a6:	4573      	cmp	r3, lr
 80012a8:	d302      	bcc.n	80012b0 <__udivmoddi4+0xc8>
 80012aa:	4282      	cmp	r2, r0
 80012ac:	f200 8108 	bhi.w	80014c0 <__udivmoddi4+0x2d8>
 80012b0:	1a84      	subs	r4, r0, r2
 80012b2:	eb6e 0203 	sbc.w	r2, lr, r3
 80012b6:	2001      	movs	r0, #1
 80012b8:	4690      	mov	r8, r2
 80012ba:	2d00      	cmp	r5, #0
 80012bc:	d0e5      	beq.n	800128a <__udivmoddi4+0xa2>
 80012be:	e9c5 4800 	strd	r4, r8, [r5]
 80012c2:	e7e2      	b.n	800128a <__udivmoddi4+0xa2>
 80012c4:	2a00      	cmp	r2, #0
 80012c6:	f000 8091 	beq.w	80013ec <__udivmoddi4+0x204>
 80012ca:	fab2 f682 	clz	r6, r2
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	f040 80a5 	bne.w	800141e <__udivmoddi4+0x236>
 80012d4:	1a8a      	subs	r2, r1, r2
 80012d6:	2101      	movs	r1, #1
 80012d8:	0c03      	lsrs	r3, r0, #16
 80012da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012de:	b280      	uxth	r0, r0
 80012e0:	b2bc      	uxth	r4, r7
 80012e2:	fbb2 fcfe 	udiv	ip, r2, lr
 80012e6:	fb0e 221c 	mls	r2, lr, ip, r2
 80012ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012ee:	fb04 f20c 	mul.w	r2, r4, ip
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d907      	bls.n	8001306 <__udivmoddi4+0x11e>
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80012fc:	d202      	bcs.n	8001304 <__udivmoddi4+0x11c>
 80012fe:	429a      	cmp	r2, r3
 8001300:	f200 80e3 	bhi.w	80014ca <__udivmoddi4+0x2e2>
 8001304:	46c4      	mov	ip, r8
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	fbb3 f2fe 	udiv	r2, r3, lr
 800130c:	fb0e 3312 	mls	r3, lr, r2, r3
 8001310:	fb02 f404 	mul.w	r4, r2, r4
 8001314:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001318:	429c      	cmp	r4, r3
 800131a:	d907      	bls.n	800132c <__udivmoddi4+0x144>
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8001322:	d202      	bcs.n	800132a <__udivmoddi4+0x142>
 8001324:	429c      	cmp	r4, r3
 8001326:	f200 80cd 	bhi.w	80014c4 <__udivmoddi4+0x2dc>
 800132a:	4602      	mov	r2, r0
 800132c:	1b1b      	subs	r3, r3, r4
 800132e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001332:	e7a5      	b.n	8001280 <__udivmoddi4+0x98>
 8001334:	f1c1 0620 	rsb	r6, r1, #32
 8001338:	408b      	lsls	r3, r1
 800133a:	fa22 f706 	lsr.w	r7, r2, r6
 800133e:	431f      	orrs	r7, r3
 8001340:	fa2e fa06 	lsr.w	sl, lr, r6
 8001344:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001348:	fbba f8f9 	udiv	r8, sl, r9
 800134c:	fa0e fe01 	lsl.w	lr, lr, r1
 8001350:	fa20 f306 	lsr.w	r3, r0, r6
 8001354:	fb09 aa18 	mls	sl, r9, r8, sl
 8001358:	fa1f fc87 	uxth.w	ip, r7
 800135c:	ea43 030e 	orr.w	r3, r3, lr
 8001360:	fa00 fe01 	lsl.w	lr, r0, r1
 8001364:	fb08 f00c 	mul.w	r0, r8, ip
 8001368:	0c1c      	lsrs	r4, r3, #16
 800136a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800136e:	42a0      	cmp	r0, r4
 8001370:	fa02 f201 	lsl.w	r2, r2, r1
 8001374:	d90a      	bls.n	800138c <__udivmoddi4+0x1a4>
 8001376:	193c      	adds	r4, r7, r4
 8001378:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 800137c:	f080 809e 	bcs.w	80014bc <__udivmoddi4+0x2d4>
 8001380:	42a0      	cmp	r0, r4
 8001382:	f240 809b 	bls.w	80014bc <__udivmoddi4+0x2d4>
 8001386:	f1a8 0802 	sub.w	r8, r8, #2
 800138a:	443c      	add	r4, r7
 800138c:	1a24      	subs	r4, r4, r0
 800138e:	b298      	uxth	r0, r3
 8001390:	fbb4 f3f9 	udiv	r3, r4, r9
 8001394:	fb09 4413 	mls	r4, r9, r3, r4
 8001398:	fb03 fc0c 	mul.w	ip, r3, ip
 800139c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80013a0:	45a4      	cmp	ip, r4
 80013a2:	d909      	bls.n	80013b8 <__udivmoddi4+0x1d0>
 80013a4:	193c      	adds	r4, r7, r4
 80013a6:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80013aa:	f080 8085 	bcs.w	80014b8 <__udivmoddi4+0x2d0>
 80013ae:	45a4      	cmp	ip, r4
 80013b0:	f240 8082 	bls.w	80014b8 <__udivmoddi4+0x2d0>
 80013b4:	3b02      	subs	r3, #2
 80013b6:	443c      	add	r4, r7
 80013b8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013bc:	eba4 040c 	sub.w	r4, r4, ip
 80013c0:	fba0 8c02 	umull	r8, ip, r0, r2
 80013c4:	4564      	cmp	r4, ip
 80013c6:	4643      	mov	r3, r8
 80013c8:	46e1      	mov	r9, ip
 80013ca:	d364      	bcc.n	8001496 <__udivmoddi4+0x2ae>
 80013cc:	d061      	beq.n	8001492 <__udivmoddi4+0x2aa>
 80013ce:	b15d      	cbz	r5, 80013e8 <__udivmoddi4+0x200>
 80013d0:	ebbe 0203 	subs.w	r2, lr, r3
 80013d4:	eb64 0409 	sbc.w	r4, r4, r9
 80013d8:	fa04 f606 	lsl.w	r6, r4, r6
 80013dc:	fa22 f301 	lsr.w	r3, r2, r1
 80013e0:	431e      	orrs	r6, r3
 80013e2:	40cc      	lsrs	r4, r1
 80013e4:	e9c5 6400 	strd	r6, r4, [r5]
 80013e8:	2100      	movs	r1, #0
 80013ea:	e74e      	b.n	800128a <__udivmoddi4+0xa2>
 80013ec:	fbb1 fcf2 	udiv	ip, r1, r2
 80013f0:	0c01      	lsrs	r1, r0, #16
 80013f2:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80013f6:	b280      	uxth	r0, r0
 80013f8:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80013fc:	463b      	mov	r3, r7
 80013fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8001402:	4638      	mov	r0, r7
 8001404:	463c      	mov	r4, r7
 8001406:	46b8      	mov	r8, r7
 8001408:	46be      	mov	lr, r7
 800140a:	2620      	movs	r6, #32
 800140c:	eba2 0208 	sub.w	r2, r2, r8
 8001410:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001414:	e765      	b.n	80012e2 <__udivmoddi4+0xfa>
 8001416:	4601      	mov	r1, r0
 8001418:	e717      	b.n	800124a <__udivmoddi4+0x62>
 800141a:	4610      	mov	r0, r2
 800141c:	e72b      	b.n	8001276 <__udivmoddi4+0x8e>
 800141e:	f1c6 0120 	rsb	r1, r6, #32
 8001422:	fa2e fc01 	lsr.w	ip, lr, r1
 8001426:	40b7      	lsls	r7, r6
 8001428:	fa0e fe06 	lsl.w	lr, lr, r6
 800142c:	fa20 f101 	lsr.w	r1, r0, r1
 8001430:	ea41 010e 	orr.w	r1, r1, lr
 8001434:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001438:	fbbc f8fe 	udiv	r8, ip, lr
 800143c:	b2bc      	uxth	r4, r7
 800143e:	fb0e cc18 	mls	ip, lr, r8, ip
 8001442:	fb08 f904 	mul.w	r9, r8, r4
 8001446:	0c0a      	lsrs	r2, r1, #16
 8001448:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800144c:	40b0      	lsls	r0, r6
 800144e:	4591      	cmp	r9, r2
 8001450:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001454:	b280      	uxth	r0, r0
 8001456:	d93e      	bls.n	80014d6 <__udivmoddi4+0x2ee>
 8001458:	18ba      	adds	r2, r7, r2
 800145a:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800145e:	d201      	bcs.n	8001464 <__udivmoddi4+0x27c>
 8001460:	4591      	cmp	r9, r2
 8001462:	d81f      	bhi.n	80014a4 <__udivmoddi4+0x2bc>
 8001464:	eba2 0209 	sub.w	r2, r2, r9
 8001468:	fbb2 f9fe 	udiv	r9, r2, lr
 800146c:	fb09 f804 	mul.w	r8, r9, r4
 8001470:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001474:	b28a      	uxth	r2, r1
 8001476:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800147a:	4542      	cmp	r2, r8
 800147c:	d229      	bcs.n	80014d2 <__udivmoddi4+0x2ea>
 800147e:	18ba      	adds	r2, r7, r2
 8001480:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8001484:	d2c2      	bcs.n	800140c <__udivmoddi4+0x224>
 8001486:	4542      	cmp	r2, r8
 8001488:	d2c0      	bcs.n	800140c <__udivmoddi4+0x224>
 800148a:	f1a9 0102 	sub.w	r1, r9, #2
 800148e:	443a      	add	r2, r7
 8001490:	e7bc      	b.n	800140c <__udivmoddi4+0x224>
 8001492:	45c6      	cmp	lr, r8
 8001494:	d29b      	bcs.n	80013ce <__udivmoddi4+0x1e6>
 8001496:	ebb8 0302 	subs.w	r3, r8, r2
 800149a:	eb6c 0c07 	sbc.w	ip, ip, r7
 800149e:	3801      	subs	r0, #1
 80014a0:	46e1      	mov	r9, ip
 80014a2:	e794      	b.n	80013ce <__udivmoddi4+0x1e6>
 80014a4:	eba7 0909 	sub.w	r9, r7, r9
 80014a8:	444a      	add	r2, r9
 80014aa:	fbb2 f9fe 	udiv	r9, r2, lr
 80014ae:	f1a8 0c02 	sub.w	ip, r8, #2
 80014b2:	fb09 f804 	mul.w	r8, r9, r4
 80014b6:	e7db      	b.n	8001470 <__udivmoddi4+0x288>
 80014b8:	4603      	mov	r3, r0
 80014ba:	e77d      	b.n	80013b8 <__udivmoddi4+0x1d0>
 80014bc:	46d0      	mov	r8, sl
 80014be:	e765      	b.n	800138c <__udivmoddi4+0x1a4>
 80014c0:	4608      	mov	r0, r1
 80014c2:	e6fa      	b.n	80012ba <__udivmoddi4+0xd2>
 80014c4:	443b      	add	r3, r7
 80014c6:	3a02      	subs	r2, #2
 80014c8:	e730      	b.n	800132c <__udivmoddi4+0x144>
 80014ca:	f1ac 0c02 	sub.w	ip, ip, #2
 80014ce:	443b      	add	r3, r7
 80014d0:	e719      	b.n	8001306 <__udivmoddi4+0x11e>
 80014d2:	4649      	mov	r1, r9
 80014d4:	e79a      	b.n	800140c <__udivmoddi4+0x224>
 80014d6:	eba2 0209 	sub.w	r2, r2, r9
 80014da:	fbb2 f9fe 	udiv	r9, r2, lr
 80014de:	46c4      	mov	ip, r8
 80014e0:	fb09 f804 	mul.w	r8, r9, r4
 80014e4:	e7c4      	b.n	8001470 <__udivmoddi4+0x288>
 80014e6:	bf00      	nop

080014e8 <__aeabi_idiv0>:
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	0000      	movs	r0, r0
	...

080014f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	/* Initialize mems driver interface */
	dev_ctx.write_reg = platform_write;
 80014f6:	4b9c      	ldr	r3, [pc, #624]	@ (8001768 <main+0x278>)
 80014f8:	4a9c      	ldr	r2, [pc, #624]	@ (800176c <main+0x27c>)
 80014fa:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 80014fc:	4b9a      	ldr	r3, [pc, #616]	@ (8001768 <main+0x278>)
 80014fe:	4a9c      	ldr	r2, [pc, #624]	@ (8001770 <main+0x280>)
 8001500:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &hi2c1;
 8001502:	4b99      	ldr	r3, [pc, #612]	@ (8001768 <main+0x278>)
 8001504:	4a9b      	ldr	r2, [pc, #620]	@ (8001774 <main+0x284>)
 8001506:	60da      	str	r2, [r3, #12]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001508:	f000 fef3 	bl	80022f2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800150c:	f000 f962 	bl	80017d4 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	iks01a3_i2c_stuck_quirk();
 8001510:	f000 fcc2 	bl	8001e98 <iks01a3_i2c_stuck_quirk>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001514:	f000 fa04 	bl	8001920 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001518:	f000 f9aa 	bl	8001870 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 800151c:	f000 f9d6 	bl	80018cc <MX_USART2_UART_Init>
	//  MX_LSM6DSO_Init();

	/* USER CODE BEGIN 2 */
	KIN1_InitCycleCounter();
 8001520:	4b95      	ldr	r3, [pc, #596]	@ (8001778 <main+0x288>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a94      	ldr	r2, [pc, #592]	@ (8001778 <main+0x288>)
 8001526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800152a:	6013      	str	r3, [r2, #0]
	KIN1_EnableCycleCounter();
 800152c:	4b93      	ldr	r3, [pc, #588]	@ (800177c <main+0x28c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a92      	ldr	r2, [pc, #584]	@ (800177c <main+0x28c>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]
	lsm6dso_initialize();
 8001538:	f000 fb58 	bl	8001bec <lsm6dso_initialize>
	if (NEAI_MODE) {
		neai_state = neai_classification_init(knowledge);
 800153c:	4890      	ldr	r0, [pc, #576]	@ (8001780 <main+0x290>)
 800153e:	f003 fe29 	bl	8005194 <neai_classification_init>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	4b8f      	ldr	r3, [pc, #572]	@ (8001784 <main+0x294>)
 8001548:	701a      	strb	r2, [r3, #0]
		printf("Initialize NEAI Classification library. NEAI init return: %d.\r\n", neai_state);
 800154a:	4b8e      	ldr	r3, [pc, #568]	@ (8001784 <main+0x294>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	4619      	mov	r1, r3
 8001550:	488d      	ldr	r0, [pc, #564]	@ (8001788 <main+0x298>)
 8001552:	f004 ffd3 	bl	80064fc <iprintf>

		if (neai_state != NEAI_OK) {
 8001556:	4b8b      	ldr	r3, [pc, #556]	@ (8001784 <main+0x294>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <main+0x74>
			printf("ERREUR: Échec d'initialisation NanoEdgeAI!\r\n");
 800155e:	488b      	ldr	r0, [pc, #556]	@ (800178c <main+0x29c>)
 8001560:	f005 f834 	bl	80065cc <puts>
			// Gestion d'erreur appropriée
		}

		printf("SafeGuard - Système de détection de chute activé\r\n");
 8001564:	488a      	ldr	r0, [pc, #552]	@ (8001790 <main+0x2a0>)
 8001566:	f005 f831 	bl	80065cc <puts>
		printf("Classes disponibles: %s, %s, %s, %s\r\n",
 800156a:	4b8a      	ldr	r3, [pc, #552]	@ (8001794 <main+0x2a4>)
 800156c:	6859      	ldr	r1, [r3, #4]
 800156e:	4b89      	ldr	r3, [pc, #548]	@ (8001794 <main+0x2a4>)
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	4b88      	ldr	r3, [pc, #544]	@ (8001794 <main+0x2a4>)
 8001574:	68d8      	ldr	r0, [r3, #12]
 8001576:	4b87      	ldr	r3, [pc, #540]	@ (8001794 <main+0x2a4>)
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	4603      	mov	r3, r0
 800157e:	4886      	ldr	r0, [pc, #536]	@ (8001798 <main+0x2a8>)
 8001580:	f004 ffbc 	bl	80064fc <iprintf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		uint8_t wtm_flag = 0, status2 = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	72fb      	strb	r3, [r7, #11]
 8001588:	2300      	movs	r3, #0
 800158a:	70fb      	strb	r3, [r7, #3]
		uint16_t num = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	803b      	strh	r3, [r7, #0]
		if (drdy) {
 8001590:	4b82      	ldr	r3, [pc, #520]	@ (800179c <main+0x2ac>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f4      	beq.n	8001584 <main+0x94>
			/* Reset data ready condition */
			drdy = 0;
 800159a:	4b80      	ldr	r3, [pc, #512]	@ (800179c <main+0x2ac>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
			lsm6dso_read_reg(&dev_ctx, LSM6DSO_FIFO_STATUS2, &status2, 1);
 80015a0:	1cfa      	adds	r2, r7, #3
 80015a2:	2301      	movs	r3, #1
 80015a4:	213b      	movs	r1, #59	@ 0x3b
 80015a6:	4870      	ldr	r0, [pc, #448]	@ (8001768 <main+0x278>)
 80015a8:	f003 fa96 	bl	8004ad8 <lsm6dso_read_reg>
			wtm_flag = status2 >> 7;
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	09db      	lsrs	r3, r3, #7
 80015b0:	72fb      	strb	r3, [r7, #11]
			if (wtm_flag) {
 80015b2:	7afb      	ldrb	r3, [r7, #11]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0e5      	beq.n	8001584 <main+0x94>
				lsm6dso_fifo_data_level_get(&dev_ctx, &num);
 80015b8:	463b      	mov	r3, r7
 80015ba:	4619      	mov	r1, r3
 80015bc:	486a      	ldr	r0, [pc, #424]	@ (8001768 <main+0x278>)
 80015be:	f003 fd55 	bl	800506c <lsm6dso_fifo_data_level_get>
				if (data_left < num) {
 80015c2:	4b77      	ldr	r3, [pc, #476]	@ (80017a0 <main+0x2b0>)
 80015c4:	881a      	ldrh	r2, [r3, #0]
 80015c6:	883b      	ldrh	r3, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d202      	bcs.n	80015d2 <main+0xe2>
					num = data_left;
 80015cc:	4b74      	ldr	r3, [pc, #464]	@ (80017a0 <main+0x2b0>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	803b      	strh	r3, [r7, #0]
				}
				lsm6dso_get_buffer_from_fifo(num);
 80015d2:	883b      	ldrh	r3, [r7, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fb65 	bl	8001ca4 <lsm6dso_get_buffer_from_fifo>
				data_left -= num;
 80015da:	4b71      	ldr	r3, [pc, #452]	@ (80017a0 <main+0x2b0>)
 80015dc:	881a      	ldrh	r2, [r3, #0]
 80015de:	883b      	ldrh	r3, [r7, #0]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	4b6e      	ldr	r3, [pc, #440]	@ (80017a0 <main+0x2b0>)
 80015e6:	801a      	strh	r2, [r3, #0]
				number_read += num;
 80015e8:	4b6e      	ldr	r3, [pc, #440]	@ (80017a4 <main+0x2b4>)
 80015ea:	881a      	ldrh	r2, [r3, #0]
 80015ec:	883b      	ldrh	r3, [r7, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	4b6c      	ldr	r3, [pc, #432]	@ (80017a4 <main+0x2b4>)
 80015f4:	801a      	strh	r2, [r3, #0]
				if (data_left == 0) {
 80015f6:	4b6a      	ldr	r3, [pc, #424]	@ (80017a0 <main+0x2b0>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 80a4 	bne.w	8001748 <main+0x258>
					lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_BYPASS_MODE);
 8001600:	2100      	movs	r1, #0
 8001602:	4859      	ldr	r0, [pc, #356]	@ (8001768 <main+0x278>)
 8001604:	f003 fd0c 	bl	8005020 <lsm6dso_fifo_mode_set>
#if NEAI_MODE
					uint32_t cycles_cnt = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]

					// CHANGÉ: Classification au lieu de learn/detect
					KIN1_ResetCycleCounter();
 800160c:	4b66      	ldr	r3, [pc, #408]	@ (80017a8 <main+0x2b8>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
					neai_state = neai_classification(neai_buffer, neai_output_buffer, &neai_id_class);
 8001612:	4a66      	ldr	r2, [pc, #408]	@ (80017ac <main+0x2bc>)
 8001614:	4966      	ldr	r1, [pc, #408]	@ (80017b0 <main+0x2c0>)
 8001616:	4867      	ldr	r0, [pc, #412]	@ (80017b4 <main+0x2c4>)
 8001618:	f003 fe8c 	bl	8005334 <neai_classification>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	4b58      	ldr	r3, [pc, #352]	@ (8001784 <main+0x294>)
 8001622:	701a      	strb	r2, [r3, #0]
					cycles_cnt = KIN1_GetCycleCounter();
 8001624:	4b60      	ldr	r3, [pc, #384]	@ (80017a8 <main+0x2b8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	607b      	str	r3, [r7, #4]
					neai_time = (cycles_cnt * 1000000.0) / HAL_RCC_GetSysClockFreq();
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7fe fef2 	bl	8000414 <__aeabi_ui2d>
 8001630:	a34b      	add	r3, pc, #300	@ (adr r3, 8001760 <main+0x270>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe ff67 	bl	8000508 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4614      	mov	r4, r2
 8001640:	461d      	mov	r5, r3
 8001642:	f002 fe3d 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 8001646:	4603      	mov	r3, r0
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fee3 	bl	8000414 <__aeabi_ui2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4620      	mov	r0, r4
 8001654:	4629      	mov	r1, r5
 8001656:	f7ff f881 	bl	800075c <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f7ff fa29 	bl	8000ab8 <__aeabi_d2f>
 8001666:	4603      	mov	r3, r0
 8001668:	4a53      	ldr	r2, [pc, #332]	@ (80017b8 <main+0x2c8>)
 800166a:	6013      	str	r3, [r2, #0]

					// Affichage des résultats
					printf("Classe détectée: %s (ID: %d, Confiance: %.1f%%).\r\n",
 800166c:	4b4f      	ldr	r3, [pc, #316]	@ (80017ac <main+0x2bc>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b48      	ldr	r3, [pc, #288]	@ (8001794 <main+0x2a4>)
 8001674:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001678:	4b4c      	ldr	r3, [pc, #304]	@ (80017ac <main+0x2bc>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	461d      	mov	r5, r3
							id2class[neai_id_class], neai_id_class, neai_output_buffer[neai_id_class] * 100.0f);
 800167e:	4b4b      	ldr	r3, [pc, #300]	@ (80017ac <main+0x2bc>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	4b4a      	ldr	r3, [pc, #296]	@ (80017b0 <main+0x2c0>)
 8001686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168a:	494c      	ldr	r1, [pc, #304]	@ (80017bc <main+0x2cc>)
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fb71 	bl	8000d74 <__aeabi_fmul>
 8001692:	4603      	mov	r3, r0
					printf("Classe détectée: %s (ID: %d, Confiance: %.1f%%).\r\n",
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fedf 	bl	8000458 <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	e9cd 2300 	strd	r2, r3, [sp]
 80016a2:	462a      	mov	r2, r5
 80016a4:	4621      	mov	r1, r4
 80016a6:	4846      	ldr	r0, [pc, #280]	@ (80017c0 <main+0x2d0>)
 80016a8:	f004 ff28 	bl	80064fc <iprintf>
					printf("NEAI classification return: %d. Cycles: %ld = %.1f µs.\r\n",
 80016ac:	4b35      	ldr	r3, [pc, #212]	@ (8001784 <main+0x294>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461c      	mov	r4, r3
 80016b2:	4b41      	ldr	r3, [pc, #260]	@ (80017b8 <main+0x2c8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe fece 	bl	8000458 <__aeabi_f2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9cd 2300 	strd	r2, r3, [sp]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4621      	mov	r1, r4
 80016c8:	483e      	ldr	r0, [pc, #248]	@ (80017c4 <main+0x2d4>)
 80016ca:	f004 ff17 	bl	80064fc <iprintf>
							neai_state, cycles_cnt, neai_time);

					// Affichage détaillé des probabilités
					printf("Probabilités: \r\n");
 80016ce:	483e      	ldr	r0, [pc, #248]	@ (80017c8 <main+0x2d8>)
 80016d0:	f004 ff7c 	bl	80065cc <puts>
					for(int i = 1; i <= CLASS_NUMBER; i++) {
 80016d4:	2301      	movs	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	e019      	b.n	800170e <main+0x21e>
						printf("%s=%.1f%% ", id2class[i], neai_output_buffer[i-1] * 100.0f);
 80016da:	4a2e      	ldr	r2, [pc, #184]	@ (8001794 <main+0x2a4>)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	4a32      	ldr	r2, [pc, #200]	@ (80017b0 <main+0x2c0>)
 80016e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ec:	4933      	ldr	r1, [pc, #204]	@ (80017bc <main+0x2cc>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fb40 	bl	8000d74 <__aeabi_fmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe feae 	bl	8000458 <__aeabi_f2d>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4621      	mov	r1, r4
 8001702:	4832      	ldr	r0, [pc, #200]	@ (80017cc <main+0x2dc>)
 8001704:	f004 fefa 	bl	80064fc <iprintf>
					for(int i = 1; i <= CLASS_NUMBER; i++) {
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3301      	adds	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b04      	cmp	r3, #4
 8001712:	dde2      	ble.n	80016da <main+0x1ea>
					}
					printf("\r\n");
 8001714:	482e      	ldr	r0, [pc, #184]	@ (80017d0 <main+0x2e0>)
 8001716:	f004 ff59 	bl	80065cc <puts>

					// AJOUTÉ: Vérification de détection de chute
					check_fall_detection();
 800171a:	f000 f983 	bl	8001a24 <check_fall_detection>
						printf("%.3f ", neai_buffer[i]);
					}
					printf("\r\n");
#endif
					// Reset pour le prochain cycle
					data_left = (uint16_t) SAMPLES;
 800171e:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <main+0x2b0>)
 8001720:	2280      	movs	r2, #128	@ 0x80
 8001722:	801a      	strh	r2, [r3, #0]
					number_read = 0;
 8001724:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <main+0x2b4>)
 8001726:	2200      	movs	r2, #0
 8001728:	801a      	strh	r2, [r3, #0]
					memset(neai_buffer, 0x00, AXIS * SAMPLES * sizeof(float));
 800172a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800172e:	2100      	movs	r1, #0
 8001730:	4820      	ldr	r0, [pc, #128]	@ (80017b4 <main+0x2c4>)
 8001732:	f005 f82b 	bl	800678c <memset>

					if (SAMPLES <= MAX_FIFO_SIZE) {
						lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 8001736:	2180      	movs	r1, #128	@ 0x80
 8001738:	480b      	ldr	r0, [pc, #44]	@ (8001768 <main+0x278>)
 800173a:	f003 fbef 	bl	8004f1c <lsm6dso_fifo_watermark_set>
					}
					else {
						lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
					}
					lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_FIFO_MODE);
 800173e:	2101      	movs	r1, #1
 8001740:	4809      	ldr	r0, [pc, #36]	@ (8001768 <main+0x278>)
 8001742:	f003 fc6d 	bl	8005020 <lsm6dso_fifo_mode_set>
 8001746:	e71d      	b.n	8001584 <main+0x94>
				}
				else if (data_left < MAX_FIFO_SIZE) {
 8001748:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <main+0x2b0>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	2bff      	cmp	r3, #255	@ 0xff
 800174e:	f63f af19 	bhi.w	8001584 <main+0x94>
					lsm6dso_fifo_watermark_set(&dev_ctx, data_left);
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <main+0x2b0>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	4619      	mov	r1, r3
 8001758:	4803      	ldr	r0, [pc, #12]	@ (8001768 <main+0x278>)
 800175a:	f003 fbdf 	bl	8004f1c <lsm6dso_fifo_watermark_set>
	{
 800175e:	e711      	b.n	8001584 <main+0x94>
 8001760:	00000000 	.word	0x00000000
 8001764:	412e8480 	.word	0x412e8480
 8001768:	200008d0 	.word	0x200008d0
 800176c:	08001b79 	.word	0x08001b79
 8001770:	08001bb3 	.word	0x08001bb3
 8001774:	2000020c 	.word	0x2000020c
 8001778:	e000edfc 	.word	0xe000edfc
 800177c:	e0001000 	.word	0xe0001000
 8001780:	08008b10 	.word	0x08008b10
 8001784:	200002ac 	.word	0x200002ac
 8001788:	08008918 	.word	0x08008918
 800178c:	08008958 	.word	0x08008958
 8001790:	08008988 	.word	0x08008988
 8001794:	20000004 	.word	0x20000004
 8001798:	080089c0 	.word	0x080089c0
 800179c:	200002ad 	.word	0x200002ad
 80017a0:	20000000 	.word	0x20000000
 80017a4:	200002ae 	.word	0x200002ae
 80017a8:	e0001004 	.word	0xe0001004
 80017ac:	200002aa 	.word	0x200002aa
 80017b0:	200008b8 	.word	0x200008b8
 80017b4:	200002b8 	.word	0x200002b8
 80017b8:	200002b4 	.word	0x200002b4
 80017bc:	42c80000 	.word	0x42c80000
 80017c0:	080089e8 	.word	0x080089e8
 80017c4:	08008a20 	.word	0x08008a20
 80017c8:	08008a5c 	.word	0x08008a5c
 80017cc:	08008a70 	.word	0x08008a70
 80017d0:	08008a7c 	.word	0x08008a7c

080017d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b092      	sub	sp, #72	@ 0x48
 80017d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	2234      	movs	r2, #52	@ 0x34
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 ffd2 	bl	800678c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	463b      	mov	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f6:	4b1d      	ldr	r3, [pc, #116]	@ (800186c <SystemClock_Config+0x98>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80017fe:	4a1b      	ldr	r2, [pc, #108]	@ (800186c <SystemClock_Config+0x98>)
 8001800:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001804:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001806:	2302      	movs	r3, #2
 8001808:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180a:	2301      	movs	r3, #1
 800180c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800180e:	2310      	movs	r3, #16
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001812:	2302      	movs	r3, #2
 8001814:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001816:	2300      	movs	r3, #0
 8001818:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800181a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800181e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001820:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001824:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4618      	mov	r0, r3
 800182c:	f002 f8e4 	bl	80039f8 <HAL_RCC_OscConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001836:	f000 fb7f 	bl	8001f38 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183a:	230f      	movs	r3, #15
 800183c:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183e:	2303      	movs	r3, #3
 8001840:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800184e:	463b      	mov	r3, r7
 8001850:	2101      	movs	r1, #1
 8001852:	4618      	mov	r0, r3
 8001854:	f002 fc00 	bl	8004058 <HAL_RCC_ClockConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 800185e:	f000 fb6b 	bl	8001f38 <Error_Handler>
	}
}
 8001862:	bf00      	nop
 8001864:	3748      	adds	r7, #72	@ 0x48
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40007000 	.word	0x40007000

08001870 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001874:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <MX_I2C1_Init+0x50>)
 8001876:	4a13      	ldr	r2, [pc, #76]	@ (80018c4 <MX_I2C1_Init+0x54>)
 8001878:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <MX_I2C1_Init+0x50>)
 800187c:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <MX_I2C1_Init+0x58>)
 800187e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <MX_I2C1_Init+0x50>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001886:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <MX_I2C1_Init+0x50>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <MX_I2C1_Init+0x50>)
 800188e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001892:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001894:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <MX_I2C1_Init+0x50>)
 8001896:	2200      	movs	r2, #0
 8001898:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800189a:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <MX_I2C1_Init+0x50>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a0:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <MX_I2C1_Init+0x50>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <MX_I2C1_Init+0x50>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ac:	4804      	ldr	r0, [pc, #16]	@ (80018c0 <MX_I2C1_Init+0x50>)
 80018ae:	f001 f87f 	bl	80029b0 <HAL_I2C_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80018b8:	f000 fb3e 	bl	8001f38 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000020c 	.word	0x2000020c
 80018c4:	40005400 	.word	0x40005400
 80018c8:	00061a80 	.word	0x00061a80

080018cc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <MX_USART2_UART_Init+0x50>)
 80018d4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018dc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80018f0:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 8001904:	f002 fe6e 	bl	80045e4 <HAL_UART_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800190e:	f000 fb13 	bl	8001f38 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000260 	.word	0x20000260
 800191c:	40004400 	.word	0x40004400

08001920 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001936:	4b37      	ldr	r3, [pc, #220]	@ (8001a14 <MX_GPIO_Init+0xf4>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a36      	ldr	r2, [pc, #216]	@ (8001a14 <MX_GPIO_Init+0xf4>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b34      	ldr	r3, [pc, #208]	@ (8001a14 <MX_GPIO_Init+0xf4>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b31      	ldr	r3, [pc, #196]	@ (8001a14 <MX_GPIO_Init+0xf4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	4a30      	ldr	r2, [pc, #192]	@ (8001a14 <MX_GPIO_Init+0xf4>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	61d3      	str	r3, [r2, #28]
 800195a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <MX_GPIO_Init+0xf4>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	4b2b      	ldr	r3, [pc, #172]	@ (8001a14 <MX_GPIO_Init+0xf4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	4a2a      	ldr	r2, [pc, #168]	@ (8001a14 <MX_GPIO_Init+0xf4>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	61d3      	str	r3, [r2, #28]
 8001972:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <MX_GPIO_Init+0xf4>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	2120      	movs	r1, #32
 8001982:	4825      	ldr	r0, [pc, #148]	@ (8001a18 <MX_GPIO_Init+0xf8>)
 8001984:	f000 ffe4 	bl	8002950 <HAL_GPIO_WritePin>

	/* Configure GPIO pins : USART2_TX_Pin USART2_RX_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3; // PA2: USART2_TX, PA3: USART2_RX
 8001988:	230c      	movs	r3, #12
 800198a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001994:	2302      	movs	r3, #2
 8001996:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001998:	2307      	movs	r3, #7
 800199a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	481d      	ldr	r0, [pc, #116]	@ (8001a18 <MX_GPIO_Init+0xf8>)
 80019a4:	f000 fe44 	bl	8002630 <HAL_GPIO_Init>

	/* Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80019a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	4619      	mov	r1, r3
 80019be:	4817      	ldr	r0, [pc, #92]	@ (8001a1c <MX_GPIO_Init+0xfc>)
 80019c0:	f000 fe36 	bl	8002630 <HAL_GPIO_Init>

	/* Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80019c4:	2320      	movs	r3, #32
 80019c6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	4619      	mov	r1, r3
 80019da:	480f      	ldr	r0, [pc, #60]	@ (8001a18 <MX_GPIO_Init+0xf8>)
 80019dc:	f000 fe28 	bl	8002630 <HAL_GPIO_Init>

	/* Configure GPIO pin : GYRO_ACC_INT_Pin */
	GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin;
 80019e0:	2320      	movs	r3, #32
 80019e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GYRO_ACC_INT_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	4619      	mov	r1, r3
 80019f4:	480a      	ldr	r0, [pc, #40]	@ (8001a20 <MX_GPIO_Init+0x100>)
 80019f6:	f000 fe1b 	bl	8002630 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	2017      	movs	r0, #23
 8001a00:	f000 fddf 	bl	80025c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a04:	2017      	movs	r0, #23
 8001a06:	f000 fdf8 	bl	80025fa <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a0a:	bf00      	nop
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020400 	.word	0x40020400

08001a24 <check_fall_detection>:
/**
 * @brief  Vérifie si une chute a été détectée
 * @retval None
 */
static void check_fall_detection(void)
{
 8001a24:	b5b0      	push	{r4, r5, r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af02      	add	r7, sp, #8
    uint32_t current_time = HAL_GetTick();
 8001a2a:	f000 fcc7 	bl	80023bc <HAL_GetTick>
 8001a2e:	60f8      	str	r0, [r7, #12]

    // Éviter les détections multiples rapprochées
    if (current_time - last_fall_time < FALL_COOLDOWN_MS) {
 8001a30:	4b23      	ldr	r3, [pc, #140]	@ (8001ac0 <check_fall_detection+0x9c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d93a      	bls.n	8001ab6 <check_fall_detection+0x92>
        return;
    }

    // Logique de détection de chute
    float impact_prob = neai_output_buffer[4] * 100.0f;        // "Impact" = index 3 (4ème classe)
 8001a40:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <check_fall_detection+0xa0>)
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	4920      	ldr	r1, [pc, #128]	@ (8001ac8 <check_fall_detection+0xa4>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f994 	bl	8000d74 <__aeabi_fmul>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60bb      	str	r3, [r7, #8]
    float inclinaison_prob = neai_output_buffer[3] * 100.0f;   // "Inclinaison brusque" = index 4 (5ème classe)
 8001a50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <check_fall_detection+0xa0>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	491c      	ldr	r1, [pc, #112]	@ (8001ac8 <check_fall_detection+0xa4>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f98c 	bl	8000d74 <__aeabi_fmul>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	607b      	str	r3, [r7, #4]

    // Détection basée sur Impact fort OU Inclinaison brusque forte
    if (impact_prob > FALL_DETECTION_THRESHOLD_IMPACT ||
 8001a60:	491a      	ldr	r1, [pc, #104]	@ (8001acc <check_fall_detection+0xa8>)
 8001a62:	68b8      	ldr	r0, [r7, #8]
 8001a64:	f7ff fb42 	bl	80010ec <__aeabi_fcmpgt>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <check_fall_detection+0x58>
 8001a6e:	4918      	ldr	r1, [pc, #96]	@ (8001ad0 <check_fall_detection+0xac>)
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fb3b 	bl	80010ec <__aeabi_fcmpgt>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01d      	beq.n	8001ab8 <check_fall_detection+0x94>
        inclinaison_prob > FALL_DETECTION_THRESHOLD_INCLINAISON) {

        fall_detected = 1;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <check_fall_detection+0xb0>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
        last_fall_time = current_time;
 8001a82:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac0 <check_fall_detection+0x9c>)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6013      	str	r3, [r2, #0]

        printf("\n⚠️  ALERTE CHUTE DÉTECTÉE! ⚠️\r\n");
 8001a88:	4813      	ldr	r0, [pc, #76]	@ (8001ad8 <check_fall_detection+0xb4>)
 8001a8a:	f004 fd9f 	bl	80065cc <puts>
        printf("Impact: %.1f%%, Inclinaison: %.1f%%\r\n", impact_prob, inclinaison_prob);
 8001a8e:	68b8      	ldr	r0, [r7, #8]
 8001a90:	f7fe fce2 	bl	8000458 <__aeabi_f2d>
 8001a94:	4604      	mov	r4, r0
 8001a96:	460d      	mov	r5, r1
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7fe fcdd 	bl	8000458 <__aeabi_f2d>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	e9cd 2300 	strd	r2, r3, [sp]
 8001aa6:	4622      	mov	r2, r4
 8001aa8:	462b      	mov	r3, r5
 8001aaa:	480c      	ldr	r0, [pc, #48]	@ (8001adc <check_fall_detection+0xb8>)
 8001aac:	f004 fd26 	bl	80064fc <iprintf>

        trigger_fall_alert();
 8001ab0:	f000 f816 	bl	8001ae0 <trigger_fall_alert>
 8001ab4:	e000      	b.n	8001ab8 <check_fall_detection+0x94>
        return;
 8001ab6:	bf00      	nop
    }
}
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bdb0      	pop	{r4, r5, r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200008cc 	.word	0x200008cc
 8001ac4:	200008b8 	.word	0x200008b8
 8001ac8:	42c80000 	.word	0x42c80000
 8001acc:	42a00000 	.word	0x42a00000
 8001ad0:	428c0000 	.word	0x428c0000
 8001ad4:	200008c8 	.word	0x200008c8
 8001ad8:	08008a80 	.word	0x08008a80
 8001adc:	08008aac 	.word	0x08008aac

08001ae0 <trigger_fall_alert>:
/**
 * @brief  Déclenche l'alerte de chute (LED, buzzer, transmission, etc.)
 * @retval None
 */
static void trigger_fall_alert(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
    // Allumer la LED d'alerte
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2120      	movs	r1, #32
 8001ae8:	480b      	ldr	r0, [pc, #44]	@ (8001b18 <trigger_fall_alert+0x38>)
 8001aea:	f000 ff31 	bl	8002950 <HAL_GPIO_WritePin>
    // - Activation buzzer/sirène
    // - Envoi SMS/notification
    // - Transmission radio/LoRa/WiFi
    // - Logs dans mémoire

    printf("🚨 Procédures d'urgence activées!\r\n");
 8001aee:	480b      	ldr	r0, [pc, #44]	@ (8001b1c <trigger_fall_alert+0x3c>)
 8001af0:	f004 fd6c 	bl	80065cc <puts>
    printf("Timestamp: %lu ms\r\n", HAL_GetTick());
 8001af4:	f000 fc62 	bl	80023bc <HAL_GetTick>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4619      	mov	r1, r3
 8001afc:	4808      	ldr	r0, [pc, #32]	@ (8001b20 <trigger_fall_alert+0x40>)
 8001afe:	f004 fcfd 	bl	80064fc <iprintf>

    // Simulation temporisation d'alerte (à remplacer par vraie logique)
    HAL_Delay(1000);
 8001b02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b06:	f000 fc63 	bl	80023d0 <HAL_Delay>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2120      	movs	r1, #32
 8001b0e:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <trigger_fall_alert+0x38>)
 8001b10:	f000 ff1e 	bl	8002950 <HAL_GPIO_WritePin>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	08008ad4 	.word	0x08008ad4
 8001b20:	08008afc 	.word	0x08008afc

08001b24 <__io_putchar>:
 * @brief  Redirecting stdout to USART2 which is connected on the STLINK port
 * @retval
 * @param
 */
int __io_putchar(int ch)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8001b32:	f107 010c 	add.w	r1, r7, #12
 8001b36:	230a      	movs	r3, #10
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4804      	ldr	r0, [pc, #16]	@ (8001b4c <__io_putchar+0x28>)
 8001b3c:	f002 fda2 	bl	8004684 <HAL_UART_Transmit>
	return ch;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000260 	.word	0x20000260

08001b50 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line rising detection callback.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d103      	bne.n	8001b68 <HAL_GPIO_EXTI_Callback+0x18>
	case GYRO_ACC_INT_Pin:
		drdy = 1;
 8001b60:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0x24>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
		break;
 8001b66:	bf00      	nop
	}
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	200002ad 	.word	0x200002ad

08001b78 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
		uint16_t len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af04      	add	r7, sp, #16
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	461a      	mov	r2, r3
 8001b84:	460b      	mov	r3, r1
 8001b86:	72fb      	strb	r3, [r7, #11]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Write(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001b8c:	7afb      	ldrb	r3, [r7, #11]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b94:	9302      	str	r3, [sp, #8]
 8001b96:	893b      	ldrh	r3, [r7, #8]
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	21d7      	movs	r1, #215	@ 0xd7
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f001 f848 	bl	8002c38 <HAL_I2C_Mem_Write>
	return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b088      	sub	sp, #32
 8001bb6:	af04      	add	r7, sp, #16
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	72fb      	strb	r3, [r7, #11]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001bc6:	7afb      	ldrb	r3, [r7, #11]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	893b      	ldrh	r3, [r7, #8]
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	21d7      	movs	r1, #215	@ 0xd7
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f001 f925 	bl	8002e2c <HAL_I2C_Mem_Read>
	return 0;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <lsm6dso_initialize>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize()
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	lsm6dso_initialize_basics();
 8001bf0:	f000 f80e 	bl	8001c10 <lsm6dso_initialize_basics>
#ifdef ACCELEROMETER
	/* Accelelerometer configuration */
	lsm6dso_xl_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	4805      	ldr	r0, [pc, #20]	@ (8001c0c <lsm6dso_initialize+0x20>)
 8001bf8:	f002 ffda 	bl	8004bb0 <lsm6dso_xl_data_rate_set>
	lsm6dso_xl_full_scale_set(&dev_ctx, ACCELEROMETER_FS);
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4803      	ldr	r0, [pc, #12]	@ (8001c0c <lsm6dso_initialize+0x20>)
 8001c00:	f002 ffb0 	bl	8004b64 <lsm6dso_xl_full_scale_set>
#else
	/* Gyroscope configuration */
	lsm6dso_gy_data_rate_set(&dev_ctx, GYROSCOPE_ODR);
	lsm6dso_gy_full_scale_set(&dev_ctx, GYROSCOPE_FS);
#endif
	lsm6dso_initialize_fifo();
 8001c04:	f000 f82c 	bl	8001c60 <lsm6dso_initialize_fifo>
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200008d0 	.word	0x200008d0

08001c10 <lsm6dso_initialize_basics>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_basics()
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	/* Check device ID */
	whoamI = 0;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <lsm6dso_initialize_basics+0x44>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]

	do {
		HAL_Delay(20);
 8001c1a:	2014      	movs	r0, #20
 8001c1c:	f000 fbd8 	bl	80023d0 <HAL_Delay>
		lsm6dso_device_id_get(&dev_ctx, &whoamI);
 8001c20:	490c      	ldr	r1, [pc, #48]	@ (8001c54 <lsm6dso_initialize_basics+0x44>)
 8001c22:	480d      	ldr	r0, [pc, #52]	@ (8001c58 <lsm6dso_initialize_basics+0x48>)
 8001c24:	f003 f8e4 	bl	8004df0 <lsm6dso_device_id_get>
	} while(whoamI != LSM6DSO_ID);
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <lsm6dso_initialize_basics+0x44>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b6c      	cmp	r3, #108	@ 0x6c
 8001c2e:	d1f4      	bne.n	8001c1a <lsm6dso_initialize_basics+0xa>

	/* Restore default configuration */
	lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8001c30:	2101      	movs	r1, #1
 8001c32:	4809      	ldr	r0, [pc, #36]	@ (8001c58 <lsm6dso_initialize_basics+0x48>)
 8001c34:	f003 f8ed 	bl	8004e12 <lsm6dso_reset_set>

	do {
		lsm6dso_reset_get(&dev_ctx, &rst);
 8001c38:	4908      	ldr	r1, [pc, #32]	@ (8001c5c <lsm6dso_initialize_basics+0x4c>)
 8001c3a:	4807      	ldr	r0, [pc, #28]	@ (8001c58 <lsm6dso_initialize_basics+0x48>)
 8001c3c:	f003 f90f 	bl	8004e5e <lsm6dso_reset_get>
	} while (rst);
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <lsm6dso_initialize_basics+0x4c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f7      	bne.n	8001c38 <lsm6dso_initialize_basics+0x28>

	/* Disable I3C interface */
	lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
 8001c48:	2180      	movs	r1, #128	@ 0x80
 8001c4a:	4803      	ldr	r0, [pc, #12]	@ (8001c58 <lsm6dso_initialize_basics+0x48>)
 8001c4c:	f003 f920 	bl	8004e90 <lsm6dso_i3c_disable_set>
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200002a8 	.word	0x200002a8
 8001c58:	200008d0 	.word	0x200008d0
 8001c5c:	200002a9 	.word	0x200002a9

08001c60 <lsm6dso_initialize_fifo>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_fifo()
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
#ifdef ACCELEROMETER
	/* Batch odr config */
	lsm6dso_fifo_xl_batch_set(&dev_ctx, ACCELEROMETER_ODR);
 8001c66:	2108      	movs	r1, #8
 8001c68:	480d      	ldr	r0, [pc, #52]	@ (8001ca0 <lsm6dso_initialize_fifo+0x40>)
 8001c6a:	f003 f98d 	bl	8004f88 <lsm6dso_fifo_xl_batch_set>
	lsm6dso_fifo_gy_batch_set(&dev_ctx, 0);
 8001c6e:	2100      	movs	r1, #0
 8001c70:	480b      	ldr	r0, [pc, #44]	@ (8001ca0 <lsm6dso_initialize_fifo+0x40>)
 8001c72:	f003 f9af 	bl	8004fd4 <lsm6dso_fifo_gy_batch_set>
	/* Batch odr config */
	lsm6dso_fifo_xl_batch_set(&dev_ctx, 0);
	lsm6dso_fifo_gy_batch_set(&dev_ctx, GYROSCOPE_ODR);
#endif
	/* FIFO MODE */
	lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_FIFO_MODE);
 8001c76:	2101      	movs	r1, #1
 8001c78:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <lsm6dso_initialize_fifo+0x40>)
 8001c7a:	f003 f9d1 	bl	8005020 <lsm6dso_fifo_mode_set>
	/* Watermark config */
	if (SAMPLES <= MAX_FIFO_SIZE) {
		lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 8001c7e:	2180      	movs	r1, #128	@ 0x80
 8001c80:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <lsm6dso_initialize_fifo+0x40>)
 8001c82:	f003 f94b 	bl	8004f1c <lsm6dso_fifo_watermark_set>
	}
	else {
		lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
	}
	/* Need to enable interrupt pin when wtm is reached */
	uint8_t ctrl = 0x08;
 8001c86:	2308      	movs	r3, #8
 8001c88:	71fb      	strb	r3, [r7, #7]
	lsm6dso_write_reg(&dev_ctx, LSM6DSO_INT1_CTRL, (uint8_t *) &ctrl, 1);
 8001c8a:	1dfa      	adds	r2, r7, #7
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	210d      	movs	r1, #13
 8001c90:	4803      	ldr	r0, [pc, #12]	@ (8001ca0 <lsm6dso_initialize_fifo+0x40>)
 8001c92:	f002 ff39 	bl	8004b08 <lsm6dso_write_reg>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200008d0 	.word	0x200008d0

08001ca4 <lsm6dso_get_buffer_from_fifo>:
 *
 * @return No
 *
 */
static void lsm6dso_get_buffer_from_fifo(uint16_t nb)
{
 8001ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ca8:	b087      	sub	sp, #28
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	80fb      	strh	r3, [r7, #6]
 8001cb0:	466b      	mov	r3, sp
 8001cb2:	461e      	mov	r6, r3
	uint8_t reg_tag = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	74fb      	strb	r3, [r7, #19]
	uint8_t buff_tmp[nb * FIFO_WORD];
 8001cb8:	88fa      	ldrh	r2, [r7, #6]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	1a99      	subs	r1, r3, r2
 8001cc0:	1e4b      	subs	r3, r1, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	4690      	mov	r8, r2
 8001cca:	4699      	mov	r9, r3
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cdc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	00eb      	lsls	r3, r5, #3
 8001cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf6:	00e2      	lsls	r2, r4, #3
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	3307      	adds	r3, #7
 8001cfc:	08db      	lsrs	r3, r3, #3
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	ebad 0d03 	sub.w	sp, sp, r3
 8001d04:	466b      	mov	r3, sp
 8001d06:	3300      	adds	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
	 * The data stored in FIFO are accessible from dedicated registers and each FIFO word is composed of 7
	 * bytes: one tag byte (FIFO_DATA_OUT_TAG (78h)), in order to identify the sensor, and 6 bytes of fixed data
	 * (FIFO_DATA_OUT registers from (79h) to (7Eh))
	 * So, here we read the fifo in only one transaction in order to save time
	 */
	lsm6dso_read_reg(&dev_ctx, LSM6DSO_FIFO_DATA_OUT_TAG, buff_tmp, nb * FIFO_WORD);
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	00d2      	lsls	r2, r2, #3
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	2178      	movs	r1, #120	@ 0x78
 8001d18:	484b      	ldr	r0, [pc, #300]	@ (8001e48 <lsm6dso_get_buffer_from_fifo+0x1a4>)
 8001d1a:	f002 fedd 	bl	8004ad8 <lsm6dso_read_reg>
	for (uint16_t i = 0; i < nb; i++) {
 8001d1e:	2300      	movs	r3, #0
 8001d20:	82fb      	strh	r3, [r7, #22]
 8001d22:	e079      	b.n	8001e18 <lsm6dso_get_buffer_from_fifo+0x174>
		/* According to the datasheet, the TAG_SENSOR is the 5 MSB of the FIFO_DATA_OUT_TAG register, so we shift 3 bits to the right */
		reg_tag = buff_tmp[FIFO_WORD * i] >> 3;
 8001d24:	8afa      	ldrh	r2, [r7, #22]
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	74fb      	strb	r3, [r7, #19]
		if(reg_tag == LSM6DSO_XL_NC_TAG) {
 8001d34:	7cfb      	ldrb	r3, [r7, #19]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d134      	bne.n	8001da4 <lsm6dso_get_buffer_from_fifo+0x100>
			for(uint8_t j = 0; j < AXIS; j++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	757b      	strb	r3, [r7, #21]
 8001d3e:	e02d      	b.n	8001d9c <lsm6dso_get_buffer_from_fifo+0xf8>
				neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i) + j] = lsm6dso_convert_accel_data_to_mg((uint16_t) buff_tmp[(FIFO_WORD * i) + (2 * j) + 2] << 8 | buff_tmp[(FIFO_WORD * i) + (2 * j) + 1]);
 8001d40:	8afa      	ldrh	r2, [r7, #22]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	1a9a      	subs	r2, r3, r2
 8001d48:	7d7b      	ldrb	r3, [r7, #21]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	b219      	sxth	r1, r3
 8001d5a:	8afa      	ldrh	r2, [r7, #22]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	1a9a      	subs	r2, r3, r2
 8001d62:	7d7b      	ldrb	r3, [r7, #21]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	3301      	adds	r3, #1
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	5cd3      	ldrb	r3, [r2, r3]
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	430b      	orrs	r3, r1
 8001d72:	b219      	sxth	r1, r3
 8001d74:	4b35      	ldr	r3, [pc, #212]	@ (8001e4c <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	8afb      	ldrh	r3, [r7, #22]
 8001d7c:	441a      	add	r2, r3
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	441a      	add	r2, r3
 8001d84:	7d7b      	ldrb	r3, [r7, #21]
 8001d86:	18d4      	adds	r4, r2, r3
 8001d88:	4608      	mov	r0, r1
 8001d8a:	f000 f871 	bl	8001e70 <lsm6dso_convert_accel_data_to_mg>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4a2f      	ldr	r2, [pc, #188]	@ (8001e50 <lsm6dso_get_buffer_from_fifo+0x1ac>)
 8001d92:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for(uint8_t j = 0; j < AXIS; j++) {
 8001d96:	7d7b      	ldrb	r3, [r7, #21]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	757b      	strb	r3, [r7, #21]
 8001d9c:	7d7b      	ldrb	r3, [r7, #21]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d9ce      	bls.n	8001d40 <lsm6dso_get_buffer_from_fifo+0x9c>
 8001da2:	e036      	b.n	8001e12 <lsm6dso_get_buffer_from_fifo+0x16e>
			}
		}
		else if(reg_tag == LSM6DSO_GYRO_NC_TAG) {
 8001da4:	7cfb      	ldrb	r3, [r7, #19]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d133      	bne.n	8001e12 <lsm6dso_get_buffer_from_fifo+0x16e>
			for(uint8_t j = 0; j < AXIS; j++) {
 8001daa:	2300      	movs	r3, #0
 8001dac:	753b      	strb	r3, [r7, #20]
 8001dae:	e02d      	b.n	8001e0c <lsm6dso_get_buffer_from_fifo+0x168>
				neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i) + j] = lsm6dso_convert_gyro_data_to_mdps((uint16_t) buff_tmp[(FIFO_WORD * i) + (2 * j) + 2] << 8 | buff_tmp[(FIFO_WORD * i) + (2 * j) + 1]);
 8001db0:	8afa      	ldrh	r2, [r7, #22]
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	1a9a      	subs	r2, r3, r2
 8001db8:	7d3b      	ldrb	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	b219      	sxth	r1, r3
 8001dca:	8afa      	ldrh	r2, [r7, #22]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	1a9a      	subs	r2, r3, r2
 8001dd2:	7d3b      	ldrb	r3, [r7, #20]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3301      	adds	r3, #1
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	430b      	orrs	r3, r1
 8001de2:	b219      	sxth	r1, r3
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	8afb      	ldrh	r3, [r7, #22]
 8001dec:	441a      	add	r2, r3
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	441a      	add	r2, r3
 8001df4:	7d3b      	ldrb	r3, [r7, #20]
 8001df6:	18d4      	adds	r4, r2, r3
 8001df8:	4608      	mov	r0, r1
 8001dfa:	f000 f82b 	bl	8001e54 <lsm6dso_convert_gyro_data_to_mdps>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a13      	ldr	r2, [pc, #76]	@ (8001e50 <lsm6dso_get_buffer_from_fifo+0x1ac>)
 8001e02:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for(uint8_t j = 0; j < AXIS; j++) {
 8001e06:	7d3b      	ldrb	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	753b      	strb	r3, [r7, #20]
 8001e0c:	7d3b      	ldrb	r3, [r7, #20]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d9ce      	bls.n	8001db0 <lsm6dso_get_buffer_from_fifo+0x10c>
	for (uint16_t i = 0; i < nb; i++) {
 8001e12:	8afb      	ldrh	r3, [r7, #22]
 8001e14:	3301      	adds	r3, #1
 8001e16:	82fb      	strh	r3, [r7, #22]
 8001e18:	8afa      	ldrh	r2, [r7, #22]
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d381      	bcc.n	8001d24 <lsm6dso_get_buffer_from_fifo+0x80>
			}
		}
	}
	neai_buffer_ptr += nb;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8001e22:	881a      	ldrh	r2, [r3, #0]
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	4413      	add	r3, r2
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8001e2c:	801a      	strh	r2, [r3, #0]
	if (neai_buffer_ptr == SAMPLES) {
 8001e2e:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	2b80      	cmp	r3, #128	@ 0x80
 8001e34:	d102      	bne.n	8001e3c <lsm6dso_get_buffer_from_fifo+0x198>
		neai_buffer_ptr = 0;
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	801a      	strh	r2, [r3, #0]
 8001e3c:	46b5      	mov	sp, r6
	}
}
 8001e3e:	bf00      	nop
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e48:	200008d0 	.word	0x200008d0
 8001e4c:	200002b0 	.word	0x200002b0
 8001e50:	200002b8 	.word	0x200002b8

08001e54 <lsm6dso_convert_gyro_data_to_mdps>:
 *
 * @return The converted value in milli degrees per second (mdps)
 *
 */
static float lsm6dso_convert_gyro_data_to_mdps(int16_t gyro_raw_data)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
	float gyro_data_mdps = 0.0;
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
	default:
		gyro_data_mdps = 0.0;
		break;
	}
#endif
	return gyro_data_mdps;
 8001e64:	68fb      	ldr	r3, [r7, #12]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <lsm6dso_convert_accel_data_to_mg>:
 *
 * @return The converted value in milli-G' (mg)
 *
 */
static float lsm6dso_convert_accel_data_to_mg(int16_t accel_raw_data)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	80fb      	strh	r3, [r7, #6]
	float accel_data_mg = 0.0;
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
#ifdef ACCELEROMETER
	switch (ACCELEROMETER_FS)
	{
	case LSM6DSO_2g:
		accel_data_mg = lsm6dso_from_fs2_to_mg(accel_raw_data);
 8001e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 fe57 	bl	8004b38 <lsm6dso_from_fs2_to_mg>
 8001e8a:	60f8      	str	r0, [r7, #12]
		break;
 8001e8c:	bf00      	nop
	default:
		accel_data_mg = 0.0;
		break;
	}
#endif
	return accel_data_mg;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <iks01a3_i2c_stuck_quirk>:
 *
 * As a workaround we simply configure the SCL pin as a GPIO and send a burst
 * of pulses to bring the sensor back to an idle state.
 */
static void iks01a3_i2c_stuck_quirk(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <iks01a3_i2c_stuck_quirk+0x98>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f30 <iks01a3_i2c_stuck_quirk+0x98>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	61d3      	str	r3, [r2, #28]
 8001eba:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <iks01a3_i2c_stuck_quirk+0x98>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]

	/* Configure SCL as a GPIO */
	GPIO_InitStruct.Pin = SCL_PIN;
 8001ec6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eca:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ed8:	2304      	movs	r3, #4
 8001eda:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct);
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4814      	ldr	r0, [pc, #80]	@ (8001f34 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001ee4:	f000 fba4 	bl	8002630 <HAL_GPIO_Init>

	/* Send a burst of pulses on SCL */
	int pulses = 20;
 8001ee8:	2314      	movs	r3, #20
 8001eea:	61fb      	str	r3, [r7, #28]
	do {
		HAL_Delay(1);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f000 fa6f 	bl	80023d0 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ef8:	480e      	ldr	r0, [pc, #56]	@ (8001f34 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001efa:	f000 fd29 	bl	8002950 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001efe:	2001      	movs	r0, #1
 8001f00:	f000 fa66 	bl	80023d0 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8001f04:	2201      	movs	r2, #1
 8001f06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f0a:	480a      	ldr	r0, [pc, #40]	@ (8001f34 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001f0c:	f000 fd20 	bl	8002950 <HAL_GPIO_WritePin>
	} while (pulses--);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	1e5a      	subs	r2, r3, #1
 8001f14:	61fa      	str	r2, [r7, #28]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1e8      	bne.n	8001eec <iks01a3_i2c_stuck_quirk+0x54>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8001f1a:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <iks01a3_i2c_stuck_quirk+0x98>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <iks01a3_i2c_stuck_quirk+0x98>)
 8001f20:	f023 0302 	bic.w	r3, r3, #2
 8001f24:	61d3      	str	r3, [r2, #28]
}
 8001f26:	bf00      	nop
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020400 	.word	0x40020400

08001f38 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f3c:	b672      	cpsid	i
}
 8001f3e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <Error_Handler+0x8>

08001f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <HAL_MspInit+0x5c>)
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4e:	4a14      	ldr	r2, [pc, #80]	@ (8001fa0 <HAL_MspInit+0x5c>)
 8001f50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f54:	6253      	str	r3, [r2, #36]	@ 0x24
 8001f56:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <HAL_MspInit+0x5c>)
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa0 <HAL_MspInit+0x5c>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa0 <HAL_MspInit+0x5c>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6213      	str	r3, [r2, #32]
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <HAL_MspInit+0x5c>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <HAL_MspInit+0x5c>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	4a08      	ldr	r2, [pc, #32]	@ (8001fa0 <HAL_MspInit+0x5c>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f84:	6253      	str	r3, [r2, #36]	@ 0x24
 8001f86:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_MspInit+0x5c>)
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f92:	2007      	movs	r0, #7
 8001f94:	f000 fb0a 	bl	80025ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a17      	ldr	r2, [pc, #92]	@ (8002020 <HAL_I2C_MspInit+0x7c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d128      	bne.n	8002018 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	4b17      	ldr	r3, [pc, #92]	@ (8002024 <HAL_I2C_MspInit+0x80>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4a16      	ldr	r2, [pc, #88]	@ (8002024 <HAL_I2C_MspInit+0x80>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	61d3      	str	r3, [r2, #28]
 8001fd2:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <HAL_I2C_MspInit+0x80>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe4:	2312      	movs	r3, #18
 8001fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480b      	ldr	r0, [pc, #44]	@ (8002028 <HAL_I2C_MspInit+0x84>)
 8001ffc:	f000 fb18 	bl	8002630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002000:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <HAL_I2C_MspInit+0x80>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	4a07      	ldr	r2, [pc, #28]	@ (8002024 <HAL_I2C_MspInit+0x80>)
 8002006:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800200a:	6253      	str	r3, [r2, #36]	@ 0x24
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_I2C_MspInit+0x80>)
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	@ 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40005400 	.word	0x40005400
 8002024:	40023800 	.word	0x40023800
 8002028:	40020400 	.word	0x40020400

0800202c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	@ 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a17      	ldr	r2, [pc, #92]	@ (80020a8 <HAL_UART_MspInit+0x7c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d127      	bne.n	800209e <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800204e:	4b17      	ldr	r3, [pc, #92]	@ (80020ac <HAL_UART_MspInit+0x80>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	4a16      	ldr	r2, [pc, #88]	@ (80020ac <HAL_UART_MspInit+0x80>)
 8002054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002058:	6253      	str	r3, [r2, #36]	@ 0x24
 800205a:	4b14      	ldr	r3, [pc, #80]	@ (80020ac <HAL_UART_MspInit+0x80>)
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_UART_MspInit+0x80>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a10      	ldr	r2, [pc, #64]	@ (80020ac <HAL_UART_MspInit+0x80>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	61d3      	str	r3, [r2, #28]
 8002072:	4b0e      	ldr	r3, [pc, #56]	@ (80020ac <HAL_UART_MspInit+0x80>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800207e:	230c      	movs	r3, #12
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800208e:	2307      	movs	r3, #7
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	@ (80020b0 <HAL_UART_MspInit+0x84>)
 800209a:	f000 fac9 	bl	8002630 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800209e:	bf00      	nop
 80020a0:	3728      	adds	r7, #40	@ 0x28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40004400 	.word	0x40004400
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40020000 	.word	0x40020000

080020b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <NMI_Handler+0x4>

080020bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <HardFault_Handler+0x4>

080020c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <MemManage_Handler+0x4>

080020cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <BusFault_Handler+0x4>

080020d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <UsageFault_Handler+0x4>

080020dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002104:	f000 f948 	bl	8002398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_ACC_INT_Pin);
 8002110:	2020      	movs	r0, #32
 8002112:	f000 fc35 	bl	8002980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}

0800211a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  return 1;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <_kill>:

int _kill(int pid, int sig)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002132:	f004 fb7d 	bl	8006830 <__errno>
 8002136:	4603      	mov	r3, r0
 8002138:	2216      	movs	r2, #22
 800213a:	601a      	str	r2, [r3, #0]
  return -1;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_exit>:

void _exit (int status)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002150:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ffe7 	bl	8002128 <_kill>
  while (1) {}    /* Make sure we hang here */
 800215a:	bf00      	nop
 800215c:	e7fd      	b.n	800215a <_exit+0x12>

0800215e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e00a      	b.n	8002186 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002170:	f3af 8000 	nop.w
 8002174:	4601      	mov	r1, r0
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	60ba      	str	r2, [r7, #8]
 800217c:	b2ca      	uxtb	r2, r1
 800217e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3301      	adds	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	429a      	cmp	r2, r3
 800218c:	dbf0      	blt.n	8002170 <_read+0x12>
  }

  return len;
 800218e:	687b      	ldr	r3, [r7, #4]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e009      	b.n	80021be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	60ba      	str	r2, [r7, #8]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fcb6 	bl	8001b24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	dbf1      	blt.n	80021aa <_write+0x12>
  }
  return len;
 80021c6:	687b      	ldr	r3, [r7, #4]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_close>:

int _close(int file)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021f6:	605a      	str	r2, [r3, #4]
  return 0;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <_isatty>:

int _isatty(int file)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800220c:	2301      	movs	r3, #1
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002238:	4a14      	ldr	r2, [pc, #80]	@ (800228c <_sbrk+0x5c>)
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <_sbrk+0x60>)
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002244:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <_sbrk+0x64>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <_sbrk+0x64>)
 800224e:	4a12      	ldr	r2, [pc, #72]	@ (8002298 <_sbrk+0x68>)
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	429a      	cmp	r2, r3
 800225e:	d207      	bcs.n	8002270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002260:	f004 fae6 	bl	8006830 <__errno>
 8002264:	4603      	mov	r3, r0
 8002266:	220c      	movs	r2, #12
 8002268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800226e:	e009      	b.n	8002284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002270:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002276:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	4a05      	ldr	r2, [pc, #20]	@ (8002294 <_sbrk+0x64>)
 8002280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002282:	68fb      	ldr	r3, [r7, #12]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20014000 	.word	0x20014000
 8002290:	00000400 	.word	0x00000400
 8002294:	200008e0 	.word	0x200008e0
 8002298:	200010c0 	.word	0x200010c0

0800229c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80022a8:	f7ff fff8 	bl	800229c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022ac:	480b      	ldr	r0, [pc, #44]	@ (80022dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022ae:	490c      	ldr	r1, [pc, #48]	@ (80022e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022b0:	4a0c      	ldr	r2, [pc, #48]	@ (80022e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b4:	e002      	b.n	80022bc <LoopCopyDataInit>

080022b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ba:	3304      	adds	r3, #4

080022bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c0:	d3f9      	bcc.n	80022b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c2:	4a09      	ldr	r2, [pc, #36]	@ (80022e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022c4:	4c09      	ldr	r4, [pc, #36]	@ (80022ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c8:	e001      	b.n	80022ce <LoopFillZerobss>

080022ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022cc:	3204      	adds	r2, #4

080022ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d0:	d3fb      	bcc.n	80022ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022d2:	f004 fab3 	bl	800683c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022d6:	f7ff f90b 	bl	80014f0 <main>
  bx lr
 80022da:	4770      	bx	lr
  ldr r0, =_sdata
 80022dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80022e4:	0800d644 	.word	0x0800d644
  ldr r2, =_sbss
 80022e8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80022ec:	200010c0 	.word	0x200010c0

080022f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <ADC1_IRQHandler>

080022f2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fc:	2003      	movs	r0, #3
 80022fe:	f000 f955 	bl	80025ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002302:	2000      	movs	r0, #0
 8002304:	f000 f80e 	bl	8002324 <HAL_InitTick>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	71fb      	strb	r3, [r7, #7]
 8002312:	e001      	b.n	8002318 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002314:	f7ff fe16 	bl	8001f44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002318:	79fb      	ldrb	r3, [r7, #7]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002330:	4b16      	ldr	r3, [pc, #88]	@ (800238c <HAL_InitTick+0x68>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d022      	beq.n	800237e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002338:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <HAL_InitTick+0x6c>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b13      	ldr	r3, [pc, #76]	@ (800238c <HAL_InitTick+0x68>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002344:	fbb1 f3f3 	udiv	r3, r1, r3
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f962 	bl	8002616 <HAL_SYSTICK_Config>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10f      	bne.n	8002378 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b0f      	cmp	r3, #15
 800235c:	d809      	bhi.n	8002372 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800235e:	2200      	movs	r2, #0
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002366:	f000 f92c 	bl	80025c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800236a:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <HAL_InitTick+0x70>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	e007      	b.n	8002382 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e004      	b.n	8002382 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e001      	b.n	8002382 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000020 	.word	0x20000020
 8002390:	20000018 	.word	0x20000018
 8002394:	2000001c 	.word	0x2000001c

08002398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <HAL_IncTick+0x1c>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <HAL_IncTick+0x20>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	4a03      	ldr	r2, [pc, #12]	@ (80023b4 <HAL_IncTick+0x1c>)
 80023a8:	6013      	str	r3, [r2, #0]
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	200008e4 	.word	0x200008e4
 80023b8:	20000020 	.word	0x20000020

080023bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return uwTick;
 80023c0:	4b02      	ldr	r3, [pc, #8]	@ (80023cc <HAL_GetTick+0x10>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	200008e4 	.word	0x200008e4

080023d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff fff0 	bl	80023bc <HAL_GetTick>
 80023dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023e8:	d004      	beq.n	80023f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ea:	4b09      	ldr	r3, [pc, #36]	@ (8002410 <HAL_Delay+0x40>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4413      	add	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023f4:	bf00      	nop
 80023f6:	f7ff ffe1 	bl	80023bc <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	429a      	cmp	r2, r3
 8002404:	d8f7      	bhi.n	80023f6 <HAL_Delay+0x26>
  {
  }
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000020 	.word	0x20000020

08002414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002424:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002430:	4013      	ands	r3, r2
 8002432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800243c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002446:	4a04      	ldr	r2, [pc, #16]	@ (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	60d3      	str	r3, [r2, #12]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002460:	4b04      	ldr	r3, [pc, #16]	@ (8002474 <__NVIC_GetPriorityGrouping+0x18>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	f003 0307 	and.w	r3, r3, #7
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	2b00      	cmp	r3, #0
 8002488:	db0b      	blt.n	80024a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	f003 021f 	and.w	r2, r3, #31
 8002490:	4906      	ldr	r1, [pc, #24]	@ (80024ac <__NVIC_EnableIRQ+0x34>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	2001      	movs	r0, #1
 800249a:	fa00 f202 	lsl.w	r2, r0, r2
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	@ (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	@ (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	@ 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	@ 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002578:	d301      	bcc.n	800257e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257a:	2301      	movs	r3, #1
 800257c:	e00f      	b.n	800259e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257e:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <SysTick_Config+0x40>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002586:	210f      	movs	r1, #15
 8002588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800258c:	f7ff ff90 	bl	80024b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002590:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <SysTick_Config+0x40>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002596:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <SysTick_Config+0x40>)
 8002598:	2207      	movs	r2, #7
 800259a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	e000e010 	.word	0xe000e010

080025ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff2d 	bl	8002414 <__NVIC_SetPriorityGrouping>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d4:	f7ff ff42 	bl	800245c <__NVIC_GetPriorityGrouping>
 80025d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f7ff ff90 	bl	8002504 <NVIC_EncodePriority>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff5f 	bl	80024b0 <__NVIC_SetPriority>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff35 	bl	8002478 <__NVIC_EnableIRQ>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ffa2 	bl	8002568 <SysTick_Config>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002646:	e160      	b.n	800290a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2101      	movs	r1, #1
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	4013      	ands	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8152 	beq.w	8002904 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b01      	cmp	r3, #1
 800266a:	d005      	beq.n	8002678 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002674:	2b02      	cmp	r3, #2
 8002676:	d130      	bne.n	80026da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80026ae:	2201      	movs	r2, #1
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f003 0201 	and.w	r2, r3, #1
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d017      	beq.n	8002716 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2203      	movs	r2, #3
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d123      	bne.n	800276a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	08da      	lsrs	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3208      	adds	r2, #8
 800272a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	220f      	movs	r2, #15
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	08da      	lsrs	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3208      	adds	r2, #8
 8002764:	6939      	ldr	r1, [r7, #16]
 8002766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	2203      	movs	r2, #3
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0203 	and.w	r2, r3, #3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80ac 	beq.w	8002904 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002928 <HAL_GPIO_Init+0x2f8>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002928 <HAL_GPIO_Init+0x2f8>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	4b5b      	ldr	r3, [pc, #364]	@ (8002928 <HAL_GPIO_Init+0x2f8>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80027c4:	4a59      	ldr	r2, [pc, #356]	@ (800292c <HAL_GPIO_Init+0x2fc>)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3302      	adds	r3, #2
 80027cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	220f      	movs	r2, #15
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a51      	ldr	r2, [pc, #324]	@ (8002930 <HAL_GPIO_Init+0x300>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d025      	beq.n	800283c <HAL_GPIO_Init+0x20c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a50      	ldr	r2, [pc, #320]	@ (8002934 <HAL_GPIO_Init+0x304>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d01f      	beq.n	8002838 <HAL_GPIO_Init+0x208>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a4f      	ldr	r2, [pc, #316]	@ (8002938 <HAL_GPIO_Init+0x308>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d019      	beq.n	8002834 <HAL_GPIO_Init+0x204>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a4e      	ldr	r2, [pc, #312]	@ (800293c <HAL_GPIO_Init+0x30c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <HAL_GPIO_Init+0x200>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a4d      	ldr	r2, [pc, #308]	@ (8002940 <HAL_GPIO_Init+0x310>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00d      	beq.n	800282c <HAL_GPIO_Init+0x1fc>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a4c      	ldr	r2, [pc, #304]	@ (8002944 <HAL_GPIO_Init+0x314>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d007      	beq.n	8002828 <HAL_GPIO_Init+0x1f8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a4b      	ldr	r2, [pc, #300]	@ (8002948 <HAL_GPIO_Init+0x318>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d101      	bne.n	8002824 <HAL_GPIO_Init+0x1f4>
 8002820:	2306      	movs	r3, #6
 8002822:	e00c      	b.n	800283e <HAL_GPIO_Init+0x20e>
 8002824:	2307      	movs	r3, #7
 8002826:	e00a      	b.n	800283e <HAL_GPIO_Init+0x20e>
 8002828:	2305      	movs	r3, #5
 800282a:	e008      	b.n	800283e <HAL_GPIO_Init+0x20e>
 800282c:	2304      	movs	r3, #4
 800282e:	e006      	b.n	800283e <HAL_GPIO_Init+0x20e>
 8002830:	2303      	movs	r3, #3
 8002832:	e004      	b.n	800283e <HAL_GPIO_Init+0x20e>
 8002834:	2302      	movs	r3, #2
 8002836:	e002      	b.n	800283e <HAL_GPIO_Init+0x20e>
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <HAL_GPIO_Init+0x20e>
 800283c:	2300      	movs	r3, #0
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	f002 0203 	and.w	r2, r2, #3
 8002844:	0092      	lsls	r2, r2, #2
 8002846:	4093      	lsls	r3, r2
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800284e:	4937      	ldr	r1, [pc, #220]	@ (800292c <HAL_GPIO_Init+0x2fc>)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	3302      	adds	r3, #2
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800285c:	4b3b      	ldr	r3, [pc, #236]	@ (800294c <HAL_GPIO_Init+0x31c>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	43db      	mvns	r3, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002880:	4a32      	ldr	r2, [pc, #200]	@ (800294c <HAL_GPIO_Init+0x31c>)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002886:	4b31      	ldr	r3, [pc, #196]	@ (800294c <HAL_GPIO_Init+0x31c>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028aa:	4a28      	ldr	r2, [pc, #160]	@ (800294c <HAL_GPIO_Init+0x31c>)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028b0:	4b26      	ldr	r3, [pc, #152]	@ (800294c <HAL_GPIO_Init+0x31c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028d4:	4a1d      	ldr	r2, [pc, #116]	@ (800294c <HAL_GPIO_Init+0x31c>)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028da:	4b1c      	ldr	r3, [pc, #112]	@ (800294c <HAL_GPIO_Init+0x31c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028fe:	4a13      	ldr	r2, [pc, #76]	@ (800294c <HAL_GPIO_Init+0x31c>)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3301      	adds	r3, #1
 8002908:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	f47f ae97 	bne.w	8002648 <HAL_GPIO_Init+0x18>
  }
}
 800291a:	bf00      	nop
 800291c:	bf00      	nop
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	40010000 	.word	0x40010000
 8002930:	40020000 	.word	0x40020000
 8002934:	40020400 	.word	0x40020400
 8002938:	40020800 	.word	0x40020800
 800293c:	40020c00 	.word	0x40020c00
 8002940:	40021000 	.word	0x40021000
 8002944:	40021400 	.word	0x40021400
 8002948:	40021800 	.word	0x40021800
 800294c:	40010400 	.word	0x40010400

08002950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	807b      	strh	r3, [r7, #2]
 800295c:	4613      	mov	r3, r2
 800295e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002960:	787b      	ldrb	r3, [r7, #1]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800296c:	e003      	b.n	8002976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	041a      	lsls	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	619a      	str	r2, [r3, #24]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800298a:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d006      	beq.n	80029a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002996:	4a05      	ldr	r2, [pc, #20]	@ (80029ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff f8d6 	bl	8001b50 <HAL_GPIO_EXTI_Callback>
  }
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40010400 	.word	0x40010400

080029b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e12b      	b.n	8002c1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff fae4 	bl	8001fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	@ 0x24
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a14:	f001 fd5e 	bl	80044d4 <HAL_RCC_GetPCLK1Freq>
 8002a18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a81      	ldr	r2, [pc, #516]	@ (8002c24 <HAL_I2C_Init+0x274>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d807      	bhi.n	8002a34 <HAL_I2C_Init+0x84>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a80      	ldr	r2, [pc, #512]	@ (8002c28 <HAL_I2C_Init+0x278>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	bf94      	ite	ls
 8002a2c:	2301      	movls	r3, #1
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e006      	b.n	8002a42 <HAL_I2C_Init+0x92>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a7d      	ldr	r2, [pc, #500]	@ (8002c2c <HAL_I2C_Init+0x27c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	bf94      	ite	ls
 8002a3c:	2301      	movls	r3, #1
 8002a3e:	2300      	movhi	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0e7      	b.n	8002c1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a78      	ldr	r2, [pc, #480]	@ (8002c30 <HAL_I2C_Init+0x280>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0c9b      	lsrs	r3, r3, #18
 8002a54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a6a      	ldr	r2, [pc, #424]	@ (8002c24 <HAL_I2C_Init+0x274>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d802      	bhi.n	8002a84 <HAL_I2C_Init+0xd4>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3301      	adds	r3, #1
 8002a82:	e009      	b.n	8002a98 <HAL_I2C_Init+0xe8>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	4a69      	ldr	r2, [pc, #420]	@ (8002c34 <HAL_I2C_Init+0x284>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	3301      	adds	r3, #1
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002aaa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	495c      	ldr	r1, [pc, #368]	@ (8002c24 <HAL_I2C_Init+0x274>)
 8002ab4:	428b      	cmp	r3, r1
 8002ab6:	d819      	bhi.n	8002aec <HAL_I2C_Init+0x13c>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1e59      	subs	r1, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac6:	1c59      	adds	r1, r3, #1
 8002ac8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002acc:	400b      	ands	r3, r1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_I2C_Init+0x138>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1e59      	subs	r1, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae6:	e051      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002ae8:	2304      	movs	r3, #4
 8002aea:	e04f      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d111      	bne.n	8002b18 <HAL_I2C_Init+0x168>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	440b      	add	r3, r1
 8002b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e012      	b.n	8002b3e <HAL_I2C_Init+0x18e>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	0099      	lsls	r1, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_I2C_Init+0x196>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e022      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10e      	bne.n	8002b6c <HAL_I2C_Init+0x1bc>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1e58      	subs	r0, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6859      	ldr	r1, [r3, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	440b      	add	r3, r1
 8002b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b6a:	e00f      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e58      	subs	r0, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	0099      	lsls	r1, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	6809      	ldr	r1, [r1, #0]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6911      	ldr	r1, [r2, #16]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	4311      	orrs	r1, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	000186a0 	.word	0x000186a0
 8002c28:	001e847f 	.word	0x001e847f
 8002c2c:	003d08ff 	.word	0x003d08ff
 8002c30:	431bde83 	.word	0x431bde83
 8002c34:	10624dd3 	.word	0x10624dd3

08002c38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	4608      	mov	r0, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	461a      	mov	r2, r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	817b      	strh	r3, [r7, #10]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	813b      	strh	r3, [r7, #8]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c52:	f7ff fbb3 	bl	80023bc <HAL_GetTick>
 8002c56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	f040 80d9 	bne.w	8002e18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	2319      	movs	r3, #25
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	496d      	ldr	r1, [pc, #436]	@ (8002e24 <HAL_I2C_Mem_Write+0x1ec>)
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fc8b 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e0cc      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_I2C_Mem_Write+0x56>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e0c5      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d007      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2221      	movs	r2, #33	@ 0x21
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2240      	movs	r2, #64	@ 0x40
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a3a      	ldr	r2, [r7, #32]
 8002cde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4a4d      	ldr	r2, [pc, #308]	@ (8002e28 <HAL_I2C_Mem_Write+0x1f0>)
 8002cf4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cf6:	88f8      	ldrh	r0, [r7, #6]
 8002cf8:	893a      	ldrh	r2, [r7, #8]
 8002cfa:	8979      	ldrh	r1, [r7, #10]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	4603      	mov	r3, r0
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fac2 	bl	8003290 <I2C_RequestMemoryWrite>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d052      	beq.n	8002db8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e081      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fd50 	bl	80037c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d107      	bne.n	8002d3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06b      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d11b      	bne.n	8002db8 <HAL_I2C_Mem_Write+0x180>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d017      	beq.n	8002db8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1aa      	bne.n	8002d16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fd43 	bl	8003850 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00d      	beq.n	8002dec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d107      	bne.n	8002de8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e016      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	00100002 	.word	0x00100002
 8002e28:	ffff0000 	.word	0xffff0000

08002e2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	@ 0x30
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	817b      	strh	r3, [r7, #10]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	813b      	strh	r3, [r7, #8]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e46:	f7ff fab9 	bl	80023bc <HAL_GetTick>
 8002e4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	f040 8214 	bne.w	8003282 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	2319      	movs	r3, #25
 8002e60:	2201      	movs	r2, #1
 8002e62:	497b      	ldr	r1, [pc, #492]	@ (8003050 <HAL_I2C_Mem_Read+0x224>)
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fb91 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
 8002e72:	e207      	b.n	8003284 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_I2C_Mem_Read+0x56>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e200      	b.n	8003284 <HAL_I2C_Mem_Read+0x458>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d007      	beq.n	8002ea8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2222      	movs	r2, #34	@ 0x22
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2240      	movs	r2, #64	@ 0x40
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ed2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a5b      	ldr	r2, [pc, #364]	@ (8003054 <HAL_I2C_Mem_Read+0x228>)
 8002ee8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eea:	88f8      	ldrh	r0, [r7, #6]
 8002eec:	893a      	ldrh	r2, [r7, #8]
 8002eee:	8979      	ldrh	r1, [r7, #10]
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	4603      	mov	r3, r0
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fa5e 	bl	80033bc <I2C_RequestMemoryRead>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e1bc      	b.n	8003284 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d113      	bne.n	8002f3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	623b      	str	r3, [r7, #32]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	623b      	str	r3, [r7, #32]
 8002f26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e190      	b.n	800325c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d11b      	bne.n	8002f7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	e170      	b.n	800325c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d11b      	bne.n	8002fba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	e150      	b.n	800325c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fd0:	e144      	b.n	800325c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	f200 80f1 	bhi.w	80031be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d123      	bne.n	800302c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fc79 	bl	80038e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e145      	b.n	8003284 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800302a:	e117      	b.n	800325c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003030:	2b02      	cmp	r3, #2
 8003032:	d14e      	bne.n	80030d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303a:	2200      	movs	r2, #0
 800303c:	4906      	ldr	r1, [pc, #24]	@ (8003058 <HAL_I2C_Mem_Read+0x22c>)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 faa4 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e11a      	b.n	8003284 <HAL_I2C_Mem_Read+0x458>
 800304e:	bf00      	nop
 8003050:	00100002 	.word	0x00100002
 8003054:	ffff0000 	.word	0xffff0000
 8003058:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030d0:	e0c4      	b.n	800325c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d8:	2200      	movs	r2, #0
 80030da:	496c      	ldr	r1, [pc, #432]	@ (800328c <HAL_I2C_Mem_Read+0x460>)
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fa55 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0cb      	b.n	8003284 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003134:	2200      	movs	r2, #0
 8003136:	4955      	ldr	r1, [pc, #340]	@ (800328c <HAL_I2C_Mem_Read+0x460>)
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fa27 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e09d      	b.n	8003284 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003156:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031bc:	e04e      	b.n	800325c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fb8c 	bl	80038e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e058      	b.n	8003284 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d124      	bne.n	800325c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003216:	2b03      	cmp	r3, #3
 8003218:	d107      	bne.n	800322a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003228:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	f47f aeb6 	bne.w	8002fd2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	e000      	b.n	8003284 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003282:	2302      	movs	r3, #2
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	3728      	adds	r7, #40	@ 0x28
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	00010004 	.word	0x00010004

08003290 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	4608      	mov	r0, r1
 800329a:	4611      	mov	r1, r2
 800329c:	461a      	mov	r2, r3
 800329e:	4603      	mov	r3, r0
 80032a0:	817b      	strh	r3, [r7, #10]
 80032a2:	460b      	mov	r3, r1
 80032a4:	813b      	strh	r3, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f960 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e0:	d103      	bne.n	80032ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e05f      	b.n	80033ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ee:	897b      	ldrh	r3, [r7, #10]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	6a3a      	ldr	r2, [r7, #32]
 8003302:	492d      	ldr	r1, [pc, #180]	@ (80033b8 <I2C_RequestMemoryWrite+0x128>)
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f9bb 	bl	8003680 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e04c      	b.n	80033ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800332a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800332c:	6a39      	ldr	r1, [r7, #32]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fa46 	bl	80037c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00d      	beq.n	8003356 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	2b04      	cmp	r3, #4
 8003340:	d107      	bne.n	8003352 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003350:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e02b      	b.n	80033ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800335c:	893b      	ldrh	r3, [r7, #8]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	611a      	str	r2, [r3, #16]
 8003366:	e021      	b.n	80033ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003368:	893b      	ldrh	r3, [r7, #8]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	b29b      	uxth	r3, r3
 800336e:	b2da      	uxtb	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003378:	6a39      	ldr	r1, [r7, #32]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fa20 	bl	80037c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	2b04      	cmp	r3, #4
 800338c:	d107      	bne.n	800339e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e005      	b.n	80033ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033a2:	893b      	ldrh	r3, [r7, #8]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	00010002 	.word	0x00010002

080033bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	4608      	mov	r0, r1
 80033c6:	4611      	mov	r1, r2
 80033c8:	461a      	mov	r2, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	817b      	strh	r3, [r7, #10]
 80033ce:	460b      	mov	r3, r1
 80033d0:	813b      	strh	r3, [r7, #8]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f8c2 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800341c:	d103      	bne.n	8003426 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003424:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0aa      	b.n	8003580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800342a:	897b      	ldrh	r3, [r7, #10]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003438:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	6a3a      	ldr	r2, [r7, #32]
 800343e:	4952      	ldr	r1, [pc, #328]	@ (8003588 <I2C_RequestMemoryRead+0x1cc>)
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f91d 	bl	8003680 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e097      	b.n	8003580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003468:	6a39      	ldr	r1, [r7, #32]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f9a8 	bl	80037c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	2b04      	cmp	r3, #4
 800347c:	d107      	bne.n	800348e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800348c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e076      	b.n	8003580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d105      	bne.n	80034a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003498:	893b      	ldrh	r3, [r7, #8]
 800349a:	b2da      	uxtb	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	611a      	str	r2, [r3, #16]
 80034a2:	e021      	b.n	80034e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034a4:	893b      	ldrh	r3, [r7, #8]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b4:	6a39      	ldr	r1, [r7, #32]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f982 	bl	80037c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00d      	beq.n	80034de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d107      	bne.n	80034da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e050      	b.n	8003580 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034de:	893b      	ldrh	r3, [r7, #8]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ea:	6a39      	ldr	r1, [r7, #32]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f967 	bl	80037c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00d      	beq.n	8003514 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d107      	bne.n	8003510 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e035      	b.n	8003580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003522:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	2200      	movs	r2, #0
 800352c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f82b 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00d      	beq.n	8003558 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800354a:	d103      	bne.n	8003554 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003552:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e013      	b.n	8003580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003558:	897b      	ldrh	r3, [r7, #10]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	b2da      	uxtb	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	6a3a      	ldr	r2, [r7, #32]
 800356c:	4906      	ldr	r1, [pc, #24]	@ (8003588 <I2C_RequestMemoryRead+0x1cc>)
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f886 	bl	8003680 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	00010002 	.word	0x00010002

0800358c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800359c:	e048      	b.n	8003630 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035a4:	d044      	beq.n	8003630 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7fe ff09 	bl	80023bc <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d139      	bne.n	8003630 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	0c1b      	lsrs	r3, r3, #16
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d10d      	bne.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	43da      	mvns	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4013      	ands	r3, r2
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	e00c      	b.n	80035fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	43da      	mvns	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4013      	ands	r3, r2
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d116      	bne.n	8003630 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e023      	b.n	8003678 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b01      	cmp	r3, #1
 8003638:	d10d      	bne.n	8003656 <I2C_WaitOnFlagUntilTimeout+0xca>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	43da      	mvns	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4013      	ands	r3, r2
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	bf0c      	ite	eq
 800364c:	2301      	moveq	r3, #1
 800364e:	2300      	movne	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	e00c      	b.n	8003670 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	43da      	mvns	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4013      	ands	r3, r2
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	bf0c      	ite	eq
 8003668:	2301      	moveq	r3, #1
 800366a:	2300      	movne	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	429a      	cmp	r2, r3
 8003674:	d093      	beq.n	800359e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800368e:	e071      	b.n	8003774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369e:	d123      	bne.n	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	f043 0204 	orr.w	r2, r3, #4
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e067      	b.n	80037b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ee:	d041      	beq.n	8003774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f0:	f7fe fe64 	bl	80023bc <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d302      	bcc.n	8003706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d136      	bne.n	8003774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10c      	bne.n	800372a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4013      	ands	r3, r2
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	bf14      	ite	ne
 8003722:	2301      	movne	r3, #1
 8003724:	2300      	moveq	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	e00b      	b.n	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	43da      	mvns	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4013      	ands	r3, r2
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf14      	ite	ne
 800373c:	2301      	movne	r3, #1
 800373e:	2300      	moveq	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d016      	beq.n	8003774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	f043 0220 	orr.w	r2, r3, #32
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e021      	b.n	80037b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	0c1b      	lsrs	r3, r3, #16
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d10c      	bne.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	43da      	mvns	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4013      	ands	r3, r2
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e00b      	b.n	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4013      	ands	r3, r2
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f47f af6d 	bne.w	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037cc:	e034      	b.n	8003838 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f8e3 	bl	800399a <I2C_IsAcknowledgeFailed>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e034      	b.n	8003848 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037e4:	d028      	beq.n	8003838 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e6:	f7fe fde9 	bl	80023bc <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d302      	bcc.n	80037fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d11d      	bne.n	8003838 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003806:	2b80      	cmp	r3, #128	@ 0x80
 8003808:	d016      	beq.n	8003838 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e007      	b.n	8003848 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003842:	2b80      	cmp	r3, #128	@ 0x80
 8003844:	d1c3      	bne.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800385c:	e034      	b.n	80038c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f89b 	bl	800399a <I2C_IsAcknowledgeFailed>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e034      	b.n	80038d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003874:	d028      	beq.n	80038c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003876:	f7fe fda1 	bl	80023bc <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	d302      	bcc.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d11d      	bne.n	80038c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b04      	cmp	r3, #4
 8003898:	d016      	beq.n	80038c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	f043 0220 	orr.w	r2, r3, #32
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e007      	b.n	80038d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d1c3      	bne.n	800385e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038ec:	e049      	b.n	8003982 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d119      	bne.n	8003930 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0210 	mvn.w	r2, #16
 8003904:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e030      	b.n	8003992 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003930:	f7fe fd44 	bl	80023bc <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d11d      	bne.n	8003982 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003950:	2b40      	cmp	r3, #64	@ 0x40
 8003952:	d016      	beq.n	8003982 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	f043 0220 	orr.w	r2, r3, #32
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e007      	b.n	8003992 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398c:	2b40      	cmp	r3, #64	@ 0x40
 800398e:	d1ae      	bne.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039b0:	d11b      	bne.n	80039ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	f043 0204 	orr.w	r2, r3, #4
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e31d      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0a:	4b94      	ldr	r3, [pc, #592]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a14:	4b91      	ldr	r3, [pc, #580]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a1c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d07b      	beq.n	8003b22 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d006      	beq.n	8003a3e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d10f      	bne.n	8003a56 <HAL_RCC_OscConfig+0x5e>
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a3c:	d10b      	bne.n	8003a56 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3e:	4b87      	ldr	r3, [pc, #540]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d06a      	beq.n	8003b20 <HAL_RCC_OscConfig+0x128>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d166      	bne.n	8003b20 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e2f7      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d106      	bne.n	8003a6c <HAL_RCC_OscConfig+0x74>
 8003a5e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a7e      	ldr	r2, [pc, #504]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e02d      	b.n	8003ac8 <HAL_RCC_OscConfig+0xd0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10c      	bne.n	8003a8e <HAL_RCC_OscConfig+0x96>
 8003a74:	4b79      	ldr	r3, [pc, #484]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a78      	ldr	r2, [pc, #480]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b76      	ldr	r3, [pc, #472]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a75      	ldr	r2, [pc, #468]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	e01c      	b.n	8003ac8 <HAL_RCC_OscConfig+0xd0>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0xb8>
 8003a96:	4b71      	ldr	r3, [pc, #452]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a70      	ldr	r2, [pc, #448]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003a9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b6e      	ldr	r3, [pc, #440]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a6d      	ldr	r2, [pc, #436]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCC_OscConfig+0xd0>
 8003ab0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a69      	ldr	r2, [pc, #420]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b67      	ldr	r3, [pc, #412]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a66      	ldr	r2, [pc, #408]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fe fc74 	bl	80023bc <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fe fc70 	bl	80023bc <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	@ 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e2ad      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aea:	4b5c      	ldr	r3, [pc, #368]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xe0>
 8003af6:	e014      	b.n	8003b22 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7fe fc60 	bl	80023bc <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fe fc5c 	bl	80023bc <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	@ 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e299      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b12:	4b52      	ldr	r3, [pc, #328]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x108>
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d05a      	beq.n	8003be4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	d119      	bne.n	8003b6e <HAL_RCC_OscConfig+0x176>
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d116      	bne.n	8003b6e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b40:	4b46      	ldr	r3, [pc, #280]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_OscConfig+0x160>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e276      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b40      	ldr	r3, [pc, #256]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	493d      	ldr	r1, [pc, #244]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6c:	e03a      	b.n	8003be4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d020      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b76:	4b3a      	ldr	r3, [pc, #232]	@ (8003c60 <HAL_RCC_OscConfig+0x268>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fe fc1e 	bl	80023bc <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b84:	f7fe fc1a 	bl	80023bc <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e257      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b96:	4b31      	ldr	r3, [pc, #196]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	492a      	ldr	r1, [pc, #168]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
 8003bb6:	e015      	b.n	8003be4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb8:	4b29      	ldr	r3, [pc, #164]	@ (8003c60 <HAL_RCC_OscConfig+0x268>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fe fbfd 	bl	80023bc <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc6:	f7fe fbf9 	bl	80023bc <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e236      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bd8:	4b20      	ldr	r3, [pc, #128]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f0      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 80b8 	beq.w	8003d62 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d170      	bne.n	8003cda <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bf8:	4b18      	ldr	r3, [pc, #96]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_OscConfig+0x218>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e21a      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1a      	ldr	r2, [r3, #32]
 8003c14:	4b11      	ldr	r3, [pc, #68]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d921      	bls.n	8003c64 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fc7d 	bl	8004524 <RCC_SetFlashLatencyFromMSIRange>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e208      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c34:	4b09      	ldr	r3, [pc, #36]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	4906      	ldr	r1, [pc, #24]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c46:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	061b      	lsls	r3, r3, #24
 8003c54:	4901      	ldr	r1, [pc, #4]	@ (8003c5c <HAL_RCC_OscConfig+0x264>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
 8003c5a:	e020      	b.n	8003c9e <HAL_RCC_OscConfig+0x2a6>
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c64:	4b99      	ldr	r3, [pc, #612]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	4996      	ldr	r1, [pc, #600]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c76:	4b95      	ldr	r3, [pc, #596]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	061b      	lsls	r3, r3, #24
 8003c84:	4991      	ldr	r1, [pc, #580]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fc48 	bl	8004524 <RCC_SetFlashLatencyFromMSIRange>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e1d3      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	0b5b      	lsrs	r3, r3, #13
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003cae:	4a87      	ldr	r2, [pc, #540]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003cb0:	6892      	ldr	r2, [r2, #8]
 8003cb2:	0912      	lsrs	r2, r2, #4
 8003cb4:	f002 020f 	and.w	r2, r2, #15
 8003cb8:	4985      	ldr	r1, [pc, #532]	@ (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003cba:	5c8a      	ldrb	r2, [r1, r2]
 8003cbc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cbe:	4a85      	ldr	r2, [pc, #532]	@ (8003ed4 <HAL_RCC_OscConfig+0x4dc>)
 8003cc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cc2:	4b85      	ldr	r3, [pc, #532]	@ (8003ed8 <HAL_RCC_OscConfig+0x4e0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe fb2c 	bl	8002324 <HAL_InitTick>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d045      	beq.n	8003d62 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	e1b5      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d029      	beq.n	8003d36 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ce2:	4b7e      	ldr	r3, [pc, #504]	@ (8003edc <HAL_RCC_OscConfig+0x4e4>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fe fb68 	bl	80023bc <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cf0:	f7fe fb64 	bl	80023bc <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e1a1      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d02:	4b72      	ldr	r3, [pc, #456]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	496c      	ldr	r1, [pc, #432]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d20:	4b6a      	ldr	r3, [pc, #424]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	4967      	ldr	r1, [pc, #412]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
 8003d34:	e015      	b.n	8003d62 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d36:	4b69      	ldr	r3, [pc, #420]	@ (8003edc <HAL_RCC_OscConfig+0x4e4>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fe fb3e 	bl	80023bc <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d44:	f7fe fb3a 	bl	80023bc <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e177      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d56:	4b5d      	ldr	r3, [pc, #372]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d030      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d016      	beq.n	8003da4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4b5a      	ldr	r3, [pc, #360]	@ (8003ee0 <HAL_RCC_OscConfig+0x4e8>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7c:	f7fe fb1e 	bl	80023bc <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d84:	f7fe fb1a 	bl	80023bc <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e157      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d96:	4b4d      	ldr	r3, [pc, #308]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x38c>
 8003da2:	e015      	b.n	8003dd0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da4:	4b4e      	ldr	r3, [pc, #312]	@ (8003ee0 <HAL_RCC_OscConfig+0x4e8>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003daa:	f7fe fb07 	bl	80023bc <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db2:	f7fe fb03 	bl	80023bc <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e140      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dc4:	4b41      	ldr	r3, [pc, #260]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f0      	bne.n	8003db2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80b5 	beq.w	8003f48 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de2:	4b3a      	ldr	r3, [pc, #232]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10d      	bne.n	8003e0a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dee:	4b37      	ldr	r3, [pc, #220]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	4a36      	ldr	r2, [pc, #216]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df8:	6253      	str	r3, [r2, #36]	@ 0x24
 8003dfa:	4b34      	ldr	r3, [pc, #208]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e06:	2301      	movs	r3, #1
 8003e08:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	4b36      	ldr	r3, [pc, #216]	@ (8003ee4 <HAL_RCC_OscConfig+0x4ec>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d118      	bne.n	8003e48 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e16:	4b33      	ldr	r3, [pc, #204]	@ (8003ee4 <HAL_RCC_OscConfig+0x4ec>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a32      	ldr	r2, [pc, #200]	@ (8003ee4 <HAL_RCC_OscConfig+0x4ec>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e22:	f7fe facb 	bl	80023bc <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2a:	f7fe fac7 	bl	80023bc <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b64      	cmp	r3, #100	@ 0x64
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e104      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	4b29      	ldr	r3, [pc, #164]	@ (8003ee4 <HAL_RCC_OscConfig+0x4ec>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d106      	bne.n	8003e5e <HAL_RCC_OscConfig+0x466>
 8003e50:	4b1e      	ldr	r3, [pc, #120]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e54:	4a1d      	ldr	r2, [pc, #116]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5a:	6353      	str	r3, [r2, #52]	@ 0x34
 8003e5c:	e02d      	b.n	8003eba <HAL_RCC_OscConfig+0x4c2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x488>
 8003e66:	4b19      	ldr	r3, [pc, #100]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6a:	4a18      	ldr	r2, [pc, #96]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e70:	6353      	str	r3, [r2, #52]	@ 0x34
 8003e72:	4b16      	ldr	r3, [pc, #88]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e76:	4a15      	ldr	r2, [pc, #84]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003e78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e7c:	6353      	str	r3, [r2, #52]	@ 0x34
 8003e7e:	e01c      	b.n	8003eba <HAL_RCC_OscConfig+0x4c2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b05      	cmp	r3, #5
 8003e86:	d10c      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x4aa>
 8003e88:	4b10      	ldr	r3, [pc, #64]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e92:	6353      	str	r3, [r2, #52]	@ 0x34
 8003e94:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e98:	4a0c      	ldr	r2, [pc, #48]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e9e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003ea0:	e00b      	b.n	8003eba <HAL_RCC_OscConfig+0x4c2>
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea6:	4a09      	ldr	r2, [pc, #36]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eac:	6353      	str	r3, [r2, #52]	@ 0x34
 8003eae:	4b07      	ldr	r3, [pc, #28]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb2:	4a06      	ldr	r2, [pc, #24]	@ (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003eb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eb8:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d024      	beq.n	8003f0c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec2:	f7fe fa7b 	bl	80023bc <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ec8:	e019      	b.n	8003efe <HAL_RCC_OscConfig+0x506>
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	0800d284 	.word	0x0800d284
 8003ed4:	20000018 	.word	0x20000018
 8003ed8:	2000001c 	.word	0x2000001c
 8003edc:	42470020 	.word	0x42470020
 8003ee0:	42470680 	.word	0x42470680
 8003ee4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fe fa68 	bl	80023bc <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0a3      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003efe:	4b54      	ldr	r3, [pc, #336]	@ (8004050 <HAL_RCC_OscConfig+0x658>)
 8003f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0ee      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x4f0>
 8003f0a:	e014      	b.n	8003f36 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0c:	f7fe fa56 	bl	80023bc <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f14:	f7fe fa52 	bl	80023bc <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e08d      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f2a:	4b49      	ldr	r3, [pc, #292]	@ (8004050 <HAL_RCC_OscConfig+0x658>)
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1ee      	bne.n	8003f14 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f36:	7ffb      	ldrb	r3, [r7, #31]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d105      	bne.n	8003f48 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3c:	4b44      	ldr	r3, [pc, #272]	@ (8004050 <HAL_RCC_OscConfig+0x658>)
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	4a43      	ldr	r2, [pc, #268]	@ (8004050 <HAL_RCC_OscConfig+0x658>)
 8003f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f46:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d079      	beq.n	8004044 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b0c      	cmp	r3, #12
 8003f54:	d056      	beq.n	8004004 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d13b      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004054 <HAL_RCC_OscConfig+0x65c>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fe fa2a 	bl	80023bc <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7fe fa26 	bl	80023bc <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e063      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f7e:	4b34      	ldr	r3, [pc, #208]	@ (8004050 <HAL_RCC_OscConfig+0x658>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f8a:	4b31      	ldr	r3, [pc, #196]	@ (8004050 <HAL_RCC_OscConfig+0x658>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9a:	4319      	orrs	r1, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	492b      	ldr	r1, [pc, #172]	@ (8004050 <HAL_RCC_OscConfig+0x658>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8004054 <HAL_RCC_OscConfig+0x65c>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fae:	f7fe fa05 	bl	80023bc <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb6:	f7fe fa01 	bl	80023bc <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e03e      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fc8:	4b21      	ldr	r3, [pc, #132]	@ (8004050 <HAL_RCC_OscConfig+0x658>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x5be>
 8003fd4:	e036      	b.n	8004044 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8004054 <HAL_RCC_OscConfig+0x65c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fe f9ee 	bl	80023bc <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fe f9ea 	bl	80023bc <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e027      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ff6:	4b16      	ldr	r3, [pc, #88]	@ (8004050 <HAL_RCC_OscConfig+0x658>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5ec>
 8004002:	e01f      	b.n	8004044 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e01a      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004010:	4b0f      	ldr	r3, [pc, #60]	@ (8004050 <HAL_RCC_OscConfig+0x658>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004020:	429a      	cmp	r2, r3
 8004022:	d10d      	bne.n	8004040 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d106      	bne.n	8004040 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800
 8004054:	42470060 	.word	0x42470060

08004058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e11a      	b.n	80042a2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800406c:	4b8f      	ldr	r3, [pc, #572]	@ (80042ac <HAL_RCC_ClockConfig+0x254>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d919      	bls.n	80040ae <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d105      	bne.n	800408c <HAL_RCC_ClockConfig+0x34>
 8004080:	4b8a      	ldr	r3, [pc, #552]	@ (80042ac <HAL_RCC_ClockConfig+0x254>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a89      	ldr	r2, [pc, #548]	@ (80042ac <HAL_RCC_ClockConfig+0x254>)
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	4b87      	ldr	r3, [pc, #540]	@ (80042ac <HAL_RCC_ClockConfig+0x254>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f023 0201 	bic.w	r2, r3, #1
 8004094:	4985      	ldr	r1, [pc, #532]	@ (80042ac <HAL_RCC_ClockConfig+0x254>)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	4313      	orrs	r3, r2
 800409a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409c:	4b83      	ldr	r3, [pc, #524]	@ (80042ac <HAL_RCC_ClockConfig+0x254>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d001      	beq.n	80040ae <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e0f9      	b.n	80042a2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d008      	beq.n	80040cc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ba:	4b7d      	ldr	r3, [pc, #500]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	497a      	ldr	r1, [pc, #488]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 808e 	beq.w	80041f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040e2:	4b73      	ldr	r3, [pc, #460]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d121      	bne.n	8004132 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0d7      	b.n	80042a2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040fa:	4b6d      	ldr	r3, [pc, #436]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d115      	bne.n	8004132 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0cb      	b.n	80042a2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004112:	4b67      	ldr	r3, [pc, #412]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e0bf      	b.n	80042a2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004122:	4b63      	ldr	r3, [pc, #396]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e0b7      	b.n	80042a2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004132:	4b5f      	ldr	r3, [pc, #380]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f023 0203 	bic.w	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	495c      	ldr	r1, [pc, #368]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 8004140:	4313      	orrs	r3, r2
 8004142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004144:	f7fe f93a 	bl	80023bc <HAL_GetTick>
 8004148:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d112      	bne.n	8004178 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004152:	e00a      	b.n	800416a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004154:	f7fe f932 	bl	80023bc <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e09b      	b.n	80042a2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800416a:	4b51      	ldr	r3, [pc, #324]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b08      	cmp	r3, #8
 8004174:	d1ee      	bne.n	8004154 <HAL_RCC_ClockConfig+0xfc>
 8004176:	e03e      	b.n	80041f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d112      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004180:	e00a      	b.n	8004198 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004182:	f7fe f91b 	bl	80023bc <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e084      	b.n	80042a2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004198:	4b45      	ldr	r3, [pc, #276]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b0c      	cmp	r3, #12
 80041a2:	d1ee      	bne.n	8004182 <HAL_RCC_ClockConfig+0x12a>
 80041a4:	e027      	b.n	80041f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d11d      	bne.n	80041ea <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b0:	f7fe f904 	bl	80023bc <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e06d      	b.n	80042a2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c6:	4b3a      	ldr	r3, [pc, #232]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d1ee      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x158>
 80041d2:	e010      	b.n	80041f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d4:	f7fe f8f2 	bl	80023bc <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e05b      	b.n	80042a2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80041ea:	4b31      	ldr	r3, [pc, #196]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ee      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f6:	4b2d      	ldr	r3, [pc, #180]	@ (80042ac <HAL_RCC_ClockConfig+0x254>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d219      	bcs.n	8004238 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <HAL_RCC_ClockConfig+0x1be>
 800420a:	4b28      	ldr	r3, [pc, #160]	@ (80042ac <HAL_RCC_ClockConfig+0x254>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a27      	ldr	r2, [pc, #156]	@ (80042ac <HAL_RCC_ClockConfig+0x254>)
 8004210:	f043 0304 	orr.w	r3, r3, #4
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	4b25      	ldr	r3, [pc, #148]	@ (80042ac <HAL_RCC_ClockConfig+0x254>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 0201 	bic.w	r2, r3, #1
 800421e:	4923      	ldr	r1, [pc, #140]	@ (80042ac <HAL_RCC_ClockConfig+0x254>)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b21      	ldr	r3, [pc, #132]	@ (80042ac <HAL_RCC_ClockConfig+0x254>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e034      	b.n	80042a2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004244:	4b1a      	ldr	r3, [pc, #104]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4917      	ldr	r1, [pc, #92]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004262:	4b13      	ldr	r3, [pc, #76]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	490f      	ldr	r1, [pc, #60]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 8004272:	4313      	orrs	r3, r2
 8004274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004276:	f000 f823 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 800427a:	4602      	mov	r2, r0
 800427c:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <HAL_RCC_ClockConfig+0x258>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	490b      	ldr	r1, [pc, #44]	@ (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 8004288:	5ccb      	ldrb	r3, [r1, r3]
 800428a:	fa22 f303 	lsr.w	r3, r2, r3
 800428e:	4a0a      	ldr	r2, [pc, #40]	@ (80042b8 <HAL_RCC_ClockConfig+0x260>)
 8004290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004292:	4b0a      	ldr	r3, [pc, #40]	@ (80042bc <HAL_RCC_ClockConfig+0x264>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe f844 	bl	8002324 <HAL_InitTick>
 800429c:	4603      	mov	r3, r0
 800429e:	72fb      	strb	r3, [r7, #11]

  return status;
 80042a0:	7afb      	ldrb	r3, [r7, #11]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40023c00 	.word	0x40023c00
 80042b0:	40023800 	.word	0x40023800
 80042b4:	0800d284 	.word	0x0800d284
 80042b8:	20000018 	.word	0x20000018
 80042bc:	2000001c 	.word	0x2000001c

080042c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c4:	b092      	sub	sp, #72	@ 0x48
 80042c6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80042c8:	4b79      	ldr	r3, [pc, #484]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	d00d      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x34>
 80042d8:	2b0c      	cmp	r3, #12
 80042da:	f200 80d5 	bhi.w	8004488 <HAL_RCC_GetSysClockFreq+0x1c8>
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d002      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x28>
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d003      	beq.n	80042ee <HAL_RCC_GetSysClockFreq+0x2e>
 80042e6:	e0cf      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e8:	4b72      	ldr	r3, [pc, #456]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80042ea:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80042ec:	e0da      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042ee:	4b72      	ldr	r3, [pc, #456]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80042f0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80042f2:	e0d7      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80042f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f6:	0c9b      	lsrs	r3, r3, #18
 80042f8:	f003 020f 	and.w	r2, r3, #15
 80042fc:	4b6f      	ldr	r3, [pc, #444]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80042fe:	5c9b      	ldrb	r3, [r3, r2]
 8004300:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004304:	0d9b      	lsrs	r3, r3, #22
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	3301      	adds	r3, #1
 800430c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800430e:	4b68      	ldr	r3, [pc, #416]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d05d      	beq.n	80043d6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800431a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431c:	2200      	movs	r2, #0
 800431e:	4618      	mov	r0, r3
 8004320:	4611      	mov	r1, r2
 8004322:	4604      	mov	r4, r0
 8004324:	460d      	mov	r5, r1
 8004326:	4622      	mov	r2, r4
 8004328:	462b      	mov	r3, r5
 800432a:	f04f 0000 	mov.w	r0, #0
 800432e:	f04f 0100 	mov.w	r1, #0
 8004332:	0159      	lsls	r1, r3, #5
 8004334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004338:	0150      	lsls	r0, r2, #5
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4621      	mov	r1, r4
 8004340:	1a51      	subs	r1, r2, r1
 8004342:	6139      	str	r1, [r7, #16]
 8004344:	4629      	mov	r1, r5
 8004346:	eb63 0301 	sbc.w	r3, r3, r1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004358:	4659      	mov	r1, fp
 800435a:	018b      	lsls	r3, r1, #6
 800435c:	4651      	mov	r1, sl
 800435e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004362:	4651      	mov	r1, sl
 8004364:	018a      	lsls	r2, r1, #6
 8004366:	46d4      	mov	ip, sl
 8004368:	ebb2 080c 	subs.w	r8, r2, ip
 800436c:	4659      	mov	r1, fp
 800436e:	eb63 0901 	sbc.w	r9, r3, r1
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800437e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004386:	4690      	mov	r8, r2
 8004388:	4699      	mov	r9, r3
 800438a:	4623      	mov	r3, r4
 800438c:	eb18 0303 	adds.w	r3, r8, r3
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	462b      	mov	r3, r5
 8004394:	eb49 0303 	adc.w	r3, r9, r3
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043a6:	4629      	mov	r1, r5
 80043a8:	024b      	lsls	r3, r1, #9
 80043aa:	4620      	mov	r0, r4
 80043ac:	4629      	mov	r1, r5
 80043ae:	4604      	mov	r4, r0
 80043b0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80043b4:	4601      	mov	r1, r0
 80043b6:	024a      	lsls	r2, r1, #9
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043be:	2200      	movs	r2, #0
 80043c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043c8:	f7fc fef6 	bl	80011b8 <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4613      	mov	r3, r2
 80043d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d4:	e055      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d8:	2200      	movs	r2, #0
 80043da:	623b      	str	r3, [r7, #32]
 80043dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80043de:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043e2:	4642      	mov	r2, r8
 80043e4:	464b      	mov	r3, r9
 80043e6:	f04f 0000 	mov.w	r0, #0
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	0159      	lsls	r1, r3, #5
 80043f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f4:	0150      	lsls	r0, r2, #5
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	46c4      	mov	ip, r8
 80043fc:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004400:	4640      	mov	r0, r8
 8004402:	4649      	mov	r1, r9
 8004404:	468c      	mov	ip, r1
 8004406:	eb63 0b0c 	sbc.w	fp, r3, ip
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004416:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800441a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800441e:	ebb2 040a 	subs.w	r4, r2, sl
 8004422:	eb63 050b 	sbc.w	r5, r3, fp
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	00eb      	lsls	r3, r5, #3
 8004430:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004434:	00e2      	lsls	r2, r4, #3
 8004436:	4614      	mov	r4, r2
 8004438:	461d      	mov	r5, r3
 800443a:	4603      	mov	r3, r0
 800443c:	18e3      	adds	r3, r4, r3
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	460b      	mov	r3, r1
 8004442:	eb45 0303 	adc.w	r3, r5, r3
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004454:	4629      	mov	r1, r5
 8004456:	028b      	lsls	r3, r1, #10
 8004458:	4620      	mov	r0, r4
 800445a:	4629      	mov	r1, r5
 800445c:	4604      	mov	r4, r0
 800445e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004462:	4601      	mov	r1, r0
 8004464:	028a      	lsls	r2, r1, #10
 8004466:	4610      	mov	r0, r2
 8004468:	4619      	mov	r1, r3
 800446a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446c:	2200      	movs	r2, #0
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	61fa      	str	r2, [r7, #28]
 8004472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004476:	f7fc fe9f 	bl	80011b8 <__aeabi_uldivmod>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4613      	mov	r3, r2
 8004480:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8004482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004484:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004486:	e00d      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004488:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	0b5b      	lsrs	r3, r3, #13
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004496:	3301      	adds	r3, #1
 8004498:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80044a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3748      	adds	r7, #72	@ 0x48
 80044aa:	46bd      	mov	sp, r7
 80044ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b0:	40023800 	.word	0x40023800
 80044b4:	00f42400 	.word	0x00f42400
 80044b8:	007a1200 	.word	0x007a1200
 80044bc:	0800d278 	.word	0x0800d278

080044c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c4:	4b02      	ldr	r3, [pc, #8]	@ (80044d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80044c6:	681b      	ldr	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr
 80044d0:	20000018 	.word	0x20000018

080044d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044d8:	f7ff fff2 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 80044dc:	4602      	mov	r2, r0
 80044de:	4b05      	ldr	r3, [pc, #20]	@ (80044f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	4903      	ldr	r1, [pc, #12]	@ (80044f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ea:	5ccb      	ldrb	r3, [r1, r3]
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40023800 	.word	0x40023800
 80044f8:	0800d294 	.word	0x0800d294

080044fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004500:	f7ff ffde 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b05      	ldr	r3, [pc, #20]	@ (800451c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	0adb      	lsrs	r3, r3, #11
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4903      	ldr	r1, [pc, #12]	@ (8004520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004512:	5ccb      	ldrb	r3, [r1, r3]
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004518:	4618      	mov	r0, r3
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40023800 	.word	0x40023800
 8004520:	0800d294 	.word	0x0800d294

08004524 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004530:	4b29      	ldr	r3, [pc, #164]	@ (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d12c      	bne.n	8004596 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800453c:	4b26      	ldr	r3, [pc, #152]	@ (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004548:	4b24      	ldr	r3, [pc, #144]	@ (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	e016      	b.n	8004582 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004554:	4b20      	ldr	r3, [pc, #128]	@ (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	4a1f      	ldr	r2, [pc, #124]	@ (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800455a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800455e:	6253      	str	r3, [r2, #36]	@ 0x24
 8004560:	4b1d      	ldr	r3, [pc, #116]	@ (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800456c:	4b1b      	ldr	r3, [pc, #108]	@ (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004574:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004576:	4b18      	ldr	r3, [pc, #96]	@ (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	4a17      	ldr	r2, [pc, #92]	@ (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800457c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004580:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004588:	d105      	bne.n	8004596 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004590:	d101      	bne.n	8004596 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004592:	2301      	movs	r3, #1
 8004594:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d105      	bne.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800459c:	4b10      	ldr	r3, [pc, #64]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0f      	ldr	r2, [pc, #60]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045a2:	f043 0304 	orr.w	r3, r3, #4
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	4b0d      	ldr	r3, [pc, #52]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 0201 	bic.w	r2, r3, #1
 80045b0:	490b      	ldr	r1, [pc, #44]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045b8:	4b09      	ldr	r3, [pc, #36]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d001      	beq.n	80045ca <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40007000 	.word	0x40007000
 80045e0:	40023c00 	.word	0x40023c00

080045e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e042      	b.n	800467c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fd fd0e 	bl	800202c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	@ 0x24
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f971 	bl	8004910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800463c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800464c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800465c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	@ 0x28
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d175      	bne.n	8004790 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2c>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e06e      	b.n	8004792 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2221      	movs	r2, #33	@ 0x21
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046c2:	f7fd fe7b 	bl	80023bc <HAL_GetTick>
 80046c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	88fa      	ldrh	r2, [r7, #6]
 80046cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	88fa      	ldrh	r2, [r7, #6]
 80046d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046dc:	d108      	bne.n	80046f0 <HAL_UART_Transmit+0x6c>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d104      	bne.n	80046f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e003      	b.n	80046f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046f8:	e02e      	b.n	8004758 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	2180      	movs	r1, #128	@ 0x80
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f848 	bl	800479a <UART_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e03a      	b.n	8004792 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	3302      	adds	r3, #2
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	e007      	b.n	800474a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	3301      	adds	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1cb      	bne.n	80046fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2200      	movs	r2, #0
 800476a:	2140      	movs	r1, #64	@ 0x40
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f814 	bl	800479a <UART_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e006      	b.n	8004792 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004790:	2302      	movs	r3, #2
  }
}
 8004792:	4618      	mov	r0, r3
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b086      	sub	sp, #24
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	4613      	mov	r3, r2
 80047a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047aa:	e03b      	b.n	8004824 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047b2:	d037      	beq.n	8004824 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b4:	f7fd fe02 	bl	80023bc <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d302      	bcc.n	80047ca <UART_WaitOnFlagUntilTimeout+0x30>
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e03a      	b.n	8004844 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d023      	beq.n	8004824 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b80      	cmp	r3, #128	@ 0x80
 80047e0:	d020      	beq.n	8004824 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b40      	cmp	r3, #64	@ 0x40
 80047e6:	d01d      	beq.n	8004824 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d116      	bne.n	8004824 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f81d 	bl	800484c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2208      	movs	r2, #8
 8004816:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e00f      	b.n	8004844 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4013      	ands	r3, r2
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	429a      	cmp	r2, r3
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	429a      	cmp	r2, r3
 8004840:	d0b4      	beq.n	80047ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800484c:	b480      	push	{r7}
 800484e:	b095      	sub	sp, #84	@ 0x54
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	330c      	adds	r3, #12
 800485a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800486a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	330c      	adds	r3, #12
 8004872:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004874:	643a      	str	r2, [r7, #64]	@ 0x40
 8004876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800487a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e5      	bne.n	8004854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3314      	adds	r3, #20
 800488e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	61fb      	str	r3, [r7, #28]
   return(result);
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3314      	adds	r3, #20
 80048a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e5      	bne.n	8004888 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d119      	bne.n	80048f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	330c      	adds	r3, #12
 80048ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f023 0310 	bic.w	r3, r3, #16
 80048da:	647b      	str	r3, [r7, #68]	@ 0x44
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048e4:	61ba      	str	r2, [r7, #24]
 80048e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6979      	ldr	r1, [r7, #20]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	613b      	str	r3, [r7, #16]
   return(result);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e5      	bne.n	80048c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004906:	bf00      	nop
 8004908:	3754      	adds	r7, #84	@ 0x54
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr

08004910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	4313      	orrs	r3, r2
 8004944:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004950:	f023 030c 	bic.w	r3, r3, #12
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	430b      	orrs	r3, r1
 800495c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699a      	ldr	r2, [r3, #24]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a55      	ldr	r2, [pc, #340]	@ (8004ad0 <UART_SetConfig+0x1c0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d103      	bne.n	8004986 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800497e:	f7ff fdbd 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	e002      	b.n	800498c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004986:	f7ff fda5 	bl	80044d4 <HAL_RCC_GetPCLK1Freq>
 800498a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004994:	d14c      	bne.n	8004a30 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009a      	lsls	r2, r3, #2
 80049a0:	441a      	add	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	4a49      	ldr	r2, [pc, #292]	@ (8004ad4 <UART_SetConfig+0x1c4>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	0119      	lsls	r1, r3, #4
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	009a      	lsls	r2, r3, #2
 80049c0:	441a      	add	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049cc:	4b41      	ldr	r3, [pc, #260]	@ (8004ad4 <UART_SetConfig+0x1c4>)
 80049ce:	fba3 0302 	umull	r0, r3, r3, r2
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	2064      	movs	r0, #100	@ 0x64
 80049d6:	fb00 f303 	mul.w	r3, r0, r3
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	3332      	adds	r3, #50	@ 0x32
 80049e0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ad4 <UART_SetConfig+0x1c4>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049ee:	4419      	add	r1, r3
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	009a      	lsls	r2, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a06:	4b33      	ldr	r3, [pc, #204]	@ (8004ad4 <UART_SetConfig+0x1c4>)
 8004a08:	fba3 0302 	umull	r0, r3, r3, r2
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	2064      	movs	r0, #100	@ 0x64
 8004a10:	fb00 f303 	mul.w	r3, r0, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	3332      	adds	r3, #50	@ 0x32
 8004a1a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ad4 <UART_SetConfig+0x1c4>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	f003 0207 	and.w	r2, r3, #7
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a2e:	e04a      	b.n	8004ac6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	009a      	lsls	r2, r3, #2
 8004a3a:	441a      	add	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	4a23      	ldr	r2, [pc, #140]	@ (8004ad4 <UART_SetConfig+0x1c4>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	0119      	lsls	r1, r3, #4
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	009a      	lsls	r2, r3, #2
 8004a5a:	441a      	add	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a66:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad4 <UART_SetConfig+0x1c4>)
 8004a68:	fba3 0302 	umull	r0, r3, r3, r2
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	2064      	movs	r0, #100	@ 0x64
 8004a70:	fb00 f303 	mul.w	r3, r0, r3
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	3332      	adds	r3, #50	@ 0x32
 8004a7a:	4a16      	ldr	r2, [pc, #88]	@ (8004ad4 <UART_SetConfig+0x1c4>)
 8004a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a86:	4419      	add	r1, r3
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	009a      	lsls	r2, r3, #2
 8004a92:	441a      	add	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad4 <UART_SetConfig+0x1c4>)
 8004aa0:	fba3 0302 	umull	r0, r3, r3, r2
 8004aa4:	095b      	lsrs	r3, r3, #5
 8004aa6:	2064      	movs	r0, #100	@ 0x64
 8004aa8:	fb00 f303 	mul.w	r3, r0, r3
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	3332      	adds	r3, #50	@ 0x32
 8004ab2:	4a08      	ldr	r2, [pc, #32]	@ (8004ad4 <UART_SetConfig+0x1c4>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	f003 020f 	and.w	r2, r3, #15
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	609a      	str	r2, [r3, #8]
}
 8004ac6:	bf00      	nop
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40013800 	.word	0x40013800
 8004ad4:	51eb851f 	.word	0x51eb851f

08004ad8 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	72fb      	strb	r3, [r7, #11]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685c      	ldr	r4, [r3, #4]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68d8      	ldr	r0, [r3, #12]
 8004af4:	893b      	ldrh	r3, [r7, #8]
 8004af6:	7af9      	ldrb	r1, [r7, #11]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	47a0      	blx	r4
 8004afc:	6178      	str	r0, [r7, #20]

  return ret;
 8004afe:	697b      	ldr	r3, [r7, #20]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd90      	pop	{r4, r7, pc}

08004b08 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	607a      	str	r2, [r7, #4]
 8004b12:	461a      	mov	r2, r3
 8004b14:	460b      	mov	r3, r1
 8004b16:	72fb      	strb	r3, [r7, #11]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681c      	ldr	r4, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68d8      	ldr	r0, [r3, #12]
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	7af9      	ldrb	r1, [r7, #11]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	47a0      	blx	r4
 8004b2c:	6178      	str	r0, [r7, #20]

  return ret;
 8004b2e:	697b      	ldr	r3, [r7, #20]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd90      	pop	{r4, r7, pc}

08004b38 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 8004b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fc f8c0 	bl	8000ccc <__aeabi_i2f>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4904      	ldr	r1, [pc, #16]	@ (8004b60 <lsm6dso_from_fs2_to_mg+0x28>)
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fc f90f 	bl	8000d74 <__aeabi_fmul>
 8004b56:	4603      	mov	r3, r0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	3d79db23 	.word	0x3d79db23

08004b64 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b70:	f107 0208 	add.w	r2, r7, #8
 8004b74:	2301      	movs	r3, #1
 8004b76:	2110      	movs	r1, #16
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff ffad 	bl	8004ad8 <lsm6dso_read_reg>
 8004b7e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10f      	bne.n	8004ba6 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8004b86:	78fb      	ldrb	r3, [r7, #3]
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	7a3b      	ldrb	r3, [r7, #8]
 8004b90:	f362 0383 	bfi	r3, r2, #2, #2
 8004b94:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b96:	f107 0208 	add.w	r2, r7, #8
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	2110      	movs	r1, #16
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff ffb2 	bl	8004b08 <lsm6dso_write_reg>
 8004ba4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004bc0:	f107 030c 	add.w	r3, r7, #12
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa78 	bl	80050bc <lsm6dso_fsm_enable_get>
 8004bcc:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f040 80c4 	bne.w	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004bd6:	7b3b      	ldrb	r3, [r7, #12]
 8004bd8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004bdc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004bde:	7b3b      	ldrb	r3, [r7, #12]
 8004be0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004be4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004be6:	4313      	orrs	r3, r2
 8004be8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004bea:	7b3b      	ldrb	r3, [r7, #12]
 8004bec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004bf0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004bf6:	7b3b      	ldrb	r3, [r7, #12]
 8004bf8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004bfc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004c02:	7b3b      	ldrb	r3, [r7, #12]
 8004c04:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004c0e:	7b3b      	ldrb	r3, [r7, #12]
 8004c10:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004c16:	4313      	orrs	r3, r2
 8004c18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004c1a:	7b3b      	ldrb	r3, [r7, #12]
 8004c1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004c20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004c22:	4313      	orrs	r3, r2
 8004c24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004c26:	7b3b      	ldrb	r3, [r7, #12]
 8004c28:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004c2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004c32:	7b7b      	ldrb	r3, [r7, #13]
 8004c34:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004c3e:	7b7b      	ldrb	r3, [r7, #13]
 8004c40:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004c46:	4313      	orrs	r3, r2
 8004c48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004c4a:	7b7b      	ldrb	r3, [r7, #13]
 8004c4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004c52:	4313      	orrs	r3, r2
 8004c54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004c56:	7b7b      	ldrb	r3, [r7, #13]
 8004c58:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004c62:	7b7b      	ldrb	r3, [r7, #13]
 8004c64:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004c6e:	7b7b      	ldrb	r3, [r7, #13]
 8004c70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004c76:	4313      	orrs	r3, r2
 8004c78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004c7a:	7b7b      	ldrb	r3, [r7, #13]
 8004c7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004c80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004c82:	4313      	orrs	r3, r2
 8004c84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004c86:	7b7b      	ldrb	r3, [r7, #13]
 8004c88:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004c8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d163      	bne.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004c96:	f107 030b 	add.w	r3, r7, #11
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fa2f 	bl	8005100 <lsm6dso_fsm_data_rate_get>
 8004ca2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d159      	bne.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004caa:	7afb      	ldrb	r3, [r7, #11]
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d853      	bhi.n	8004d58 <lsm6dso_xl_data_rate_set+0x1a8>
 8004cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb8 <lsm6dso_xl_data_rate_set+0x108>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004cc9 	.word	0x08004cc9
 8004cbc:	08004cdb 	.word	0x08004cdb
 8004cc0:	08004cf9 	.word	0x08004cf9
 8004cc4:	08004d23 	.word	0x08004d23
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d102      	bne.n	8004cd4 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004cd2:	e044      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	75fb      	strb	r3, [r7, #23]
            break;
 8004cd8:	e041      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004cda:	78fb      	ldrb	r3, [r7, #3]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d102      	bne.n	8004ce6 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004ce4:	e03b      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d102      	bne.n	8004cf2 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004cec:	2302      	movs	r3, #2
 8004cee:	75fb      	strb	r3, [r7, #23]
            break;
 8004cf0:	e035      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	75fb      	strb	r3, [r7, #23]
            break;
 8004cf6:	e032      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d102      	bne.n	8004d04 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d02:	e02c      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d102      	bne.n	8004d10 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	75fb      	strb	r3, [r7, #23]
            break;
 8004d0e:	e026      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d102      	bne.n	8004d1c <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004d16:	2303      	movs	r3, #3
 8004d18:	75fb      	strb	r3, [r7, #23]
            break;
 8004d1a:	e020      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	75fb      	strb	r3, [r7, #23]
            break;
 8004d20:	e01d      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004d28:	2304      	movs	r3, #4
 8004d2a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d2c:	e017      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d102      	bne.n	8004d3a <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004d34:	2304      	movs	r3, #4
 8004d36:	75fb      	strb	r3, [r7, #23]
            break;
 8004d38:	e011      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d102      	bne.n	8004d46 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004d40:	2304      	movs	r3, #4
 8004d42:	75fb      	strb	r3, [r7, #23]
            break;
 8004d44:	e00b      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d102      	bne.n	8004d52 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	75fb      	strb	r3, [r7, #23]
            break;
 8004d50:	e005      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	75fb      	strb	r3, [r7, #23]
            break;
 8004d56:	e002      	b.n	8004d5e <lsm6dso_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004d5c:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d107      	bne.n	8004d74 <lsm6dso_xl_data_rate_set+0x1c4>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004d64:	f107 0208 	add.w	r2, r7, #8
 8004d68:	2301      	movs	r3, #1
 8004d6a:	2110      	movs	r1, #16
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff feb3 	bl	8004ad8 <lsm6dso_read_reg>
 8004d72:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10f      	bne.n	8004d9a <lsm6dso_xl_data_rate_set+0x1ea>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	7a3b      	ldrb	r3, [r7, #8]
 8004d84:	f362 1307 	bfi	r3, r2, #4, #4
 8004d88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004d8a:	f107 0208 	add.w	r2, r7, #8
 8004d8e:	2301      	movs	r3, #1
 8004d90:	2110      	movs	r1, #16
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff feb8 	bl	8004b08 <lsm6dso_write_reg>
 8004d98:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8004d9a:	693b      	ldr	r3, [r7, #16]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8004db0:	f107 0208 	add.w	r2, r7, #8
 8004db4:	2301      	movs	r3, #1
 8004db6:	2101      	movs	r1, #1
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff fe8d 	bl	8004ad8 <lsm6dso_read_reg>
 8004dbe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10f      	bne.n	8004de6 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	7a3b      	ldrb	r3, [r7, #8]
 8004dd0:	f362 1387 	bfi	r3, r2, #6, #2
 8004dd4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8004dd6:	f107 0208 	add.w	r2, r7, #8
 8004dda:	2301      	movs	r3, #1
 8004ddc:	2101      	movs	r1, #1
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff fe92 	bl	8004b08 <lsm6dso_write_reg>
 8004de4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004de6:	68fb      	ldr	r3, [r7, #12]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	210f      	movs	r1, #15
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff fe69 	bl	8004ad8 <lsm6dso_read_reg>
 8004e06:	60f8      	str	r0, [r7, #12]

  return ret;
 8004e08:	68fb      	ldr	r3, [r7, #12]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004e1e:	f107 0208 	add.w	r2, r7, #8
 8004e22:	2301      	movs	r3, #1
 8004e24:	2112      	movs	r1, #18
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff fe56 	bl	8004ad8 <lsm6dso_read_reg>
 8004e2c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10f      	bne.n	8004e54 <lsm6dso_reset_set+0x42>
  {
    reg.sw_reset = val;
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	7a3b      	ldrb	r3, [r7, #8]
 8004e3e:	f362 0300 	bfi	r3, r2, #0, #1
 8004e42:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004e44:	f107 0208 	add.w	r2, r7, #8
 8004e48:	2301      	movs	r3, #1
 8004e4a:	2112      	movs	r1, #18
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff fe5b 	bl	8004b08 <lsm6dso_write_reg>
 8004e52:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e54:	68fb      	ldr	r3, [r7, #12]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004e68:	f107 0208 	add.w	r2, r7, #8
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	2112      	movs	r1, #18
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fe31 	bl	8004ad8 <lsm6dso_read_reg>
 8004e76:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8004e78:	7a3b      	ldrb	r3, [r7, #8]
 8004e7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	701a      	strb	r2, [r3, #0]

  return ret;
 8004e86:	68fb      	ldr	r3, [r7, #12]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004e9c:	f107 020c 	add.w	r2, r7, #12
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	2118      	movs	r1, #24
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff fe17 	bl	8004ad8 <lsm6dso_read_reg>
 8004eaa:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d111      	bne.n	8004ed6 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8004eb2:	78fb      	ldrb	r3, [r7, #3]
 8004eb4:	09db      	lsrs	r3, r3, #7
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	7b3b      	ldrb	r3, [r7, #12]
 8004ec0:	f362 0341 	bfi	r3, r2, #1, #1
 8004ec4:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004ec6:	f107 020c 	add.w	r2, r7, #12
 8004eca:	2301      	movs	r3, #1
 8004ecc:	2118      	movs	r1, #24
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff fe1a 	bl	8004b08 <lsm6dso_write_reg>
 8004ed4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d107      	bne.n	8004eec <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8004edc:	f107 0210 	add.w	r2, r7, #16
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	2162      	movs	r1, #98	@ 0x62
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff fdf7 	bl	8004ad8 <lsm6dso_read_reg>
 8004eea:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10f      	bne.n	8004f12 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	7c3b      	ldrb	r3, [r7, #16]
 8004efc:	f362 03c4 	bfi	r3, r2, #3, #2
 8004f00:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8004f02:	f107 0210 	add.w	r2, r7, #16
 8004f06:	2301      	movs	r3, #1
 8004f08:	2162      	movs	r1, #98	@ 0x62
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff fdfc 	bl	8004b08 <lsm6dso_write_reg>
 8004f10:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8004f12:	697b      	ldr	r3, [r7, #20]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <lsm6dso_fifo_watermark_set>:
  * @param  val      change the values of wtm in reg FIFO_CTRL1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
  lsm6dso_fifo_ctrl1_t fifo_ctrl1;
  lsm6dso_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL2,
 8004f28:	f107 020c 	add.w	r2, r7, #12
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	2108      	movs	r1, #8
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff fdd1 	bl	8004ad8 <lsm6dso_read_reg>
 8004f36:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d114      	bne.n	8004f68 <lsm6dso_fifo_watermark_set+0x4c>
  {
    fifo_ctrl1.wtm = 0x00FFU & (uint8_t)val;
 8004f3e:	887b      	ldrh	r3, [r7, #2]
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.wtm = (uint8_t)((0x0100U & val) >> 8);
 8004f44:	887b      	ldrh	r3, [r7, #2]
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	7b3b      	ldrb	r3, [r7, #12]
 8004f52:	f362 0300 	bfi	r3, r2, #0, #1
 8004f56:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL1,
 8004f58:	f107 0210 	add.w	r2, r7, #16
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	2107      	movs	r1, #7
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff fdd1 	bl	8004b08 <lsm6dso_write_reg>
 8004f66:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl1, 1);
  }

  if (ret == 0)
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d107      	bne.n	8004f7e <lsm6dso_fifo_watermark_set+0x62>
  {
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL2,
 8004f6e:	f107 020c 	add.w	r2, r7, #12
 8004f72:	2301      	movs	r3, #1
 8004f74:	2108      	movs	r1, #8
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff fdc6 	bl	8004b08 <lsm6dso_write_reg>
 8004f7c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl2, 1);
  }

  return ret;
 8004f7e:	697b      	ldr	r3, [r7, #20]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <lsm6dso_fifo_xl_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_xl_t val)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004f94:	f107 0208 	add.w	r2, r7, #8
 8004f98:	2301      	movs	r3, #1
 8004f9a:	2109      	movs	r1, #9
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff fd9b 	bl	8004ad8 <lsm6dso_read_reg>
 8004fa2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10f      	bne.n	8004fca <lsm6dso_fifo_xl_batch_set+0x42>
  {
    reg.bdr_xl = (uint8_t)val;
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	7a3b      	ldrb	r3, [r7, #8]
 8004fb4:	f362 0303 	bfi	r3, r2, #0, #4
 8004fb8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004fba:	f107 0208 	add.w	r2, r7, #8
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	2109      	movs	r1, #9
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fda0 	bl	8004b08 <lsm6dso_write_reg>
 8004fc8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004fca:	68fb      	ldr	r3, [r7, #12]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <lsm6dso_fifo_gy_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_gy_t val)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004fe0:	f107 0208 	add.w	r2, r7, #8
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	2109      	movs	r1, #9
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff fd75 	bl	8004ad8 <lsm6dso_read_reg>
 8004fee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10f      	bne.n	8005016 <lsm6dso_fifo_gy_batch_set+0x42>
  {
    reg.bdr_gy = (uint8_t)val;
 8004ff6:	78fb      	ldrb	r3, [r7, #3]
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	7a3b      	ldrb	r3, [r7, #8]
 8005000:	f362 1307 	bfi	r3, r2, #4, #4
 8005004:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8005006:	f107 0208 	add.w	r2, r7, #8
 800500a:	2301      	movs	r3, #1
 800500c:	2109      	movs	r1, #9
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff fd7a 	bl	8004b08 <lsm6dso_write_reg>
 8005014:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005016:	68fb      	ldr	r3, [r7, #12]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800502c:	f107 0208 	add.w	r2, r7, #8
 8005030:	2301      	movs	r3, #1
 8005032:	210a      	movs	r1, #10
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff fd4f 	bl	8004ad8 <lsm6dso_read_reg>
 800503a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10f      	bne.n	8005062 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	b2da      	uxtb	r2, r3
 800504a:	7a3b      	ldrb	r3, [r7, #8]
 800504c:	f362 0302 	bfi	r3, r2, #0, #3
 8005050:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005052:	f107 0208 	add.w	r2, r7, #8
 8005056:	2301      	movs	r3, #1
 8005058:	210a      	movs	r1, #10
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7ff fd54 	bl	8004b08 <lsm6dso_write_reg>
 8005060:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005062:	68fb      	ldr	r3, [r7, #12]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <lsm6dso_fifo_data_level_get>:
  * @param  val      change the values of diff_fifo in reg FIFO_STATUS1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_data_level_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  lsm6dso_fifo_status1_t fifo_status1;
  lsm6dso_fifo_status2_t fifo_status2;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_STATUS1,
 8005076:	f107 0210 	add.w	r2, r7, #16
 800507a:	2301      	movs	r3, #1
 800507c:	213a      	movs	r1, #58	@ 0x3a
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff fd2a 	bl	8004ad8 <lsm6dso_read_reg>
 8005084:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_status1, 1);

  if (ret == 0)
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d112      	bne.n	80050b2 <lsm6dso_fifo_data_level_get+0x46>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_STATUS2,
 800508c:	f107 020c 	add.w	r2, r7, #12
 8005090:	2301      	movs	r3, #1
 8005092:	213b      	movs	r1, #59	@ 0x3b
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff fd1f 	bl	8004ad8 <lsm6dso_read_reg>
 800509a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&fifo_status2, 1);
    *val = ((uint16_t)fifo_status2.diff_fifo << 8) +
 800509c:	7b3b      	ldrb	r3, [r7, #12]
 800509e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	b29b      	uxth	r3, r3
           (uint16_t)fifo_status1.diff_fifo;
 80050a8:	7c3a      	ldrb	r2, [r7, #16]
    *val = ((uint16_t)fifo_status2.diff_fifo << 8) +
 80050aa:	4413      	add	r3, r2
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 80050b2:	697b      	ldr	r3, [r7, #20]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80050c6:	2102      	movs	r1, #2
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff fe6b 	bl	8004da4 <lsm6dso_mem_bank_set>
 80050ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80050d6:	2302      	movs	r3, #2
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	2146      	movs	r1, #70	@ 0x46
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff fcfb 	bl	8004ad8 <lsm6dso_read_reg>
 80050e2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d104      	bne.n	80050f4 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80050ea:	2100      	movs	r1, #0
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fe59 	bl	8004da4 <lsm6dso_mem_bank_set>
 80050f2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050f4:	68fb      	ldr	r3, [r7, #12]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800510a:	2102      	movs	r1, #2
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff fe49 	bl	8004da4 <lsm6dso_mem_bank_set>
 8005112:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d107      	bne.n	800512a <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 800511a:	f107 0208 	add.w	r2, r7, #8
 800511e:	2301      	movs	r3, #1
 8005120:	215f      	movs	r1, #95	@ 0x5f
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff fcd8 	bl	8004ad8 <lsm6dso_read_reg>
 8005128:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d12a      	bne.n	8005186 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8005130:	7a3b      	ldrb	r3, [r7, #8]
 8005132:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b03      	cmp	r3, #3
 800513a:	d81b      	bhi.n	8005174 <lsm6dso_fsm_data_rate_get+0x74>
 800513c:	a201      	add	r2, pc, #4	@ (adr r2, 8005144 <lsm6dso_fsm_data_rate_get+0x44>)
 800513e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005142:	bf00      	nop
 8005144:	08005155 	.word	0x08005155
 8005148:	0800515d 	.word	0x0800515d
 800514c:	08005165 	.word	0x08005165
 8005150:	0800516d 	.word	0x0800516d
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]
        break;
 800515a:	e00f      	b.n	800517c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2201      	movs	r2, #1
 8005160:	701a      	strb	r2, [r3, #0]
        break;
 8005162:	e00b      	b.n	800517c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2202      	movs	r2, #2
 8005168:	701a      	strb	r2, [r3, #0]
        break;
 800516a:	e007      	b.n	800517c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2203      	movs	r2, #3
 8005170:	701a      	strb	r2, [r3, #0]
        break;
 8005172:	e003      	b.n	800517c <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
        break;
 800517a:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800517c:	2100      	movs	r1, #0
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff fe10 	bl	8004da4 <lsm6dso_mem_bank_set>
 8005184:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005186:	68fb      	ldr	r3, [r7, #12]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <_fminf>:
 8005190:	f003 b9e2 	b.w	8008558 <fminf>

08005194 <neai_classification_init>:
 8005194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005198:	2540      	movs	r5, #64	@ 0x40
 800519a:	2300      	movs	r3, #0
 800519c:	2480      	movs	r4, #128	@ 0x80
 800519e:	4a54      	ldr	r2, [pc, #336]	@ (80052f0 <neai_classification_init+0x15c>)
 80051a0:	4954      	ldr	r1, [pc, #336]	@ (80052f4 <neai_classification_init+0x160>)
 80051a2:	8015      	strh	r5, [r2, #0]
 80051a4:	4a54      	ldr	r2, [pc, #336]	@ (80052f8 <neai_classification_init+0x164>)
 80051a6:	4605      	mov	r5, r0
 80051a8:	8013      	strh	r3, [r2, #0]
 80051aa:	4a54      	ldr	r2, [pc, #336]	@ (80052fc <neai_classification_init+0x168>)
 80051ac:	800c      	strh	r4, [r1, #0]
 80051ae:	8013      	strh	r3, [r2, #0]
 80051b0:	6800      	ldr	r0, [r0, #0]
 80051b2:	f7fb ffe1 	bl	8001178 <__aeabi_f2uiz>
 80051b6:	4604      	mov	r4, r0
 80051b8:	6868      	ldr	r0, [r5, #4]
 80051ba:	f7fb ffdd 	bl	8001178 <__aeabi_f2uiz>
 80051be:	4b50      	ldr	r3, [pc, #320]	@ (8005300 <neai_classification_init+0x16c>)
 80051c0:	f8df c140 	ldr.w	ip, [pc, #320]	@ 8005304 <neai_classification_init+0x170>
 80051c4:	6018      	str	r0, [r3, #0]
 80051c6:	1823      	adds	r3, r4, r0
 80051c8:	4a4f      	ldr	r2, [pc, #316]	@ (8005308 <neai_classification_init+0x174>)
 80051ca:	f105 0808 	add.w	r8, r5, #8
 80051ce:	3302      	adds	r3, #2
 80051d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80051d4:	f8df e134 	ldr.w	lr, [pc, #308]	@ 800530c <neai_classification_init+0x178>
 80051d8:	f8cc 8000 	str.w	r8, [ip]
 80051dc:	f100 0c02 	add.w	ip, r0, #2
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	eb0c 0244 	add.w	r2, ip, r4, lsl #1
 80051e6:	eb05 038c 	add.w	r3, r5, ip, lsl #2
 80051ea:	4f49      	ldr	r7, [pc, #292]	@ (8005310 <neai_classification_init+0x17c>)
 80051ec:	4e49      	ldr	r6, [pc, #292]	@ (8005314 <neai_classification_init+0x180>)
 80051ee:	f8ce 3000 	str.w	r3, [lr]
 80051f2:	18a3      	adds	r3, r4, r2
 80051f4:	441c      	add	r4, r3
 80051f6:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80051fa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80051fe:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8005202:	4945      	ldr	r1, [pc, #276]	@ (8005318 <neai_classification_init+0x184>)
 8005204:	603a      	str	r2, [r7, #0]
 8005206:	6033      	str	r3, [r6, #0]
 8005208:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800520c:	f7fb ff46 	bl	800109c <__aeabi_fcmpeq>
 8005210:	2800      	cmp	r0, #0
 8005212:	d059      	beq.n	80052c8 <neai_classification_init+0x134>
 8005214:	4941      	ldr	r1, [pc, #260]	@ (800531c <neai_classification_init+0x188>)
 8005216:	6860      	ldr	r0, [r4, #4]
 8005218:	f7fb ff40 	bl	800109c <__aeabi_fcmpeq>
 800521c:	2800      	cmp	r0, #0
 800521e:	d053      	beq.n	80052c8 <neai_classification_init+0x134>
 8005220:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 8005224:	68a0      	ldr	r0, [r4, #8]
 8005226:	f7fb ff39 	bl	800109c <__aeabi_fcmpeq>
 800522a:	2800      	cmp	r0, #0
 800522c:	d04c      	beq.n	80052c8 <neai_classification_init+0x134>
 800522e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005232:	68e0      	ldr	r0, [r4, #12]
 8005234:	f7fb ff32 	bl	800109c <__aeabi_fcmpeq>
 8005238:	2800      	cmp	r0, #0
 800523a:	d045      	beq.n	80052c8 <neai_classification_init+0x134>
 800523c:	2100      	movs	r1, #0
 800523e:	6920      	ldr	r0, [r4, #16]
 8005240:	f7fb ff2c 	bl	800109c <__aeabi_fcmpeq>
 8005244:	2800      	cmp	r0, #0
 8005246:	d03f      	beq.n	80052c8 <neai_classification_init+0x134>
 8005248:	2100      	movs	r1, #0
 800524a:	6960      	ldr	r0, [r4, #20]
 800524c:	f7fb ff26 	bl	800109c <__aeabi_fcmpeq>
 8005250:	2800      	cmp	r0, #0
 8005252:	d039      	beq.n	80052c8 <neai_classification_init+0x134>
 8005254:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005258:	69a0      	ldr	r0, [r4, #24]
 800525a:	f7fb ff1f 	bl	800109c <__aeabi_fcmpeq>
 800525e:	2800      	cmp	r0, #0
 8005260:	d032      	beq.n	80052c8 <neai_classification_init+0x134>
 8005262:	2100      	movs	r1, #0
 8005264:	69e0      	ldr	r0, [r4, #28]
 8005266:	f7fb ff19 	bl	800109c <__aeabi_fcmpeq>
 800526a:	b368      	cbz	r0, 80052c8 <neai_classification_init+0x134>
 800526c:	492c      	ldr	r1, [pc, #176]	@ (8005320 <neai_classification_init+0x18c>)
 800526e:	6a20      	ldr	r0, [r4, #32]
 8005270:	f7fb ff14 	bl	800109c <__aeabi_fcmpeq>
 8005274:	b340      	cbz	r0, 80052c8 <neai_classification_init+0x134>
 8005276:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800527a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800527c:	f7fb ff0e 	bl	800109c <__aeabi_fcmpeq>
 8005280:	b310      	cbz	r0, 80052c8 <neai_classification_init+0x134>
 8005282:	2100      	movs	r1, #0
 8005284:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005286:	f7fb ff09 	bl	800109c <__aeabi_fcmpeq>
 800528a:	b1e8      	cbz	r0, 80052c8 <neai_classification_init+0x134>
 800528c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8005290:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005292:	f7fb ff03 	bl	800109c <__aeabi_fcmpeq>
 8005296:	b1b8      	cbz	r0, 80052c8 <neai_classification_init+0x134>
 8005298:	2100      	movs	r1, #0
 800529a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800529c:	f7fb fefe 	bl	800109c <__aeabi_fcmpeq>
 80052a0:	b190      	cbz	r0, 80052c8 <neai_classification_init+0x134>
 80052a2:	2100      	movs	r1, #0
 80052a4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80052a6:	f7fb fef9 	bl	800109c <__aeabi_fcmpeq>
 80052aa:	b168      	cbz	r0, 80052c8 <neai_classification_init+0x134>
 80052ac:	2100      	movs	r1, #0
 80052ae:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80052b0:	f7fb fef4 	bl	800109c <__aeabi_fcmpeq>
 80052b4:	b140      	cbz	r0, 80052c8 <neai_classification_init+0x134>
 80052b6:	491b      	ldr	r1, [pc, #108]	@ (8005324 <neai_classification_init+0x190>)
 80052b8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80052ba:	f7fb feef 	bl	800109c <__aeabi_fcmpeq>
 80052be:	2800      	cmp	r0, #0
 80052c0:	bf0c      	ite	eq
 80052c2:	237d      	moveq	r3, #125	@ 0x7d
 80052c4:	2300      	movne	r3, #0
 80052c6:	e000      	b.n	80052ca <neai_classification_init+0x136>
 80052c8:	237d      	movs	r3, #125	@ 0x7d
 80052ca:	4c17      	ldr	r4, [pc, #92]	@ (8005328 <neai_classification_init+0x194>)
 80052cc:	4917      	ldr	r1, [pc, #92]	@ (800532c <neai_classification_init+0x198>)
 80052ce:	4818      	ldr	r0, [pc, #96]	@ (8005330 <neai_classification_init+0x19c>)
 80052d0:	7023      	strb	r3, [r4, #0]
 80052d2:	f7ff ff5d 	bl	8005190 <_fminf>
 80052d6:	4916      	ldr	r1, [pc, #88]	@ (8005330 <neai_classification_init+0x19c>)
 80052d8:	f7fb fee0 	bl	800109c <__aeabi_fcmpeq>
 80052dc:	b110      	cbz	r0, 80052e4 <neai_classification_init+0x150>
 80052de:	7820      	ldrb	r0, [r4, #0]
 80052e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e4:	2381      	movs	r3, #129	@ 0x81
 80052e6:	7023      	strb	r3, [r4, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ee:	bf00      	nop
 80052f0:	20000900 	.word	0x20000900
 80052f4:	20000902 	.word	0x20000902
 80052f8:	20000908 	.word	0x20000908
 80052fc:	20000904 	.word	0x20000904
 8005300:	200008fc 	.word	0x200008fc
 8005304:	200008f8 	.word	0x200008f8
 8005308:	200008f0 	.word	0x200008f0
 800530c:	200008f4 	.word	0x200008f4
 8005310:	200008ec 	.word	0x200008ec
 8005314:	200008e8 	.word	0x200008e8
 8005318:	40a00000 	.word	0x40a00000
 800531c:	40400000 	.word	0x40400000
 8005320:	423c0000 	.word	0x423c0000
 8005324:	49742400 	.word	0x49742400
 8005328:	20000024 	.word	0x20000024
 800532c:	40066666 	.word	0x40066666
 8005330:	3f8ccccd 	.word	0x3f8ccccd

08005334 <neai_classification>:
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005338:	4ba7      	ldr	r3, [pc, #668]	@ (80055d8 <neai_classification+0x2a4>)
 800533a:	b09d      	sub	sp, #116	@ 0x74
 800533c:	781e      	ldrb	r6, [r3, #0]
 800533e:	9016      	str	r0, [sp, #88]	@ 0x58
 8005340:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005342:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005344:	b116      	cbz	r6, 800534c <neai_classification+0x18>
 8005346:	2e81      	cmp	r6, #129	@ 0x81
 8005348:	f040 837c 	bne.w	8005a44 <neai_classification+0x710>
 800534c:	4ba3      	ldr	r3, [pc, #652]	@ (80055dc <neai_classification+0x2a8>)
 800534e:	f04f 0c00 	mov.w	ip, #0
 8005352:	8818      	ldrh	r0, [r3, #0]
 8005354:	4ba2      	ldr	r3, [pc, #648]	@ (80055e0 <neai_classification+0x2ac>)
 8005356:	f8df b28c 	ldr.w	fp, [pc, #652]	@ 80055e4 <neai_classification+0x2b0>
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	e9cd cc0e 	strd	ip, ip, [sp, #56]	@ 0x38
 8005360:	4619      	mov	r1, r3
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	4ba0      	ldr	r3, [pc, #640]	@ (80055e8 <neai_classification+0x2b4>)
 8005366:	900d      	str	r0, [sp, #52]	@ 0x34
 8005368:	930c      	str	r3, [sp, #48]	@ 0x30
 800536a:	1e43      	subs	r3, r0, #1
 800536c:	b29b      	uxth	r3, r3
 800536e:	3301      	adds	r3, #1
 8005370:	009a      	lsls	r2, r3, #2
 8005372:	f1ab 0304 	sub.w	r3, fp, #4
 8005376:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800537a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800537c:	4b9b      	ldr	r3, [pc, #620]	@ (80055ec <neai_classification+0x2b8>)
 800537e:	9214      	str	r2, [sp, #80]	@ 0x50
 8005380:	3b04      	subs	r3, #4
 8005382:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005386:	9315      	str	r3, [sp, #84]	@ 0x54
 8005388:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800538c:	9312      	str	r3, [sp, #72]	@ 0x48
 800538e:	084a      	lsrs	r2, r1, #1
 8005390:	f001 0301 	and.w	r3, r1, #1
 8005394:	eb0b 0781 	add.w	r7, fp, r1, lsl #2
 8005398:	9210      	str	r2, [sp, #64]	@ 0x40
 800539a:	9311      	str	r3, [sp, #68]	@ 0x44
 800539c:	9618      	str	r6, [sp, #96]	@ 0x60
 800539e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053a2:	2100      	movs	r1, #0
 80053a4:	4891      	ldr	r0, [pc, #580]	@ (80055ec <neai_classification+0x2b8>)
 80053a6:	f001 f9f1 	bl	800678c <memset>
 80053aa:	9b01      	ldr	r3, [sp, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8368 	beq.w	8005a82 <neai_classification+0x74e>
 80053b2:	4659      	mov	r1, fp
 80053b4:	2200      	movs	r2, #0
 80053b6:	4b8e      	ldr	r3, [pc, #568]	@ (80055f0 <neai_classification+0x2bc>)
 80053b8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80053be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80053c2:	181c      	adds	r4, r3, r0
 80053c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80053c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80053ca:	4b8a      	ldr	r3, [pc, #552]	@ (80055f4 <neai_classification+0x2c0>)
 80053cc:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 80053d0:	3203      	adds	r2, #3
 80053d2:	f841 0b04 	str.w	r0, [r1], #4
 80053d6:	2000      	movs	r0, #0
 80053d8:	4295      	cmp	r5, r2
 80053da:	f843 0b04 	str.w	r0, [r3], #4
 80053de:	d1f5      	bne.n	80053cc <neai_classification+0x98>
 80053e0:	9b01      	ldr	r3, [sp, #4]
 80053e2:	f8db 4000 	ldr.w	r4, [fp]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d009      	beq.n	80053fe <neai_classification+0xca>
 80053ea:	465d      	mov	r5, fp
 80053ec:	4620      	mov	r0, r4
 80053ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80053f0:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80053f4:	f7fb fbb6 	bl	8000b64 <__addsf3>
 80053f8:	42ac      	cmp	r4, r5
 80053fa:	d1f9      	bne.n	80053f0 <neai_classification+0xbc>
 80053fc:	4604      	mov	r4, r0
 80053fe:	9801      	ldr	r0, [sp, #4]
 8005400:	f7fb fc60 	bl	8000cc4 <__aeabi_ui2f>
 8005404:	4601      	mov	r1, r0
 8005406:	4620      	mov	r0, r4
 8005408:	f7fb fd68 	bl	8000edc <__aeabi_fdiv>
 800540c:	465d      	mov	r5, fp
 800540e:	4604      	mov	r4, r0
 8005410:	6828      	ldr	r0, [r5, #0]
 8005412:	4621      	mov	r1, r4
 8005414:	f7fb fba4 	bl	8000b60 <__aeabi_fsub>
 8005418:	f845 0b04 	str.w	r0, [r5], #4
 800541c:	42af      	cmp	r7, r5
 800541e:	d1f7      	bne.n	8005410 <neai_classification+0xdc>
 8005420:	9801      	ldr	r0, [sp, #4]
 8005422:	f7fb fc53 	bl	8000ccc <__aeabi_i2f>
 8005426:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005428:	4601      	mov	r1, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	f040 831d 	bne.w	8005a6a <neai_classification+0x736>
 8005430:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005432:	960a      	str	r6, [sp, #40]	@ 0x28
 8005434:	2300      	movs	r3, #0
 8005436:	9801      	ldr	r0, [sp, #4]
 8005438:	3301      	adds	r3, #1
 800543a:	b29b      	uxth	r3, r3
 800543c:	fa40 f203 	asr.w	r2, r0, r3
 8005440:	07d2      	lsls	r2, r2, #31
 8005442:	d5f9      	bpl.n	8005438 <neai_classification+0x104>
 8005444:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005448:	9302      	str	r3, [sp, #8]
 800544a:	f7fb fd47 	bl	8000edc <__aeabi_fdiv>
 800544e:	9b01      	ldr	r3, [sp, #4]
 8005450:	4680      	mov	r8, r0
 8005452:	2b01      	cmp	r3, #1
 8005454:	9b02      	ldr	r3, [sp, #8]
 8005456:	dd1e      	ble.n	8005496 <neai_classification+0x162>
 8005458:	2000      	movs	r0, #0
 800545a:	9a01      	ldr	r2, [sp, #4]
 800545c:	465c      	mov	r4, fp
 800545e:	1e55      	subs	r5, r2, #1
 8005460:	4602      	mov	r2, r0
 8005462:	b281      	uxth	r1, r0
 8005464:	428a      	cmp	r2, r1
 8005466:	d906      	bls.n	8005476 <neai_classification+0x142>
 8005468:	6821      	ldr	r1, [r4, #0]
 800546a:	f85b c022 	ldr.w	ip, [fp, r2, lsl #2]
 800546e:	f8c4 c000 	str.w	ip, [r4]
 8005472:	f84b 1022 	str.w	r1, [fp, r2, lsl #2]
 8005476:	42b2      	cmp	r2, r6
 8005478:	4631      	mov	r1, r6
 800547a:	d305      	bcc.n	8005488 <neai_classification+0x154>
 800547c:	1a52      	subs	r2, r2, r1
 800547e:	b292      	uxth	r2, r2
 8005480:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8005484:	428a      	cmp	r2, r1
 8005486:	d2f9      	bcs.n	800547c <neai_classification+0x148>
 8005488:	3001      	adds	r0, #1
 800548a:	440a      	add	r2, r1
 800548c:	42a8      	cmp	r0, r5
 800548e:	b292      	uxth	r2, r2
 8005490:	f104 0404 	add.w	r4, r4, #4
 8005494:	dbe5      	blt.n	8005462 <neai_classification+0x12e>
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80d6 	beq.w	8005648 <neai_classification+0x314>
 800549c:	2400      	movs	r4, #0
 800549e:	f8df 9158 	ldr.w	r9, [pc, #344]	@ 80055f8 <neai_classification+0x2c4>
 80054a2:	2201      	movs	r2, #1
 80054a4:	f8cd 8064 	str.w	r8, [sp, #100]	@ 0x64
 80054a8:	f04f 0a00 	mov.w	sl, #0
 80054ac:	46c8      	mov	r8, r9
 80054ae:	46a1      	mov	r9, r4
 80054b0:	e9cd 671a 	strd	r6, r7, [sp, #104]	@ 0x68
 80054b4:	9202      	str	r2, [sp, #8]
 80054b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80054b8:	9a02      	ldr	r2, [sp, #8]
 80054ba:	0053      	lsls	r3, r2, #1
 80054bc:	b29b      	uxth	r3, r3
 80054be:	9302      	str	r3, [sp, #8]
 80054c0:	2a00      	cmp	r2, #0
 80054c2:	f000 809d 	beq.w	8005600 <neai_classification+0x2cc>
 80054c6:	9b01      	ldr	r3, [sp, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8099 	beq.w	8005600 <neai_classification+0x2cc>
 80054ce:	2700      	movs	r7, #0
 80054d0:	4293      	cmp	r3, r2
 80054d2:	bf28      	it	cs
 80054d4:	4613      	movcs	r3, r2
 80054d6:	2500      	movs	r5, #0
 80054d8:	f04f 567e 	mov.w	r6, #1065353216	@ 0x3f800000
 80054dc:	463c      	mov	r4, r7
 80054de:	9304      	str	r3, [sp, #16]
 80054e0:	9206      	str	r2, [sp, #24]
 80054e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80054e6:	4653      	mov	r3, sl
 80054e8:	4642      	mov	r2, r8
 80054ea:	e9cd 3207 	strd	r3, r2, [sp, #28]
 80054ee:	9b06      	ldr	r3, [sp, #24]
 80054f0:	4631      	mov	r1, r6
 80054f2:	eb03 0804 	add.w	r8, r3, r4
 80054f6:	fa1f f888 	uxth.w	r8, r8
 80054fa:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 80054fe:	4618      	mov	r0, r3
 8005500:	9305      	str	r3, [sp, #20]
 8005502:	4b3c      	ldr	r3, [pc, #240]	@ (80055f4 <neai_classification+0x2c0>)
 8005504:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
 8005508:	f7fb fc34 	bl	8000d74 <__aeabi_fmul>
 800550c:	4629      	mov	r1, r5
 800550e:	4681      	mov	r9, r0
 8005510:	4650      	mov	r0, sl
 8005512:	f7fb fc2f 	bl	8000d74 <__aeabi_fmul>
 8005516:	4601      	mov	r1, r0
 8005518:	4648      	mov	r0, r9
 800551a:	f7fb fb21 	bl	8000b60 <__aeabi_fsub>
 800551e:	4601      	mov	r1, r0
 8005520:	4650      	mov	r0, sl
 8005522:	468a      	mov	sl, r1
 8005524:	4631      	mov	r1, r6
 8005526:	f7fb fc25 	bl	8000d74 <__aeabi_fmul>
 800552a:	4629      	mov	r1, r5
 800552c:	4681      	mov	r9, r0
 800552e:	9805      	ldr	r0, [sp, #20]
 8005530:	f7fb fc20 	bl	8000d74 <__aeabi_fmul>
 8005534:	4601      	mov	r1, r0
 8005536:	4648      	mov	r0, r9
 8005538:	f7fb fb14 	bl	8000b64 <__addsf3>
 800553c:	4651      	mov	r1, sl
 800553e:	4681      	mov	r9, r0
 8005540:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 8005544:	f7fb fb0c 	bl	8000b60 <__aeabi_fsub>
 8005548:	4b2a      	ldr	r3, [pc, #168]	@ (80055f4 <neai_classification+0x2c0>)
 800554a:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 800554e:	4649      	mov	r1, r9
 8005550:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005554:	f7fb fb04 	bl	8000b60 <__aeabi_fsub>
 8005558:	4b26      	ldr	r3, [pc, #152]	@ (80055f4 <neai_classification+0x2c0>)
 800555a:	4651      	mov	r1, sl
 800555c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005560:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 8005564:	f7fb fafe 	bl	8000b64 <__addsf3>
 8005568:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80055f4 <neai_classification+0x2c0>
 800556c:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 8005570:	4649      	mov	r1, r9
 8005572:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8005576:	f7fb faf5 	bl	8000b64 <__addsf3>
 800557a:	9b02      	ldr	r3, [sp, #8]
 800557c:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
 8005580:	441c      	add	r4, r3
 8005582:	9b01      	ldr	r3, [sp, #4]
 8005584:	b2a4      	uxth	r4, r4
 8005586:	429c      	cmp	r4, r3
 8005588:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800558c:	d3ad      	bcc.n	80054ea <neai_classification+0x1b6>
 800558e:	4611      	mov	r1, r2
 8005590:	4630      	mov	r0, r6
 8005592:	469a      	mov	sl, r3
 8005594:	4690      	mov	r8, r2
 8005596:	f7fb fbed 	bl	8000d74 <__aeabi_fmul>
 800559a:	4651      	mov	r1, sl
 800559c:	4604      	mov	r4, r0
 800559e:	4628      	mov	r0, r5
 80055a0:	f7fb fbe8 	bl	8000d74 <__aeabi_fmul>
 80055a4:	4601      	mov	r1, r0
 80055a6:	4620      	mov	r0, r4
 80055a8:	f7fb fada 	bl	8000b60 <__aeabi_fsub>
 80055ac:	4641      	mov	r1, r8
 80055ae:	4681      	mov	r9, r0
 80055b0:	4628      	mov	r0, r5
 80055b2:	f7fb fbdf 	bl	8000d74 <__aeabi_fmul>
 80055b6:	4604      	mov	r4, r0
 80055b8:	4651      	mov	r1, sl
 80055ba:	4630      	mov	r0, r6
 80055bc:	f7fb fbda 	bl	8000d74 <__aeabi_fmul>
 80055c0:	4621      	mov	r1, r4
 80055c2:	f7fb facf 	bl	8000b64 <__addsf3>
 80055c6:	3701      	adds	r7, #1
 80055c8:	9b04      	ldr	r3, [sp, #16]
 80055ca:	b2bc      	uxth	r4, r7
 80055cc:	429c      	cmp	r4, r3
 80055ce:	4605      	mov	r5, r0
 80055d0:	d214      	bcs.n	80055fc <neai_classification+0x2c8>
 80055d2:	464e      	mov	r6, r9
 80055d4:	e787      	b.n	80054e6 <neai_classification+0x1b2>
 80055d6:	bf00      	nop
 80055d8:	20000024 	.word	0x20000024
 80055dc:	20000900 	.word	0x20000900
 80055e0:	20000902 	.word	0x20000902
 80055e4:	20000c0c 	.word	0x20000c0c
 80055e8:	20000e0c 	.word	0x20000e0c
 80055ec:	2000090c 	.word	0x2000090c
 80055f0:	20000908 	.word	0x20000908
 80055f4:	20000a0c 	.word	0x20000a0c
 80055f8:	bf800000 	.word	0xbf800000
 80055fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005600:	4641      	mov	r1, r8
 8005602:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005606:	f7fb faab 	bl	8000b60 <__aeabi_fsub>
 800560a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800560e:	f7fb fbb1 	bl	8000d74 <__aeabi_fmul>
 8005612:	f002 ff7f 	bl	8008514 <sqrtf>
 8005616:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800561a:	4682      	mov	sl, r0
 800561c:	4640      	mov	r0, r8
 800561e:	f7fb faa1 	bl	8000b64 <__addsf3>
 8005622:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005626:	f7fb fba5 	bl	8000d74 <__aeabi_fmul>
 800562a:	f002 ff73 	bl	8008514 <sqrtf>
 800562e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005630:	f109 0901 	add.w	r9, r9, #1
 8005634:	454b      	cmp	r3, r9
 8005636:	4680      	mov	r8, r0
 8005638:	f10a 4a00 	add.w	sl, sl, #2147483648	@ 0x80000000
 800563c:	f47f af3c 	bne.w	80054b8 <neai_classification+0x184>
 8005640:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	@ 0x68
 8005644:	f8dd 8064 	ldr.w	r8, [sp, #100]	@ 0x64
 8005648:	9b01      	ldr	r3, [sp, #4]
 800564a:	b17b      	cbz	r3, 800566c <neai_classification+0x338>
 800564c:	465d      	mov	r5, fp
 800564e:	4c9b      	ldr	r4, [pc, #620]	@ (80058bc <neai_classification+0x588>)
 8005650:	4641      	mov	r1, r8
 8005652:	6828      	ldr	r0, [r5, #0]
 8005654:	f7fb fb8e 	bl	8000d74 <__aeabi_fmul>
 8005658:	4641      	mov	r1, r8
 800565a:	f845 0b04 	str.w	r0, [r5], #4
 800565e:	6820      	ldr	r0, [r4, #0]
 8005660:	f7fb fb88 	bl	8000d74 <__aeabi_fmul>
 8005664:	42af      	cmp	r7, r5
 8005666:	f844 0b04 	str.w	r0, [r4], #4
 800566a:	d1f1      	bne.n	8005650 <neai_classification+0x31c>
 800566c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800566e:	2b00      	cmp	r3, #0
 8005670:	d043      	beq.n	80056fa <neai_classification+0x3c6>
 8005672:	4d92      	ldr	r5, [pc, #584]	@ (80058bc <neai_classification+0x588>)
 8005674:	009c      	lsls	r4, r3, #2
 8005676:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800567a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800567e:	46aa      	mov	sl, r5
 8005680:	462e      	mov	r6, r5
 8005682:	465f      	mov	r7, fp
 8005684:	46a1      	mov	r9, r4
 8005686:	461d      	mov	r5, r3
 8005688:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800568c:	6874      	ldr	r4, [r6, #4]
 800568e:	4608      	mov	r0, r1
 8005690:	f7fb fb70 	bl	8000d74 <__aeabi_fmul>
 8005694:	4621      	mov	r1, r4
 8005696:	4680      	mov	r8, r0
 8005698:	4620      	mov	r0, r4
 800569a:	f7fb fb6b 	bl	8000d74 <__aeabi_fmul>
 800569e:	4601      	mov	r1, r0
 80056a0:	4640      	mov	r0, r8
 80056a2:	f7fb fa5f 	bl	8000b64 <__addsf3>
 80056a6:	42bd      	cmp	r5, r7
 80056a8:	f846 0b04 	str.w	r0, [r6], #4
 80056ac:	d1ec      	bne.n	8005688 <neai_classification+0x354>
 80056ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80056b2:	464c      	mov	r4, r9
 80056b4:	4655      	mov	r5, sl
 80056b6:	f8df 8204 	ldr.w	r8, [pc, #516]	@ 80058bc <neai_classification+0x588>
 80056ba:	4454      	add	r4, sl
 80056bc:	f858 9b04 	ldr.w	r9, [r8], #4
 80056c0:	2100      	movs	r1, #0
 80056c2:	4648      	mov	r0, r9
 80056c4:	f7fb fd08 	bl	80010d8 <__aeabi_fcmpge>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	f040 81bf 	bne.w	8005a4c <neai_classification+0x718>
 80056ce:	2300      	movs	r3, #0
 80056d0:	4544      	cmp	r4, r8
 80056d2:	f848 3c04 	str.w	r3, [r8, #-4]
 80056d6:	d1f1      	bne.n	80056bc <neai_classification+0x388>
 80056d8:	b17e      	cbz	r6, 80056fa <neai_classification+0x3c6>
 80056da:	4b79      	ldr	r3, [pc, #484]	@ (80058c0 <neai_classification+0x58c>)
 80056dc:	eb05 0486 	add.w	r4, r5, r6, lsl #2
 80056e0:	881e      	ldrh	r6, [r3, #0]
 80056e2:	4b78      	ldr	r3, [pc, #480]	@ (80058c4 <neai_classification+0x590>)
 80056e4:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 80056e8:	f855 1b04 	ldr.w	r1, [r5], #4
 80056ec:	6830      	ldr	r0, [r6, #0]
 80056ee:	f7fb fa39 	bl	8000b64 <__addsf3>
 80056f2:	42ac      	cmp	r4, r5
 80056f4:	f846 0b04 	str.w	r0, [r6], #4
 80056f8:	d1f6      	bne.n	80056e8 <neai_classification+0x3b4>
 80056fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 809e 	beq.w	800583e <neai_classification+0x50a>
 8005702:	4698      	mov	r8, r3
 8005704:	2600      	movs	r6, #0
 8005706:	4c6f      	ldr	r4, [pc, #444]	@ (80058c4 <neai_classification+0x590>)
 8005708:	4d6f      	ldr	r5, [pc, #444]	@ (80058c8 <neai_classification+0x594>)
 800570a:	2100      	movs	r1, #0
 800570c:	f854 0b04 	ldr.w	r0, [r4], #4
 8005710:	f7fb fce2 	bl	80010d8 <__aeabi_fcmpge>
 8005714:	b938      	cbnz	r0, 8005726 <neai_classification+0x3f2>
 8005716:	4630      	mov	r0, r6
 8005718:	f7fb fad8 	bl	8000ccc <__aeabi_i2f>
 800571c:	4629      	mov	r1, r5
 800571e:	f7fb fb29 	bl	8000d74 <__aeabi_fmul>
 8005722:	f844 0c04 	str.w	r0, [r4, #-4]
 8005726:	3601      	adds	r6, #1
 8005728:	4546      	cmp	r6, r8
 800572a:	d1ee      	bne.n	800570a <neai_classification+0x3d6>
 800572c:	4b65      	ldr	r3, [pc, #404]	@ (80058c4 <neai_classification+0x590>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	9307      	str	r3, [sp, #28]
 8005732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005734:	2b1e      	cmp	r3, #30
 8005736:	f240 8192 	bls.w	8005a5e <neai_classification+0x72a>
 800573a:	4618      	mov	r0, r3
 800573c:	f7fb fac2 	bl	8000cc4 <__aeabi_ui2f>
 8005740:	4962      	ldr	r1, [pc, #392]	@ (80058cc <neai_classification+0x598>)
 8005742:	f7fb fbcb 	bl	8000edc <__aeabi_fdiv>
 8005746:	4c5f      	ldr	r4, [pc, #380]	@ (80058c4 <neai_classification+0x590>)
 8005748:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800574c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800574e:	9005      	str	r0, [sp, #20]
 8005750:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8005754:	4649      	mov	r1, r9
 8005756:	4628      	mov	r0, r5
 8005758:	f7fb fcaa 	bl	80010b0 <__aeabi_fcmplt>
 800575c:	b100      	cbz	r0, 8005760 <neai_classification+0x42c>
 800575e:	46a9      	mov	r9, r5
 8005760:	42a6      	cmp	r6, r4
 8005762:	d1f5      	bne.n	8005750 <neai_classification+0x41c>
 8005764:	f04f 0a00 	mov.w	sl, #0
 8005768:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800576c:	4648      	mov	r0, r9
 800576e:	f7fb f9f7 	bl	8000b60 <__aeabi_fsub>
 8005772:	4654      	mov	r4, sl
 8005774:	4b56      	ldr	r3, [pc, #344]	@ (80058d0 <neai_classification+0x59c>)
 8005776:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005778:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800577c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005780:	9004      	str	r0, [sp, #16]
 8005782:	9306      	str	r3, [sp, #24]
 8005784:	9708      	str	r7, [sp, #32]
 8005786:	9d04      	ldr	r5, [sp, #16]
 8005788:	f8cd a00c 	str.w	sl, [sp, #12]
 800578c:	f10a 0a01 	add.w	sl, sl, #1
 8005790:	4650      	mov	r0, sl
 8005792:	f848 5b04 	str.w	r5, [r8], #4
 8005796:	f7fb fa99 	bl	8000ccc <__aeabi_i2f>
 800579a:	9905      	ldr	r1, [sp, #20]
 800579c:	f7fb faea 	bl	8000d74 <__aeabi_fmul>
 80057a0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80057a4:	f7fb f9dc 	bl	8000b60 <__aeabi_fsub>
 80057a8:	4607      	mov	r7, r0
 80057aa:	4620      	mov	r0, r4
 80057ac:	f7fb fa8a 	bl	8000cc4 <__aeabi_ui2f>
 80057b0:	4639      	mov	r1, r7
 80057b2:	f7fb fc87 	bl	80010c4 <__aeabi_fcmple>
 80057b6:	b340      	cbz	r0, 800580a <neai_classification+0x4d6>
 80057b8:	2600      	movs	r6, #0
 80057ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80057be:	fa1f f886 	uxth.w	r8, r6
 80057c2:	4640      	mov	r0, r8
 80057c4:	f7fb fa82 	bl	8000ccc <__aeabi_i2f>
 80057c8:	4629      	mov	r1, r5
 80057ca:	f7fb fad3 	bl	8000d74 <__aeabi_fmul>
 80057ce:	4b3d      	ldr	r3, [pc, #244]	@ (80058c4 <neai_classification+0x590>)
 80057d0:	3601      	adds	r6, #1
 80057d2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80057d6:	f7fb f9c5 	bl	8000b64 <__addsf3>
 80057da:	4605      	mov	r5, r0
 80057dc:	f108 0001 	add.w	r0, r8, #1
 80057e0:	f7fb fa74 	bl	8000ccc <__aeabi_i2f>
 80057e4:	4601      	mov	r1, r0
 80057e6:	4628      	mov	r0, r5
 80057e8:	f7fb fb78 	bl	8000edc <__aeabi_fdiv>
 80057ec:	3401      	adds	r4, #1
 80057ee:	b2a4      	uxth	r4, r4
 80057f0:	4605      	mov	r5, r0
 80057f2:	4620      	mov	r0, r4
 80057f4:	f7fb fa66 	bl	8000cc4 <__aeabi_ui2f>
 80057f8:	4639      	mov	r1, r7
 80057fa:	f7fb fc63 	bl	80010c4 <__aeabi_fcmple>
 80057fe:	2800      	cmp	r0, #0
 8005800:	d1dd      	bne.n	80057be <neai_classification+0x48a>
 8005802:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005806:	f848 5c04 	str.w	r5, [r8, #-4]
 800580a:	9e06      	ldr	r6, [sp, #24]
 800580c:	4649      	mov	r1, r9
 800580e:	6830      	ldr	r0, [r6, #0]
 8005810:	f7fb fc4e 	bl	80010b0 <__aeabi_fcmplt>
 8005814:	b118      	cbz	r0, 800581e <neai_classification+0x4ea>
 8005816:	9b07      	ldr	r3, [sp, #28]
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	f858 5c04 	ldr.w	r5, [r8, #-4]
 800581e:	4629      	mov	r1, r5
 8005820:	4648      	mov	r0, r9
 8005822:	f7fb fc63 	bl	80010ec <__aeabi_fcmpgt>
 8005826:	b130      	cbz	r0, 8005836 <neai_classification+0x502>
 8005828:	9b03      	ldr	r3, [sp, #12]
 800582a:	b123      	cbz	r3, 8005836 <neai_classification+0x502>
 800582c:	4a29      	ldr	r2, [pc, #164]	@ (80058d4 <neai_classification+0x5a0>)
 800582e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005832:	f848 3c04 	str.w	r3, [r8, #-4]
 8005836:	f1ba 0f1e 	cmp.w	sl, #30
 800583a:	d1a4      	bne.n	8005786 <neai_classification+0x452>
 800583c:	9f08      	ldr	r7, [sp, #32]
 800583e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005842:	3201      	adds	r2, #1
 8005844:	920e      	str	r2, [sp, #56]	@ 0x38
 8005846:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005848:	331e      	adds	r3, #30
 800584a:	3278      	adds	r2, #120	@ 0x78
 800584c:	2b5a      	cmp	r3, #90	@ 0x5a
 800584e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005850:	920c      	str	r2, [sp, #48]	@ 0x30
 8005852:	f47f ada4 	bne.w	800539e <neai_classification+0x6a>
 8005856:	2500      	movs	r5, #0
 8005858:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800585a:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800585c:	601d      	str	r5, [r3, #0]
 800585e:	605d      	str	r5, [r3, #4]
 8005860:	609d      	str	r5, [r3, #8]
 8005862:	60dd      	str	r5, [r3, #12]
 8005864:	4b1c      	ldr	r3, [pc, #112]	@ (80058d8 <neai_classification+0x5a4>)
 8005866:	681c      	ldr	r4, [r3, #0]
 8005868:	2c00      	cmp	r4, #0
 800586a:	f000 8093 	beq.w	8005994 <neai_classification+0x660>
 800586e:	4a1b      	ldr	r2, [pc, #108]	@ (80058dc <neai_classification+0x5a8>)
 8005870:	4b1b      	ldr	r3, [pc, #108]	@ (80058e0 <neai_classification+0x5ac>)
 8005872:	f8d2 8000 	ldr.w	r8, [r2]
 8005876:	4a1b      	ldr	r2, [pc, #108]	@ (80058e4 <neai_classification+0x5b0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6817      	ldr	r7, [r2, #0]
 800587c:	4a1a      	ldr	r2, [pc, #104]	@ (80058e8 <neai_classification+0x5b4>)
 800587e:	4620      	mov	r0, r4
 8005880:	f8d2 a000 	ldr.w	sl, [r2]
 8005884:	4a19      	ldr	r2, [pc, #100]	@ (80058ec <neai_classification+0x5b8>)
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	f8d2 9000 	ldr.w	r9, [r2]
 800588c:	f7fb fa1a 	bl	8000cc4 <__aeabi_ui2f>
 8005890:	4601      	mov	r1, r0
 8005892:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005896:	f7fb fb21 	bl	8000edc <__aeabi_fdiv>
 800589a:	9b01      	ldr	r3, [sp, #4]
 800589c:	9003      	str	r0, [sp, #12]
 800589e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80058a2:	3b04      	subs	r3, #4
 80058a4:	9301      	str	r3, [sp, #4]
 80058a6:	1f23      	subs	r3, r4, #4
 80058a8:	9302      	str	r3, [sp, #8]
 80058aa:	9b01      	ldr	r3, [sp, #4]
 80058ac:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	f7fb fc61 	bl	8001178 <__aeabi_f2uiz>
 80058b6:	4683      	mov	fp, r0
 80058b8:	4604      	mov	r4, r0
 80058ba:	e025      	b.n	8005908 <neai_classification+0x5d4>
 80058bc:	20000a0c 	.word	0x20000a0c
 80058c0:	20000904 	.word	0x20000904
 80058c4:	2000090c 	.word	0x2000090c
 80058c8:	3b03126f 	.word	0x3b03126f
 80058cc:	41f00000 	.word	0x41f00000
 80058d0:	20000e0c 	.word	0x20000e0c
 80058d4:	20000e08 	.word	0x20000e08
 80058d8:	200008fc 	.word	0x200008fc
 80058dc:	200008f4 	.word	0x200008f4
 80058e0:	200008f8 	.word	0x200008f8
 80058e4:	200008e8 	.word	0x200008e8
 80058e8:	200008ec 	.word	0x200008ec
 80058ec:	200008f0 	.word	0x200008f0
 80058f0:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80058f4:	4629      	mov	r1, r5
 80058f6:	4620      	mov	r0, r4
 80058f8:	f7fb fbda 	bl	80010b0 <__aeabi_fcmplt>
 80058fc:	b9c8      	cbnz	r0, 8005932 <neai_classification+0x5fe>
 80058fe:	4620      	mov	r0, r4
 8005900:	f7fb fc3a 	bl	8001178 <__aeabi_f2uiz>
 8005904:	eb00 040b 	add.w	r4, r0, fp
 8005908:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 800590c:	f7fb fc34 	bl	8001178 <__aeabi_f2uiz>
 8005910:	4b6a      	ldr	r3, [pc, #424]	@ (8005abc <neai_classification+0x788>)
 8005912:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8005916:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800591a:	f7fb fbc9 	bl	80010b0 <__aeabi_fcmplt>
 800591e:	2800      	cmp	r0, #0
 8005920:	d1e6      	bne.n	80058f0 <neai_classification+0x5bc>
 8005922:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 8005926:	4629      	mov	r1, r5
 8005928:	4620      	mov	r0, r4
 800592a:	f7fb fbc1 	bl	80010b0 <__aeabi_fcmplt>
 800592e:	2800      	cmp	r0, #0
 8005930:	d0e5      	beq.n	80058fe <neai_classification+0x5ca>
 8005932:	f104 4000 	add.w	r0, r4, #2147483648	@ 0x80000000
 8005936:	f7fb fc1f 	bl	8001178 <__aeabi_f2uiz>
 800593a:	b284      	uxth	r4, r0
 800593c:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 8005940:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8005944:	3c01      	subs	r4, #1
 8005946:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 800594a:	9903      	ldr	r1, [sp, #12]
 800594c:	f7fb f90a 	bl	8000b64 <__addsf3>
 8005950:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005954:	4293      	cmp	r3, r2
 8005956:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 800595a:	d1a6      	bne.n	80058aa <neai_classification+0x576>
 800595c:	f8db 7004 	ldr.w	r7, [fp, #4]
 8005960:	f8db 8000 	ldr.w	r8, [fp]
 8005964:	4638      	mov	r0, r7
 8005966:	4641      	mov	r1, r8
 8005968:	f8db 4008 	ldr.w	r4, [fp, #8]
 800596c:	f8db 500c 	ldr.w	r5, [fp, #12]
 8005970:	f7fb fbbc 	bl	80010ec <__aeabi_fcmpgt>
 8005974:	b900      	cbnz	r0, 8005978 <neai_classification+0x644>
 8005976:	4647      	mov	r7, r8
 8005978:	4621      	mov	r1, r4
 800597a:	4638      	mov	r0, r7
 800597c:	f7fb fb98 	bl	80010b0 <__aeabi_fcmplt>
 8005980:	2800      	cmp	r0, #0
 8005982:	f000 808d 	beq.w	8005aa0 <neai_classification+0x76c>
 8005986:	4629      	mov	r1, r5
 8005988:	4620      	mov	r0, r4
 800598a:	f7fb fb91 	bl	80010b0 <__aeabi_fcmplt>
 800598e:	2800      	cmp	r0, #0
 8005990:	f000 8084 	beq.w	8005a9c <neai_classification+0x768>
 8005994:	2400      	movs	r4, #0
 8005996:	f04f 4882 	mov.w	r8, #1090519040	@ 0x41000000
 800599a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800599c:	1f1f      	subs	r7, r3, #4
 800599e:	f103 090c 	add.w	r9, r3, #12
 80059a2:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80059a6:	4629      	mov	r1, r5
 80059a8:	f7fb f8da 	bl	8000b60 <__aeabi_fsub>
 80059ac:	4641      	mov	r1, r8
 80059ae:	f7fb f9e1 	bl	8000d74 <__aeabi_fmul>
 80059b2:	f002 fd89 	bl	80084c8 <expf>
 80059b6:	4601      	mov	r1, r0
 80059b8:	4620      	mov	r0, r4
 80059ba:	6039      	str	r1, [r7, #0]
 80059bc:	f7fb f8d2 	bl	8000b64 <__addsf3>
 80059c0:	45b9      	cmp	r9, r7
 80059c2:	4604      	mov	r4, r0
 80059c4:	d1ed      	bne.n	80059a2 <neai_classification+0x66e>
 80059c6:	4601      	mov	r1, r0
 80059c8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80059cc:	f7fb fa86 	bl	8000edc <__aeabi_fdiv>
 80059d0:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80059d4:	4680      	mov	r8, r0
 80059d6:	f8d9 1000 	ldr.w	r1, [r9]
 80059da:	f7fb f9cb 	bl	8000d74 <__aeabi_fmul>
 80059de:	4607      	mov	r7, r0
 80059e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80059e4:	4640      	mov	r0, r8
 80059e6:	f8c9 7000 	str.w	r7, [r9]
 80059ea:	f7fb f9c3 	bl	8000d74 <__aeabi_fmul>
 80059ee:	4604      	mov	r4, r0
 80059f0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80059f4:	4640      	mov	r0, r8
 80059f6:	f8c9 4004 	str.w	r4, [r9, #4]
 80059fa:	f7fb f9bb 	bl	8000d74 <__aeabi_fmul>
 80059fe:	4605      	mov	r5, r0
 8005a00:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8005a04:	4640      	mov	r0, r8
 8005a06:	f8c9 5008 	str.w	r5, [r9, #8]
 8005a0a:	f7fb f9b3 	bl	8000d74 <__aeabi_fmul>
 8005a0e:	4639      	mov	r1, r7
 8005a10:	4680      	mov	r8, r0
 8005a12:	f8c9 000c 	str.w	r0, [r9, #12]
 8005a16:	4620      	mov	r0, r4
 8005a18:	f7fb fb68 	bl	80010ec <__aeabi_fcmpgt>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d134      	bne.n	8005a8a <neai_classification+0x756>
 8005a20:	463c      	mov	r4, r7
 8005a22:	4628      	mov	r0, r5
 8005a24:	4621      	mov	r1, r4
 8005a26:	2701      	movs	r7, #1
 8005a28:	f7fb fb60 	bl	80010ec <__aeabi_fcmpgt>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d133      	bne.n	8005a98 <neai_classification+0x764>
 8005a30:	4625      	mov	r5, r4
 8005a32:	4641      	mov	r1, r8
 8005a34:	4628      	mov	r0, r5
 8005a36:	f7fb fb3b 	bl	80010b0 <__aeabi_fcmplt>
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	bf18      	it	ne
 8005a3e:	2704      	movne	r7, #4
 8005a40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a42:	801f      	strh	r7, [r3, #0]
 8005a44:	4630      	mov	r0, r6
 8005a46:	b01d      	add	sp, #116	@ 0x74
 8005a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4c:	4648      	mov	r0, r9
 8005a4e:	f002 fd61 	bl	8008514 <sqrtf>
 8005a52:	4544      	cmp	r4, r8
 8005a54:	f848 0c04 	str.w	r0, [r8, #-4]
 8005a58:	f47f ae30 	bne.w	80056bc <neai_classification+0x388>
 8005a5c:	e63c      	b.n	80056d8 <neai_classification+0x3a4>
 8005a5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005a60:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005a62:	4917      	ldr	r1, [pc, #92]	@ (8005ac0 <neai_classification+0x78c>)
 8005a64:	f000 ff1f 	bl	80068a6 <memcpy>
 8005a68:	e6e9      	b.n	800583e <neai_classification+0x50a>
 8005a6a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005a6e:	f7fb fa35 	bl	8000edc <__aeabi_fdiv>
 8005a72:	9b01      	ldr	r3, [sp, #4]
 8005a74:	4680      	mov	r8, r0
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d01b      	beq.n	8005ab2 <neai_classification+0x77e>
 8005a7a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	960a      	str	r6, [sp, #40]	@ 0x28
 8005a80:	e4ea      	b.n	8005458 <neai_classification+0x124>
 8005a82:	461e      	mov	r6, r3
 8005a84:	2100      	movs	r1, #0
 8005a86:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a88:	e4d4      	b.n	8005434 <neai_classification+0x100>
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	2702      	movs	r7, #2
 8005a90:	f7fb fb2c 	bl	80010ec <__aeabi_fcmpgt>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d0cb      	beq.n	8005a30 <neai_classification+0x6fc>
 8005a98:	2703      	movs	r7, #3
 8005a9a:	e7ca      	b.n	8005a32 <neai_classification+0x6fe>
 8005a9c:	4625      	mov	r5, r4
 8005a9e:	e779      	b.n	8005994 <neai_classification+0x660>
 8005aa0:	463c      	mov	r4, r7
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f7fb fb03 	bl	80010b0 <__aeabi_fcmplt>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	f47f af72 	bne.w	8005994 <neai_classification+0x660>
 8005ab0:	e7f4      	b.n	8005a9c <neai_classification+0x768>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	461e      	mov	r6, r3
 8005ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ab8:	e5c8      	b.n	800564c <neai_classification+0x318>
 8005aba:	bf00      	nop
 8005abc:	20000e0c 	.word	0x20000e0c
 8005ac0:	2000090c 	.word	0x2000090c

08005ac4 <__cvt>:
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aca:	461d      	mov	r5, r3
 8005acc:	bfbb      	ittet	lt
 8005ace:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005ad2:	461d      	movlt	r5, r3
 8005ad4:	2300      	movge	r3, #0
 8005ad6:	232d      	movlt	r3, #45	@ 0x2d
 8005ad8:	b088      	sub	sp, #32
 8005ada:	4614      	mov	r4, r2
 8005adc:	bfb8      	it	lt
 8005ade:	4614      	movlt	r4, r2
 8005ae0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005ae2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005ae4:	7013      	strb	r3, [r2, #0]
 8005ae6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ae8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005aec:	f023 0820 	bic.w	r8, r3, #32
 8005af0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005af4:	d005      	beq.n	8005b02 <__cvt+0x3e>
 8005af6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005afa:	d100      	bne.n	8005afe <__cvt+0x3a>
 8005afc:	3601      	adds	r6, #1
 8005afe:	2302      	movs	r3, #2
 8005b00:	e000      	b.n	8005b04 <__cvt+0x40>
 8005b02:	2303      	movs	r3, #3
 8005b04:	aa07      	add	r2, sp, #28
 8005b06:	9204      	str	r2, [sp, #16]
 8005b08:	aa06      	add	r2, sp, #24
 8005b0a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005b0e:	e9cd 3600 	strd	r3, r6, [sp]
 8005b12:	4622      	mov	r2, r4
 8005b14:	462b      	mov	r3, r5
 8005b16:	f000 ff5f 	bl	80069d8 <_dtoa_r>
 8005b1a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005b1e:	4607      	mov	r7, r0
 8005b20:	d119      	bne.n	8005b56 <__cvt+0x92>
 8005b22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005b24:	07db      	lsls	r3, r3, #31
 8005b26:	d50e      	bpl.n	8005b46 <__cvt+0x82>
 8005b28:	eb00 0906 	add.w	r9, r0, r6
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2300      	movs	r3, #0
 8005b30:	4620      	mov	r0, r4
 8005b32:	4629      	mov	r1, r5
 8005b34:	f7fa ff50 	bl	80009d8 <__aeabi_dcmpeq>
 8005b38:	b108      	cbz	r0, 8005b3e <__cvt+0x7a>
 8005b3a:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b3e:	2230      	movs	r2, #48	@ 0x30
 8005b40:	9b07      	ldr	r3, [sp, #28]
 8005b42:	454b      	cmp	r3, r9
 8005b44:	d31e      	bcc.n	8005b84 <__cvt+0xc0>
 8005b46:	4638      	mov	r0, r7
 8005b48:	9b07      	ldr	r3, [sp, #28]
 8005b4a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005b4c:	1bdb      	subs	r3, r3, r7
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	b008      	add	sp, #32
 8005b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b56:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b5a:	eb00 0906 	add.w	r9, r0, r6
 8005b5e:	d1e5      	bne.n	8005b2c <__cvt+0x68>
 8005b60:	7803      	ldrb	r3, [r0, #0]
 8005b62:	2b30      	cmp	r3, #48	@ 0x30
 8005b64:	d10a      	bne.n	8005b7c <__cvt+0xb8>
 8005b66:	2200      	movs	r2, #0
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	f7fa ff33 	bl	80009d8 <__aeabi_dcmpeq>
 8005b72:	b918      	cbnz	r0, 8005b7c <__cvt+0xb8>
 8005b74:	f1c6 0601 	rsb	r6, r6, #1
 8005b78:	f8ca 6000 	str.w	r6, [sl]
 8005b7c:	f8da 3000 	ldr.w	r3, [sl]
 8005b80:	4499      	add	r9, r3
 8005b82:	e7d3      	b.n	8005b2c <__cvt+0x68>
 8005b84:	1c59      	adds	r1, r3, #1
 8005b86:	9107      	str	r1, [sp, #28]
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	e7d9      	b.n	8005b40 <__cvt+0x7c>

08005b8c <__exponent>:
 8005b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b8e:	2900      	cmp	r1, #0
 8005b90:	bfb6      	itet	lt
 8005b92:	232d      	movlt	r3, #45	@ 0x2d
 8005b94:	232b      	movge	r3, #43	@ 0x2b
 8005b96:	4249      	neglt	r1, r1
 8005b98:	2909      	cmp	r1, #9
 8005b9a:	7002      	strb	r2, [r0, #0]
 8005b9c:	7043      	strb	r3, [r0, #1]
 8005b9e:	dd29      	ble.n	8005bf4 <__exponent+0x68>
 8005ba0:	f10d 0307 	add.w	r3, sp, #7
 8005ba4:	461d      	mov	r5, r3
 8005ba6:	270a      	movs	r7, #10
 8005ba8:	fbb1 f6f7 	udiv	r6, r1, r7
 8005bac:	461a      	mov	r2, r3
 8005bae:	fb07 1416 	mls	r4, r7, r6, r1
 8005bb2:	3430      	adds	r4, #48	@ 0x30
 8005bb4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005bb8:	460c      	mov	r4, r1
 8005bba:	2c63      	cmp	r4, #99	@ 0x63
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005bc2:	dcf1      	bgt.n	8005ba8 <__exponent+0x1c>
 8005bc4:	3130      	adds	r1, #48	@ 0x30
 8005bc6:	1e94      	subs	r4, r2, #2
 8005bc8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005bcc:	4623      	mov	r3, r4
 8005bce:	1c41      	adds	r1, r0, #1
 8005bd0:	42ab      	cmp	r3, r5
 8005bd2:	d30a      	bcc.n	8005bea <__exponent+0x5e>
 8005bd4:	f10d 0309 	add.w	r3, sp, #9
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	42ac      	cmp	r4, r5
 8005bdc:	bf88      	it	hi
 8005bde:	2300      	movhi	r3, #0
 8005be0:	3302      	adds	r3, #2
 8005be2:	4403      	add	r3, r0
 8005be4:	1a18      	subs	r0, r3, r0
 8005be6:	b003      	add	sp, #12
 8005be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bea:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005bee:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005bf2:	e7ed      	b.n	8005bd0 <__exponent+0x44>
 8005bf4:	2330      	movs	r3, #48	@ 0x30
 8005bf6:	3130      	adds	r1, #48	@ 0x30
 8005bf8:	7083      	strb	r3, [r0, #2]
 8005bfa:	70c1      	strb	r1, [r0, #3]
 8005bfc:	1d03      	adds	r3, r0, #4
 8005bfe:	e7f1      	b.n	8005be4 <__exponent+0x58>

08005c00 <_printf_float>:
 8005c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c04:	b091      	sub	sp, #68	@ 0x44
 8005c06:	460c      	mov	r4, r1
 8005c08:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	461f      	mov	r7, r3
 8005c10:	4605      	mov	r5, r0
 8005c12:	f000 fdc3 	bl	800679c <_localeconv_r>
 8005c16:	6803      	ldr	r3, [r0, #0]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	9308      	str	r3, [sp, #32]
 8005c1c:	f7fa fab0 	bl	8000180 <strlen>
 8005c20:	2300      	movs	r3, #0
 8005c22:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c24:	f8d8 3000 	ldr.w	r3, [r8]
 8005c28:	9009      	str	r0, [sp, #36]	@ 0x24
 8005c2a:	3307      	adds	r3, #7
 8005c2c:	f023 0307 	bic.w	r3, r3, #7
 8005c30:	f103 0208 	add.w	r2, r3, #8
 8005c34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c38:	f8d4 b000 	ldr.w	fp, [r4]
 8005c3c:	f8c8 2000 	str.w	r2, [r8]
 8005c40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c44:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c4a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005c4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005c5a:	4b9c      	ldr	r3, [pc, #624]	@ (8005ecc <_printf_float+0x2cc>)
 8005c5c:	f7fa feee 	bl	8000a3c <__aeabi_dcmpun>
 8005c60:	bb70      	cbnz	r0, 8005cc0 <_printf_float+0xc0>
 8005c62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c6a:	4b98      	ldr	r3, [pc, #608]	@ (8005ecc <_printf_float+0x2cc>)
 8005c6c:	f7fa fec8 	bl	8000a00 <__aeabi_dcmple>
 8005c70:	bb30      	cbnz	r0, 8005cc0 <_printf_float+0xc0>
 8005c72:	2200      	movs	r2, #0
 8005c74:	2300      	movs	r3, #0
 8005c76:	4640      	mov	r0, r8
 8005c78:	4649      	mov	r1, r9
 8005c7a:	f7fa feb7 	bl	80009ec <__aeabi_dcmplt>
 8005c7e:	b110      	cbz	r0, 8005c86 <_printf_float+0x86>
 8005c80:	232d      	movs	r3, #45	@ 0x2d
 8005c82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c86:	4a92      	ldr	r2, [pc, #584]	@ (8005ed0 <_printf_float+0x2d0>)
 8005c88:	4b92      	ldr	r3, [pc, #584]	@ (8005ed4 <_printf_float+0x2d4>)
 8005c8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c8e:	bf8c      	ite	hi
 8005c90:	4690      	movhi	r8, r2
 8005c92:	4698      	movls	r8, r3
 8005c94:	2303      	movs	r3, #3
 8005c96:	f04f 0900 	mov.w	r9, #0
 8005c9a:	6123      	str	r3, [r4, #16]
 8005c9c:	f02b 0304 	bic.w	r3, fp, #4
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	4633      	mov	r3, r6
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	9700      	str	r7, [sp, #0]
 8005caa:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005cac:	f000 f9d4 	bl	8006058 <_printf_common>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	f040 8090 	bne.w	8005dd6 <_printf_float+0x1d6>
 8005cb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cba:	b011      	add	sp, #68	@ 0x44
 8005cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc0:	4642      	mov	r2, r8
 8005cc2:	464b      	mov	r3, r9
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	f7fa feb8 	bl	8000a3c <__aeabi_dcmpun>
 8005ccc:	b148      	cbz	r0, 8005ce2 <_printf_float+0xe2>
 8005cce:	464b      	mov	r3, r9
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bfb8      	it	lt
 8005cd4:	232d      	movlt	r3, #45	@ 0x2d
 8005cd6:	4a80      	ldr	r2, [pc, #512]	@ (8005ed8 <_printf_float+0x2d8>)
 8005cd8:	bfb8      	it	lt
 8005cda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005cde:	4b7f      	ldr	r3, [pc, #508]	@ (8005edc <_printf_float+0x2dc>)
 8005ce0:	e7d3      	b.n	8005c8a <_printf_float+0x8a>
 8005ce2:	6863      	ldr	r3, [r4, #4]
 8005ce4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	d13f      	bne.n	8005d6c <_printf_float+0x16c>
 8005cec:	2306      	movs	r3, #6
 8005cee:	6063      	str	r3, [r4, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	9206      	str	r2, [sp, #24]
 8005cfa:	aa0e      	add	r2, sp, #56	@ 0x38
 8005cfc:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005d00:	aa0d      	add	r2, sp, #52	@ 0x34
 8005d02:	9203      	str	r2, [sp, #12]
 8005d04:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005d08:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	4642      	mov	r2, r8
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	4628      	mov	r0, r5
 8005d14:	464b      	mov	r3, r9
 8005d16:	910a      	str	r1, [sp, #40]	@ 0x28
 8005d18:	f7ff fed4 	bl	8005ac4 <__cvt>
 8005d1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d1e:	4680      	mov	r8, r0
 8005d20:	2947      	cmp	r1, #71	@ 0x47
 8005d22:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005d24:	d128      	bne.n	8005d78 <_printf_float+0x178>
 8005d26:	1cc8      	adds	r0, r1, #3
 8005d28:	db02      	blt.n	8005d30 <_printf_float+0x130>
 8005d2a:	6863      	ldr	r3, [r4, #4]
 8005d2c:	4299      	cmp	r1, r3
 8005d2e:	dd40      	ble.n	8005db2 <_printf_float+0x1b2>
 8005d30:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d34:	fa5f fa8a 	uxtb.w	sl, sl
 8005d38:	4652      	mov	r2, sl
 8005d3a:	3901      	subs	r1, #1
 8005d3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005d40:	910d      	str	r1, [sp, #52]	@ 0x34
 8005d42:	f7ff ff23 	bl	8005b8c <__exponent>
 8005d46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d48:	4681      	mov	r9, r0
 8005d4a:	1813      	adds	r3, r2, r0
 8005d4c:	2a01      	cmp	r2, #1
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	dc02      	bgt.n	8005d58 <_printf_float+0x158>
 8005d52:	6822      	ldr	r2, [r4, #0]
 8005d54:	07d2      	lsls	r2, r2, #31
 8005d56:	d501      	bpl.n	8005d5c <_printf_float+0x15c>
 8005d58:	3301      	adds	r3, #1
 8005d5a:	6123      	str	r3, [r4, #16]
 8005d5c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d09e      	beq.n	8005ca2 <_printf_float+0xa2>
 8005d64:	232d      	movs	r3, #45	@ 0x2d
 8005d66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d6a:	e79a      	b.n	8005ca2 <_printf_float+0xa2>
 8005d6c:	2947      	cmp	r1, #71	@ 0x47
 8005d6e:	d1bf      	bne.n	8005cf0 <_printf_float+0xf0>
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1bd      	bne.n	8005cf0 <_printf_float+0xf0>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e7ba      	b.n	8005cee <_printf_float+0xee>
 8005d78:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d7c:	d9dc      	bls.n	8005d38 <_printf_float+0x138>
 8005d7e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005d82:	d118      	bne.n	8005db6 <_printf_float+0x1b6>
 8005d84:	2900      	cmp	r1, #0
 8005d86:	6863      	ldr	r3, [r4, #4]
 8005d88:	dd0b      	ble.n	8005da2 <_printf_float+0x1a2>
 8005d8a:	6121      	str	r1, [r4, #16]
 8005d8c:	b913      	cbnz	r3, 8005d94 <_printf_float+0x194>
 8005d8e:	6822      	ldr	r2, [r4, #0]
 8005d90:	07d0      	lsls	r0, r2, #31
 8005d92:	d502      	bpl.n	8005d9a <_printf_float+0x19a>
 8005d94:	3301      	adds	r3, #1
 8005d96:	440b      	add	r3, r1
 8005d98:	6123      	str	r3, [r4, #16]
 8005d9a:	f04f 0900 	mov.w	r9, #0
 8005d9e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005da0:	e7dc      	b.n	8005d5c <_printf_float+0x15c>
 8005da2:	b913      	cbnz	r3, 8005daa <_printf_float+0x1aa>
 8005da4:	6822      	ldr	r2, [r4, #0]
 8005da6:	07d2      	lsls	r2, r2, #31
 8005da8:	d501      	bpl.n	8005dae <_printf_float+0x1ae>
 8005daa:	3302      	adds	r3, #2
 8005dac:	e7f4      	b.n	8005d98 <_printf_float+0x198>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e7f2      	b.n	8005d98 <_printf_float+0x198>
 8005db2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005db6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005db8:	4299      	cmp	r1, r3
 8005dba:	db05      	blt.n	8005dc8 <_printf_float+0x1c8>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	6121      	str	r1, [r4, #16]
 8005dc0:	07d8      	lsls	r0, r3, #31
 8005dc2:	d5ea      	bpl.n	8005d9a <_printf_float+0x19a>
 8005dc4:	1c4b      	adds	r3, r1, #1
 8005dc6:	e7e7      	b.n	8005d98 <_printf_float+0x198>
 8005dc8:	2900      	cmp	r1, #0
 8005dca:	bfcc      	ite	gt
 8005dcc:	2201      	movgt	r2, #1
 8005dce:	f1c1 0202 	rsble	r2, r1, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	e7e0      	b.n	8005d98 <_printf_float+0x198>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	055a      	lsls	r2, r3, #21
 8005dda:	d407      	bmi.n	8005dec <_printf_float+0x1ec>
 8005ddc:	6923      	ldr	r3, [r4, #16]
 8005dde:	4642      	mov	r2, r8
 8005de0:	4631      	mov	r1, r6
 8005de2:	4628      	mov	r0, r5
 8005de4:	47b8      	blx	r7
 8005de6:	3001      	adds	r0, #1
 8005de8:	d12b      	bne.n	8005e42 <_printf_float+0x242>
 8005dea:	e764      	b.n	8005cb6 <_printf_float+0xb6>
 8005dec:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005df0:	f240 80dc 	bls.w	8005fac <_printf_float+0x3ac>
 8005df4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f7fa fdec 	bl	80009d8 <__aeabi_dcmpeq>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d033      	beq.n	8005e6c <_printf_float+0x26c>
 8005e04:	2301      	movs	r3, #1
 8005e06:	4631      	mov	r1, r6
 8005e08:	4628      	mov	r0, r5
 8005e0a:	4a35      	ldr	r2, [pc, #212]	@ (8005ee0 <_printf_float+0x2e0>)
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f af51 	beq.w	8005cb6 <_printf_float+0xb6>
 8005e14:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005e18:	4543      	cmp	r3, r8
 8005e1a:	db02      	blt.n	8005e22 <_printf_float+0x222>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	07d8      	lsls	r0, r3, #31
 8005e20:	d50f      	bpl.n	8005e42 <_printf_float+0x242>
 8005e22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e26:	4631      	mov	r1, r6
 8005e28:	4628      	mov	r0, r5
 8005e2a:	47b8      	blx	r7
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	f43f af42 	beq.w	8005cb6 <_printf_float+0xb6>
 8005e32:	f04f 0900 	mov.w	r9, #0
 8005e36:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005e3a:	f104 0a1a 	add.w	sl, r4, #26
 8005e3e:	45c8      	cmp	r8, r9
 8005e40:	dc09      	bgt.n	8005e56 <_printf_float+0x256>
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	079b      	lsls	r3, r3, #30
 8005e46:	f100 8102 	bmi.w	800604e <_printf_float+0x44e>
 8005e4a:	68e0      	ldr	r0, [r4, #12]
 8005e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e4e:	4298      	cmp	r0, r3
 8005e50:	bfb8      	it	lt
 8005e52:	4618      	movlt	r0, r3
 8005e54:	e731      	b.n	8005cba <_printf_float+0xba>
 8005e56:	2301      	movs	r3, #1
 8005e58:	4652      	mov	r2, sl
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	f43f af28 	beq.w	8005cb6 <_printf_float+0xb6>
 8005e66:	f109 0901 	add.w	r9, r9, #1
 8005e6a:	e7e8      	b.n	8005e3e <_printf_float+0x23e>
 8005e6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	dc38      	bgt.n	8005ee4 <_printf_float+0x2e4>
 8005e72:	2301      	movs	r3, #1
 8005e74:	4631      	mov	r1, r6
 8005e76:	4628      	mov	r0, r5
 8005e78:	4a19      	ldr	r2, [pc, #100]	@ (8005ee0 <_printf_float+0x2e0>)
 8005e7a:	47b8      	blx	r7
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	f43f af1a 	beq.w	8005cb6 <_printf_float+0xb6>
 8005e82:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005e86:	ea59 0303 	orrs.w	r3, r9, r3
 8005e8a:	d102      	bne.n	8005e92 <_printf_float+0x292>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	07d9      	lsls	r1, r3, #31
 8005e90:	d5d7      	bpl.n	8005e42 <_printf_float+0x242>
 8005e92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e96:	4631      	mov	r1, r6
 8005e98:	4628      	mov	r0, r5
 8005e9a:	47b8      	blx	r7
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	f43f af0a 	beq.w	8005cb6 <_printf_float+0xb6>
 8005ea2:	f04f 0a00 	mov.w	sl, #0
 8005ea6:	f104 0b1a 	add.w	fp, r4, #26
 8005eaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005eac:	425b      	negs	r3, r3
 8005eae:	4553      	cmp	r3, sl
 8005eb0:	dc01      	bgt.n	8005eb6 <_printf_float+0x2b6>
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	e793      	b.n	8005dde <_printf_float+0x1de>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	465a      	mov	r2, fp
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	47b8      	blx	r7
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	f43f aef8 	beq.w	8005cb6 <_printf_float+0xb6>
 8005ec6:	f10a 0a01 	add.w	sl, sl, #1
 8005eca:	e7ee      	b.n	8005eaa <_printf_float+0x2aa>
 8005ecc:	7fefffff 	.word	0x7fefffff
 8005ed0:	0800d2a0 	.word	0x0800d2a0
 8005ed4:	0800d29c 	.word	0x0800d29c
 8005ed8:	0800d2a8 	.word	0x0800d2a8
 8005edc:	0800d2a4 	.word	0x0800d2a4
 8005ee0:	0800d2ac 	.word	0x0800d2ac
 8005ee4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ee6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005eea:	4553      	cmp	r3, sl
 8005eec:	bfa8      	it	ge
 8005eee:	4653      	movge	r3, sl
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	4699      	mov	r9, r3
 8005ef4:	dc36      	bgt.n	8005f64 <_printf_float+0x364>
 8005ef6:	f04f 0b00 	mov.w	fp, #0
 8005efa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005efe:	f104 021a 	add.w	r2, r4, #26
 8005f02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f04:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f06:	eba3 0309 	sub.w	r3, r3, r9
 8005f0a:	455b      	cmp	r3, fp
 8005f0c:	dc31      	bgt.n	8005f72 <_printf_float+0x372>
 8005f0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f10:	459a      	cmp	sl, r3
 8005f12:	dc3a      	bgt.n	8005f8a <_printf_float+0x38a>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	07da      	lsls	r2, r3, #31
 8005f18:	d437      	bmi.n	8005f8a <_printf_float+0x38a>
 8005f1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f1c:	ebaa 0903 	sub.w	r9, sl, r3
 8005f20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f22:	ebaa 0303 	sub.w	r3, sl, r3
 8005f26:	4599      	cmp	r9, r3
 8005f28:	bfa8      	it	ge
 8005f2a:	4699      	movge	r9, r3
 8005f2c:	f1b9 0f00 	cmp.w	r9, #0
 8005f30:	dc33      	bgt.n	8005f9a <_printf_float+0x39a>
 8005f32:	f04f 0800 	mov.w	r8, #0
 8005f36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f3a:	f104 0b1a 	add.w	fp, r4, #26
 8005f3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f40:	ebaa 0303 	sub.w	r3, sl, r3
 8005f44:	eba3 0309 	sub.w	r3, r3, r9
 8005f48:	4543      	cmp	r3, r8
 8005f4a:	f77f af7a 	ble.w	8005e42 <_printf_float+0x242>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	465a      	mov	r2, fp
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b8      	blx	r7
 8005f58:	3001      	adds	r0, #1
 8005f5a:	f43f aeac 	beq.w	8005cb6 <_printf_float+0xb6>
 8005f5e:	f108 0801 	add.w	r8, r8, #1
 8005f62:	e7ec      	b.n	8005f3e <_printf_float+0x33e>
 8005f64:	4642      	mov	r2, r8
 8005f66:	4631      	mov	r1, r6
 8005f68:	4628      	mov	r0, r5
 8005f6a:	47b8      	blx	r7
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d1c2      	bne.n	8005ef6 <_printf_float+0x2f6>
 8005f70:	e6a1      	b.n	8005cb6 <_printf_float+0xb6>
 8005f72:	2301      	movs	r3, #1
 8005f74:	4631      	mov	r1, r6
 8005f76:	4628      	mov	r0, r5
 8005f78:	920a      	str	r2, [sp, #40]	@ 0x28
 8005f7a:	47b8      	blx	r7
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	f43f ae9a 	beq.w	8005cb6 <_printf_float+0xb6>
 8005f82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f84:	f10b 0b01 	add.w	fp, fp, #1
 8005f88:	e7bb      	b.n	8005f02 <_printf_float+0x302>
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f90:	4628      	mov	r0, r5
 8005f92:	47b8      	blx	r7
 8005f94:	3001      	adds	r0, #1
 8005f96:	d1c0      	bne.n	8005f1a <_printf_float+0x31a>
 8005f98:	e68d      	b.n	8005cb6 <_printf_float+0xb6>
 8005f9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	4442      	add	r2, r8
 8005fa4:	47b8      	blx	r7
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d1c3      	bne.n	8005f32 <_printf_float+0x332>
 8005faa:	e684      	b.n	8005cb6 <_printf_float+0xb6>
 8005fac:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005fb0:	f1ba 0f01 	cmp.w	sl, #1
 8005fb4:	dc01      	bgt.n	8005fba <_printf_float+0x3ba>
 8005fb6:	07db      	lsls	r3, r3, #31
 8005fb8:	d536      	bpl.n	8006028 <_printf_float+0x428>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b8      	blx	r7
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	f43f ae76 	beq.w	8005cb6 <_printf_float+0xb6>
 8005fca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005fce:	4631      	mov	r1, r6
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	47b8      	blx	r7
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	f43f ae6e 	beq.w	8005cb6 <_printf_float+0xb6>
 8005fda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005fe6:	f7fa fcf7 	bl	80009d8 <__aeabi_dcmpeq>
 8005fea:	b9c0      	cbnz	r0, 800601e <_printf_float+0x41e>
 8005fec:	4653      	mov	r3, sl
 8005fee:	f108 0201 	add.w	r2, r8, #1
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	47b8      	blx	r7
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d10c      	bne.n	8006016 <_printf_float+0x416>
 8005ffc:	e65b      	b.n	8005cb6 <_printf_float+0xb6>
 8005ffe:	2301      	movs	r3, #1
 8006000:	465a      	mov	r2, fp
 8006002:	4631      	mov	r1, r6
 8006004:	4628      	mov	r0, r5
 8006006:	47b8      	blx	r7
 8006008:	3001      	adds	r0, #1
 800600a:	f43f ae54 	beq.w	8005cb6 <_printf_float+0xb6>
 800600e:	f108 0801 	add.w	r8, r8, #1
 8006012:	45d0      	cmp	r8, sl
 8006014:	dbf3      	blt.n	8005ffe <_printf_float+0x3fe>
 8006016:	464b      	mov	r3, r9
 8006018:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800601c:	e6e0      	b.n	8005de0 <_printf_float+0x1e0>
 800601e:	f04f 0800 	mov.w	r8, #0
 8006022:	f104 0b1a 	add.w	fp, r4, #26
 8006026:	e7f4      	b.n	8006012 <_printf_float+0x412>
 8006028:	2301      	movs	r3, #1
 800602a:	4642      	mov	r2, r8
 800602c:	e7e1      	b.n	8005ff2 <_printf_float+0x3f2>
 800602e:	2301      	movs	r3, #1
 8006030:	464a      	mov	r2, r9
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	f43f ae3c 	beq.w	8005cb6 <_printf_float+0xb6>
 800603e:	f108 0801 	add.w	r8, r8, #1
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006046:	1a5b      	subs	r3, r3, r1
 8006048:	4543      	cmp	r3, r8
 800604a:	dcf0      	bgt.n	800602e <_printf_float+0x42e>
 800604c:	e6fd      	b.n	8005e4a <_printf_float+0x24a>
 800604e:	f04f 0800 	mov.w	r8, #0
 8006052:	f104 0919 	add.w	r9, r4, #25
 8006056:	e7f4      	b.n	8006042 <_printf_float+0x442>

08006058 <_printf_common>:
 8006058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	4616      	mov	r6, r2
 800605e:	4698      	mov	r8, r3
 8006060:	688a      	ldr	r2, [r1, #8]
 8006062:	690b      	ldr	r3, [r1, #16]
 8006064:	4607      	mov	r7, r0
 8006066:	4293      	cmp	r3, r2
 8006068:	bfb8      	it	lt
 800606a:	4613      	movlt	r3, r2
 800606c:	6033      	str	r3, [r6, #0]
 800606e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006072:	460c      	mov	r4, r1
 8006074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006078:	b10a      	cbz	r2, 800607e <_printf_common+0x26>
 800607a:	3301      	adds	r3, #1
 800607c:	6033      	str	r3, [r6, #0]
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	0699      	lsls	r1, r3, #26
 8006082:	bf42      	ittt	mi
 8006084:	6833      	ldrmi	r3, [r6, #0]
 8006086:	3302      	addmi	r3, #2
 8006088:	6033      	strmi	r3, [r6, #0]
 800608a:	6825      	ldr	r5, [r4, #0]
 800608c:	f015 0506 	ands.w	r5, r5, #6
 8006090:	d106      	bne.n	80060a0 <_printf_common+0x48>
 8006092:	f104 0a19 	add.w	sl, r4, #25
 8006096:	68e3      	ldr	r3, [r4, #12]
 8006098:	6832      	ldr	r2, [r6, #0]
 800609a:	1a9b      	subs	r3, r3, r2
 800609c:	42ab      	cmp	r3, r5
 800609e:	dc2b      	bgt.n	80060f8 <_printf_common+0xa0>
 80060a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060a4:	6822      	ldr	r2, [r4, #0]
 80060a6:	3b00      	subs	r3, #0
 80060a8:	bf18      	it	ne
 80060aa:	2301      	movne	r3, #1
 80060ac:	0692      	lsls	r2, r2, #26
 80060ae:	d430      	bmi.n	8006112 <_printf_common+0xba>
 80060b0:	4641      	mov	r1, r8
 80060b2:	4638      	mov	r0, r7
 80060b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060b8:	47c8      	blx	r9
 80060ba:	3001      	adds	r0, #1
 80060bc:	d023      	beq.n	8006106 <_printf_common+0xae>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	6922      	ldr	r2, [r4, #16]
 80060c2:	f003 0306 	and.w	r3, r3, #6
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	bf14      	ite	ne
 80060ca:	2500      	movne	r5, #0
 80060cc:	6833      	ldreq	r3, [r6, #0]
 80060ce:	f04f 0600 	mov.w	r6, #0
 80060d2:	bf08      	it	eq
 80060d4:	68e5      	ldreq	r5, [r4, #12]
 80060d6:	f104 041a 	add.w	r4, r4, #26
 80060da:	bf08      	it	eq
 80060dc:	1aed      	subeq	r5, r5, r3
 80060de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80060e2:	bf08      	it	eq
 80060e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060e8:	4293      	cmp	r3, r2
 80060ea:	bfc4      	itt	gt
 80060ec:	1a9b      	subgt	r3, r3, r2
 80060ee:	18ed      	addgt	r5, r5, r3
 80060f0:	42b5      	cmp	r5, r6
 80060f2:	d11a      	bne.n	800612a <_printf_common+0xd2>
 80060f4:	2000      	movs	r0, #0
 80060f6:	e008      	b.n	800610a <_printf_common+0xb2>
 80060f8:	2301      	movs	r3, #1
 80060fa:	4652      	mov	r2, sl
 80060fc:	4641      	mov	r1, r8
 80060fe:	4638      	mov	r0, r7
 8006100:	47c8      	blx	r9
 8006102:	3001      	adds	r0, #1
 8006104:	d103      	bne.n	800610e <_printf_common+0xb6>
 8006106:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800610a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800610e:	3501      	adds	r5, #1
 8006110:	e7c1      	b.n	8006096 <_printf_common+0x3e>
 8006112:	2030      	movs	r0, #48	@ 0x30
 8006114:	18e1      	adds	r1, r4, r3
 8006116:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006120:	4422      	add	r2, r4
 8006122:	3302      	adds	r3, #2
 8006124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006128:	e7c2      	b.n	80060b0 <_printf_common+0x58>
 800612a:	2301      	movs	r3, #1
 800612c:	4622      	mov	r2, r4
 800612e:	4641      	mov	r1, r8
 8006130:	4638      	mov	r0, r7
 8006132:	47c8      	blx	r9
 8006134:	3001      	adds	r0, #1
 8006136:	d0e6      	beq.n	8006106 <_printf_common+0xae>
 8006138:	3601      	adds	r6, #1
 800613a:	e7d9      	b.n	80060f0 <_printf_common+0x98>

0800613c <_printf_i>:
 800613c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006140:	7e0f      	ldrb	r7, [r1, #24]
 8006142:	4691      	mov	r9, r2
 8006144:	2f78      	cmp	r7, #120	@ 0x78
 8006146:	4680      	mov	r8, r0
 8006148:	460c      	mov	r4, r1
 800614a:	469a      	mov	sl, r3
 800614c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800614e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006152:	d807      	bhi.n	8006164 <_printf_i+0x28>
 8006154:	2f62      	cmp	r7, #98	@ 0x62
 8006156:	d80a      	bhi.n	800616e <_printf_i+0x32>
 8006158:	2f00      	cmp	r7, #0
 800615a:	f000 80d1 	beq.w	8006300 <_printf_i+0x1c4>
 800615e:	2f58      	cmp	r7, #88	@ 0x58
 8006160:	f000 80b8 	beq.w	80062d4 <_printf_i+0x198>
 8006164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006168:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800616c:	e03a      	b.n	80061e4 <_printf_i+0xa8>
 800616e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006172:	2b15      	cmp	r3, #21
 8006174:	d8f6      	bhi.n	8006164 <_printf_i+0x28>
 8006176:	a101      	add	r1, pc, #4	@ (adr r1, 800617c <_printf_i+0x40>)
 8006178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800617c:	080061d5 	.word	0x080061d5
 8006180:	080061e9 	.word	0x080061e9
 8006184:	08006165 	.word	0x08006165
 8006188:	08006165 	.word	0x08006165
 800618c:	08006165 	.word	0x08006165
 8006190:	08006165 	.word	0x08006165
 8006194:	080061e9 	.word	0x080061e9
 8006198:	08006165 	.word	0x08006165
 800619c:	08006165 	.word	0x08006165
 80061a0:	08006165 	.word	0x08006165
 80061a4:	08006165 	.word	0x08006165
 80061a8:	080062e7 	.word	0x080062e7
 80061ac:	08006213 	.word	0x08006213
 80061b0:	080062a1 	.word	0x080062a1
 80061b4:	08006165 	.word	0x08006165
 80061b8:	08006165 	.word	0x08006165
 80061bc:	08006309 	.word	0x08006309
 80061c0:	08006165 	.word	0x08006165
 80061c4:	08006213 	.word	0x08006213
 80061c8:	08006165 	.word	0x08006165
 80061cc:	08006165 	.word	0x08006165
 80061d0:	080062a9 	.word	0x080062a9
 80061d4:	6833      	ldr	r3, [r6, #0]
 80061d6:	1d1a      	adds	r2, r3, #4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6032      	str	r2, [r6, #0]
 80061dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061e4:	2301      	movs	r3, #1
 80061e6:	e09c      	b.n	8006322 <_printf_i+0x1e6>
 80061e8:	6833      	ldr	r3, [r6, #0]
 80061ea:	6820      	ldr	r0, [r4, #0]
 80061ec:	1d19      	adds	r1, r3, #4
 80061ee:	6031      	str	r1, [r6, #0]
 80061f0:	0606      	lsls	r6, r0, #24
 80061f2:	d501      	bpl.n	80061f8 <_printf_i+0xbc>
 80061f4:	681d      	ldr	r5, [r3, #0]
 80061f6:	e003      	b.n	8006200 <_printf_i+0xc4>
 80061f8:	0645      	lsls	r5, r0, #25
 80061fa:	d5fb      	bpl.n	80061f4 <_printf_i+0xb8>
 80061fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006200:	2d00      	cmp	r5, #0
 8006202:	da03      	bge.n	800620c <_printf_i+0xd0>
 8006204:	232d      	movs	r3, #45	@ 0x2d
 8006206:	426d      	negs	r5, r5
 8006208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800620c:	230a      	movs	r3, #10
 800620e:	4858      	ldr	r0, [pc, #352]	@ (8006370 <_printf_i+0x234>)
 8006210:	e011      	b.n	8006236 <_printf_i+0xfa>
 8006212:	6821      	ldr	r1, [r4, #0]
 8006214:	6833      	ldr	r3, [r6, #0]
 8006216:	0608      	lsls	r0, r1, #24
 8006218:	f853 5b04 	ldr.w	r5, [r3], #4
 800621c:	d402      	bmi.n	8006224 <_printf_i+0xe8>
 800621e:	0649      	lsls	r1, r1, #25
 8006220:	bf48      	it	mi
 8006222:	b2ad      	uxthmi	r5, r5
 8006224:	2f6f      	cmp	r7, #111	@ 0x6f
 8006226:	6033      	str	r3, [r6, #0]
 8006228:	bf14      	ite	ne
 800622a:	230a      	movne	r3, #10
 800622c:	2308      	moveq	r3, #8
 800622e:	4850      	ldr	r0, [pc, #320]	@ (8006370 <_printf_i+0x234>)
 8006230:	2100      	movs	r1, #0
 8006232:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006236:	6866      	ldr	r6, [r4, #4]
 8006238:	2e00      	cmp	r6, #0
 800623a:	60a6      	str	r6, [r4, #8]
 800623c:	db05      	blt.n	800624a <_printf_i+0x10e>
 800623e:	6821      	ldr	r1, [r4, #0]
 8006240:	432e      	orrs	r6, r5
 8006242:	f021 0104 	bic.w	r1, r1, #4
 8006246:	6021      	str	r1, [r4, #0]
 8006248:	d04b      	beq.n	80062e2 <_printf_i+0x1a6>
 800624a:	4616      	mov	r6, r2
 800624c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006250:	fb03 5711 	mls	r7, r3, r1, r5
 8006254:	5dc7      	ldrb	r7, [r0, r7]
 8006256:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800625a:	462f      	mov	r7, r5
 800625c:	42bb      	cmp	r3, r7
 800625e:	460d      	mov	r5, r1
 8006260:	d9f4      	bls.n	800624c <_printf_i+0x110>
 8006262:	2b08      	cmp	r3, #8
 8006264:	d10b      	bne.n	800627e <_printf_i+0x142>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	07df      	lsls	r7, r3, #31
 800626a:	d508      	bpl.n	800627e <_printf_i+0x142>
 800626c:	6923      	ldr	r3, [r4, #16]
 800626e:	6861      	ldr	r1, [r4, #4]
 8006270:	4299      	cmp	r1, r3
 8006272:	bfde      	ittt	le
 8006274:	2330      	movle	r3, #48	@ 0x30
 8006276:	f806 3c01 	strble.w	r3, [r6, #-1]
 800627a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800627e:	1b92      	subs	r2, r2, r6
 8006280:	6122      	str	r2, [r4, #16]
 8006282:	464b      	mov	r3, r9
 8006284:	4621      	mov	r1, r4
 8006286:	4640      	mov	r0, r8
 8006288:	f8cd a000 	str.w	sl, [sp]
 800628c:	aa03      	add	r2, sp, #12
 800628e:	f7ff fee3 	bl	8006058 <_printf_common>
 8006292:	3001      	adds	r0, #1
 8006294:	d14a      	bne.n	800632c <_printf_i+0x1f0>
 8006296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800629a:	b004      	add	sp, #16
 800629c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	f043 0320 	orr.w	r3, r3, #32
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	2778      	movs	r7, #120	@ 0x78
 80062aa:	4832      	ldr	r0, [pc, #200]	@ (8006374 <_printf_i+0x238>)
 80062ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	6831      	ldr	r1, [r6, #0]
 80062b4:	061f      	lsls	r7, r3, #24
 80062b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80062ba:	d402      	bmi.n	80062c2 <_printf_i+0x186>
 80062bc:	065f      	lsls	r7, r3, #25
 80062be:	bf48      	it	mi
 80062c0:	b2ad      	uxthmi	r5, r5
 80062c2:	6031      	str	r1, [r6, #0]
 80062c4:	07d9      	lsls	r1, r3, #31
 80062c6:	bf44      	itt	mi
 80062c8:	f043 0320 	orrmi.w	r3, r3, #32
 80062cc:	6023      	strmi	r3, [r4, #0]
 80062ce:	b11d      	cbz	r5, 80062d8 <_printf_i+0x19c>
 80062d0:	2310      	movs	r3, #16
 80062d2:	e7ad      	b.n	8006230 <_printf_i+0xf4>
 80062d4:	4826      	ldr	r0, [pc, #152]	@ (8006370 <_printf_i+0x234>)
 80062d6:	e7e9      	b.n	80062ac <_printf_i+0x170>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	f023 0320 	bic.w	r3, r3, #32
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	e7f6      	b.n	80062d0 <_printf_i+0x194>
 80062e2:	4616      	mov	r6, r2
 80062e4:	e7bd      	b.n	8006262 <_printf_i+0x126>
 80062e6:	6833      	ldr	r3, [r6, #0]
 80062e8:	6825      	ldr	r5, [r4, #0]
 80062ea:	1d18      	adds	r0, r3, #4
 80062ec:	6961      	ldr	r1, [r4, #20]
 80062ee:	6030      	str	r0, [r6, #0]
 80062f0:	062e      	lsls	r6, r5, #24
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	d501      	bpl.n	80062fa <_printf_i+0x1be>
 80062f6:	6019      	str	r1, [r3, #0]
 80062f8:	e002      	b.n	8006300 <_printf_i+0x1c4>
 80062fa:	0668      	lsls	r0, r5, #25
 80062fc:	d5fb      	bpl.n	80062f6 <_printf_i+0x1ba>
 80062fe:	8019      	strh	r1, [r3, #0]
 8006300:	2300      	movs	r3, #0
 8006302:	4616      	mov	r6, r2
 8006304:	6123      	str	r3, [r4, #16]
 8006306:	e7bc      	b.n	8006282 <_printf_i+0x146>
 8006308:	6833      	ldr	r3, [r6, #0]
 800630a:	2100      	movs	r1, #0
 800630c:	1d1a      	adds	r2, r3, #4
 800630e:	6032      	str	r2, [r6, #0]
 8006310:	681e      	ldr	r6, [r3, #0]
 8006312:	6862      	ldr	r2, [r4, #4]
 8006314:	4630      	mov	r0, r6
 8006316:	f000 fab8 	bl	800688a <memchr>
 800631a:	b108      	cbz	r0, 8006320 <_printf_i+0x1e4>
 800631c:	1b80      	subs	r0, r0, r6
 800631e:	6060      	str	r0, [r4, #4]
 8006320:	6863      	ldr	r3, [r4, #4]
 8006322:	6123      	str	r3, [r4, #16]
 8006324:	2300      	movs	r3, #0
 8006326:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800632a:	e7aa      	b.n	8006282 <_printf_i+0x146>
 800632c:	4632      	mov	r2, r6
 800632e:	4649      	mov	r1, r9
 8006330:	4640      	mov	r0, r8
 8006332:	6923      	ldr	r3, [r4, #16]
 8006334:	47d0      	blx	sl
 8006336:	3001      	adds	r0, #1
 8006338:	d0ad      	beq.n	8006296 <_printf_i+0x15a>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	079b      	lsls	r3, r3, #30
 800633e:	d413      	bmi.n	8006368 <_printf_i+0x22c>
 8006340:	68e0      	ldr	r0, [r4, #12]
 8006342:	9b03      	ldr	r3, [sp, #12]
 8006344:	4298      	cmp	r0, r3
 8006346:	bfb8      	it	lt
 8006348:	4618      	movlt	r0, r3
 800634a:	e7a6      	b.n	800629a <_printf_i+0x15e>
 800634c:	2301      	movs	r3, #1
 800634e:	4632      	mov	r2, r6
 8006350:	4649      	mov	r1, r9
 8006352:	4640      	mov	r0, r8
 8006354:	47d0      	blx	sl
 8006356:	3001      	adds	r0, #1
 8006358:	d09d      	beq.n	8006296 <_printf_i+0x15a>
 800635a:	3501      	adds	r5, #1
 800635c:	68e3      	ldr	r3, [r4, #12]
 800635e:	9903      	ldr	r1, [sp, #12]
 8006360:	1a5b      	subs	r3, r3, r1
 8006362:	42ab      	cmp	r3, r5
 8006364:	dcf2      	bgt.n	800634c <_printf_i+0x210>
 8006366:	e7eb      	b.n	8006340 <_printf_i+0x204>
 8006368:	2500      	movs	r5, #0
 800636a:	f104 0619 	add.w	r6, r4, #25
 800636e:	e7f5      	b.n	800635c <_printf_i+0x220>
 8006370:	0800d2ae 	.word	0x0800d2ae
 8006374:	0800d2bf 	.word	0x0800d2bf

08006378 <std>:
 8006378:	2300      	movs	r3, #0
 800637a:	b510      	push	{r4, lr}
 800637c:	4604      	mov	r4, r0
 800637e:	e9c0 3300 	strd	r3, r3, [r0]
 8006382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006386:	6083      	str	r3, [r0, #8]
 8006388:	8181      	strh	r1, [r0, #12]
 800638a:	6643      	str	r3, [r0, #100]	@ 0x64
 800638c:	81c2      	strh	r2, [r0, #14]
 800638e:	6183      	str	r3, [r0, #24]
 8006390:	4619      	mov	r1, r3
 8006392:	2208      	movs	r2, #8
 8006394:	305c      	adds	r0, #92	@ 0x5c
 8006396:	f000 f9f9 	bl	800678c <memset>
 800639a:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <std+0x58>)
 800639c:	6224      	str	r4, [r4, #32]
 800639e:	6263      	str	r3, [r4, #36]	@ 0x24
 80063a0:	4b0c      	ldr	r3, [pc, #48]	@ (80063d4 <std+0x5c>)
 80063a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063a4:	4b0c      	ldr	r3, [pc, #48]	@ (80063d8 <std+0x60>)
 80063a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063a8:	4b0c      	ldr	r3, [pc, #48]	@ (80063dc <std+0x64>)
 80063aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80063ac:	4b0c      	ldr	r3, [pc, #48]	@ (80063e0 <std+0x68>)
 80063ae:	429c      	cmp	r4, r3
 80063b0:	d006      	beq.n	80063c0 <std+0x48>
 80063b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063b6:	4294      	cmp	r4, r2
 80063b8:	d002      	beq.n	80063c0 <std+0x48>
 80063ba:	33d0      	adds	r3, #208	@ 0xd0
 80063bc:	429c      	cmp	r4, r3
 80063be:	d105      	bne.n	80063cc <std+0x54>
 80063c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c8:	f000 ba5c 	b.w	8006884 <__retarget_lock_init_recursive>
 80063cc:	bd10      	pop	{r4, pc}
 80063ce:	bf00      	nop
 80063d0:	080065dd 	.word	0x080065dd
 80063d4:	080065ff 	.word	0x080065ff
 80063d8:	08006637 	.word	0x08006637
 80063dc:	0800665b 	.word	0x0800665b
 80063e0:	20000f74 	.word	0x20000f74

080063e4 <stdio_exit_handler>:
 80063e4:	4a02      	ldr	r2, [pc, #8]	@ (80063f0 <stdio_exit_handler+0xc>)
 80063e6:	4903      	ldr	r1, [pc, #12]	@ (80063f4 <stdio_exit_handler+0x10>)
 80063e8:	4803      	ldr	r0, [pc, #12]	@ (80063f8 <stdio_exit_handler+0x14>)
 80063ea:	f000 b869 	b.w	80064c0 <_fwalk_sglue>
 80063ee:	bf00      	nop
 80063f0:	20000028 	.word	0x20000028
 80063f4:	080081f1 	.word	0x080081f1
 80063f8:	20000038 	.word	0x20000038

080063fc <cleanup_stdio>:
 80063fc:	6841      	ldr	r1, [r0, #4]
 80063fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006430 <cleanup_stdio+0x34>)
 8006400:	b510      	push	{r4, lr}
 8006402:	4299      	cmp	r1, r3
 8006404:	4604      	mov	r4, r0
 8006406:	d001      	beq.n	800640c <cleanup_stdio+0x10>
 8006408:	f001 fef2 	bl	80081f0 <_fflush_r>
 800640c:	68a1      	ldr	r1, [r4, #8]
 800640e:	4b09      	ldr	r3, [pc, #36]	@ (8006434 <cleanup_stdio+0x38>)
 8006410:	4299      	cmp	r1, r3
 8006412:	d002      	beq.n	800641a <cleanup_stdio+0x1e>
 8006414:	4620      	mov	r0, r4
 8006416:	f001 feeb 	bl	80081f0 <_fflush_r>
 800641a:	68e1      	ldr	r1, [r4, #12]
 800641c:	4b06      	ldr	r3, [pc, #24]	@ (8006438 <cleanup_stdio+0x3c>)
 800641e:	4299      	cmp	r1, r3
 8006420:	d004      	beq.n	800642c <cleanup_stdio+0x30>
 8006422:	4620      	mov	r0, r4
 8006424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006428:	f001 bee2 	b.w	80081f0 <_fflush_r>
 800642c:	bd10      	pop	{r4, pc}
 800642e:	bf00      	nop
 8006430:	20000f74 	.word	0x20000f74
 8006434:	20000fdc 	.word	0x20000fdc
 8006438:	20001044 	.word	0x20001044

0800643c <global_stdio_init.part.0>:
 800643c:	b510      	push	{r4, lr}
 800643e:	4b0b      	ldr	r3, [pc, #44]	@ (800646c <global_stdio_init.part.0+0x30>)
 8006440:	4c0b      	ldr	r4, [pc, #44]	@ (8006470 <global_stdio_init.part.0+0x34>)
 8006442:	4a0c      	ldr	r2, [pc, #48]	@ (8006474 <global_stdio_init.part.0+0x38>)
 8006444:	4620      	mov	r0, r4
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	2104      	movs	r1, #4
 800644a:	2200      	movs	r2, #0
 800644c:	f7ff ff94 	bl	8006378 <std>
 8006450:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006454:	2201      	movs	r2, #1
 8006456:	2109      	movs	r1, #9
 8006458:	f7ff ff8e 	bl	8006378 <std>
 800645c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006460:	2202      	movs	r2, #2
 8006462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006466:	2112      	movs	r1, #18
 8006468:	f7ff bf86 	b.w	8006378 <std>
 800646c:	200010ac 	.word	0x200010ac
 8006470:	20000f74 	.word	0x20000f74
 8006474:	080063e5 	.word	0x080063e5

08006478 <__sfp_lock_acquire>:
 8006478:	4801      	ldr	r0, [pc, #4]	@ (8006480 <__sfp_lock_acquire+0x8>)
 800647a:	f000 ba04 	b.w	8006886 <__retarget_lock_acquire_recursive>
 800647e:	bf00      	nop
 8006480:	200010b5 	.word	0x200010b5

08006484 <__sfp_lock_release>:
 8006484:	4801      	ldr	r0, [pc, #4]	@ (800648c <__sfp_lock_release+0x8>)
 8006486:	f000 b9ff 	b.w	8006888 <__retarget_lock_release_recursive>
 800648a:	bf00      	nop
 800648c:	200010b5 	.word	0x200010b5

08006490 <__sinit>:
 8006490:	b510      	push	{r4, lr}
 8006492:	4604      	mov	r4, r0
 8006494:	f7ff fff0 	bl	8006478 <__sfp_lock_acquire>
 8006498:	6a23      	ldr	r3, [r4, #32]
 800649a:	b11b      	cbz	r3, 80064a4 <__sinit+0x14>
 800649c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a0:	f7ff bff0 	b.w	8006484 <__sfp_lock_release>
 80064a4:	4b04      	ldr	r3, [pc, #16]	@ (80064b8 <__sinit+0x28>)
 80064a6:	6223      	str	r3, [r4, #32]
 80064a8:	4b04      	ldr	r3, [pc, #16]	@ (80064bc <__sinit+0x2c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1f5      	bne.n	800649c <__sinit+0xc>
 80064b0:	f7ff ffc4 	bl	800643c <global_stdio_init.part.0>
 80064b4:	e7f2      	b.n	800649c <__sinit+0xc>
 80064b6:	bf00      	nop
 80064b8:	080063fd 	.word	0x080063fd
 80064bc:	200010ac 	.word	0x200010ac

080064c0 <_fwalk_sglue>:
 80064c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c4:	4607      	mov	r7, r0
 80064c6:	4688      	mov	r8, r1
 80064c8:	4614      	mov	r4, r2
 80064ca:	2600      	movs	r6, #0
 80064cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064d0:	f1b9 0901 	subs.w	r9, r9, #1
 80064d4:	d505      	bpl.n	80064e2 <_fwalk_sglue+0x22>
 80064d6:	6824      	ldr	r4, [r4, #0]
 80064d8:	2c00      	cmp	r4, #0
 80064da:	d1f7      	bne.n	80064cc <_fwalk_sglue+0xc>
 80064dc:	4630      	mov	r0, r6
 80064de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064e2:	89ab      	ldrh	r3, [r5, #12]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d907      	bls.n	80064f8 <_fwalk_sglue+0x38>
 80064e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064ec:	3301      	adds	r3, #1
 80064ee:	d003      	beq.n	80064f8 <_fwalk_sglue+0x38>
 80064f0:	4629      	mov	r1, r5
 80064f2:	4638      	mov	r0, r7
 80064f4:	47c0      	blx	r8
 80064f6:	4306      	orrs	r6, r0
 80064f8:	3568      	adds	r5, #104	@ 0x68
 80064fa:	e7e9      	b.n	80064d0 <_fwalk_sglue+0x10>

080064fc <iprintf>:
 80064fc:	b40f      	push	{r0, r1, r2, r3}
 80064fe:	b507      	push	{r0, r1, r2, lr}
 8006500:	4906      	ldr	r1, [pc, #24]	@ (800651c <iprintf+0x20>)
 8006502:	ab04      	add	r3, sp, #16
 8006504:	6808      	ldr	r0, [r1, #0]
 8006506:	f853 2b04 	ldr.w	r2, [r3], #4
 800650a:	6881      	ldr	r1, [r0, #8]
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	f001 fcd7 	bl	8007ec0 <_vfiprintf_r>
 8006512:	b003      	add	sp, #12
 8006514:	f85d eb04 	ldr.w	lr, [sp], #4
 8006518:	b004      	add	sp, #16
 800651a:	4770      	bx	lr
 800651c:	20000034 	.word	0x20000034

08006520 <_puts_r>:
 8006520:	6a03      	ldr	r3, [r0, #32]
 8006522:	b570      	push	{r4, r5, r6, lr}
 8006524:	4605      	mov	r5, r0
 8006526:	460e      	mov	r6, r1
 8006528:	6884      	ldr	r4, [r0, #8]
 800652a:	b90b      	cbnz	r3, 8006530 <_puts_r+0x10>
 800652c:	f7ff ffb0 	bl	8006490 <__sinit>
 8006530:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006532:	07db      	lsls	r3, r3, #31
 8006534:	d405      	bmi.n	8006542 <_puts_r+0x22>
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	0598      	lsls	r0, r3, #22
 800653a:	d402      	bmi.n	8006542 <_puts_r+0x22>
 800653c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800653e:	f000 f9a2 	bl	8006886 <__retarget_lock_acquire_recursive>
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	0719      	lsls	r1, r3, #28
 8006546:	d502      	bpl.n	800654e <_puts_r+0x2e>
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d135      	bne.n	80065ba <_puts_r+0x9a>
 800654e:	4621      	mov	r1, r4
 8006550:	4628      	mov	r0, r5
 8006552:	f000 f8c5 	bl	80066e0 <__swsetup_r>
 8006556:	b380      	cbz	r0, 80065ba <_puts_r+0x9a>
 8006558:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800655c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800655e:	07da      	lsls	r2, r3, #31
 8006560:	d405      	bmi.n	800656e <_puts_r+0x4e>
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	059b      	lsls	r3, r3, #22
 8006566:	d402      	bmi.n	800656e <_puts_r+0x4e>
 8006568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800656a:	f000 f98d 	bl	8006888 <__retarget_lock_release_recursive>
 800656e:	4628      	mov	r0, r5
 8006570:	bd70      	pop	{r4, r5, r6, pc}
 8006572:	2b00      	cmp	r3, #0
 8006574:	da04      	bge.n	8006580 <_puts_r+0x60>
 8006576:	69a2      	ldr	r2, [r4, #24]
 8006578:	429a      	cmp	r2, r3
 800657a:	dc17      	bgt.n	80065ac <_puts_r+0x8c>
 800657c:	290a      	cmp	r1, #10
 800657e:	d015      	beq.n	80065ac <_puts_r+0x8c>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	6022      	str	r2, [r4, #0]
 8006586:	7019      	strb	r1, [r3, #0]
 8006588:	68a3      	ldr	r3, [r4, #8]
 800658a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800658e:	3b01      	subs	r3, #1
 8006590:	60a3      	str	r3, [r4, #8]
 8006592:	2900      	cmp	r1, #0
 8006594:	d1ed      	bne.n	8006572 <_puts_r+0x52>
 8006596:	2b00      	cmp	r3, #0
 8006598:	da11      	bge.n	80065be <_puts_r+0x9e>
 800659a:	4622      	mov	r2, r4
 800659c:	210a      	movs	r1, #10
 800659e:	4628      	mov	r0, r5
 80065a0:	f000 f85f 	bl	8006662 <__swbuf_r>
 80065a4:	3001      	adds	r0, #1
 80065a6:	d0d7      	beq.n	8006558 <_puts_r+0x38>
 80065a8:	250a      	movs	r5, #10
 80065aa:	e7d7      	b.n	800655c <_puts_r+0x3c>
 80065ac:	4622      	mov	r2, r4
 80065ae:	4628      	mov	r0, r5
 80065b0:	f000 f857 	bl	8006662 <__swbuf_r>
 80065b4:	3001      	adds	r0, #1
 80065b6:	d1e7      	bne.n	8006588 <_puts_r+0x68>
 80065b8:	e7ce      	b.n	8006558 <_puts_r+0x38>
 80065ba:	3e01      	subs	r6, #1
 80065bc:	e7e4      	b.n	8006588 <_puts_r+0x68>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	6022      	str	r2, [r4, #0]
 80065c4:	220a      	movs	r2, #10
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	e7ee      	b.n	80065a8 <_puts_r+0x88>
	...

080065cc <puts>:
 80065cc:	4b02      	ldr	r3, [pc, #8]	@ (80065d8 <puts+0xc>)
 80065ce:	4601      	mov	r1, r0
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	f7ff bfa5 	b.w	8006520 <_puts_r>
 80065d6:	bf00      	nop
 80065d8:	20000034 	.word	0x20000034

080065dc <__sread>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	460c      	mov	r4, r1
 80065e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e4:	f000 f900 	bl	80067e8 <_read_r>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	bfab      	itete	ge
 80065ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80065ee:	89a3      	ldrhlt	r3, [r4, #12]
 80065f0:	181b      	addge	r3, r3, r0
 80065f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065f6:	bfac      	ite	ge
 80065f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065fa:	81a3      	strhlt	r3, [r4, #12]
 80065fc:	bd10      	pop	{r4, pc}

080065fe <__swrite>:
 80065fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006602:	461f      	mov	r7, r3
 8006604:	898b      	ldrh	r3, [r1, #12]
 8006606:	4605      	mov	r5, r0
 8006608:	05db      	lsls	r3, r3, #23
 800660a:	460c      	mov	r4, r1
 800660c:	4616      	mov	r6, r2
 800660e:	d505      	bpl.n	800661c <__swrite+0x1e>
 8006610:	2302      	movs	r3, #2
 8006612:	2200      	movs	r2, #0
 8006614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006618:	f000 f8d4 	bl	80067c4 <_lseek_r>
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	4632      	mov	r2, r6
 8006620:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006624:	81a3      	strh	r3, [r4, #12]
 8006626:	4628      	mov	r0, r5
 8006628:	463b      	mov	r3, r7
 800662a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800662e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006632:	f000 b8eb 	b.w	800680c <_write_r>

08006636 <__sseek>:
 8006636:	b510      	push	{r4, lr}
 8006638:	460c      	mov	r4, r1
 800663a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800663e:	f000 f8c1 	bl	80067c4 <_lseek_r>
 8006642:	1c43      	adds	r3, r0, #1
 8006644:	89a3      	ldrh	r3, [r4, #12]
 8006646:	bf15      	itete	ne
 8006648:	6560      	strne	r0, [r4, #84]	@ 0x54
 800664a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800664e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006652:	81a3      	strheq	r3, [r4, #12]
 8006654:	bf18      	it	ne
 8006656:	81a3      	strhne	r3, [r4, #12]
 8006658:	bd10      	pop	{r4, pc}

0800665a <__sclose>:
 800665a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665e:	f000 b8a1 	b.w	80067a4 <_close_r>

08006662 <__swbuf_r>:
 8006662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006664:	460e      	mov	r6, r1
 8006666:	4614      	mov	r4, r2
 8006668:	4605      	mov	r5, r0
 800666a:	b118      	cbz	r0, 8006674 <__swbuf_r+0x12>
 800666c:	6a03      	ldr	r3, [r0, #32]
 800666e:	b90b      	cbnz	r3, 8006674 <__swbuf_r+0x12>
 8006670:	f7ff ff0e 	bl	8006490 <__sinit>
 8006674:	69a3      	ldr	r3, [r4, #24]
 8006676:	60a3      	str	r3, [r4, #8]
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	071a      	lsls	r2, r3, #28
 800667c:	d501      	bpl.n	8006682 <__swbuf_r+0x20>
 800667e:	6923      	ldr	r3, [r4, #16]
 8006680:	b943      	cbnz	r3, 8006694 <__swbuf_r+0x32>
 8006682:	4621      	mov	r1, r4
 8006684:	4628      	mov	r0, r5
 8006686:	f000 f82b 	bl	80066e0 <__swsetup_r>
 800668a:	b118      	cbz	r0, 8006694 <__swbuf_r+0x32>
 800668c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006690:	4638      	mov	r0, r7
 8006692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	6922      	ldr	r2, [r4, #16]
 8006698:	b2f6      	uxtb	r6, r6
 800669a:	1a98      	subs	r0, r3, r2
 800669c:	6963      	ldr	r3, [r4, #20]
 800669e:	4637      	mov	r7, r6
 80066a0:	4283      	cmp	r3, r0
 80066a2:	dc05      	bgt.n	80066b0 <__swbuf_r+0x4e>
 80066a4:	4621      	mov	r1, r4
 80066a6:	4628      	mov	r0, r5
 80066a8:	f001 fda2 	bl	80081f0 <_fflush_r>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d1ed      	bne.n	800668c <__swbuf_r+0x2a>
 80066b0:	68a3      	ldr	r3, [r4, #8]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	60a3      	str	r3, [r4, #8]
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	6022      	str	r2, [r4, #0]
 80066bc:	701e      	strb	r6, [r3, #0]
 80066be:	6962      	ldr	r2, [r4, #20]
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d004      	beq.n	80066d0 <__swbuf_r+0x6e>
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	07db      	lsls	r3, r3, #31
 80066ca:	d5e1      	bpl.n	8006690 <__swbuf_r+0x2e>
 80066cc:	2e0a      	cmp	r6, #10
 80066ce:	d1df      	bne.n	8006690 <__swbuf_r+0x2e>
 80066d0:	4621      	mov	r1, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	f001 fd8c 	bl	80081f0 <_fflush_r>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d0d9      	beq.n	8006690 <__swbuf_r+0x2e>
 80066dc:	e7d6      	b.n	800668c <__swbuf_r+0x2a>
	...

080066e0 <__swsetup_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	4b29      	ldr	r3, [pc, #164]	@ (8006788 <__swsetup_r+0xa8>)
 80066e4:	4605      	mov	r5, r0
 80066e6:	6818      	ldr	r0, [r3, #0]
 80066e8:	460c      	mov	r4, r1
 80066ea:	b118      	cbz	r0, 80066f4 <__swsetup_r+0x14>
 80066ec:	6a03      	ldr	r3, [r0, #32]
 80066ee:	b90b      	cbnz	r3, 80066f4 <__swsetup_r+0x14>
 80066f0:	f7ff fece 	bl	8006490 <__sinit>
 80066f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066f8:	0719      	lsls	r1, r3, #28
 80066fa:	d422      	bmi.n	8006742 <__swsetup_r+0x62>
 80066fc:	06da      	lsls	r2, r3, #27
 80066fe:	d407      	bmi.n	8006710 <__swsetup_r+0x30>
 8006700:	2209      	movs	r2, #9
 8006702:	602a      	str	r2, [r5, #0]
 8006704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800670c:	81a3      	strh	r3, [r4, #12]
 800670e:	e033      	b.n	8006778 <__swsetup_r+0x98>
 8006710:	0758      	lsls	r0, r3, #29
 8006712:	d512      	bpl.n	800673a <__swsetup_r+0x5a>
 8006714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006716:	b141      	cbz	r1, 800672a <__swsetup_r+0x4a>
 8006718:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800671c:	4299      	cmp	r1, r3
 800671e:	d002      	beq.n	8006726 <__swsetup_r+0x46>
 8006720:	4628      	mov	r0, r5
 8006722:	f000 ff2d 	bl	8007580 <_free_r>
 8006726:	2300      	movs	r3, #0
 8006728:	6363      	str	r3, [r4, #52]	@ 0x34
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	2300      	movs	r3, #0
 8006734:	6063      	str	r3, [r4, #4]
 8006736:	6923      	ldr	r3, [r4, #16]
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	f043 0308 	orr.w	r3, r3, #8
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	b94b      	cbnz	r3, 800675a <__swsetup_r+0x7a>
 8006746:	89a3      	ldrh	r3, [r4, #12]
 8006748:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800674c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006750:	d003      	beq.n	800675a <__swsetup_r+0x7a>
 8006752:	4621      	mov	r1, r4
 8006754:	4628      	mov	r0, r5
 8006756:	f001 fd98 	bl	800828a <__smakebuf_r>
 800675a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800675e:	f013 0201 	ands.w	r2, r3, #1
 8006762:	d00a      	beq.n	800677a <__swsetup_r+0x9a>
 8006764:	2200      	movs	r2, #0
 8006766:	60a2      	str	r2, [r4, #8]
 8006768:	6962      	ldr	r2, [r4, #20]
 800676a:	4252      	negs	r2, r2
 800676c:	61a2      	str	r2, [r4, #24]
 800676e:	6922      	ldr	r2, [r4, #16]
 8006770:	b942      	cbnz	r2, 8006784 <__swsetup_r+0xa4>
 8006772:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006776:	d1c5      	bne.n	8006704 <__swsetup_r+0x24>
 8006778:	bd38      	pop	{r3, r4, r5, pc}
 800677a:	0799      	lsls	r1, r3, #30
 800677c:	bf58      	it	pl
 800677e:	6962      	ldrpl	r2, [r4, #20]
 8006780:	60a2      	str	r2, [r4, #8]
 8006782:	e7f4      	b.n	800676e <__swsetup_r+0x8e>
 8006784:	2000      	movs	r0, #0
 8006786:	e7f7      	b.n	8006778 <__swsetup_r+0x98>
 8006788:	20000034 	.word	0x20000034

0800678c <memset>:
 800678c:	4603      	mov	r3, r0
 800678e:	4402      	add	r2, r0
 8006790:	4293      	cmp	r3, r2
 8006792:	d100      	bne.n	8006796 <memset+0xa>
 8006794:	4770      	bx	lr
 8006796:	f803 1b01 	strb.w	r1, [r3], #1
 800679a:	e7f9      	b.n	8006790 <memset+0x4>

0800679c <_localeconv_r>:
 800679c:	4800      	ldr	r0, [pc, #0]	@ (80067a0 <_localeconv_r+0x4>)
 800679e:	4770      	bx	lr
 80067a0:	20000174 	.word	0x20000174

080067a4 <_close_r>:
 80067a4:	b538      	push	{r3, r4, r5, lr}
 80067a6:	2300      	movs	r3, #0
 80067a8:	4d05      	ldr	r5, [pc, #20]	@ (80067c0 <_close_r+0x1c>)
 80067aa:	4604      	mov	r4, r0
 80067ac:	4608      	mov	r0, r1
 80067ae:	602b      	str	r3, [r5, #0]
 80067b0:	f7fb fd0e 	bl	80021d0 <_close>
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	d102      	bne.n	80067be <_close_r+0x1a>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	b103      	cbz	r3, 80067be <_close_r+0x1a>
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	bd38      	pop	{r3, r4, r5, pc}
 80067c0:	200010b0 	.word	0x200010b0

080067c4 <_lseek_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4604      	mov	r4, r0
 80067c8:	4608      	mov	r0, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	2200      	movs	r2, #0
 80067ce:	4d05      	ldr	r5, [pc, #20]	@ (80067e4 <_lseek_r+0x20>)
 80067d0:	602a      	str	r2, [r5, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f7fb fd20 	bl	8002218 <_lseek>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d102      	bne.n	80067e2 <_lseek_r+0x1e>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	b103      	cbz	r3, 80067e2 <_lseek_r+0x1e>
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	200010b0 	.word	0x200010b0

080067e8 <_read_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4604      	mov	r4, r0
 80067ec:	4608      	mov	r0, r1
 80067ee:	4611      	mov	r1, r2
 80067f0:	2200      	movs	r2, #0
 80067f2:	4d05      	ldr	r5, [pc, #20]	@ (8006808 <_read_r+0x20>)
 80067f4:	602a      	str	r2, [r5, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	f7fb fcb1 	bl	800215e <_read>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d102      	bne.n	8006806 <_read_r+0x1e>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	b103      	cbz	r3, 8006806 <_read_r+0x1e>
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	200010b0 	.word	0x200010b0

0800680c <_write_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	4611      	mov	r1, r2
 8006814:	2200      	movs	r2, #0
 8006816:	4d05      	ldr	r5, [pc, #20]	@ (800682c <_write_r+0x20>)
 8006818:	602a      	str	r2, [r5, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	f7fb fcbc 	bl	8002198 <_write>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_write_r+0x1e>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	b103      	cbz	r3, 800682a <_write_r+0x1e>
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	200010b0 	.word	0x200010b0

08006830 <__errno>:
 8006830:	4b01      	ldr	r3, [pc, #4]	@ (8006838 <__errno+0x8>)
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	20000034 	.word	0x20000034

0800683c <__libc_init_array>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	2600      	movs	r6, #0
 8006840:	4d0c      	ldr	r5, [pc, #48]	@ (8006874 <__libc_init_array+0x38>)
 8006842:	4c0d      	ldr	r4, [pc, #52]	@ (8006878 <__libc_init_array+0x3c>)
 8006844:	1b64      	subs	r4, r4, r5
 8006846:	10a4      	asrs	r4, r4, #2
 8006848:	42a6      	cmp	r6, r4
 800684a:	d109      	bne.n	8006860 <__libc_init_array+0x24>
 800684c:	f002 f83a 	bl	80088c4 <_init>
 8006850:	2600      	movs	r6, #0
 8006852:	4d0a      	ldr	r5, [pc, #40]	@ (800687c <__libc_init_array+0x40>)
 8006854:	4c0a      	ldr	r4, [pc, #40]	@ (8006880 <__libc_init_array+0x44>)
 8006856:	1b64      	subs	r4, r4, r5
 8006858:	10a4      	asrs	r4, r4, #2
 800685a:	42a6      	cmp	r6, r4
 800685c:	d105      	bne.n	800686a <__libc_init_array+0x2e>
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	f855 3b04 	ldr.w	r3, [r5], #4
 8006864:	4798      	blx	r3
 8006866:	3601      	adds	r6, #1
 8006868:	e7ee      	b.n	8006848 <__libc_init_array+0xc>
 800686a:	f855 3b04 	ldr.w	r3, [r5], #4
 800686e:	4798      	blx	r3
 8006870:	3601      	adds	r6, #1
 8006872:	e7f2      	b.n	800685a <__libc_init_array+0x1e>
 8006874:	0800d63c 	.word	0x0800d63c
 8006878:	0800d63c 	.word	0x0800d63c
 800687c:	0800d63c 	.word	0x0800d63c
 8006880:	0800d640 	.word	0x0800d640

08006884 <__retarget_lock_init_recursive>:
 8006884:	4770      	bx	lr

08006886 <__retarget_lock_acquire_recursive>:
 8006886:	4770      	bx	lr

08006888 <__retarget_lock_release_recursive>:
 8006888:	4770      	bx	lr

0800688a <memchr>:
 800688a:	4603      	mov	r3, r0
 800688c:	b510      	push	{r4, lr}
 800688e:	b2c9      	uxtb	r1, r1
 8006890:	4402      	add	r2, r0
 8006892:	4293      	cmp	r3, r2
 8006894:	4618      	mov	r0, r3
 8006896:	d101      	bne.n	800689c <memchr+0x12>
 8006898:	2000      	movs	r0, #0
 800689a:	e003      	b.n	80068a4 <memchr+0x1a>
 800689c:	7804      	ldrb	r4, [r0, #0]
 800689e:	3301      	adds	r3, #1
 80068a0:	428c      	cmp	r4, r1
 80068a2:	d1f6      	bne.n	8006892 <memchr+0x8>
 80068a4:	bd10      	pop	{r4, pc}

080068a6 <memcpy>:
 80068a6:	440a      	add	r2, r1
 80068a8:	4291      	cmp	r1, r2
 80068aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80068ae:	d100      	bne.n	80068b2 <memcpy+0xc>
 80068b0:	4770      	bx	lr
 80068b2:	b510      	push	{r4, lr}
 80068b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068b8:	4291      	cmp	r1, r2
 80068ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068be:	d1f9      	bne.n	80068b4 <memcpy+0xe>
 80068c0:	bd10      	pop	{r4, pc}

080068c2 <quorem>:
 80068c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c6:	6903      	ldr	r3, [r0, #16]
 80068c8:	690c      	ldr	r4, [r1, #16]
 80068ca:	4607      	mov	r7, r0
 80068cc:	42a3      	cmp	r3, r4
 80068ce:	db7e      	blt.n	80069ce <quorem+0x10c>
 80068d0:	3c01      	subs	r4, #1
 80068d2:	00a3      	lsls	r3, r4, #2
 80068d4:	f100 0514 	add.w	r5, r0, #20
 80068d8:	f101 0814 	add.w	r8, r1, #20
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068ec:	3301      	adds	r3, #1
 80068ee:	429a      	cmp	r2, r3
 80068f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80068f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068f8:	d32e      	bcc.n	8006958 <quorem+0x96>
 80068fa:	f04f 0a00 	mov.w	sl, #0
 80068fe:	46c4      	mov	ip, r8
 8006900:	46ae      	mov	lr, r5
 8006902:	46d3      	mov	fp, sl
 8006904:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006908:	b298      	uxth	r0, r3
 800690a:	fb06 a000 	mla	r0, r6, r0, sl
 800690e:	0c1b      	lsrs	r3, r3, #16
 8006910:	0c02      	lsrs	r2, r0, #16
 8006912:	fb06 2303 	mla	r3, r6, r3, r2
 8006916:	f8de 2000 	ldr.w	r2, [lr]
 800691a:	b280      	uxth	r0, r0
 800691c:	b292      	uxth	r2, r2
 800691e:	1a12      	subs	r2, r2, r0
 8006920:	445a      	add	r2, fp
 8006922:	f8de 0000 	ldr.w	r0, [lr]
 8006926:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800692a:	b29b      	uxth	r3, r3
 800692c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006930:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006934:	b292      	uxth	r2, r2
 8006936:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800693a:	45e1      	cmp	r9, ip
 800693c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006940:	f84e 2b04 	str.w	r2, [lr], #4
 8006944:	d2de      	bcs.n	8006904 <quorem+0x42>
 8006946:	9b00      	ldr	r3, [sp, #0]
 8006948:	58eb      	ldr	r3, [r5, r3]
 800694a:	b92b      	cbnz	r3, 8006958 <quorem+0x96>
 800694c:	9b01      	ldr	r3, [sp, #4]
 800694e:	3b04      	subs	r3, #4
 8006950:	429d      	cmp	r5, r3
 8006952:	461a      	mov	r2, r3
 8006954:	d32f      	bcc.n	80069b6 <quorem+0xf4>
 8006956:	613c      	str	r4, [r7, #16]
 8006958:	4638      	mov	r0, r7
 800695a:	f001 f981 	bl	8007c60 <__mcmp>
 800695e:	2800      	cmp	r0, #0
 8006960:	db25      	blt.n	80069ae <quorem+0xec>
 8006962:	4629      	mov	r1, r5
 8006964:	2000      	movs	r0, #0
 8006966:	f858 2b04 	ldr.w	r2, [r8], #4
 800696a:	f8d1 c000 	ldr.w	ip, [r1]
 800696e:	fa1f fe82 	uxth.w	lr, r2
 8006972:	fa1f f38c 	uxth.w	r3, ip
 8006976:	eba3 030e 	sub.w	r3, r3, lr
 800697a:	4403      	add	r3, r0
 800697c:	0c12      	lsrs	r2, r2, #16
 800697e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006982:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006986:	b29b      	uxth	r3, r3
 8006988:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800698c:	45c1      	cmp	r9, r8
 800698e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006992:	f841 3b04 	str.w	r3, [r1], #4
 8006996:	d2e6      	bcs.n	8006966 <quorem+0xa4>
 8006998:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800699c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069a0:	b922      	cbnz	r2, 80069ac <quorem+0xea>
 80069a2:	3b04      	subs	r3, #4
 80069a4:	429d      	cmp	r5, r3
 80069a6:	461a      	mov	r2, r3
 80069a8:	d30b      	bcc.n	80069c2 <quorem+0x100>
 80069aa:	613c      	str	r4, [r7, #16]
 80069ac:	3601      	adds	r6, #1
 80069ae:	4630      	mov	r0, r6
 80069b0:	b003      	add	sp, #12
 80069b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	3b04      	subs	r3, #4
 80069ba:	2a00      	cmp	r2, #0
 80069bc:	d1cb      	bne.n	8006956 <quorem+0x94>
 80069be:	3c01      	subs	r4, #1
 80069c0:	e7c6      	b.n	8006950 <quorem+0x8e>
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	3b04      	subs	r3, #4
 80069c6:	2a00      	cmp	r2, #0
 80069c8:	d1ef      	bne.n	80069aa <quorem+0xe8>
 80069ca:	3c01      	subs	r4, #1
 80069cc:	e7ea      	b.n	80069a4 <quorem+0xe2>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e7ee      	b.n	80069b0 <quorem+0xee>
 80069d2:	0000      	movs	r0, r0
 80069d4:	0000      	movs	r0, r0
	...

080069d8 <_dtoa_r>:
 80069d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	4614      	mov	r4, r2
 80069de:	461d      	mov	r5, r3
 80069e0:	69c7      	ldr	r7, [r0, #28]
 80069e2:	b097      	sub	sp, #92	@ 0x5c
 80069e4:	4681      	mov	r9, r0
 80069e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80069ea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80069ec:	b97f      	cbnz	r7, 8006a0e <_dtoa_r+0x36>
 80069ee:	2010      	movs	r0, #16
 80069f0:	f000 fe0e 	bl	8007610 <malloc>
 80069f4:	4602      	mov	r2, r0
 80069f6:	f8c9 001c 	str.w	r0, [r9, #28]
 80069fa:	b920      	cbnz	r0, 8006a06 <_dtoa_r+0x2e>
 80069fc:	21ef      	movs	r1, #239	@ 0xef
 80069fe:	4bac      	ldr	r3, [pc, #688]	@ (8006cb0 <_dtoa_r+0x2d8>)
 8006a00:	48ac      	ldr	r0, [pc, #688]	@ (8006cb4 <_dtoa_r+0x2dc>)
 8006a02:	f001 fcb1 	bl	8008368 <__assert_func>
 8006a06:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a0a:	6007      	str	r7, [r0, #0]
 8006a0c:	60c7      	str	r7, [r0, #12]
 8006a0e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a12:	6819      	ldr	r1, [r3, #0]
 8006a14:	b159      	cbz	r1, 8006a2e <_dtoa_r+0x56>
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	2301      	movs	r3, #1
 8006a1a:	4093      	lsls	r3, r2
 8006a1c:	604a      	str	r2, [r1, #4]
 8006a1e:	608b      	str	r3, [r1, #8]
 8006a20:	4648      	mov	r0, r9
 8006a22:	f000 feeb 	bl	80077fc <_Bfree>
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	1e2b      	subs	r3, r5, #0
 8006a30:	bfaf      	iteee	ge
 8006a32:	2300      	movge	r3, #0
 8006a34:	2201      	movlt	r2, #1
 8006a36:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a3a:	9307      	strlt	r3, [sp, #28]
 8006a3c:	bfa8      	it	ge
 8006a3e:	6033      	strge	r3, [r6, #0]
 8006a40:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006a44:	4b9c      	ldr	r3, [pc, #624]	@ (8006cb8 <_dtoa_r+0x2e0>)
 8006a46:	bfb8      	it	lt
 8006a48:	6032      	strlt	r2, [r6, #0]
 8006a4a:	ea33 0308 	bics.w	r3, r3, r8
 8006a4e:	d112      	bne.n	8006a76 <_dtoa_r+0x9e>
 8006a50:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a54:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a5c:	4323      	orrs	r3, r4
 8006a5e:	f000 855e 	beq.w	800751e <_dtoa_r+0xb46>
 8006a62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006a64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006cbc <_dtoa_r+0x2e4>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 8560 	beq.w	800752e <_dtoa_r+0xb56>
 8006a6e:	f10a 0303 	add.w	r3, sl, #3
 8006a72:	f000 bd5a 	b.w	800752a <_dtoa_r+0xb52>
 8006a76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a7a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006a7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a82:	2200      	movs	r2, #0
 8006a84:	2300      	movs	r3, #0
 8006a86:	f7f9 ffa7 	bl	80009d8 <__aeabi_dcmpeq>
 8006a8a:	4607      	mov	r7, r0
 8006a8c:	b158      	cbz	r0, 8006aa6 <_dtoa_r+0xce>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006a96:	b113      	cbz	r3, 8006a9e <_dtoa_r+0xc6>
 8006a98:	4b89      	ldr	r3, [pc, #548]	@ (8006cc0 <_dtoa_r+0x2e8>)
 8006a9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006cc4 <_dtoa_r+0x2ec>
 8006aa2:	f000 bd44 	b.w	800752e <_dtoa_r+0xb56>
 8006aa6:	ab14      	add	r3, sp, #80	@ 0x50
 8006aa8:	9301      	str	r3, [sp, #4]
 8006aaa:	ab15      	add	r3, sp, #84	@ 0x54
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	4648      	mov	r0, r9
 8006ab0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006ab4:	f001 f984 	bl	8007dc0 <__d2b>
 8006ab8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006abc:	9003      	str	r0, [sp, #12]
 8006abe:	2e00      	cmp	r6, #0
 8006ac0:	d078      	beq.n	8006bb4 <_dtoa_r+0x1dc>
 8006ac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ac8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ad0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ad4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006ad8:	9712      	str	r7, [sp, #72]	@ 0x48
 8006ada:	4619      	mov	r1, r3
 8006adc:	2200      	movs	r2, #0
 8006ade:	4b7a      	ldr	r3, [pc, #488]	@ (8006cc8 <_dtoa_r+0x2f0>)
 8006ae0:	f7f9 fb5a 	bl	8000198 <__aeabi_dsub>
 8006ae4:	a36c      	add	r3, pc, #432	@ (adr r3, 8006c98 <_dtoa_r+0x2c0>)
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	f7f9 fd0d 	bl	8000508 <__aeabi_dmul>
 8006aee:	a36c      	add	r3, pc, #432	@ (adr r3, 8006ca0 <_dtoa_r+0x2c8>)
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	f7f9 fb52 	bl	800019c <__adddf3>
 8006af8:	4604      	mov	r4, r0
 8006afa:	4630      	mov	r0, r6
 8006afc:	460d      	mov	r5, r1
 8006afe:	f7f9 fc99 	bl	8000434 <__aeabi_i2d>
 8006b02:	a369      	add	r3, pc, #420	@ (adr r3, 8006ca8 <_dtoa_r+0x2d0>)
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	f7f9 fcfe 	bl	8000508 <__aeabi_dmul>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4620      	mov	r0, r4
 8006b12:	4629      	mov	r1, r5
 8006b14:	f7f9 fb42 	bl	800019c <__adddf3>
 8006b18:	4604      	mov	r4, r0
 8006b1a:	460d      	mov	r5, r1
 8006b1c:	f7f9 ffa4 	bl	8000a68 <__aeabi_d2iz>
 8006b20:	2200      	movs	r2, #0
 8006b22:	4607      	mov	r7, r0
 8006b24:	2300      	movs	r3, #0
 8006b26:	4620      	mov	r0, r4
 8006b28:	4629      	mov	r1, r5
 8006b2a:	f7f9 ff5f 	bl	80009ec <__aeabi_dcmplt>
 8006b2e:	b140      	cbz	r0, 8006b42 <_dtoa_r+0x16a>
 8006b30:	4638      	mov	r0, r7
 8006b32:	f7f9 fc7f 	bl	8000434 <__aeabi_i2d>
 8006b36:	4622      	mov	r2, r4
 8006b38:	462b      	mov	r3, r5
 8006b3a:	f7f9 ff4d 	bl	80009d8 <__aeabi_dcmpeq>
 8006b3e:	b900      	cbnz	r0, 8006b42 <_dtoa_r+0x16a>
 8006b40:	3f01      	subs	r7, #1
 8006b42:	2f16      	cmp	r7, #22
 8006b44:	d854      	bhi.n	8006bf0 <_dtoa_r+0x218>
 8006b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b4a:	4b60      	ldr	r3, [pc, #384]	@ (8006ccc <_dtoa_r+0x2f4>)
 8006b4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f7f9 ff4a 	bl	80009ec <__aeabi_dcmplt>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d04b      	beq.n	8006bf4 <_dtoa_r+0x21c>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	3f01      	subs	r7, #1
 8006b60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006b64:	1b9b      	subs	r3, r3, r6
 8006b66:	1e5a      	subs	r2, r3, #1
 8006b68:	bf49      	itett	mi
 8006b6a:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b6e:	2300      	movpl	r3, #0
 8006b70:	9304      	strmi	r3, [sp, #16]
 8006b72:	2300      	movmi	r3, #0
 8006b74:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b76:	bf54      	ite	pl
 8006b78:	9304      	strpl	r3, [sp, #16]
 8006b7a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006b7c:	2f00      	cmp	r7, #0
 8006b7e:	db3b      	blt.n	8006bf8 <_dtoa_r+0x220>
 8006b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b82:	970e      	str	r7, [sp, #56]	@ 0x38
 8006b84:	443b      	add	r3, r7
 8006b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b88:	2300      	movs	r3, #0
 8006b8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b8e:	2b09      	cmp	r3, #9
 8006b90:	d865      	bhi.n	8006c5e <_dtoa_r+0x286>
 8006b92:	2b05      	cmp	r3, #5
 8006b94:	bfc4      	itt	gt
 8006b96:	3b04      	subgt	r3, #4
 8006b98:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006b9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b9c:	bfc8      	it	gt
 8006b9e:	2400      	movgt	r4, #0
 8006ba0:	f1a3 0302 	sub.w	r3, r3, #2
 8006ba4:	bfd8      	it	le
 8006ba6:	2401      	movle	r4, #1
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d864      	bhi.n	8006c76 <_dtoa_r+0x29e>
 8006bac:	e8df f003 	tbb	[pc, r3]
 8006bb0:	2c385553 	.word	0x2c385553
 8006bb4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006bb8:	441e      	add	r6, r3
 8006bba:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	bfc1      	itttt	gt
 8006bc2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006bc6:	fa08 f803 	lslgt.w	r8, r8, r3
 8006bca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006bce:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006bd2:	bfd6      	itet	le
 8006bd4:	f1c3 0320 	rsble	r3, r3, #32
 8006bd8:	ea48 0003 	orrgt.w	r0, r8, r3
 8006bdc:	fa04 f003 	lslle.w	r0, r4, r3
 8006be0:	f7f9 fc18 	bl	8000414 <__aeabi_ui2d>
 8006be4:	2201      	movs	r2, #1
 8006be6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006bea:	3e01      	subs	r6, #1
 8006bec:	9212      	str	r2, [sp, #72]	@ 0x48
 8006bee:	e774      	b.n	8006ada <_dtoa_r+0x102>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e7b5      	b.n	8006b60 <_dtoa_r+0x188>
 8006bf4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006bf6:	e7b4      	b.n	8006b62 <_dtoa_r+0x18a>
 8006bf8:	9b04      	ldr	r3, [sp, #16]
 8006bfa:	1bdb      	subs	r3, r3, r7
 8006bfc:	9304      	str	r3, [sp, #16]
 8006bfe:	427b      	negs	r3, r7
 8006c00:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c02:	2300      	movs	r3, #0
 8006c04:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c06:	e7c1      	b.n	8006b8c <_dtoa_r+0x1b4>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c0e:	eb07 0b03 	add.w	fp, r7, r3
 8006c12:	f10b 0301 	add.w	r3, fp, #1
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	9308      	str	r3, [sp, #32]
 8006c1a:	bfb8      	it	lt
 8006c1c:	2301      	movlt	r3, #1
 8006c1e:	e006      	b.n	8006c2e <_dtoa_r+0x256>
 8006c20:	2301      	movs	r3, #1
 8006c22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	dd28      	ble.n	8006c7c <_dtoa_r+0x2a4>
 8006c2a:	469b      	mov	fp, r3
 8006c2c:	9308      	str	r3, [sp, #32]
 8006c2e:	2100      	movs	r1, #0
 8006c30:	2204      	movs	r2, #4
 8006c32:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006c36:	f102 0514 	add.w	r5, r2, #20
 8006c3a:	429d      	cmp	r5, r3
 8006c3c:	d926      	bls.n	8006c8c <_dtoa_r+0x2b4>
 8006c3e:	6041      	str	r1, [r0, #4]
 8006c40:	4648      	mov	r0, r9
 8006c42:	f000 fd9b 	bl	800777c <_Balloc>
 8006c46:	4682      	mov	sl, r0
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d143      	bne.n	8006cd4 <_dtoa_r+0x2fc>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c52:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd0 <_dtoa_r+0x2f8>)
 8006c54:	e6d4      	b.n	8006a00 <_dtoa_r+0x28>
 8006c56:	2300      	movs	r3, #0
 8006c58:	e7e3      	b.n	8006c22 <_dtoa_r+0x24a>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e7d5      	b.n	8006c0a <_dtoa_r+0x232>
 8006c5e:	2401      	movs	r4, #1
 8006c60:	2300      	movs	r3, #0
 8006c62:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c64:	9320      	str	r3, [sp, #128]	@ 0x80
 8006c66:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2312      	movs	r3, #18
 8006c6e:	f8cd b020 	str.w	fp, [sp, #32]
 8006c72:	9221      	str	r2, [sp, #132]	@ 0x84
 8006c74:	e7db      	b.n	8006c2e <_dtoa_r+0x256>
 8006c76:	2301      	movs	r3, #1
 8006c78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c7a:	e7f4      	b.n	8006c66 <_dtoa_r+0x28e>
 8006c7c:	f04f 0b01 	mov.w	fp, #1
 8006c80:	465b      	mov	r3, fp
 8006c82:	f8cd b020 	str.w	fp, [sp, #32]
 8006c86:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006c8a:	e7d0      	b.n	8006c2e <_dtoa_r+0x256>
 8006c8c:	3101      	adds	r1, #1
 8006c8e:	0052      	lsls	r2, r2, #1
 8006c90:	e7d1      	b.n	8006c36 <_dtoa_r+0x25e>
 8006c92:	bf00      	nop
 8006c94:	f3af 8000 	nop.w
 8006c98:	636f4361 	.word	0x636f4361
 8006c9c:	3fd287a7 	.word	0x3fd287a7
 8006ca0:	8b60c8b3 	.word	0x8b60c8b3
 8006ca4:	3fc68a28 	.word	0x3fc68a28
 8006ca8:	509f79fb 	.word	0x509f79fb
 8006cac:	3fd34413 	.word	0x3fd34413
 8006cb0:	0800d2dd 	.word	0x0800d2dd
 8006cb4:	0800d2f4 	.word	0x0800d2f4
 8006cb8:	7ff00000 	.word	0x7ff00000
 8006cbc:	0800d2d9 	.word	0x0800d2d9
 8006cc0:	0800d2ad 	.word	0x0800d2ad
 8006cc4:	0800d2ac 	.word	0x0800d2ac
 8006cc8:	3ff80000 	.word	0x3ff80000
 8006ccc:	0800d448 	.word	0x0800d448
 8006cd0:	0800d34c 	.word	0x0800d34c
 8006cd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006cd8:	6018      	str	r0, [r3, #0]
 8006cda:	9b08      	ldr	r3, [sp, #32]
 8006cdc:	2b0e      	cmp	r3, #14
 8006cde:	f200 80a1 	bhi.w	8006e24 <_dtoa_r+0x44c>
 8006ce2:	2c00      	cmp	r4, #0
 8006ce4:	f000 809e 	beq.w	8006e24 <_dtoa_r+0x44c>
 8006ce8:	2f00      	cmp	r7, #0
 8006cea:	dd33      	ble.n	8006d54 <_dtoa_r+0x37c>
 8006cec:	4b9c      	ldr	r3, [pc, #624]	@ (8006f60 <_dtoa_r+0x588>)
 8006cee:	f007 020f 	and.w	r2, r7, #15
 8006cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cf6:	05f8      	lsls	r0, r7, #23
 8006cf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cfc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006d00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d04:	d516      	bpl.n	8006d34 <_dtoa_r+0x35c>
 8006d06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d0a:	4b96      	ldr	r3, [pc, #600]	@ (8006f64 <_dtoa_r+0x58c>)
 8006d0c:	2603      	movs	r6, #3
 8006d0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d12:	f7f9 fd23 	bl	800075c <__aeabi_ddiv>
 8006d16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d1a:	f004 040f 	and.w	r4, r4, #15
 8006d1e:	4d91      	ldr	r5, [pc, #580]	@ (8006f64 <_dtoa_r+0x58c>)
 8006d20:	b954      	cbnz	r4, 8006d38 <_dtoa_r+0x360>
 8006d22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d2a:	f7f9 fd17 	bl	800075c <__aeabi_ddiv>
 8006d2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d32:	e028      	b.n	8006d86 <_dtoa_r+0x3ae>
 8006d34:	2602      	movs	r6, #2
 8006d36:	e7f2      	b.n	8006d1e <_dtoa_r+0x346>
 8006d38:	07e1      	lsls	r1, r4, #31
 8006d3a:	d508      	bpl.n	8006d4e <_dtoa_r+0x376>
 8006d3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d44:	f7f9 fbe0 	bl	8000508 <__aeabi_dmul>
 8006d48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d4c:	3601      	adds	r6, #1
 8006d4e:	1064      	asrs	r4, r4, #1
 8006d50:	3508      	adds	r5, #8
 8006d52:	e7e5      	b.n	8006d20 <_dtoa_r+0x348>
 8006d54:	f000 80af 	beq.w	8006eb6 <_dtoa_r+0x4de>
 8006d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d5c:	427c      	negs	r4, r7
 8006d5e:	4b80      	ldr	r3, [pc, #512]	@ (8006f60 <_dtoa_r+0x588>)
 8006d60:	f004 020f 	and.w	r2, r4, #15
 8006d64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	f7f9 fbcc 	bl	8000508 <__aeabi_dmul>
 8006d70:	2602      	movs	r6, #2
 8006d72:	2300      	movs	r3, #0
 8006d74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d78:	4d7a      	ldr	r5, [pc, #488]	@ (8006f64 <_dtoa_r+0x58c>)
 8006d7a:	1124      	asrs	r4, r4, #4
 8006d7c:	2c00      	cmp	r4, #0
 8006d7e:	f040 808f 	bne.w	8006ea0 <_dtoa_r+0x4c8>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1d3      	bne.n	8006d2e <_dtoa_r+0x356>
 8006d86:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006d8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8094 	beq.w	8006eba <_dtoa_r+0x4e2>
 8006d92:	2200      	movs	r2, #0
 8006d94:	4620      	mov	r0, r4
 8006d96:	4629      	mov	r1, r5
 8006d98:	4b73      	ldr	r3, [pc, #460]	@ (8006f68 <_dtoa_r+0x590>)
 8006d9a:	f7f9 fe27 	bl	80009ec <__aeabi_dcmplt>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	f000 808b 	beq.w	8006eba <_dtoa_r+0x4e2>
 8006da4:	9b08      	ldr	r3, [sp, #32]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 8087 	beq.w	8006eba <_dtoa_r+0x4e2>
 8006dac:	f1bb 0f00 	cmp.w	fp, #0
 8006db0:	dd34      	ble.n	8006e1c <_dtoa_r+0x444>
 8006db2:	4620      	mov	r0, r4
 8006db4:	2200      	movs	r2, #0
 8006db6:	4629      	mov	r1, r5
 8006db8:	4b6c      	ldr	r3, [pc, #432]	@ (8006f6c <_dtoa_r+0x594>)
 8006dba:	f7f9 fba5 	bl	8000508 <__aeabi_dmul>
 8006dbe:	465c      	mov	r4, fp
 8006dc0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006dc4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006dc8:	3601      	adds	r6, #1
 8006dca:	4630      	mov	r0, r6
 8006dcc:	f7f9 fb32 	bl	8000434 <__aeabi_i2d>
 8006dd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dd4:	f7f9 fb98 	bl	8000508 <__aeabi_dmul>
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4b65      	ldr	r3, [pc, #404]	@ (8006f70 <_dtoa_r+0x598>)
 8006ddc:	f7f9 f9de 	bl	800019c <__adddf3>
 8006de0:	4605      	mov	r5, r0
 8006de2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006de6:	2c00      	cmp	r4, #0
 8006de8:	d16a      	bne.n	8006ec0 <_dtoa_r+0x4e8>
 8006dea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dee:	2200      	movs	r2, #0
 8006df0:	4b60      	ldr	r3, [pc, #384]	@ (8006f74 <_dtoa_r+0x59c>)
 8006df2:	f7f9 f9d1 	bl	8000198 <__aeabi_dsub>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006dfe:	462a      	mov	r2, r5
 8006e00:	4633      	mov	r3, r6
 8006e02:	f7f9 fe11 	bl	8000a28 <__aeabi_dcmpgt>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	f040 8298 	bne.w	800733c <_dtoa_r+0x964>
 8006e0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e10:	462a      	mov	r2, r5
 8006e12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e16:	f7f9 fde9 	bl	80009ec <__aeabi_dcmplt>
 8006e1a:	bb38      	cbnz	r0, 8006e6c <_dtoa_r+0x494>
 8006e1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e20:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006e24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f2c0 8157 	blt.w	80070da <_dtoa_r+0x702>
 8006e2c:	2f0e      	cmp	r7, #14
 8006e2e:	f300 8154 	bgt.w	80070da <_dtoa_r+0x702>
 8006e32:	4b4b      	ldr	r3, [pc, #300]	@ (8006f60 <_dtoa_r+0x588>)
 8006e34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e3c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f280 80e5 	bge.w	8007012 <_dtoa_r+0x63a>
 8006e48:	9b08      	ldr	r3, [sp, #32]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f300 80e1 	bgt.w	8007012 <_dtoa_r+0x63a>
 8006e50:	d10c      	bne.n	8006e6c <_dtoa_r+0x494>
 8006e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e56:	2200      	movs	r2, #0
 8006e58:	4b46      	ldr	r3, [pc, #280]	@ (8006f74 <_dtoa_r+0x59c>)
 8006e5a:	f7f9 fb55 	bl	8000508 <__aeabi_dmul>
 8006e5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e62:	f7f9 fdd7 	bl	8000a14 <__aeabi_dcmpge>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f000 8266 	beq.w	8007338 <_dtoa_r+0x960>
 8006e6c:	2400      	movs	r4, #0
 8006e6e:	4625      	mov	r5, r4
 8006e70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e72:	4656      	mov	r6, sl
 8006e74:	ea6f 0803 	mvn.w	r8, r3
 8006e78:	2700      	movs	r7, #0
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4648      	mov	r0, r9
 8006e7e:	f000 fcbd 	bl	80077fc <_Bfree>
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	f000 80bd 	beq.w	8007002 <_dtoa_r+0x62a>
 8006e88:	b12f      	cbz	r7, 8006e96 <_dtoa_r+0x4be>
 8006e8a:	42af      	cmp	r7, r5
 8006e8c:	d003      	beq.n	8006e96 <_dtoa_r+0x4be>
 8006e8e:	4639      	mov	r1, r7
 8006e90:	4648      	mov	r0, r9
 8006e92:	f000 fcb3 	bl	80077fc <_Bfree>
 8006e96:	4629      	mov	r1, r5
 8006e98:	4648      	mov	r0, r9
 8006e9a:	f000 fcaf 	bl	80077fc <_Bfree>
 8006e9e:	e0b0      	b.n	8007002 <_dtoa_r+0x62a>
 8006ea0:	07e2      	lsls	r2, r4, #31
 8006ea2:	d505      	bpl.n	8006eb0 <_dtoa_r+0x4d8>
 8006ea4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ea8:	f7f9 fb2e 	bl	8000508 <__aeabi_dmul>
 8006eac:	2301      	movs	r3, #1
 8006eae:	3601      	adds	r6, #1
 8006eb0:	1064      	asrs	r4, r4, #1
 8006eb2:	3508      	adds	r5, #8
 8006eb4:	e762      	b.n	8006d7c <_dtoa_r+0x3a4>
 8006eb6:	2602      	movs	r6, #2
 8006eb8:	e765      	b.n	8006d86 <_dtoa_r+0x3ae>
 8006eba:	46b8      	mov	r8, r7
 8006ebc:	9c08      	ldr	r4, [sp, #32]
 8006ebe:	e784      	b.n	8006dca <_dtoa_r+0x3f2>
 8006ec0:	4b27      	ldr	r3, [pc, #156]	@ (8006f60 <_dtoa_r+0x588>)
 8006ec2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ec4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ec8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ecc:	4454      	add	r4, sl
 8006ece:	2900      	cmp	r1, #0
 8006ed0:	d054      	beq.n	8006f7c <_dtoa_r+0x5a4>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	4928      	ldr	r1, [pc, #160]	@ (8006f78 <_dtoa_r+0x5a0>)
 8006ed6:	f7f9 fc41 	bl	800075c <__aeabi_ddiv>
 8006eda:	4633      	mov	r3, r6
 8006edc:	462a      	mov	r2, r5
 8006ede:	f7f9 f95b 	bl	8000198 <__aeabi_dsub>
 8006ee2:	4656      	mov	r6, sl
 8006ee4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ee8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eec:	f7f9 fdbc 	bl	8000a68 <__aeabi_d2iz>
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	f7f9 fa9f 	bl	8000434 <__aeabi_i2d>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006efe:	f7f9 f94b 	bl	8000198 <__aeabi_dsub>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	3530      	adds	r5, #48	@ 0x30
 8006f08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f10:	f806 5b01 	strb.w	r5, [r6], #1
 8006f14:	f7f9 fd6a 	bl	80009ec <__aeabi_dcmplt>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d172      	bne.n	8007002 <_dtoa_r+0x62a>
 8006f1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f20:	2000      	movs	r0, #0
 8006f22:	4911      	ldr	r1, [pc, #68]	@ (8006f68 <_dtoa_r+0x590>)
 8006f24:	f7f9 f938 	bl	8000198 <__aeabi_dsub>
 8006f28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f2c:	f7f9 fd5e 	bl	80009ec <__aeabi_dcmplt>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	f040 80b4 	bne.w	800709e <_dtoa_r+0x6c6>
 8006f36:	42a6      	cmp	r6, r4
 8006f38:	f43f af70 	beq.w	8006e1c <_dtoa_r+0x444>
 8006f3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f40:	2200      	movs	r2, #0
 8006f42:	4b0a      	ldr	r3, [pc, #40]	@ (8006f6c <_dtoa_r+0x594>)
 8006f44:	f7f9 fae0 	bl	8000508 <__aeabi_dmul>
 8006f48:	2200      	movs	r2, #0
 8006f4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f52:	4b06      	ldr	r3, [pc, #24]	@ (8006f6c <_dtoa_r+0x594>)
 8006f54:	f7f9 fad8 	bl	8000508 <__aeabi_dmul>
 8006f58:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f5c:	e7c4      	b.n	8006ee8 <_dtoa_r+0x510>
 8006f5e:	bf00      	nop
 8006f60:	0800d448 	.word	0x0800d448
 8006f64:	0800d420 	.word	0x0800d420
 8006f68:	3ff00000 	.word	0x3ff00000
 8006f6c:	40240000 	.word	0x40240000
 8006f70:	401c0000 	.word	0x401c0000
 8006f74:	40140000 	.word	0x40140000
 8006f78:	3fe00000 	.word	0x3fe00000
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f7f9 fac2 	bl	8000508 <__aeabi_dmul>
 8006f84:	4656      	mov	r6, sl
 8006f86:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f8a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006f8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f90:	f7f9 fd6a 	bl	8000a68 <__aeabi_d2iz>
 8006f94:	4605      	mov	r5, r0
 8006f96:	f7f9 fa4d 	bl	8000434 <__aeabi_i2d>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fa2:	f7f9 f8f9 	bl	8000198 <__aeabi_dsub>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	3530      	adds	r5, #48	@ 0x30
 8006fac:	f806 5b01 	strb.w	r5, [r6], #1
 8006fb0:	42a6      	cmp	r6, r4
 8006fb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	d124      	bne.n	8007006 <_dtoa_r+0x62e>
 8006fbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006fc0:	4bae      	ldr	r3, [pc, #696]	@ (800727c <_dtoa_r+0x8a4>)
 8006fc2:	f7f9 f8eb 	bl	800019c <__adddf3>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fce:	f7f9 fd2b 	bl	8000a28 <__aeabi_dcmpgt>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d163      	bne.n	800709e <_dtoa_r+0x6c6>
 8006fd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fda:	2000      	movs	r0, #0
 8006fdc:	49a7      	ldr	r1, [pc, #668]	@ (800727c <_dtoa_r+0x8a4>)
 8006fde:	f7f9 f8db 	bl	8000198 <__aeabi_dsub>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fea:	f7f9 fcff 	bl	80009ec <__aeabi_dcmplt>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f43f af14 	beq.w	8006e1c <_dtoa_r+0x444>
 8006ff4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006ff6:	1e73      	subs	r3, r6, #1
 8006ff8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ffa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ffe:	2b30      	cmp	r3, #48	@ 0x30
 8007000:	d0f8      	beq.n	8006ff4 <_dtoa_r+0x61c>
 8007002:	4647      	mov	r7, r8
 8007004:	e03b      	b.n	800707e <_dtoa_r+0x6a6>
 8007006:	4b9e      	ldr	r3, [pc, #632]	@ (8007280 <_dtoa_r+0x8a8>)
 8007008:	f7f9 fa7e 	bl	8000508 <__aeabi_dmul>
 800700c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007010:	e7bc      	b.n	8006f8c <_dtoa_r+0x5b4>
 8007012:	4656      	mov	r6, sl
 8007014:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800701c:	4620      	mov	r0, r4
 800701e:	4629      	mov	r1, r5
 8007020:	f7f9 fb9c 	bl	800075c <__aeabi_ddiv>
 8007024:	f7f9 fd20 	bl	8000a68 <__aeabi_d2iz>
 8007028:	4680      	mov	r8, r0
 800702a:	f7f9 fa03 	bl	8000434 <__aeabi_i2d>
 800702e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007032:	f7f9 fa69 	bl	8000508 <__aeabi_dmul>
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	4620      	mov	r0, r4
 800703c:	4629      	mov	r1, r5
 800703e:	f7f9 f8ab 	bl	8000198 <__aeabi_dsub>
 8007042:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007046:	9d08      	ldr	r5, [sp, #32]
 8007048:	f806 4b01 	strb.w	r4, [r6], #1
 800704c:	eba6 040a 	sub.w	r4, r6, sl
 8007050:	42a5      	cmp	r5, r4
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	d133      	bne.n	80070c0 <_dtoa_r+0x6e8>
 8007058:	f7f9 f8a0 	bl	800019c <__adddf3>
 800705c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007060:	4604      	mov	r4, r0
 8007062:	460d      	mov	r5, r1
 8007064:	f7f9 fce0 	bl	8000a28 <__aeabi_dcmpgt>
 8007068:	b9c0      	cbnz	r0, 800709c <_dtoa_r+0x6c4>
 800706a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800706e:	4620      	mov	r0, r4
 8007070:	4629      	mov	r1, r5
 8007072:	f7f9 fcb1 	bl	80009d8 <__aeabi_dcmpeq>
 8007076:	b110      	cbz	r0, 800707e <_dtoa_r+0x6a6>
 8007078:	f018 0f01 	tst.w	r8, #1
 800707c:	d10e      	bne.n	800709c <_dtoa_r+0x6c4>
 800707e:	4648      	mov	r0, r9
 8007080:	9903      	ldr	r1, [sp, #12]
 8007082:	f000 fbbb 	bl	80077fc <_Bfree>
 8007086:	2300      	movs	r3, #0
 8007088:	7033      	strb	r3, [r6, #0]
 800708a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800708c:	3701      	adds	r7, #1
 800708e:	601f      	str	r7, [r3, #0]
 8007090:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 824b 	beq.w	800752e <_dtoa_r+0xb56>
 8007098:	601e      	str	r6, [r3, #0]
 800709a:	e248      	b.n	800752e <_dtoa_r+0xb56>
 800709c:	46b8      	mov	r8, r7
 800709e:	4633      	mov	r3, r6
 80070a0:	461e      	mov	r6, r3
 80070a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070a6:	2a39      	cmp	r2, #57	@ 0x39
 80070a8:	d106      	bne.n	80070b8 <_dtoa_r+0x6e0>
 80070aa:	459a      	cmp	sl, r3
 80070ac:	d1f8      	bne.n	80070a0 <_dtoa_r+0x6c8>
 80070ae:	2230      	movs	r2, #48	@ 0x30
 80070b0:	f108 0801 	add.w	r8, r8, #1
 80070b4:	f88a 2000 	strb.w	r2, [sl]
 80070b8:	781a      	ldrb	r2, [r3, #0]
 80070ba:	3201      	adds	r2, #1
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	e7a0      	b.n	8007002 <_dtoa_r+0x62a>
 80070c0:	2200      	movs	r2, #0
 80070c2:	4b6f      	ldr	r3, [pc, #444]	@ (8007280 <_dtoa_r+0x8a8>)
 80070c4:	f7f9 fa20 	bl	8000508 <__aeabi_dmul>
 80070c8:	2200      	movs	r2, #0
 80070ca:	2300      	movs	r3, #0
 80070cc:	4604      	mov	r4, r0
 80070ce:	460d      	mov	r5, r1
 80070d0:	f7f9 fc82 	bl	80009d8 <__aeabi_dcmpeq>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d09f      	beq.n	8007018 <_dtoa_r+0x640>
 80070d8:	e7d1      	b.n	800707e <_dtoa_r+0x6a6>
 80070da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80070dc:	2a00      	cmp	r2, #0
 80070de:	f000 80ea 	beq.w	80072b6 <_dtoa_r+0x8de>
 80070e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80070e4:	2a01      	cmp	r2, #1
 80070e6:	f300 80cd 	bgt.w	8007284 <_dtoa_r+0x8ac>
 80070ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80070ec:	2a00      	cmp	r2, #0
 80070ee:	f000 80c1 	beq.w	8007274 <_dtoa_r+0x89c>
 80070f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80070f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80070f8:	9e04      	ldr	r6, [sp, #16]
 80070fa:	9a04      	ldr	r2, [sp, #16]
 80070fc:	2101      	movs	r1, #1
 80070fe:	441a      	add	r2, r3
 8007100:	9204      	str	r2, [sp, #16]
 8007102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007104:	4648      	mov	r0, r9
 8007106:	441a      	add	r2, r3
 8007108:	9209      	str	r2, [sp, #36]	@ 0x24
 800710a:	f000 fc2b 	bl	8007964 <__i2b>
 800710e:	4605      	mov	r5, r0
 8007110:	b166      	cbz	r6, 800712c <_dtoa_r+0x754>
 8007112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007114:	2b00      	cmp	r3, #0
 8007116:	dd09      	ble.n	800712c <_dtoa_r+0x754>
 8007118:	42b3      	cmp	r3, r6
 800711a:	bfa8      	it	ge
 800711c:	4633      	movge	r3, r6
 800711e:	9a04      	ldr	r2, [sp, #16]
 8007120:	1af6      	subs	r6, r6, r3
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	9204      	str	r2, [sp, #16]
 8007126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	9309      	str	r3, [sp, #36]	@ 0x24
 800712c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800712e:	b30b      	cbz	r3, 8007174 <_dtoa_r+0x79c>
 8007130:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 80c6 	beq.w	80072c4 <_dtoa_r+0x8ec>
 8007138:	2c00      	cmp	r4, #0
 800713a:	f000 80c0 	beq.w	80072be <_dtoa_r+0x8e6>
 800713e:	4629      	mov	r1, r5
 8007140:	4622      	mov	r2, r4
 8007142:	4648      	mov	r0, r9
 8007144:	f000 fcc6 	bl	8007ad4 <__pow5mult>
 8007148:	9a03      	ldr	r2, [sp, #12]
 800714a:	4601      	mov	r1, r0
 800714c:	4605      	mov	r5, r0
 800714e:	4648      	mov	r0, r9
 8007150:	f000 fc1e 	bl	8007990 <__multiply>
 8007154:	9903      	ldr	r1, [sp, #12]
 8007156:	4680      	mov	r8, r0
 8007158:	4648      	mov	r0, r9
 800715a:	f000 fb4f 	bl	80077fc <_Bfree>
 800715e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007160:	1b1b      	subs	r3, r3, r4
 8007162:	930a      	str	r3, [sp, #40]	@ 0x28
 8007164:	f000 80b1 	beq.w	80072ca <_dtoa_r+0x8f2>
 8007168:	4641      	mov	r1, r8
 800716a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800716c:	4648      	mov	r0, r9
 800716e:	f000 fcb1 	bl	8007ad4 <__pow5mult>
 8007172:	9003      	str	r0, [sp, #12]
 8007174:	2101      	movs	r1, #1
 8007176:	4648      	mov	r0, r9
 8007178:	f000 fbf4 	bl	8007964 <__i2b>
 800717c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800717e:	4604      	mov	r4, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 81d8 	beq.w	8007536 <_dtoa_r+0xb5e>
 8007186:	461a      	mov	r2, r3
 8007188:	4601      	mov	r1, r0
 800718a:	4648      	mov	r0, r9
 800718c:	f000 fca2 	bl	8007ad4 <__pow5mult>
 8007190:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007192:	4604      	mov	r4, r0
 8007194:	2b01      	cmp	r3, #1
 8007196:	f300 809f 	bgt.w	80072d8 <_dtoa_r+0x900>
 800719a:	9b06      	ldr	r3, [sp, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	f040 8097 	bne.w	80072d0 <_dtoa_r+0x8f8>
 80071a2:	9b07      	ldr	r3, [sp, #28]
 80071a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f040 8093 	bne.w	80072d4 <_dtoa_r+0x8fc>
 80071ae:	9b07      	ldr	r3, [sp, #28]
 80071b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071b4:	0d1b      	lsrs	r3, r3, #20
 80071b6:	051b      	lsls	r3, r3, #20
 80071b8:	b133      	cbz	r3, 80071c8 <_dtoa_r+0x7f0>
 80071ba:	9b04      	ldr	r3, [sp, #16]
 80071bc:	3301      	adds	r3, #1
 80071be:	9304      	str	r3, [sp, #16]
 80071c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c2:	3301      	adds	r3, #1
 80071c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071c6:	2301      	movs	r3, #1
 80071c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80071ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 81b8 	beq.w	8007542 <_dtoa_r+0xb6a>
 80071d2:	6923      	ldr	r3, [r4, #16]
 80071d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071d8:	6918      	ldr	r0, [r3, #16]
 80071da:	f000 fb77 	bl	80078cc <__hi0bits>
 80071de:	f1c0 0020 	rsb	r0, r0, #32
 80071e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e4:	4418      	add	r0, r3
 80071e6:	f010 001f 	ands.w	r0, r0, #31
 80071ea:	f000 8082 	beq.w	80072f2 <_dtoa_r+0x91a>
 80071ee:	f1c0 0320 	rsb	r3, r0, #32
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	dd73      	ble.n	80072de <_dtoa_r+0x906>
 80071f6:	9b04      	ldr	r3, [sp, #16]
 80071f8:	f1c0 001c 	rsb	r0, r0, #28
 80071fc:	4403      	add	r3, r0
 80071fe:	9304      	str	r3, [sp, #16]
 8007200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007202:	4406      	add	r6, r0
 8007204:	4403      	add	r3, r0
 8007206:	9309      	str	r3, [sp, #36]	@ 0x24
 8007208:	9b04      	ldr	r3, [sp, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	dd05      	ble.n	800721a <_dtoa_r+0x842>
 800720e:	461a      	mov	r2, r3
 8007210:	4648      	mov	r0, r9
 8007212:	9903      	ldr	r1, [sp, #12]
 8007214:	f000 fcb8 	bl	8007b88 <__lshift>
 8007218:	9003      	str	r0, [sp, #12]
 800721a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	dd05      	ble.n	800722c <_dtoa_r+0x854>
 8007220:	4621      	mov	r1, r4
 8007222:	461a      	mov	r2, r3
 8007224:	4648      	mov	r0, r9
 8007226:	f000 fcaf 	bl	8007b88 <__lshift>
 800722a:	4604      	mov	r4, r0
 800722c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d061      	beq.n	80072f6 <_dtoa_r+0x91e>
 8007232:	4621      	mov	r1, r4
 8007234:	9803      	ldr	r0, [sp, #12]
 8007236:	f000 fd13 	bl	8007c60 <__mcmp>
 800723a:	2800      	cmp	r0, #0
 800723c:	da5b      	bge.n	80072f6 <_dtoa_r+0x91e>
 800723e:	2300      	movs	r3, #0
 8007240:	220a      	movs	r2, #10
 8007242:	4648      	mov	r0, r9
 8007244:	9903      	ldr	r1, [sp, #12]
 8007246:	f000 fafb 	bl	8007840 <__multadd>
 800724a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800724c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007250:	9003      	str	r0, [sp, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 8177 	beq.w	8007546 <_dtoa_r+0xb6e>
 8007258:	4629      	mov	r1, r5
 800725a:	2300      	movs	r3, #0
 800725c:	220a      	movs	r2, #10
 800725e:	4648      	mov	r0, r9
 8007260:	f000 faee 	bl	8007840 <__multadd>
 8007264:	f1bb 0f00 	cmp.w	fp, #0
 8007268:	4605      	mov	r5, r0
 800726a:	dc6f      	bgt.n	800734c <_dtoa_r+0x974>
 800726c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800726e:	2b02      	cmp	r3, #2
 8007270:	dc49      	bgt.n	8007306 <_dtoa_r+0x92e>
 8007272:	e06b      	b.n	800734c <_dtoa_r+0x974>
 8007274:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007276:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800727a:	e73c      	b.n	80070f6 <_dtoa_r+0x71e>
 800727c:	3fe00000 	.word	0x3fe00000
 8007280:	40240000 	.word	0x40240000
 8007284:	9b08      	ldr	r3, [sp, #32]
 8007286:	1e5c      	subs	r4, r3, #1
 8007288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800728a:	42a3      	cmp	r3, r4
 800728c:	db09      	blt.n	80072a2 <_dtoa_r+0x8ca>
 800728e:	1b1c      	subs	r4, r3, r4
 8007290:	9b08      	ldr	r3, [sp, #32]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f6bf af30 	bge.w	80070f8 <_dtoa_r+0x720>
 8007298:	9b04      	ldr	r3, [sp, #16]
 800729a:	9a08      	ldr	r2, [sp, #32]
 800729c:	1a9e      	subs	r6, r3, r2
 800729e:	2300      	movs	r3, #0
 80072a0:	e72b      	b.n	80070fa <_dtoa_r+0x722>
 80072a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072a6:	1ae3      	subs	r3, r4, r3
 80072a8:	441a      	add	r2, r3
 80072aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80072ac:	9e04      	ldr	r6, [sp, #16]
 80072ae:	2400      	movs	r4, #0
 80072b0:	9b08      	ldr	r3, [sp, #32]
 80072b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80072b4:	e721      	b.n	80070fa <_dtoa_r+0x722>
 80072b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072b8:	9e04      	ldr	r6, [sp, #16]
 80072ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80072bc:	e728      	b.n	8007110 <_dtoa_r+0x738>
 80072be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80072c2:	e751      	b.n	8007168 <_dtoa_r+0x790>
 80072c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072c6:	9903      	ldr	r1, [sp, #12]
 80072c8:	e750      	b.n	800716c <_dtoa_r+0x794>
 80072ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ce:	e751      	b.n	8007174 <_dtoa_r+0x79c>
 80072d0:	2300      	movs	r3, #0
 80072d2:	e779      	b.n	80071c8 <_dtoa_r+0x7f0>
 80072d4:	9b06      	ldr	r3, [sp, #24]
 80072d6:	e777      	b.n	80071c8 <_dtoa_r+0x7f0>
 80072d8:	2300      	movs	r3, #0
 80072da:	930a      	str	r3, [sp, #40]	@ 0x28
 80072dc:	e779      	b.n	80071d2 <_dtoa_r+0x7fa>
 80072de:	d093      	beq.n	8007208 <_dtoa_r+0x830>
 80072e0:	9a04      	ldr	r2, [sp, #16]
 80072e2:	331c      	adds	r3, #28
 80072e4:	441a      	add	r2, r3
 80072e6:	9204      	str	r2, [sp, #16]
 80072e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072ea:	441e      	add	r6, r3
 80072ec:	441a      	add	r2, r3
 80072ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80072f0:	e78a      	b.n	8007208 <_dtoa_r+0x830>
 80072f2:	4603      	mov	r3, r0
 80072f4:	e7f4      	b.n	80072e0 <_dtoa_r+0x908>
 80072f6:	9b08      	ldr	r3, [sp, #32]
 80072f8:	46b8      	mov	r8, r7
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	dc20      	bgt.n	8007340 <_dtoa_r+0x968>
 80072fe:	469b      	mov	fp, r3
 8007300:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007302:	2b02      	cmp	r3, #2
 8007304:	dd1e      	ble.n	8007344 <_dtoa_r+0x96c>
 8007306:	f1bb 0f00 	cmp.w	fp, #0
 800730a:	f47f adb1 	bne.w	8006e70 <_dtoa_r+0x498>
 800730e:	4621      	mov	r1, r4
 8007310:	465b      	mov	r3, fp
 8007312:	2205      	movs	r2, #5
 8007314:	4648      	mov	r0, r9
 8007316:	f000 fa93 	bl	8007840 <__multadd>
 800731a:	4601      	mov	r1, r0
 800731c:	4604      	mov	r4, r0
 800731e:	9803      	ldr	r0, [sp, #12]
 8007320:	f000 fc9e 	bl	8007c60 <__mcmp>
 8007324:	2800      	cmp	r0, #0
 8007326:	f77f ada3 	ble.w	8006e70 <_dtoa_r+0x498>
 800732a:	4656      	mov	r6, sl
 800732c:	2331      	movs	r3, #49	@ 0x31
 800732e:	f108 0801 	add.w	r8, r8, #1
 8007332:	f806 3b01 	strb.w	r3, [r6], #1
 8007336:	e59f      	b.n	8006e78 <_dtoa_r+0x4a0>
 8007338:	46b8      	mov	r8, r7
 800733a:	9c08      	ldr	r4, [sp, #32]
 800733c:	4625      	mov	r5, r4
 800733e:	e7f4      	b.n	800732a <_dtoa_r+0x952>
 8007340:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007344:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8101 	beq.w	800754e <_dtoa_r+0xb76>
 800734c:	2e00      	cmp	r6, #0
 800734e:	dd05      	ble.n	800735c <_dtoa_r+0x984>
 8007350:	4629      	mov	r1, r5
 8007352:	4632      	mov	r2, r6
 8007354:	4648      	mov	r0, r9
 8007356:	f000 fc17 	bl	8007b88 <__lshift>
 800735a:	4605      	mov	r5, r0
 800735c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800735e:	2b00      	cmp	r3, #0
 8007360:	d05c      	beq.n	800741c <_dtoa_r+0xa44>
 8007362:	4648      	mov	r0, r9
 8007364:	6869      	ldr	r1, [r5, #4]
 8007366:	f000 fa09 	bl	800777c <_Balloc>
 800736a:	4606      	mov	r6, r0
 800736c:	b928      	cbnz	r0, 800737a <_dtoa_r+0x9a2>
 800736e:	4602      	mov	r2, r0
 8007370:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007374:	4b80      	ldr	r3, [pc, #512]	@ (8007578 <_dtoa_r+0xba0>)
 8007376:	f7ff bb43 	b.w	8006a00 <_dtoa_r+0x28>
 800737a:	692a      	ldr	r2, [r5, #16]
 800737c:	f105 010c 	add.w	r1, r5, #12
 8007380:	3202      	adds	r2, #2
 8007382:	0092      	lsls	r2, r2, #2
 8007384:	300c      	adds	r0, #12
 8007386:	f7ff fa8e 	bl	80068a6 <memcpy>
 800738a:	2201      	movs	r2, #1
 800738c:	4631      	mov	r1, r6
 800738e:	4648      	mov	r0, r9
 8007390:	f000 fbfa 	bl	8007b88 <__lshift>
 8007394:	462f      	mov	r7, r5
 8007396:	4605      	mov	r5, r0
 8007398:	f10a 0301 	add.w	r3, sl, #1
 800739c:	9304      	str	r3, [sp, #16]
 800739e:	eb0a 030b 	add.w	r3, sl, fp
 80073a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80073a4:	9b06      	ldr	r3, [sp, #24]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ac:	9b04      	ldr	r3, [sp, #16]
 80073ae:	4621      	mov	r1, r4
 80073b0:	9803      	ldr	r0, [sp, #12]
 80073b2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80073b6:	f7ff fa84 	bl	80068c2 <quorem>
 80073ba:	4603      	mov	r3, r0
 80073bc:	4639      	mov	r1, r7
 80073be:	3330      	adds	r3, #48	@ 0x30
 80073c0:	9006      	str	r0, [sp, #24]
 80073c2:	9803      	ldr	r0, [sp, #12]
 80073c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073c6:	f000 fc4b 	bl	8007c60 <__mcmp>
 80073ca:	462a      	mov	r2, r5
 80073cc:	9008      	str	r0, [sp, #32]
 80073ce:	4621      	mov	r1, r4
 80073d0:	4648      	mov	r0, r9
 80073d2:	f000 fc61 	bl	8007c98 <__mdiff>
 80073d6:	68c2      	ldr	r2, [r0, #12]
 80073d8:	4606      	mov	r6, r0
 80073da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073dc:	bb02      	cbnz	r2, 8007420 <_dtoa_r+0xa48>
 80073de:	4601      	mov	r1, r0
 80073e0:	9803      	ldr	r0, [sp, #12]
 80073e2:	f000 fc3d 	bl	8007c60 <__mcmp>
 80073e6:	4602      	mov	r2, r0
 80073e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073ea:	4631      	mov	r1, r6
 80073ec:	4648      	mov	r0, r9
 80073ee:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80073f2:	f000 fa03 	bl	80077fc <_Bfree>
 80073f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80073fa:	9e04      	ldr	r6, [sp, #16]
 80073fc:	ea42 0103 	orr.w	r1, r2, r3
 8007400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007402:	4319      	orrs	r1, r3
 8007404:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007406:	d10d      	bne.n	8007424 <_dtoa_r+0xa4c>
 8007408:	2b39      	cmp	r3, #57	@ 0x39
 800740a:	d027      	beq.n	800745c <_dtoa_r+0xa84>
 800740c:	9a08      	ldr	r2, [sp, #32]
 800740e:	2a00      	cmp	r2, #0
 8007410:	dd01      	ble.n	8007416 <_dtoa_r+0xa3e>
 8007412:	9b06      	ldr	r3, [sp, #24]
 8007414:	3331      	adds	r3, #49	@ 0x31
 8007416:	f88b 3000 	strb.w	r3, [fp]
 800741a:	e52e      	b.n	8006e7a <_dtoa_r+0x4a2>
 800741c:	4628      	mov	r0, r5
 800741e:	e7b9      	b.n	8007394 <_dtoa_r+0x9bc>
 8007420:	2201      	movs	r2, #1
 8007422:	e7e2      	b.n	80073ea <_dtoa_r+0xa12>
 8007424:	9908      	ldr	r1, [sp, #32]
 8007426:	2900      	cmp	r1, #0
 8007428:	db04      	blt.n	8007434 <_dtoa_r+0xa5c>
 800742a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800742c:	4301      	orrs	r1, r0
 800742e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007430:	4301      	orrs	r1, r0
 8007432:	d120      	bne.n	8007476 <_dtoa_r+0xa9e>
 8007434:	2a00      	cmp	r2, #0
 8007436:	ddee      	ble.n	8007416 <_dtoa_r+0xa3e>
 8007438:	2201      	movs	r2, #1
 800743a:	9903      	ldr	r1, [sp, #12]
 800743c:	4648      	mov	r0, r9
 800743e:	9304      	str	r3, [sp, #16]
 8007440:	f000 fba2 	bl	8007b88 <__lshift>
 8007444:	4621      	mov	r1, r4
 8007446:	9003      	str	r0, [sp, #12]
 8007448:	f000 fc0a 	bl	8007c60 <__mcmp>
 800744c:	2800      	cmp	r0, #0
 800744e:	9b04      	ldr	r3, [sp, #16]
 8007450:	dc02      	bgt.n	8007458 <_dtoa_r+0xa80>
 8007452:	d1e0      	bne.n	8007416 <_dtoa_r+0xa3e>
 8007454:	07da      	lsls	r2, r3, #31
 8007456:	d5de      	bpl.n	8007416 <_dtoa_r+0xa3e>
 8007458:	2b39      	cmp	r3, #57	@ 0x39
 800745a:	d1da      	bne.n	8007412 <_dtoa_r+0xa3a>
 800745c:	2339      	movs	r3, #57	@ 0x39
 800745e:	f88b 3000 	strb.w	r3, [fp]
 8007462:	4633      	mov	r3, r6
 8007464:	461e      	mov	r6, r3
 8007466:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800746a:	3b01      	subs	r3, #1
 800746c:	2a39      	cmp	r2, #57	@ 0x39
 800746e:	d04e      	beq.n	800750e <_dtoa_r+0xb36>
 8007470:	3201      	adds	r2, #1
 8007472:	701a      	strb	r2, [r3, #0]
 8007474:	e501      	b.n	8006e7a <_dtoa_r+0x4a2>
 8007476:	2a00      	cmp	r2, #0
 8007478:	dd03      	ble.n	8007482 <_dtoa_r+0xaaa>
 800747a:	2b39      	cmp	r3, #57	@ 0x39
 800747c:	d0ee      	beq.n	800745c <_dtoa_r+0xa84>
 800747e:	3301      	adds	r3, #1
 8007480:	e7c9      	b.n	8007416 <_dtoa_r+0xa3e>
 8007482:	9a04      	ldr	r2, [sp, #16]
 8007484:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007486:	f802 3c01 	strb.w	r3, [r2, #-1]
 800748a:	428a      	cmp	r2, r1
 800748c:	d028      	beq.n	80074e0 <_dtoa_r+0xb08>
 800748e:	2300      	movs	r3, #0
 8007490:	220a      	movs	r2, #10
 8007492:	9903      	ldr	r1, [sp, #12]
 8007494:	4648      	mov	r0, r9
 8007496:	f000 f9d3 	bl	8007840 <__multadd>
 800749a:	42af      	cmp	r7, r5
 800749c:	9003      	str	r0, [sp, #12]
 800749e:	f04f 0300 	mov.w	r3, #0
 80074a2:	f04f 020a 	mov.w	r2, #10
 80074a6:	4639      	mov	r1, r7
 80074a8:	4648      	mov	r0, r9
 80074aa:	d107      	bne.n	80074bc <_dtoa_r+0xae4>
 80074ac:	f000 f9c8 	bl	8007840 <__multadd>
 80074b0:	4607      	mov	r7, r0
 80074b2:	4605      	mov	r5, r0
 80074b4:	9b04      	ldr	r3, [sp, #16]
 80074b6:	3301      	adds	r3, #1
 80074b8:	9304      	str	r3, [sp, #16]
 80074ba:	e777      	b.n	80073ac <_dtoa_r+0x9d4>
 80074bc:	f000 f9c0 	bl	8007840 <__multadd>
 80074c0:	4629      	mov	r1, r5
 80074c2:	4607      	mov	r7, r0
 80074c4:	2300      	movs	r3, #0
 80074c6:	220a      	movs	r2, #10
 80074c8:	4648      	mov	r0, r9
 80074ca:	f000 f9b9 	bl	8007840 <__multadd>
 80074ce:	4605      	mov	r5, r0
 80074d0:	e7f0      	b.n	80074b4 <_dtoa_r+0xadc>
 80074d2:	f1bb 0f00 	cmp.w	fp, #0
 80074d6:	bfcc      	ite	gt
 80074d8:	465e      	movgt	r6, fp
 80074da:	2601      	movle	r6, #1
 80074dc:	2700      	movs	r7, #0
 80074de:	4456      	add	r6, sl
 80074e0:	2201      	movs	r2, #1
 80074e2:	9903      	ldr	r1, [sp, #12]
 80074e4:	4648      	mov	r0, r9
 80074e6:	9304      	str	r3, [sp, #16]
 80074e8:	f000 fb4e 	bl	8007b88 <__lshift>
 80074ec:	4621      	mov	r1, r4
 80074ee:	9003      	str	r0, [sp, #12]
 80074f0:	f000 fbb6 	bl	8007c60 <__mcmp>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	dcb4      	bgt.n	8007462 <_dtoa_r+0xa8a>
 80074f8:	d102      	bne.n	8007500 <_dtoa_r+0xb28>
 80074fa:	9b04      	ldr	r3, [sp, #16]
 80074fc:	07db      	lsls	r3, r3, #31
 80074fe:	d4b0      	bmi.n	8007462 <_dtoa_r+0xa8a>
 8007500:	4633      	mov	r3, r6
 8007502:	461e      	mov	r6, r3
 8007504:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007508:	2a30      	cmp	r2, #48	@ 0x30
 800750a:	d0fa      	beq.n	8007502 <_dtoa_r+0xb2a>
 800750c:	e4b5      	b.n	8006e7a <_dtoa_r+0x4a2>
 800750e:	459a      	cmp	sl, r3
 8007510:	d1a8      	bne.n	8007464 <_dtoa_r+0xa8c>
 8007512:	2331      	movs	r3, #49	@ 0x31
 8007514:	f108 0801 	add.w	r8, r8, #1
 8007518:	f88a 3000 	strb.w	r3, [sl]
 800751c:	e4ad      	b.n	8006e7a <_dtoa_r+0x4a2>
 800751e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007520:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800757c <_dtoa_r+0xba4>
 8007524:	b11b      	cbz	r3, 800752e <_dtoa_r+0xb56>
 8007526:	f10a 0308 	add.w	r3, sl, #8
 800752a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	4650      	mov	r0, sl
 8007530:	b017      	add	sp, #92	@ 0x5c
 8007532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007536:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007538:	2b01      	cmp	r3, #1
 800753a:	f77f ae2e 	ble.w	800719a <_dtoa_r+0x7c2>
 800753e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007540:	930a      	str	r3, [sp, #40]	@ 0x28
 8007542:	2001      	movs	r0, #1
 8007544:	e64d      	b.n	80071e2 <_dtoa_r+0x80a>
 8007546:	f1bb 0f00 	cmp.w	fp, #0
 800754a:	f77f aed9 	ble.w	8007300 <_dtoa_r+0x928>
 800754e:	4656      	mov	r6, sl
 8007550:	4621      	mov	r1, r4
 8007552:	9803      	ldr	r0, [sp, #12]
 8007554:	f7ff f9b5 	bl	80068c2 <quorem>
 8007558:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800755c:	f806 3b01 	strb.w	r3, [r6], #1
 8007560:	eba6 020a 	sub.w	r2, r6, sl
 8007564:	4593      	cmp	fp, r2
 8007566:	ddb4      	ble.n	80074d2 <_dtoa_r+0xafa>
 8007568:	2300      	movs	r3, #0
 800756a:	220a      	movs	r2, #10
 800756c:	4648      	mov	r0, r9
 800756e:	9903      	ldr	r1, [sp, #12]
 8007570:	f000 f966 	bl	8007840 <__multadd>
 8007574:	9003      	str	r0, [sp, #12]
 8007576:	e7eb      	b.n	8007550 <_dtoa_r+0xb78>
 8007578:	0800d34c 	.word	0x0800d34c
 800757c:	0800d2d0 	.word	0x0800d2d0

08007580 <_free_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4605      	mov	r5, r0
 8007584:	2900      	cmp	r1, #0
 8007586:	d040      	beq.n	800760a <_free_r+0x8a>
 8007588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800758c:	1f0c      	subs	r4, r1, #4
 800758e:	2b00      	cmp	r3, #0
 8007590:	bfb8      	it	lt
 8007592:	18e4      	addlt	r4, r4, r3
 8007594:	f000 f8e6 	bl	8007764 <__malloc_lock>
 8007598:	4a1c      	ldr	r2, [pc, #112]	@ (800760c <_free_r+0x8c>)
 800759a:	6813      	ldr	r3, [r2, #0]
 800759c:	b933      	cbnz	r3, 80075ac <_free_r+0x2c>
 800759e:	6063      	str	r3, [r4, #4]
 80075a0:	6014      	str	r4, [r2, #0]
 80075a2:	4628      	mov	r0, r5
 80075a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075a8:	f000 b8e2 	b.w	8007770 <__malloc_unlock>
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	d908      	bls.n	80075c2 <_free_r+0x42>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	1821      	adds	r1, r4, r0
 80075b4:	428b      	cmp	r3, r1
 80075b6:	bf01      	itttt	eq
 80075b8:	6819      	ldreq	r1, [r3, #0]
 80075ba:	685b      	ldreq	r3, [r3, #4]
 80075bc:	1809      	addeq	r1, r1, r0
 80075be:	6021      	streq	r1, [r4, #0]
 80075c0:	e7ed      	b.n	800759e <_free_r+0x1e>
 80075c2:	461a      	mov	r2, r3
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	b10b      	cbz	r3, 80075cc <_free_r+0x4c>
 80075c8:	42a3      	cmp	r3, r4
 80075ca:	d9fa      	bls.n	80075c2 <_free_r+0x42>
 80075cc:	6811      	ldr	r1, [r2, #0]
 80075ce:	1850      	adds	r0, r2, r1
 80075d0:	42a0      	cmp	r0, r4
 80075d2:	d10b      	bne.n	80075ec <_free_r+0x6c>
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	4401      	add	r1, r0
 80075d8:	1850      	adds	r0, r2, r1
 80075da:	4283      	cmp	r3, r0
 80075dc:	6011      	str	r1, [r2, #0]
 80075de:	d1e0      	bne.n	80075a2 <_free_r+0x22>
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	4408      	add	r0, r1
 80075e6:	6010      	str	r0, [r2, #0]
 80075e8:	6053      	str	r3, [r2, #4]
 80075ea:	e7da      	b.n	80075a2 <_free_r+0x22>
 80075ec:	d902      	bls.n	80075f4 <_free_r+0x74>
 80075ee:	230c      	movs	r3, #12
 80075f0:	602b      	str	r3, [r5, #0]
 80075f2:	e7d6      	b.n	80075a2 <_free_r+0x22>
 80075f4:	6820      	ldr	r0, [r4, #0]
 80075f6:	1821      	adds	r1, r4, r0
 80075f8:	428b      	cmp	r3, r1
 80075fa:	bf01      	itttt	eq
 80075fc:	6819      	ldreq	r1, [r3, #0]
 80075fe:	685b      	ldreq	r3, [r3, #4]
 8007600:	1809      	addeq	r1, r1, r0
 8007602:	6021      	streq	r1, [r4, #0]
 8007604:	6063      	str	r3, [r4, #4]
 8007606:	6054      	str	r4, [r2, #4]
 8007608:	e7cb      	b.n	80075a2 <_free_r+0x22>
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	200010bc 	.word	0x200010bc

08007610 <malloc>:
 8007610:	4b02      	ldr	r3, [pc, #8]	@ (800761c <malloc+0xc>)
 8007612:	4601      	mov	r1, r0
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	f000 b825 	b.w	8007664 <_malloc_r>
 800761a:	bf00      	nop
 800761c:	20000034 	.word	0x20000034

08007620 <sbrk_aligned>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	4e0f      	ldr	r6, [pc, #60]	@ (8007660 <sbrk_aligned+0x40>)
 8007624:	460c      	mov	r4, r1
 8007626:	6831      	ldr	r1, [r6, #0]
 8007628:	4605      	mov	r5, r0
 800762a:	b911      	cbnz	r1, 8007632 <sbrk_aligned+0x12>
 800762c:	f000 fe8c 	bl	8008348 <_sbrk_r>
 8007630:	6030      	str	r0, [r6, #0]
 8007632:	4621      	mov	r1, r4
 8007634:	4628      	mov	r0, r5
 8007636:	f000 fe87 	bl	8008348 <_sbrk_r>
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	d103      	bne.n	8007646 <sbrk_aligned+0x26>
 800763e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007642:	4620      	mov	r0, r4
 8007644:	bd70      	pop	{r4, r5, r6, pc}
 8007646:	1cc4      	adds	r4, r0, #3
 8007648:	f024 0403 	bic.w	r4, r4, #3
 800764c:	42a0      	cmp	r0, r4
 800764e:	d0f8      	beq.n	8007642 <sbrk_aligned+0x22>
 8007650:	1a21      	subs	r1, r4, r0
 8007652:	4628      	mov	r0, r5
 8007654:	f000 fe78 	bl	8008348 <_sbrk_r>
 8007658:	3001      	adds	r0, #1
 800765a:	d1f2      	bne.n	8007642 <sbrk_aligned+0x22>
 800765c:	e7ef      	b.n	800763e <sbrk_aligned+0x1e>
 800765e:	bf00      	nop
 8007660:	200010b8 	.word	0x200010b8

08007664 <_malloc_r>:
 8007664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007668:	1ccd      	adds	r5, r1, #3
 800766a:	f025 0503 	bic.w	r5, r5, #3
 800766e:	3508      	adds	r5, #8
 8007670:	2d0c      	cmp	r5, #12
 8007672:	bf38      	it	cc
 8007674:	250c      	movcc	r5, #12
 8007676:	2d00      	cmp	r5, #0
 8007678:	4606      	mov	r6, r0
 800767a:	db01      	blt.n	8007680 <_malloc_r+0x1c>
 800767c:	42a9      	cmp	r1, r5
 800767e:	d904      	bls.n	800768a <_malloc_r+0x26>
 8007680:	230c      	movs	r3, #12
 8007682:	6033      	str	r3, [r6, #0]
 8007684:	2000      	movs	r0, #0
 8007686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800768a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007760 <_malloc_r+0xfc>
 800768e:	f000 f869 	bl	8007764 <__malloc_lock>
 8007692:	f8d8 3000 	ldr.w	r3, [r8]
 8007696:	461c      	mov	r4, r3
 8007698:	bb44      	cbnz	r4, 80076ec <_malloc_r+0x88>
 800769a:	4629      	mov	r1, r5
 800769c:	4630      	mov	r0, r6
 800769e:	f7ff ffbf 	bl	8007620 <sbrk_aligned>
 80076a2:	1c43      	adds	r3, r0, #1
 80076a4:	4604      	mov	r4, r0
 80076a6:	d158      	bne.n	800775a <_malloc_r+0xf6>
 80076a8:	f8d8 4000 	ldr.w	r4, [r8]
 80076ac:	4627      	mov	r7, r4
 80076ae:	2f00      	cmp	r7, #0
 80076b0:	d143      	bne.n	800773a <_malloc_r+0xd6>
 80076b2:	2c00      	cmp	r4, #0
 80076b4:	d04b      	beq.n	800774e <_malloc_r+0xea>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	4639      	mov	r1, r7
 80076ba:	4630      	mov	r0, r6
 80076bc:	eb04 0903 	add.w	r9, r4, r3
 80076c0:	f000 fe42 	bl	8008348 <_sbrk_r>
 80076c4:	4581      	cmp	r9, r0
 80076c6:	d142      	bne.n	800774e <_malloc_r+0xea>
 80076c8:	6821      	ldr	r1, [r4, #0]
 80076ca:	4630      	mov	r0, r6
 80076cc:	1a6d      	subs	r5, r5, r1
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7ff ffa6 	bl	8007620 <sbrk_aligned>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d03a      	beq.n	800774e <_malloc_r+0xea>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	442b      	add	r3, r5
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	f8d8 3000 	ldr.w	r3, [r8]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	bb62      	cbnz	r2, 8007740 <_malloc_r+0xdc>
 80076e6:	f8c8 7000 	str.w	r7, [r8]
 80076ea:	e00f      	b.n	800770c <_malloc_r+0xa8>
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	1b52      	subs	r2, r2, r5
 80076f0:	d420      	bmi.n	8007734 <_malloc_r+0xd0>
 80076f2:	2a0b      	cmp	r2, #11
 80076f4:	d917      	bls.n	8007726 <_malloc_r+0xc2>
 80076f6:	1961      	adds	r1, r4, r5
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	6025      	str	r5, [r4, #0]
 80076fc:	bf18      	it	ne
 80076fe:	6059      	strne	r1, [r3, #4]
 8007700:	6863      	ldr	r3, [r4, #4]
 8007702:	bf08      	it	eq
 8007704:	f8c8 1000 	streq.w	r1, [r8]
 8007708:	5162      	str	r2, [r4, r5]
 800770a:	604b      	str	r3, [r1, #4]
 800770c:	4630      	mov	r0, r6
 800770e:	f000 f82f 	bl	8007770 <__malloc_unlock>
 8007712:	f104 000b 	add.w	r0, r4, #11
 8007716:	1d23      	adds	r3, r4, #4
 8007718:	f020 0007 	bic.w	r0, r0, #7
 800771c:	1ac2      	subs	r2, r0, r3
 800771e:	bf1c      	itt	ne
 8007720:	1a1b      	subne	r3, r3, r0
 8007722:	50a3      	strne	r3, [r4, r2]
 8007724:	e7af      	b.n	8007686 <_malloc_r+0x22>
 8007726:	6862      	ldr	r2, [r4, #4]
 8007728:	42a3      	cmp	r3, r4
 800772a:	bf0c      	ite	eq
 800772c:	f8c8 2000 	streq.w	r2, [r8]
 8007730:	605a      	strne	r2, [r3, #4]
 8007732:	e7eb      	b.n	800770c <_malloc_r+0xa8>
 8007734:	4623      	mov	r3, r4
 8007736:	6864      	ldr	r4, [r4, #4]
 8007738:	e7ae      	b.n	8007698 <_malloc_r+0x34>
 800773a:	463c      	mov	r4, r7
 800773c:	687f      	ldr	r7, [r7, #4]
 800773e:	e7b6      	b.n	80076ae <_malloc_r+0x4a>
 8007740:	461a      	mov	r2, r3
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	42a3      	cmp	r3, r4
 8007746:	d1fb      	bne.n	8007740 <_malloc_r+0xdc>
 8007748:	2300      	movs	r3, #0
 800774a:	6053      	str	r3, [r2, #4]
 800774c:	e7de      	b.n	800770c <_malloc_r+0xa8>
 800774e:	230c      	movs	r3, #12
 8007750:	4630      	mov	r0, r6
 8007752:	6033      	str	r3, [r6, #0]
 8007754:	f000 f80c 	bl	8007770 <__malloc_unlock>
 8007758:	e794      	b.n	8007684 <_malloc_r+0x20>
 800775a:	6005      	str	r5, [r0, #0]
 800775c:	e7d6      	b.n	800770c <_malloc_r+0xa8>
 800775e:	bf00      	nop
 8007760:	200010bc 	.word	0x200010bc

08007764 <__malloc_lock>:
 8007764:	4801      	ldr	r0, [pc, #4]	@ (800776c <__malloc_lock+0x8>)
 8007766:	f7ff b88e 	b.w	8006886 <__retarget_lock_acquire_recursive>
 800776a:	bf00      	nop
 800776c:	200010b4 	.word	0x200010b4

08007770 <__malloc_unlock>:
 8007770:	4801      	ldr	r0, [pc, #4]	@ (8007778 <__malloc_unlock+0x8>)
 8007772:	f7ff b889 	b.w	8006888 <__retarget_lock_release_recursive>
 8007776:	bf00      	nop
 8007778:	200010b4 	.word	0x200010b4

0800777c <_Balloc>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	69c6      	ldr	r6, [r0, #28]
 8007780:	4604      	mov	r4, r0
 8007782:	460d      	mov	r5, r1
 8007784:	b976      	cbnz	r6, 80077a4 <_Balloc+0x28>
 8007786:	2010      	movs	r0, #16
 8007788:	f7ff ff42 	bl	8007610 <malloc>
 800778c:	4602      	mov	r2, r0
 800778e:	61e0      	str	r0, [r4, #28]
 8007790:	b920      	cbnz	r0, 800779c <_Balloc+0x20>
 8007792:	216b      	movs	r1, #107	@ 0x6b
 8007794:	4b17      	ldr	r3, [pc, #92]	@ (80077f4 <_Balloc+0x78>)
 8007796:	4818      	ldr	r0, [pc, #96]	@ (80077f8 <_Balloc+0x7c>)
 8007798:	f000 fde6 	bl	8008368 <__assert_func>
 800779c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077a0:	6006      	str	r6, [r0, #0]
 80077a2:	60c6      	str	r6, [r0, #12]
 80077a4:	69e6      	ldr	r6, [r4, #28]
 80077a6:	68f3      	ldr	r3, [r6, #12]
 80077a8:	b183      	cbz	r3, 80077cc <_Balloc+0x50>
 80077aa:	69e3      	ldr	r3, [r4, #28]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077b2:	b9b8      	cbnz	r0, 80077e4 <_Balloc+0x68>
 80077b4:	2101      	movs	r1, #1
 80077b6:	fa01 f605 	lsl.w	r6, r1, r5
 80077ba:	1d72      	adds	r2, r6, #5
 80077bc:	4620      	mov	r0, r4
 80077be:	0092      	lsls	r2, r2, #2
 80077c0:	f000 fdf0 	bl	80083a4 <_calloc_r>
 80077c4:	b160      	cbz	r0, 80077e0 <_Balloc+0x64>
 80077c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077ca:	e00e      	b.n	80077ea <_Balloc+0x6e>
 80077cc:	2221      	movs	r2, #33	@ 0x21
 80077ce:	2104      	movs	r1, #4
 80077d0:	4620      	mov	r0, r4
 80077d2:	f000 fde7 	bl	80083a4 <_calloc_r>
 80077d6:	69e3      	ldr	r3, [r4, #28]
 80077d8:	60f0      	str	r0, [r6, #12]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e4      	bne.n	80077aa <_Balloc+0x2e>
 80077e0:	2000      	movs	r0, #0
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	6802      	ldr	r2, [r0, #0]
 80077e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ea:	2300      	movs	r3, #0
 80077ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077f0:	e7f7      	b.n	80077e2 <_Balloc+0x66>
 80077f2:	bf00      	nop
 80077f4:	0800d2dd 	.word	0x0800d2dd
 80077f8:	0800d35d 	.word	0x0800d35d

080077fc <_Bfree>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	69c6      	ldr	r6, [r0, #28]
 8007800:	4605      	mov	r5, r0
 8007802:	460c      	mov	r4, r1
 8007804:	b976      	cbnz	r6, 8007824 <_Bfree+0x28>
 8007806:	2010      	movs	r0, #16
 8007808:	f7ff ff02 	bl	8007610 <malloc>
 800780c:	4602      	mov	r2, r0
 800780e:	61e8      	str	r0, [r5, #28]
 8007810:	b920      	cbnz	r0, 800781c <_Bfree+0x20>
 8007812:	218f      	movs	r1, #143	@ 0x8f
 8007814:	4b08      	ldr	r3, [pc, #32]	@ (8007838 <_Bfree+0x3c>)
 8007816:	4809      	ldr	r0, [pc, #36]	@ (800783c <_Bfree+0x40>)
 8007818:	f000 fda6 	bl	8008368 <__assert_func>
 800781c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007820:	6006      	str	r6, [r0, #0]
 8007822:	60c6      	str	r6, [r0, #12]
 8007824:	b13c      	cbz	r4, 8007836 <_Bfree+0x3a>
 8007826:	69eb      	ldr	r3, [r5, #28]
 8007828:	6862      	ldr	r2, [r4, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007830:	6021      	str	r1, [r4, #0]
 8007832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	0800d2dd 	.word	0x0800d2dd
 800783c:	0800d35d 	.word	0x0800d35d

08007840 <__multadd>:
 8007840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007844:	4607      	mov	r7, r0
 8007846:	460c      	mov	r4, r1
 8007848:	461e      	mov	r6, r3
 800784a:	2000      	movs	r0, #0
 800784c:	690d      	ldr	r5, [r1, #16]
 800784e:	f101 0c14 	add.w	ip, r1, #20
 8007852:	f8dc 3000 	ldr.w	r3, [ip]
 8007856:	3001      	adds	r0, #1
 8007858:	b299      	uxth	r1, r3
 800785a:	fb02 6101 	mla	r1, r2, r1, r6
 800785e:	0c1e      	lsrs	r6, r3, #16
 8007860:	0c0b      	lsrs	r3, r1, #16
 8007862:	fb02 3306 	mla	r3, r2, r6, r3
 8007866:	b289      	uxth	r1, r1
 8007868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800786c:	4285      	cmp	r5, r0
 800786e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007872:	f84c 1b04 	str.w	r1, [ip], #4
 8007876:	dcec      	bgt.n	8007852 <__multadd+0x12>
 8007878:	b30e      	cbz	r6, 80078be <__multadd+0x7e>
 800787a:	68a3      	ldr	r3, [r4, #8]
 800787c:	42ab      	cmp	r3, r5
 800787e:	dc19      	bgt.n	80078b4 <__multadd+0x74>
 8007880:	6861      	ldr	r1, [r4, #4]
 8007882:	4638      	mov	r0, r7
 8007884:	3101      	adds	r1, #1
 8007886:	f7ff ff79 	bl	800777c <_Balloc>
 800788a:	4680      	mov	r8, r0
 800788c:	b928      	cbnz	r0, 800789a <__multadd+0x5a>
 800788e:	4602      	mov	r2, r0
 8007890:	21ba      	movs	r1, #186	@ 0xba
 8007892:	4b0c      	ldr	r3, [pc, #48]	@ (80078c4 <__multadd+0x84>)
 8007894:	480c      	ldr	r0, [pc, #48]	@ (80078c8 <__multadd+0x88>)
 8007896:	f000 fd67 	bl	8008368 <__assert_func>
 800789a:	6922      	ldr	r2, [r4, #16]
 800789c:	f104 010c 	add.w	r1, r4, #12
 80078a0:	3202      	adds	r2, #2
 80078a2:	0092      	lsls	r2, r2, #2
 80078a4:	300c      	adds	r0, #12
 80078a6:	f7fe fffe 	bl	80068a6 <memcpy>
 80078aa:	4621      	mov	r1, r4
 80078ac:	4638      	mov	r0, r7
 80078ae:	f7ff ffa5 	bl	80077fc <_Bfree>
 80078b2:	4644      	mov	r4, r8
 80078b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078b8:	3501      	adds	r5, #1
 80078ba:	615e      	str	r6, [r3, #20]
 80078bc:	6125      	str	r5, [r4, #16]
 80078be:	4620      	mov	r0, r4
 80078c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c4:	0800d34c 	.word	0x0800d34c
 80078c8:	0800d35d 	.word	0x0800d35d

080078cc <__hi0bits>:
 80078cc:	4603      	mov	r3, r0
 80078ce:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80078d2:	bf3a      	itte	cc
 80078d4:	0403      	lslcc	r3, r0, #16
 80078d6:	2010      	movcc	r0, #16
 80078d8:	2000      	movcs	r0, #0
 80078da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078de:	bf3c      	itt	cc
 80078e0:	021b      	lslcc	r3, r3, #8
 80078e2:	3008      	addcc	r0, #8
 80078e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078e8:	bf3c      	itt	cc
 80078ea:	011b      	lslcc	r3, r3, #4
 80078ec:	3004      	addcc	r0, #4
 80078ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078f2:	bf3c      	itt	cc
 80078f4:	009b      	lslcc	r3, r3, #2
 80078f6:	3002      	addcc	r0, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	db05      	blt.n	8007908 <__hi0bits+0x3c>
 80078fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007900:	f100 0001 	add.w	r0, r0, #1
 8007904:	bf08      	it	eq
 8007906:	2020      	moveq	r0, #32
 8007908:	4770      	bx	lr

0800790a <__lo0bits>:
 800790a:	6803      	ldr	r3, [r0, #0]
 800790c:	4602      	mov	r2, r0
 800790e:	f013 0007 	ands.w	r0, r3, #7
 8007912:	d00b      	beq.n	800792c <__lo0bits+0x22>
 8007914:	07d9      	lsls	r1, r3, #31
 8007916:	d421      	bmi.n	800795c <__lo0bits+0x52>
 8007918:	0798      	lsls	r0, r3, #30
 800791a:	bf49      	itett	mi
 800791c:	085b      	lsrmi	r3, r3, #1
 800791e:	089b      	lsrpl	r3, r3, #2
 8007920:	2001      	movmi	r0, #1
 8007922:	6013      	strmi	r3, [r2, #0]
 8007924:	bf5c      	itt	pl
 8007926:	2002      	movpl	r0, #2
 8007928:	6013      	strpl	r3, [r2, #0]
 800792a:	4770      	bx	lr
 800792c:	b299      	uxth	r1, r3
 800792e:	b909      	cbnz	r1, 8007934 <__lo0bits+0x2a>
 8007930:	2010      	movs	r0, #16
 8007932:	0c1b      	lsrs	r3, r3, #16
 8007934:	b2d9      	uxtb	r1, r3
 8007936:	b909      	cbnz	r1, 800793c <__lo0bits+0x32>
 8007938:	3008      	adds	r0, #8
 800793a:	0a1b      	lsrs	r3, r3, #8
 800793c:	0719      	lsls	r1, r3, #28
 800793e:	bf04      	itt	eq
 8007940:	091b      	lsreq	r3, r3, #4
 8007942:	3004      	addeq	r0, #4
 8007944:	0799      	lsls	r1, r3, #30
 8007946:	bf04      	itt	eq
 8007948:	089b      	lsreq	r3, r3, #2
 800794a:	3002      	addeq	r0, #2
 800794c:	07d9      	lsls	r1, r3, #31
 800794e:	d403      	bmi.n	8007958 <__lo0bits+0x4e>
 8007950:	085b      	lsrs	r3, r3, #1
 8007952:	f100 0001 	add.w	r0, r0, #1
 8007956:	d003      	beq.n	8007960 <__lo0bits+0x56>
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	4770      	bx	lr
 800795c:	2000      	movs	r0, #0
 800795e:	4770      	bx	lr
 8007960:	2020      	movs	r0, #32
 8007962:	4770      	bx	lr

08007964 <__i2b>:
 8007964:	b510      	push	{r4, lr}
 8007966:	460c      	mov	r4, r1
 8007968:	2101      	movs	r1, #1
 800796a:	f7ff ff07 	bl	800777c <_Balloc>
 800796e:	4602      	mov	r2, r0
 8007970:	b928      	cbnz	r0, 800797e <__i2b+0x1a>
 8007972:	f240 1145 	movw	r1, #325	@ 0x145
 8007976:	4b04      	ldr	r3, [pc, #16]	@ (8007988 <__i2b+0x24>)
 8007978:	4804      	ldr	r0, [pc, #16]	@ (800798c <__i2b+0x28>)
 800797a:	f000 fcf5 	bl	8008368 <__assert_func>
 800797e:	2301      	movs	r3, #1
 8007980:	6144      	str	r4, [r0, #20]
 8007982:	6103      	str	r3, [r0, #16]
 8007984:	bd10      	pop	{r4, pc}
 8007986:	bf00      	nop
 8007988:	0800d34c 	.word	0x0800d34c
 800798c:	0800d35d 	.word	0x0800d35d

08007990 <__multiply>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	4617      	mov	r7, r2
 8007996:	690a      	ldr	r2, [r1, #16]
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4689      	mov	r9, r1
 800799c:	429a      	cmp	r2, r3
 800799e:	bfa2      	ittt	ge
 80079a0:	463b      	movge	r3, r7
 80079a2:	460f      	movge	r7, r1
 80079a4:	4699      	movge	r9, r3
 80079a6:	693d      	ldr	r5, [r7, #16]
 80079a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	eb05 060a 	add.w	r6, r5, sl
 80079b4:	42b3      	cmp	r3, r6
 80079b6:	b085      	sub	sp, #20
 80079b8:	bfb8      	it	lt
 80079ba:	3101      	addlt	r1, #1
 80079bc:	f7ff fede 	bl	800777c <_Balloc>
 80079c0:	b930      	cbnz	r0, 80079d0 <__multiply+0x40>
 80079c2:	4602      	mov	r2, r0
 80079c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80079c8:	4b40      	ldr	r3, [pc, #256]	@ (8007acc <__multiply+0x13c>)
 80079ca:	4841      	ldr	r0, [pc, #260]	@ (8007ad0 <__multiply+0x140>)
 80079cc:	f000 fccc 	bl	8008368 <__assert_func>
 80079d0:	f100 0414 	add.w	r4, r0, #20
 80079d4:	4623      	mov	r3, r4
 80079d6:	2200      	movs	r2, #0
 80079d8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80079dc:	4573      	cmp	r3, lr
 80079de:	d320      	bcc.n	8007a22 <__multiply+0x92>
 80079e0:	f107 0814 	add.w	r8, r7, #20
 80079e4:	f109 0114 	add.w	r1, r9, #20
 80079e8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80079ec:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80079f0:	9302      	str	r3, [sp, #8]
 80079f2:	1beb      	subs	r3, r5, r7
 80079f4:	3b15      	subs	r3, #21
 80079f6:	f023 0303 	bic.w	r3, r3, #3
 80079fa:	3304      	adds	r3, #4
 80079fc:	3715      	adds	r7, #21
 80079fe:	42bd      	cmp	r5, r7
 8007a00:	bf38      	it	cc
 8007a02:	2304      	movcc	r3, #4
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	9b02      	ldr	r3, [sp, #8]
 8007a08:	9103      	str	r1, [sp, #12]
 8007a0a:	428b      	cmp	r3, r1
 8007a0c:	d80c      	bhi.n	8007a28 <__multiply+0x98>
 8007a0e:	2e00      	cmp	r6, #0
 8007a10:	dd03      	ble.n	8007a1a <__multiply+0x8a>
 8007a12:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d055      	beq.n	8007ac6 <__multiply+0x136>
 8007a1a:	6106      	str	r6, [r0, #16]
 8007a1c:	b005      	add	sp, #20
 8007a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a22:	f843 2b04 	str.w	r2, [r3], #4
 8007a26:	e7d9      	b.n	80079dc <__multiply+0x4c>
 8007a28:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a2c:	f1ba 0f00 	cmp.w	sl, #0
 8007a30:	d01f      	beq.n	8007a72 <__multiply+0xe2>
 8007a32:	46c4      	mov	ip, r8
 8007a34:	46a1      	mov	r9, r4
 8007a36:	2700      	movs	r7, #0
 8007a38:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a3c:	f8d9 3000 	ldr.w	r3, [r9]
 8007a40:	fa1f fb82 	uxth.w	fp, r2
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	fb0a 330b 	mla	r3, sl, fp, r3
 8007a4a:	443b      	add	r3, r7
 8007a4c:	f8d9 7000 	ldr.w	r7, [r9]
 8007a50:	0c12      	lsrs	r2, r2, #16
 8007a52:	0c3f      	lsrs	r7, r7, #16
 8007a54:	fb0a 7202 	mla	r2, sl, r2, r7
 8007a58:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a62:	4565      	cmp	r5, ip
 8007a64:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007a68:	f849 3b04 	str.w	r3, [r9], #4
 8007a6c:	d8e4      	bhi.n	8007a38 <__multiply+0xa8>
 8007a6e:	9b01      	ldr	r3, [sp, #4]
 8007a70:	50e7      	str	r7, [r4, r3]
 8007a72:	9b03      	ldr	r3, [sp, #12]
 8007a74:	3104      	adds	r1, #4
 8007a76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007a7a:	f1b9 0f00 	cmp.w	r9, #0
 8007a7e:	d020      	beq.n	8007ac2 <__multiply+0x132>
 8007a80:	4647      	mov	r7, r8
 8007a82:	46a4      	mov	ip, r4
 8007a84:	f04f 0a00 	mov.w	sl, #0
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	f8b7 b000 	ldrh.w	fp, [r7]
 8007a8e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	fb09 220b 	mla	r2, r9, fp, r2
 8007a98:	4452      	add	r2, sl
 8007a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a9e:	f84c 3b04 	str.w	r3, [ip], #4
 8007aa2:	f857 3b04 	ldr.w	r3, [r7], #4
 8007aa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007aaa:	f8bc 3000 	ldrh.w	r3, [ip]
 8007aae:	42bd      	cmp	r5, r7
 8007ab0:	fb09 330a 	mla	r3, r9, sl, r3
 8007ab4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007ab8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007abc:	d8e5      	bhi.n	8007a8a <__multiply+0xfa>
 8007abe:	9a01      	ldr	r2, [sp, #4]
 8007ac0:	50a3      	str	r3, [r4, r2]
 8007ac2:	3404      	adds	r4, #4
 8007ac4:	e79f      	b.n	8007a06 <__multiply+0x76>
 8007ac6:	3e01      	subs	r6, #1
 8007ac8:	e7a1      	b.n	8007a0e <__multiply+0x7e>
 8007aca:	bf00      	nop
 8007acc:	0800d34c 	.word	0x0800d34c
 8007ad0:	0800d35d 	.word	0x0800d35d

08007ad4 <__pow5mult>:
 8007ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad8:	4615      	mov	r5, r2
 8007ada:	f012 0203 	ands.w	r2, r2, #3
 8007ade:	4607      	mov	r7, r0
 8007ae0:	460e      	mov	r6, r1
 8007ae2:	d007      	beq.n	8007af4 <__pow5mult+0x20>
 8007ae4:	4c25      	ldr	r4, [pc, #148]	@ (8007b7c <__pow5mult+0xa8>)
 8007ae6:	3a01      	subs	r2, #1
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007aee:	f7ff fea7 	bl	8007840 <__multadd>
 8007af2:	4606      	mov	r6, r0
 8007af4:	10ad      	asrs	r5, r5, #2
 8007af6:	d03d      	beq.n	8007b74 <__pow5mult+0xa0>
 8007af8:	69fc      	ldr	r4, [r7, #28]
 8007afa:	b97c      	cbnz	r4, 8007b1c <__pow5mult+0x48>
 8007afc:	2010      	movs	r0, #16
 8007afe:	f7ff fd87 	bl	8007610 <malloc>
 8007b02:	4602      	mov	r2, r0
 8007b04:	61f8      	str	r0, [r7, #28]
 8007b06:	b928      	cbnz	r0, 8007b14 <__pow5mult+0x40>
 8007b08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8007b80 <__pow5mult+0xac>)
 8007b0e:	481d      	ldr	r0, [pc, #116]	@ (8007b84 <__pow5mult+0xb0>)
 8007b10:	f000 fc2a 	bl	8008368 <__assert_func>
 8007b14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b18:	6004      	str	r4, [r0, #0]
 8007b1a:	60c4      	str	r4, [r0, #12]
 8007b1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b24:	b94c      	cbnz	r4, 8007b3a <__pow5mult+0x66>
 8007b26:	f240 2171 	movw	r1, #625	@ 0x271
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	f7ff ff1a 	bl	8007964 <__i2b>
 8007b30:	2300      	movs	r3, #0
 8007b32:	4604      	mov	r4, r0
 8007b34:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b38:	6003      	str	r3, [r0, #0]
 8007b3a:	f04f 0900 	mov.w	r9, #0
 8007b3e:	07eb      	lsls	r3, r5, #31
 8007b40:	d50a      	bpl.n	8007b58 <__pow5mult+0x84>
 8007b42:	4631      	mov	r1, r6
 8007b44:	4622      	mov	r2, r4
 8007b46:	4638      	mov	r0, r7
 8007b48:	f7ff ff22 	bl	8007990 <__multiply>
 8007b4c:	4680      	mov	r8, r0
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4638      	mov	r0, r7
 8007b52:	f7ff fe53 	bl	80077fc <_Bfree>
 8007b56:	4646      	mov	r6, r8
 8007b58:	106d      	asrs	r5, r5, #1
 8007b5a:	d00b      	beq.n	8007b74 <__pow5mult+0xa0>
 8007b5c:	6820      	ldr	r0, [r4, #0]
 8007b5e:	b938      	cbnz	r0, 8007b70 <__pow5mult+0x9c>
 8007b60:	4622      	mov	r2, r4
 8007b62:	4621      	mov	r1, r4
 8007b64:	4638      	mov	r0, r7
 8007b66:	f7ff ff13 	bl	8007990 <__multiply>
 8007b6a:	6020      	str	r0, [r4, #0]
 8007b6c:	f8c0 9000 	str.w	r9, [r0]
 8007b70:	4604      	mov	r4, r0
 8007b72:	e7e4      	b.n	8007b3e <__pow5mult+0x6a>
 8007b74:	4630      	mov	r0, r6
 8007b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b7a:	bf00      	nop
 8007b7c:	0800d410 	.word	0x0800d410
 8007b80:	0800d2dd 	.word	0x0800d2dd
 8007b84:	0800d35d 	.word	0x0800d35d

08007b88 <__lshift>:
 8007b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b8c:	460c      	mov	r4, r1
 8007b8e:	4607      	mov	r7, r0
 8007b90:	4691      	mov	r9, r2
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	6849      	ldr	r1, [r1, #4]
 8007b96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b9a:	68a3      	ldr	r3, [r4, #8]
 8007b9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ba0:	f108 0601 	add.w	r6, r8, #1
 8007ba4:	42b3      	cmp	r3, r6
 8007ba6:	db0b      	blt.n	8007bc0 <__lshift+0x38>
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff fde7 	bl	800777c <_Balloc>
 8007bae:	4605      	mov	r5, r0
 8007bb0:	b948      	cbnz	r0, 8007bc6 <__lshift+0x3e>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007bb8:	4b27      	ldr	r3, [pc, #156]	@ (8007c58 <__lshift+0xd0>)
 8007bba:	4828      	ldr	r0, [pc, #160]	@ (8007c5c <__lshift+0xd4>)
 8007bbc:	f000 fbd4 	bl	8008368 <__assert_func>
 8007bc0:	3101      	adds	r1, #1
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	e7ee      	b.n	8007ba4 <__lshift+0x1c>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f100 0114 	add.w	r1, r0, #20
 8007bcc:	f100 0210 	add.w	r2, r0, #16
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	4553      	cmp	r3, sl
 8007bd4:	db33      	blt.n	8007c3e <__lshift+0xb6>
 8007bd6:	6920      	ldr	r0, [r4, #16]
 8007bd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bdc:	f104 0314 	add.w	r3, r4, #20
 8007be0:	f019 091f 	ands.w	r9, r9, #31
 8007be4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007be8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bec:	d02b      	beq.n	8007c46 <__lshift+0xbe>
 8007bee:	468a      	mov	sl, r1
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f1c9 0e20 	rsb	lr, r9, #32
 8007bf6:	6818      	ldr	r0, [r3, #0]
 8007bf8:	fa00 f009 	lsl.w	r0, r0, r9
 8007bfc:	4310      	orrs	r0, r2
 8007bfe:	f84a 0b04 	str.w	r0, [sl], #4
 8007c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c06:	459c      	cmp	ip, r3
 8007c08:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c0c:	d8f3      	bhi.n	8007bf6 <__lshift+0x6e>
 8007c0e:	ebac 0304 	sub.w	r3, ip, r4
 8007c12:	3b15      	subs	r3, #21
 8007c14:	f023 0303 	bic.w	r3, r3, #3
 8007c18:	3304      	adds	r3, #4
 8007c1a:	f104 0015 	add.w	r0, r4, #21
 8007c1e:	4560      	cmp	r0, ip
 8007c20:	bf88      	it	hi
 8007c22:	2304      	movhi	r3, #4
 8007c24:	50ca      	str	r2, [r1, r3]
 8007c26:	b10a      	cbz	r2, 8007c2c <__lshift+0xa4>
 8007c28:	f108 0602 	add.w	r6, r8, #2
 8007c2c:	3e01      	subs	r6, #1
 8007c2e:	4638      	mov	r0, r7
 8007c30:	4621      	mov	r1, r4
 8007c32:	612e      	str	r6, [r5, #16]
 8007c34:	f7ff fde2 	bl	80077fc <_Bfree>
 8007c38:	4628      	mov	r0, r5
 8007c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c42:	3301      	adds	r3, #1
 8007c44:	e7c5      	b.n	8007bd2 <__lshift+0x4a>
 8007c46:	3904      	subs	r1, #4
 8007c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c4c:	459c      	cmp	ip, r3
 8007c4e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c52:	d8f9      	bhi.n	8007c48 <__lshift+0xc0>
 8007c54:	e7ea      	b.n	8007c2c <__lshift+0xa4>
 8007c56:	bf00      	nop
 8007c58:	0800d34c 	.word	0x0800d34c
 8007c5c:	0800d35d 	.word	0x0800d35d

08007c60 <__mcmp>:
 8007c60:	4603      	mov	r3, r0
 8007c62:	690a      	ldr	r2, [r1, #16]
 8007c64:	6900      	ldr	r0, [r0, #16]
 8007c66:	b530      	push	{r4, r5, lr}
 8007c68:	1a80      	subs	r0, r0, r2
 8007c6a:	d10e      	bne.n	8007c8a <__mcmp+0x2a>
 8007c6c:	3314      	adds	r3, #20
 8007c6e:	3114      	adds	r1, #20
 8007c70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c80:	4295      	cmp	r5, r2
 8007c82:	d003      	beq.n	8007c8c <__mcmp+0x2c>
 8007c84:	d205      	bcs.n	8007c92 <__mcmp+0x32>
 8007c86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c8a:	bd30      	pop	{r4, r5, pc}
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d3f3      	bcc.n	8007c78 <__mcmp+0x18>
 8007c90:	e7fb      	b.n	8007c8a <__mcmp+0x2a>
 8007c92:	2001      	movs	r0, #1
 8007c94:	e7f9      	b.n	8007c8a <__mcmp+0x2a>
	...

08007c98 <__mdiff>:
 8007c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	4689      	mov	r9, r1
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	4648      	mov	r0, r9
 8007ca4:	4614      	mov	r4, r2
 8007ca6:	f7ff ffdb 	bl	8007c60 <__mcmp>
 8007caa:	1e05      	subs	r5, r0, #0
 8007cac:	d112      	bne.n	8007cd4 <__mdiff+0x3c>
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f7ff fd63 	bl	800777c <_Balloc>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	b928      	cbnz	r0, 8007cc6 <__mdiff+0x2e>
 8007cba:	f240 2137 	movw	r1, #567	@ 0x237
 8007cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8007db8 <__mdiff+0x120>)
 8007cc0:	483e      	ldr	r0, [pc, #248]	@ (8007dbc <__mdiff+0x124>)
 8007cc2:	f000 fb51 	bl	8008368 <__assert_func>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ccc:	4610      	mov	r0, r2
 8007cce:	b003      	add	sp, #12
 8007cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd4:	bfbc      	itt	lt
 8007cd6:	464b      	movlt	r3, r9
 8007cd8:	46a1      	movlt	r9, r4
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ce0:	bfba      	itte	lt
 8007ce2:	461c      	movlt	r4, r3
 8007ce4:	2501      	movlt	r5, #1
 8007ce6:	2500      	movge	r5, #0
 8007ce8:	f7ff fd48 	bl	800777c <_Balloc>
 8007cec:	4602      	mov	r2, r0
 8007cee:	b918      	cbnz	r0, 8007cf8 <__mdiff+0x60>
 8007cf0:	f240 2145 	movw	r1, #581	@ 0x245
 8007cf4:	4b30      	ldr	r3, [pc, #192]	@ (8007db8 <__mdiff+0x120>)
 8007cf6:	e7e3      	b.n	8007cc0 <__mdiff+0x28>
 8007cf8:	f100 0b14 	add.w	fp, r0, #20
 8007cfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d00:	f109 0310 	add.w	r3, r9, #16
 8007d04:	60c5      	str	r5, [r0, #12]
 8007d06:	f04f 0c00 	mov.w	ip, #0
 8007d0a:	f109 0514 	add.w	r5, r9, #20
 8007d0e:	46d9      	mov	r9, fp
 8007d10:	6926      	ldr	r6, [r4, #16]
 8007d12:	f104 0e14 	add.w	lr, r4, #20
 8007d16:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d1a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	9b01      	ldr	r3, [sp, #4]
 8007d22:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d26:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d2a:	b281      	uxth	r1, r0
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	fa1f f38a 	uxth.w	r3, sl
 8007d32:	1a5b      	subs	r3, r3, r1
 8007d34:	0c00      	lsrs	r0, r0, #16
 8007d36:	4463      	add	r3, ip
 8007d38:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007d3c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007d46:	4576      	cmp	r6, lr
 8007d48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d4c:	f849 3b04 	str.w	r3, [r9], #4
 8007d50:	d8e6      	bhi.n	8007d20 <__mdiff+0x88>
 8007d52:	1b33      	subs	r3, r6, r4
 8007d54:	3b15      	subs	r3, #21
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	3415      	adds	r4, #21
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	42a6      	cmp	r6, r4
 8007d60:	bf38      	it	cc
 8007d62:	2304      	movcc	r3, #4
 8007d64:	441d      	add	r5, r3
 8007d66:	445b      	add	r3, fp
 8007d68:	461e      	mov	r6, r3
 8007d6a:	462c      	mov	r4, r5
 8007d6c:	4544      	cmp	r4, r8
 8007d6e:	d30e      	bcc.n	8007d8e <__mdiff+0xf6>
 8007d70:	f108 0103 	add.w	r1, r8, #3
 8007d74:	1b49      	subs	r1, r1, r5
 8007d76:	f021 0103 	bic.w	r1, r1, #3
 8007d7a:	3d03      	subs	r5, #3
 8007d7c:	45a8      	cmp	r8, r5
 8007d7e:	bf38      	it	cc
 8007d80:	2100      	movcc	r1, #0
 8007d82:	440b      	add	r3, r1
 8007d84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d88:	b199      	cbz	r1, 8007db2 <__mdiff+0x11a>
 8007d8a:	6117      	str	r7, [r2, #16]
 8007d8c:	e79e      	b.n	8007ccc <__mdiff+0x34>
 8007d8e:	46e6      	mov	lr, ip
 8007d90:	f854 1b04 	ldr.w	r1, [r4], #4
 8007d94:	fa1f fc81 	uxth.w	ip, r1
 8007d98:	44f4      	add	ip, lr
 8007d9a:	0c08      	lsrs	r0, r1, #16
 8007d9c:	4471      	add	r1, lr
 8007d9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007da2:	b289      	uxth	r1, r1
 8007da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007da8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dac:	f846 1b04 	str.w	r1, [r6], #4
 8007db0:	e7dc      	b.n	8007d6c <__mdiff+0xd4>
 8007db2:	3f01      	subs	r7, #1
 8007db4:	e7e6      	b.n	8007d84 <__mdiff+0xec>
 8007db6:	bf00      	nop
 8007db8:	0800d34c 	.word	0x0800d34c
 8007dbc:	0800d35d 	.word	0x0800d35d

08007dc0 <__d2b>:
 8007dc0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	4690      	mov	r8, r2
 8007dc8:	4699      	mov	r9, r3
 8007dca:	9e08      	ldr	r6, [sp, #32]
 8007dcc:	f7ff fcd6 	bl	800777c <_Balloc>
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	b930      	cbnz	r0, 8007de2 <__d2b+0x22>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	f240 310f 	movw	r1, #783	@ 0x30f
 8007dda:	4b23      	ldr	r3, [pc, #140]	@ (8007e68 <__d2b+0xa8>)
 8007ddc:	4823      	ldr	r0, [pc, #140]	@ (8007e6c <__d2b+0xac>)
 8007dde:	f000 fac3 	bl	8008368 <__assert_func>
 8007de2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007de6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dea:	b10d      	cbz	r5, 8007df0 <__d2b+0x30>
 8007dec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	f1b8 0300 	subs.w	r3, r8, #0
 8007df6:	d024      	beq.n	8007e42 <__d2b+0x82>
 8007df8:	4668      	mov	r0, sp
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	f7ff fd85 	bl	800790a <__lo0bits>
 8007e00:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e04:	b1d8      	cbz	r0, 8007e3e <__d2b+0x7e>
 8007e06:	f1c0 0320 	rsb	r3, r0, #32
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	430b      	orrs	r3, r1
 8007e10:	40c2      	lsrs	r2, r0
 8007e12:	6163      	str	r3, [r4, #20]
 8007e14:	9201      	str	r2, [sp, #4]
 8007e16:	9b01      	ldr	r3, [sp, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	bf0c      	ite	eq
 8007e1c:	2201      	moveq	r2, #1
 8007e1e:	2202      	movne	r2, #2
 8007e20:	61a3      	str	r3, [r4, #24]
 8007e22:	6122      	str	r2, [r4, #16]
 8007e24:	b1ad      	cbz	r5, 8007e52 <__d2b+0x92>
 8007e26:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e2a:	4405      	add	r5, r0
 8007e2c:	6035      	str	r5, [r6, #0]
 8007e2e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e34:	6018      	str	r0, [r3, #0]
 8007e36:	4620      	mov	r0, r4
 8007e38:	b002      	add	sp, #8
 8007e3a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007e3e:	6161      	str	r1, [r4, #20]
 8007e40:	e7e9      	b.n	8007e16 <__d2b+0x56>
 8007e42:	a801      	add	r0, sp, #4
 8007e44:	f7ff fd61 	bl	800790a <__lo0bits>
 8007e48:	9b01      	ldr	r3, [sp, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	6163      	str	r3, [r4, #20]
 8007e4e:	3020      	adds	r0, #32
 8007e50:	e7e7      	b.n	8007e22 <__d2b+0x62>
 8007e52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007e56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e5a:	6030      	str	r0, [r6, #0]
 8007e5c:	6918      	ldr	r0, [r3, #16]
 8007e5e:	f7ff fd35 	bl	80078cc <__hi0bits>
 8007e62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e66:	e7e4      	b.n	8007e32 <__d2b+0x72>
 8007e68:	0800d34c 	.word	0x0800d34c
 8007e6c:	0800d35d 	.word	0x0800d35d

08007e70 <__sfputc_r>:
 8007e70:	6893      	ldr	r3, [r2, #8]
 8007e72:	b410      	push	{r4}
 8007e74:	3b01      	subs	r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	6093      	str	r3, [r2, #8]
 8007e7a:	da07      	bge.n	8007e8c <__sfputc_r+0x1c>
 8007e7c:	6994      	ldr	r4, [r2, #24]
 8007e7e:	42a3      	cmp	r3, r4
 8007e80:	db01      	blt.n	8007e86 <__sfputc_r+0x16>
 8007e82:	290a      	cmp	r1, #10
 8007e84:	d102      	bne.n	8007e8c <__sfputc_r+0x1c>
 8007e86:	bc10      	pop	{r4}
 8007e88:	f7fe bbeb 	b.w	8006662 <__swbuf_r>
 8007e8c:	6813      	ldr	r3, [r2, #0]
 8007e8e:	1c58      	adds	r0, r3, #1
 8007e90:	6010      	str	r0, [r2, #0]
 8007e92:	7019      	strb	r1, [r3, #0]
 8007e94:	4608      	mov	r0, r1
 8007e96:	bc10      	pop	{r4}
 8007e98:	4770      	bx	lr

08007e9a <__sfputs_r>:
 8007e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	460f      	mov	r7, r1
 8007ea0:	4614      	mov	r4, r2
 8007ea2:	18d5      	adds	r5, r2, r3
 8007ea4:	42ac      	cmp	r4, r5
 8007ea6:	d101      	bne.n	8007eac <__sfputs_r+0x12>
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	e007      	b.n	8007ebc <__sfputs_r+0x22>
 8007eac:	463a      	mov	r2, r7
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb4:	f7ff ffdc 	bl	8007e70 <__sfputc_r>
 8007eb8:	1c43      	adds	r3, r0, #1
 8007eba:	d1f3      	bne.n	8007ea4 <__sfputs_r+0xa>
 8007ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ec0 <_vfiprintf_r>:
 8007ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec4:	460d      	mov	r5, r1
 8007ec6:	4614      	mov	r4, r2
 8007ec8:	4698      	mov	r8, r3
 8007eca:	4606      	mov	r6, r0
 8007ecc:	b09d      	sub	sp, #116	@ 0x74
 8007ece:	b118      	cbz	r0, 8007ed8 <_vfiprintf_r+0x18>
 8007ed0:	6a03      	ldr	r3, [r0, #32]
 8007ed2:	b90b      	cbnz	r3, 8007ed8 <_vfiprintf_r+0x18>
 8007ed4:	f7fe fadc 	bl	8006490 <__sinit>
 8007ed8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eda:	07d9      	lsls	r1, r3, #31
 8007edc:	d405      	bmi.n	8007eea <_vfiprintf_r+0x2a>
 8007ede:	89ab      	ldrh	r3, [r5, #12]
 8007ee0:	059a      	lsls	r2, r3, #22
 8007ee2:	d402      	bmi.n	8007eea <_vfiprintf_r+0x2a>
 8007ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ee6:	f7fe fcce 	bl	8006886 <__retarget_lock_acquire_recursive>
 8007eea:	89ab      	ldrh	r3, [r5, #12]
 8007eec:	071b      	lsls	r3, r3, #28
 8007eee:	d501      	bpl.n	8007ef4 <_vfiprintf_r+0x34>
 8007ef0:	692b      	ldr	r3, [r5, #16]
 8007ef2:	b99b      	cbnz	r3, 8007f1c <_vfiprintf_r+0x5c>
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f7fe fbf2 	bl	80066e0 <__swsetup_r>
 8007efc:	b170      	cbz	r0, 8007f1c <_vfiprintf_r+0x5c>
 8007efe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f00:	07dc      	lsls	r4, r3, #31
 8007f02:	d504      	bpl.n	8007f0e <_vfiprintf_r+0x4e>
 8007f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f08:	b01d      	add	sp, #116	@ 0x74
 8007f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0e:	89ab      	ldrh	r3, [r5, #12]
 8007f10:	0598      	lsls	r0, r3, #22
 8007f12:	d4f7      	bmi.n	8007f04 <_vfiprintf_r+0x44>
 8007f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f16:	f7fe fcb7 	bl	8006888 <__retarget_lock_release_recursive>
 8007f1a:	e7f3      	b.n	8007f04 <_vfiprintf_r+0x44>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f20:	2320      	movs	r3, #32
 8007f22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f26:	2330      	movs	r3, #48	@ 0x30
 8007f28:	f04f 0901 	mov.w	r9, #1
 8007f2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f30:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80080dc <_vfiprintf_r+0x21c>
 8007f34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f38:	4623      	mov	r3, r4
 8007f3a:	469a      	mov	sl, r3
 8007f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f40:	b10a      	cbz	r2, 8007f46 <_vfiprintf_r+0x86>
 8007f42:	2a25      	cmp	r2, #37	@ 0x25
 8007f44:	d1f9      	bne.n	8007f3a <_vfiprintf_r+0x7a>
 8007f46:	ebba 0b04 	subs.w	fp, sl, r4
 8007f4a:	d00b      	beq.n	8007f64 <_vfiprintf_r+0xa4>
 8007f4c:	465b      	mov	r3, fp
 8007f4e:	4622      	mov	r2, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff ffa1 	bl	8007e9a <__sfputs_r>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	f000 80a7 	beq.w	80080ac <_vfiprintf_r+0x1ec>
 8007f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f60:	445a      	add	r2, fp
 8007f62:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f64:	f89a 3000 	ldrb.w	r3, [sl]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 809f 	beq.w	80080ac <_vfiprintf_r+0x1ec>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f78:	f10a 0a01 	add.w	sl, sl, #1
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	9307      	str	r3, [sp, #28]
 8007f80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f84:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f86:	4654      	mov	r4, sl
 8007f88:	2205      	movs	r2, #5
 8007f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f8e:	4853      	ldr	r0, [pc, #332]	@ (80080dc <_vfiprintf_r+0x21c>)
 8007f90:	f7fe fc7b 	bl	800688a <memchr>
 8007f94:	9a04      	ldr	r2, [sp, #16]
 8007f96:	b9d8      	cbnz	r0, 8007fd0 <_vfiprintf_r+0x110>
 8007f98:	06d1      	lsls	r1, r2, #27
 8007f9a:	bf44      	itt	mi
 8007f9c:	2320      	movmi	r3, #32
 8007f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fa2:	0713      	lsls	r3, r2, #28
 8007fa4:	bf44      	itt	mi
 8007fa6:	232b      	movmi	r3, #43	@ 0x2b
 8007fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fac:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fb2:	d015      	beq.n	8007fe0 <_vfiprintf_r+0x120>
 8007fb4:	4654      	mov	r4, sl
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	f04f 0c0a 	mov.w	ip, #10
 8007fbc:	9a07      	ldr	r2, [sp, #28]
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fc4:	3b30      	subs	r3, #48	@ 0x30
 8007fc6:	2b09      	cmp	r3, #9
 8007fc8:	d94b      	bls.n	8008062 <_vfiprintf_r+0x1a2>
 8007fca:	b1b0      	cbz	r0, 8007ffa <_vfiprintf_r+0x13a>
 8007fcc:	9207      	str	r2, [sp, #28]
 8007fce:	e014      	b.n	8007ffa <_vfiprintf_r+0x13a>
 8007fd0:	eba0 0308 	sub.w	r3, r0, r8
 8007fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	46a2      	mov	sl, r4
 8007fdc:	9304      	str	r3, [sp, #16]
 8007fde:	e7d2      	b.n	8007f86 <_vfiprintf_r+0xc6>
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	1d19      	adds	r1, r3, #4
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	9103      	str	r1, [sp, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bfbb      	ittet	lt
 8007fec:	425b      	neglt	r3, r3
 8007fee:	f042 0202 	orrlt.w	r2, r2, #2
 8007ff2:	9307      	strge	r3, [sp, #28]
 8007ff4:	9307      	strlt	r3, [sp, #28]
 8007ff6:	bfb8      	it	lt
 8007ff8:	9204      	strlt	r2, [sp, #16]
 8007ffa:	7823      	ldrb	r3, [r4, #0]
 8007ffc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ffe:	d10a      	bne.n	8008016 <_vfiprintf_r+0x156>
 8008000:	7863      	ldrb	r3, [r4, #1]
 8008002:	2b2a      	cmp	r3, #42	@ 0x2a
 8008004:	d132      	bne.n	800806c <_vfiprintf_r+0x1ac>
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	3402      	adds	r4, #2
 800800a:	1d1a      	adds	r2, r3, #4
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	9203      	str	r2, [sp, #12]
 8008010:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008014:	9305      	str	r3, [sp, #20]
 8008016:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80080e0 <_vfiprintf_r+0x220>
 800801a:	2203      	movs	r2, #3
 800801c:	4650      	mov	r0, sl
 800801e:	7821      	ldrb	r1, [r4, #0]
 8008020:	f7fe fc33 	bl	800688a <memchr>
 8008024:	b138      	cbz	r0, 8008036 <_vfiprintf_r+0x176>
 8008026:	2240      	movs	r2, #64	@ 0x40
 8008028:	9b04      	ldr	r3, [sp, #16]
 800802a:	eba0 000a 	sub.w	r0, r0, sl
 800802e:	4082      	lsls	r2, r0
 8008030:	4313      	orrs	r3, r2
 8008032:	3401      	adds	r4, #1
 8008034:	9304      	str	r3, [sp, #16]
 8008036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800803a:	2206      	movs	r2, #6
 800803c:	4829      	ldr	r0, [pc, #164]	@ (80080e4 <_vfiprintf_r+0x224>)
 800803e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008042:	f7fe fc22 	bl	800688a <memchr>
 8008046:	2800      	cmp	r0, #0
 8008048:	d03f      	beq.n	80080ca <_vfiprintf_r+0x20a>
 800804a:	4b27      	ldr	r3, [pc, #156]	@ (80080e8 <_vfiprintf_r+0x228>)
 800804c:	bb1b      	cbnz	r3, 8008096 <_vfiprintf_r+0x1d6>
 800804e:	9b03      	ldr	r3, [sp, #12]
 8008050:	3307      	adds	r3, #7
 8008052:	f023 0307 	bic.w	r3, r3, #7
 8008056:	3308      	adds	r3, #8
 8008058:	9303      	str	r3, [sp, #12]
 800805a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800805c:	443b      	add	r3, r7
 800805e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008060:	e76a      	b.n	8007f38 <_vfiprintf_r+0x78>
 8008062:	460c      	mov	r4, r1
 8008064:	2001      	movs	r0, #1
 8008066:	fb0c 3202 	mla	r2, ip, r2, r3
 800806a:	e7a8      	b.n	8007fbe <_vfiprintf_r+0xfe>
 800806c:	2300      	movs	r3, #0
 800806e:	f04f 0c0a 	mov.w	ip, #10
 8008072:	4619      	mov	r1, r3
 8008074:	3401      	adds	r4, #1
 8008076:	9305      	str	r3, [sp, #20]
 8008078:	4620      	mov	r0, r4
 800807a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800807e:	3a30      	subs	r2, #48	@ 0x30
 8008080:	2a09      	cmp	r2, #9
 8008082:	d903      	bls.n	800808c <_vfiprintf_r+0x1cc>
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0c6      	beq.n	8008016 <_vfiprintf_r+0x156>
 8008088:	9105      	str	r1, [sp, #20]
 800808a:	e7c4      	b.n	8008016 <_vfiprintf_r+0x156>
 800808c:	4604      	mov	r4, r0
 800808e:	2301      	movs	r3, #1
 8008090:	fb0c 2101 	mla	r1, ip, r1, r2
 8008094:	e7f0      	b.n	8008078 <_vfiprintf_r+0x1b8>
 8008096:	ab03      	add	r3, sp, #12
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	462a      	mov	r2, r5
 800809c:	4630      	mov	r0, r6
 800809e:	4b13      	ldr	r3, [pc, #76]	@ (80080ec <_vfiprintf_r+0x22c>)
 80080a0:	a904      	add	r1, sp, #16
 80080a2:	f7fd fdad 	bl	8005c00 <_printf_float>
 80080a6:	4607      	mov	r7, r0
 80080a8:	1c78      	adds	r0, r7, #1
 80080aa:	d1d6      	bne.n	800805a <_vfiprintf_r+0x19a>
 80080ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080ae:	07d9      	lsls	r1, r3, #31
 80080b0:	d405      	bmi.n	80080be <_vfiprintf_r+0x1fe>
 80080b2:	89ab      	ldrh	r3, [r5, #12]
 80080b4:	059a      	lsls	r2, r3, #22
 80080b6:	d402      	bmi.n	80080be <_vfiprintf_r+0x1fe>
 80080b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080ba:	f7fe fbe5 	bl	8006888 <__retarget_lock_release_recursive>
 80080be:	89ab      	ldrh	r3, [r5, #12]
 80080c0:	065b      	lsls	r3, r3, #25
 80080c2:	f53f af1f 	bmi.w	8007f04 <_vfiprintf_r+0x44>
 80080c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080c8:	e71e      	b.n	8007f08 <_vfiprintf_r+0x48>
 80080ca:	ab03      	add	r3, sp, #12
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	462a      	mov	r2, r5
 80080d0:	4630      	mov	r0, r6
 80080d2:	4b06      	ldr	r3, [pc, #24]	@ (80080ec <_vfiprintf_r+0x22c>)
 80080d4:	a904      	add	r1, sp, #16
 80080d6:	f7fe f831 	bl	800613c <_printf_i>
 80080da:	e7e4      	b.n	80080a6 <_vfiprintf_r+0x1e6>
 80080dc:	0800d3b6 	.word	0x0800d3b6
 80080e0:	0800d3bc 	.word	0x0800d3bc
 80080e4:	0800d3c0 	.word	0x0800d3c0
 80080e8:	08005c01 	.word	0x08005c01
 80080ec:	08007e9b 	.word	0x08007e9b

080080f0 <__sflush_r>:
 80080f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	0716      	lsls	r6, r2, #28
 80080f8:	4605      	mov	r5, r0
 80080fa:	460c      	mov	r4, r1
 80080fc:	d454      	bmi.n	80081a8 <__sflush_r+0xb8>
 80080fe:	684b      	ldr	r3, [r1, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	dc02      	bgt.n	800810a <__sflush_r+0x1a>
 8008104:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008106:	2b00      	cmp	r3, #0
 8008108:	dd48      	ble.n	800819c <__sflush_r+0xac>
 800810a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800810c:	2e00      	cmp	r6, #0
 800810e:	d045      	beq.n	800819c <__sflush_r+0xac>
 8008110:	2300      	movs	r3, #0
 8008112:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008116:	682f      	ldr	r7, [r5, #0]
 8008118:	6a21      	ldr	r1, [r4, #32]
 800811a:	602b      	str	r3, [r5, #0]
 800811c:	d030      	beq.n	8008180 <__sflush_r+0x90>
 800811e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008120:	89a3      	ldrh	r3, [r4, #12]
 8008122:	0759      	lsls	r1, r3, #29
 8008124:	d505      	bpl.n	8008132 <__sflush_r+0x42>
 8008126:	6863      	ldr	r3, [r4, #4]
 8008128:	1ad2      	subs	r2, r2, r3
 800812a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800812c:	b10b      	cbz	r3, 8008132 <__sflush_r+0x42>
 800812e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008130:	1ad2      	subs	r2, r2, r3
 8008132:	2300      	movs	r3, #0
 8008134:	4628      	mov	r0, r5
 8008136:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008138:	6a21      	ldr	r1, [r4, #32]
 800813a:	47b0      	blx	r6
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	d106      	bne.n	8008150 <__sflush_r+0x60>
 8008142:	6829      	ldr	r1, [r5, #0]
 8008144:	291d      	cmp	r1, #29
 8008146:	d82b      	bhi.n	80081a0 <__sflush_r+0xb0>
 8008148:	4a28      	ldr	r2, [pc, #160]	@ (80081ec <__sflush_r+0xfc>)
 800814a:	40ca      	lsrs	r2, r1
 800814c:	07d6      	lsls	r6, r2, #31
 800814e:	d527      	bpl.n	80081a0 <__sflush_r+0xb0>
 8008150:	2200      	movs	r2, #0
 8008152:	6062      	str	r2, [r4, #4]
 8008154:	6922      	ldr	r2, [r4, #16]
 8008156:	04d9      	lsls	r1, r3, #19
 8008158:	6022      	str	r2, [r4, #0]
 800815a:	d504      	bpl.n	8008166 <__sflush_r+0x76>
 800815c:	1c42      	adds	r2, r0, #1
 800815e:	d101      	bne.n	8008164 <__sflush_r+0x74>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	b903      	cbnz	r3, 8008166 <__sflush_r+0x76>
 8008164:	6560      	str	r0, [r4, #84]	@ 0x54
 8008166:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008168:	602f      	str	r7, [r5, #0]
 800816a:	b1b9      	cbz	r1, 800819c <__sflush_r+0xac>
 800816c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008170:	4299      	cmp	r1, r3
 8008172:	d002      	beq.n	800817a <__sflush_r+0x8a>
 8008174:	4628      	mov	r0, r5
 8008176:	f7ff fa03 	bl	8007580 <_free_r>
 800817a:	2300      	movs	r3, #0
 800817c:	6363      	str	r3, [r4, #52]	@ 0x34
 800817e:	e00d      	b.n	800819c <__sflush_r+0xac>
 8008180:	2301      	movs	r3, #1
 8008182:	4628      	mov	r0, r5
 8008184:	47b0      	blx	r6
 8008186:	4602      	mov	r2, r0
 8008188:	1c50      	adds	r0, r2, #1
 800818a:	d1c9      	bne.n	8008120 <__sflush_r+0x30>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0c6      	beq.n	8008120 <__sflush_r+0x30>
 8008192:	2b1d      	cmp	r3, #29
 8008194:	d001      	beq.n	800819a <__sflush_r+0xaa>
 8008196:	2b16      	cmp	r3, #22
 8008198:	d11d      	bne.n	80081d6 <__sflush_r+0xe6>
 800819a:	602f      	str	r7, [r5, #0]
 800819c:	2000      	movs	r0, #0
 800819e:	e021      	b.n	80081e4 <__sflush_r+0xf4>
 80081a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081a4:	b21b      	sxth	r3, r3
 80081a6:	e01a      	b.n	80081de <__sflush_r+0xee>
 80081a8:	690f      	ldr	r7, [r1, #16]
 80081aa:	2f00      	cmp	r7, #0
 80081ac:	d0f6      	beq.n	800819c <__sflush_r+0xac>
 80081ae:	0793      	lsls	r3, r2, #30
 80081b0:	bf18      	it	ne
 80081b2:	2300      	movne	r3, #0
 80081b4:	680e      	ldr	r6, [r1, #0]
 80081b6:	bf08      	it	eq
 80081b8:	694b      	ldreq	r3, [r1, #20]
 80081ba:	1bf6      	subs	r6, r6, r7
 80081bc:	600f      	str	r7, [r1, #0]
 80081be:	608b      	str	r3, [r1, #8]
 80081c0:	2e00      	cmp	r6, #0
 80081c2:	ddeb      	ble.n	800819c <__sflush_r+0xac>
 80081c4:	4633      	mov	r3, r6
 80081c6:	463a      	mov	r2, r7
 80081c8:	4628      	mov	r0, r5
 80081ca:	6a21      	ldr	r1, [r4, #32]
 80081cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80081d0:	47e0      	blx	ip
 80081d2:	2800      	cmp	r0, #0
 80081d4:	dc07      	bgt.n	80081e6 <__sflush_r+0xf6>
 80081d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081e2:	81a3      	strh	r3, [r4, #12]
 80081e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081e6:	4407      	add	r7, r0
 80081e8:	1a36      	subs	r6, r6, r0
 80081ea:	e7e9      	b.n	80081c0 <__sflush_r+0xd0>
 80081ec:	20400001 	.word	0x20400001

080081f0 <_fflush_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	690b      	ldr	r3, [r1, #16]
 80081f4:	4605      	mov	r5, r0
 80081f6:	460c      	mov	r4, r1
 80081f8:	b913      	cbnz	r3, 8008200 <_fflush_r+0x10>
 80081fa:	2500      	movs	r5, #0
 80081fc:	4628      	mov	r0, r5
 80081fe:	bd38      	pop	{r3, r4, r5, pc}
 8008200:	b118      	cbz	r0, 800820a <_fflush_r+0x1a>
 8008202:	6a03      	ldr	r3, [r0, #32]
 8008204:	b90b      	cbnz	r3, 800820a <_fflush_r+0x1a>
 8008206:	f7fe f943 	bl	8006490 <__sinit>
 800820a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0f3      	beq.n	80081fa <_fflush_r+0xa>
 8008212:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008214:	07d0      	lsls	r0, r2, #31
 8008216:	d404      	bmi.n	8008222 <_fflush_r+0x32>
 8008218:	0599      	lsls	r1, r3, #22
 800821a:	d402      	bmi.n	8008222 <_fflush_r+0x32>
 800821c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800821e:	f7fe fb32 	bl	8006886 <__retarget_lock_acquire_recursive>
 8008222:	4628      	mov	r0, r5
 8008224:	4621      	mov	r1, r4
 8008226:	f7ff ff63 	bl	80080f0 <__sflush_r>
 800822a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800822c:	4605      	mov	r5, r0
 800822e:	07da      	lsls	r2, r3, #31
 8008230:	d4e4      	bmi.n	80081fc <_fflush_r+0xc>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	059b      	lsls	r3, r3, #22
 8008236:	d4e1      	bmi.n	80081fc <_fflush_r+0xc>
 8008238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800823a:	f7fe fb25 	bl	8006888 <__retarget_lock_release_recursive>
 800823e:	e7dd      	b.n	80081fc <_fflush_r+0xc>

08008240 <__swhatbuf_r>:
 8008240:	b570      	push	{r4, r5, r6, lr}
 8008242:	460c      	mov	r4, r1
 8008244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008248:	4615      	mov	r5, r2
 800824a:	2900      	cmp	r1, #0
 800824c:	461e      	mov	r6, r3
 800824e:	b096      	sub	sp, #88	@ 0x58
 8008250:	da0c      	bge.n	800826c <__swhatbuf_r+0x2c>
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	2100      	movs	r1, #0
 8008256:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800825a:	bf14      	ite	ne
 800825c:	2340      	movne	r3, #64	@ 0x40
 800825e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008262:	2000      	movs	r0, #0
 8008264:	6031      	str	r1, [r6, #0]
 8008266:	602b      	str	r3, [r5, #0]
 8008268:	b016      	add	sp, #88	@ 0x58
 800826a:	bd70      	pop	{r4, r5, r6, pc}
 800826c:	466a      	mov	r2, sp
 800826e:	f000 f849 	bl	8008304 <_fstat_r>
 8008272:	2800      	cmp	r0, #0
 8008274:	dbed      	blt.n	8008252 <__swhatbuf_r+0x12>
 8008276:	9901      	ldr	r1, [sp, #4]
 8008278:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800827c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008280:	4259      	negs	r1, r3
 8008282:	4159      	adcs	r1, r3
 8008284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008288:	e7eb      	b.n	8008262 <__swhatbuf_r+0x22>

0800828a <__smakebuf_r>:
 800828a:	898b      	ldrh	r3, [r1, #12]
 800828c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800828e:	079d      	lsls	r5, r3, #30
 8008290:	4606      	mov	r6, r0
 8008292:	460c      	mov	r4, r1
 8008294:	d507      	bpl.n	80082a6 <__smakebuf_r+0x1c>
 8008296:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800829a:	6023      	str	r3, [r4, #0]
 800829c:	6123      	str	r3, [r4, #16]
 800829e:	2301      	movs	r3, #1
 80082a0:	6163      	str	r3, [r4, #20]
 80082a2:	b003      	add	sp, #12
 80082a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082a6:	466a      	mov	r2, sp
 80082a8:	ab01      	add	r3, sp, #4
 80082aa:	f7ff ffc9 	bl	8008240 <__swhatbuf_r>
 80082ae:	9f00      	ldr	r7, [sp, #0]
 80082b0:	4605      	mov	r5, r0
 80082b2:	4639      	mov	r1, r7
 80082b4:	4630      	mov	r0, r6
 80082b6:	f7ff f9d5 	bl	8007664 <_malloc_r>
 80082ba:	b948      	cbnz	r0, 80082d0 <__smakebuf_r+0x46>
 80082bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c0:	059a      	lsls	r2, r3, #22
 80082c2:	d4ee      	bmi.n	80082a2 <__smakebuf_r+0x18>
 80082c4:	f023 0303 	bic.w	r3, r3, #3
 80082c8:	f043 0302 	orr.w	r3, r3, #2
 80082cc:	81a3      	strh	r3, [r4, #12]
 80082ce:	e7e2      	b.n	8008296 <__smakebuf_r+0xc>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	9b01      	ldr	r3, [sp, #4]
 80082de:	6020      	str	r0, [r4, #0]
 80082e0:	b15b      	cbz	r3, 80082fa <__smakebuf_r+0x70>
 80082e2:	4630      	mov	r0, r6
 80082e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082e8:	f000 f81e 	bl	8008328 <_isatty_r>
 80082ec:	b128      	cbz	r0, 80082fa <__smakebuf_r+0x70>
 80082ee:	89a3      	ldrh	r3, [r4, #12]
 80082f0:	f023 0303 	bic.w	r3, r3, #3
 80082f4:	f043 0301 	orr.w	r3, r3, #1
 80082f8:	81a3      	strh	r3, [r4, #12]
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	431d      	orrs	r5, r3
 80082fe:	81a5      	strh	r5, [r4, #12]
 8008300:	e7cf      	b.n	80082a2 <__smakebuf_r+0x18>
	...

08008304 <_fstat_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	2300      	movs	r3, #0
 8008308:	4d06      	ldr	r5, [pc, #24]	@ (8008324 <_fstat_r+0x20>)
 800830a:	4604      	mov	r4, r0
 800830c:	4608      	mov	r0, r1
 800830e:	4611      	mov	r1, r2
 8008310:	602b      	str	r3, [r5, #0]
 8008312:	f7f9 ff68 	bl	80021e6 <_fstat>
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	d102      	bne.n	8008320 <_fstat_r+0x1c>
 800831a:	682b      	ldr	r3, [r5, #0]
 800831c:	b103      	cbz	r3, 8008320 <_fstat_r+0x1c>
 800831e:	6023      	str	r3, [r4, #0]
 8008320:	bd38      	pop	{r3, r4, r5, pc}
 8008322:	bf00      	nop
 8008324:	200010b0 	.word	0x200010b0

08008328 <_isatty_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	2300      	movs	r3, #0
 800832c:	4d05      	ldr	r5, [pc, #20]	@ (8008344 <_isatty_r+0x1c>)
 800832e:	4604      	mov	r4, r0
 8008330:	4608      	mov	r0, r1
 8008332:	602b      	str	r3, [r5, #0]
 8008334:	f7f9 ff66 	bl	8002204 <_isatty>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_isatty_r+0x1a>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	b103      	cbz	r3, 8008342 <_isatty_r+0x1a>
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	200010b0 	.word	0x200010b0

08008348 <_sbrk_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	2300      	movs	r3, #0
 800834c:	4d05      	ldr	r5, [pc, #20]	@ (8008364 <_sbrk_r+0x1c>)
 800834e:	4604      	mov	r4, r0
 8008350:	4608      	mov	r0, r1
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	f7f9 ff6c 	bl	8002230 <_sbrk>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_sbrk_r+0x1a>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_sbrk_r+0x1a>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	200010b0 	.word	0x200010b0

08008368 <__assert_func>:
 8008368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800836a:	4614      	mov	r4, r2
 800836c:	461a      	mov	r2, r3
 800836e:	4b09      	ldr	r3, [pc, #36]	@ (8008394 <__assert_func+0x2c>)
 8008370:	4605      	mov	r5, r0
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68d8      	ldr	r0, [r3, #12]
 8008376:	b14c      	cbz	r4, 800838c <__assert_func+0x24>
 8008378:	4b07      	ldr	r3, [pc, #28]	@ (8008398 <__assert_func+0x30>)
 800837a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800837e:	9100      	str	r1, [sp, #0]
 8008380:	462b      	mov	r3, r5
 8008382:	4906      	ldr	r1, [pc, #24]	@ (800839c <__assert_func+0x34>)
 8008384:	f000 f842 	bl	800840c <fiprintf>
 8008388:	f000 f852 	bl	8008430 <abort>
 800838c:	4b04      	ldr	r3, [pc, #16]	@ (80083a0 <__assert_func+0x38>)
 800838e:	461c      	mov	r4, r3
 8008390:	e7f3      	b.n	800837a <__assert_func+0x12>
 8008392:	bf00      	nop
 8008394:	20000034 	.word	0x20000034
 8008398:	0800d3d1 	.word	0x0800d3d1
 800839c:	0800d3de 	.word	0x0800d3de
 80083a0:	0800d40c 	.word	0x0800d40c

080083a4 <_calloc_r>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	fba1 5402 	umull	r5, r4, r1, r2
 80083aa:	b934      	cbnz	r4, 80083ba <_calloc_r+0x16>
 80083ac:	4629      	mov	r1, r5
 80083ae:	f7ff f959 	bl	8007664 <_malloc_r>
 80083b2:	4606      	mov	r6, r0
 80083b4:	b928      	cbnz	r0, 80083c2 <_calloc_r+0x1e>
 80083b6:	4630      	mov	r0, r6
 80083b8:	bd70      	pop	{r4, r5, r6, pc}
 80083ba:	220c      	movs	r2, #12
 80083bc:	2600      	movs	r6, #0
 80083be:	6002      	str	r2, [r0, #0]
 80083c0:	e7f9      	b.n	80083b6 <_calloc_r+0x12>
 80083c2:	462a      	mov	r2, r5
 80083c4:	4621      	mov	r1, r4
 80083c6:	f7fe f9e1 	bl	800678c <memset>
 80083ca:	e7f4      	b.n	80083b6 <_calloc_r+0x12>

080083cc <__ascii_mbtowc>:
 80083cc:	b082      	sub	sp, #8
 80083ce:	b901      	cbnz	r1, 80083d2 <__ascii_mbtowc+0x6>
 80083d0:	a901      	add	r1, sp, #4
 80083d2:	b142      	cbz	r2, 80083e6 <__ascii_mbtowc+0x1a>
 80083d4:	b14b      	cbz	r3, 80083ea <__ascii_mbtowc+0x1e>
 80083d6:	7813      	ldrb	r3, [r2, #0]
 80083d8:	600b      	str	r3, [r1, #0]
 80083da:	7812      	ldrb	r2, [r2, #0]
 80083dc:	1e10      	subs	r0, r2, #0
 80083de:	bf18      	it	ne
 80083e0:	2001      	movne	r0, #1
 80083e2:	b002      	add	sp, #8
 80083e4:	4770      	bx	lr
 80083e6:	4610      	mov	r0, r2
 80083e8:	e7fb      	b.n	80083e2 <__ascii_mbtowc+0x16>
 80083ea:	f06f 0001 	mvn.w	r0, #1
 80083ee:	e7f8      	b.n	80083e2 <__ascii_mbtowc+0x16>

080083f0 <__ascii_wctomb>:
 80083f0:	4603      	mov	r3, r0
 80083f2:	4608      	mov	r0, r1
 80083f4:	b141      	cbz	r1, 8008408 <__ascii_wctomb+0x18>
 80083f6:	2aff      	cmp	r2, #255	@ 0xff
 80083f8:	d904      	bls.n	8008404 <__ascii_wctomb+0x14>
 80083fa:	228a      	movs	r2, #138	@ 0x8a
 80083fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	4770      	bx	lr
 8008404:	2001      	movs	r0, #1
 8008406:	700a      	strb	r2, [r1, #0]
 8008408:	4770      	bx	lr
	...

0800840c <fiprintf>:
 800840c:	b40e      	push	{r1, r2, r3}
 800840e:	b503      	push	{r0, r1, lr}
 8008410:	4601      	mov	r1, r0
 8008412:	ab03      	add	r3, sp, #12
 8008414:	4805      	ldr	r0, [pc, #20]	@ (800842c <fiprintf+0x20>)
 8008416:	f853 2b04 	ldr.w	r2, [r3], #4
 800841a:	6800      	ldr	r0, [r0, #0]
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	f7ff fd4f 	bl	8007ec0 <_vfiprintf_r>
 8008422:	b002      	add	sp, #8
 8008424:	f85d eb04 	ldr.w	lr, [sp], #4
 8008428:	b003      	add	sp, #12
 800842a:	4770      	bx	lr
 800842c:	20000034 	.word	0x20000034

08008430 <abort>:
 8008430:	2006      	movs	r0, #6
 8008432:	b508      	push	{r3, lr}
 8008434:	f000 f82c 	bl	8008490 <raise>
 8008438:	2001      	movs	r0, #1
 800843a:	f7f9 fe85 	bl	8002148 <_exit>

0800843e <_raise_r>:
 800843e:	291f      	cmp	r1, #31
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4605      	mov	r5, r0
 8008444:	460c      	mov	r4, r1
 8008446:	d904      	bls.n	8008452 <_raise_r+0x14>
 8008448:	2316      	movs	r3, #22
 800844a:	6003      	str	r3, [r0, #0]
 800844c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008450:	bd38      	pop	{r3, r4, r5, pc}
 8008452:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008454:	b112      	cbz	r2, 800845c <_raise_r+0x1e>
 8008456:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800845a:	b94b      	cbnz	r3, 8008470 <_raise_r+0x32>
 800845c:	4628      	mov	r0, r5
 800845e:	f000 f831 	bl	80084c4 <_getpid_r>
 8008462:	4622      	mov	r2, r4
 8008464:	4601      	mov	r1, r0
 8008466:	4628      	mov	r0, r5
 8008468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800846c:	f000 b818 	b.w	80084a0 <_kill_r>
 8008470:	2b01      	cmp	r3, #1
 8008472:	d00a      	beq.n	800848a <_raise_r+0x4c>
 8008474:	1c59      	adds	r1, r3, #1
 8008476:	d103      	bne.n	8008480 <_raise_r+0x42>
 8008478:	2316      	movs	r3, #22
 800847a:	6003      	str	r3, [r0, #0]
 800847c:	2001      	movs	r0, #1
 800847e:	e7e7      	b.n	8008450 <_raise_r+0x12>
 8008480:	2100      	movs	r1, #0
 8008482:	4620      	mov	r0, r4
 8008484:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008488:	4798      	blx	r3
 800848a:	2000      	movs	r0, #0
 800848c:	e7e0      	b.n	8008450 <_raise_r+0x12>
	...

08008490 <raise>:
 8008490:	4b02      	ldr	r3, [pc, #8]	@ (800849c <raise+0xc>)
 8008492:	4601      	mov	r1, r0
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	f7ff bfd2 	b.w	800843e <_raise_r>
 800849a:	bf00      	nop
 800849c:	20000034 	.word	0x20000034

080084a0 <_kill_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	2300      	movs	r3, #0
 80084a4:	4d06      	ldr	r5, [pc, #24]	@ (80084c0 <_kill_r+0x20>)
 80084a6:	4604      	mov	r4, r0
 80084a8:	4608      	mov	r0, r1
 80084aa:	4611      	mov	r1, r2
 80084ac:	602b      	str	r3, [r5, #0]
 80084ae:	f7f9 fe3b 	bl	8002128 <_kill>
 80084b2:	1c43      	adds	r3, r0, #1
 80084b4:	d102      	bne.n	80084bc <_kill_r+0x1c>
 80084b6:	682b      	ldr	r3, [r5, #0]
 80084b8:	b103      	cbz	r3, 80084bc <_kill_r+0x1c>
 80084ba:	6023      	str	r3, [r4, #0]
 80084bc:	bd38      	pop	{r3, r4, r5, pc}
 80084be:	bf00      	nop
 80084c0:	200010b0 	.word	0x200010b0

080084c4 <_getpid_r>:
 80084c4:	f7f9 be29 	b.w	800211a <_getpid>

080084c8 <expf>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4605      	mov	r5, r0
 80084cc:	f000 f8e4 	bl	8008698 <__ieee754_expf>
 80084d0:	4604      	mov	r4, r0
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 f838 	bl	8008548 <finitef>
 80084d8:	b150      	cbz	r0, 80084f0 <expf+0x28>
 80084da:	4628      	mov	r0, r5
 80084dc:	490b      	ldr	r1, [pc, #44]	@ (800850c <expf+0x44>)
 80084de:	f7f8 fe05 	bl	80010ec <__aeabi_fcmpgt>
 80084e2:	b138      	cbz	r0, 80084f4 <expf+0x2c>
 80084e4:	f7fe f9a4 	bl	8006830 <__errno>
 80084e8:	2322      	movs	r3, #34	@ 0x22
 80084ea:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 80084ee:	6003      	str	r3, [r0, #0]
 80084f0:	4620      	mov	r0, r4
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	4628      	mov	r0, r5
 80084f6:	4906      	ldr	r1, [pc, #24]	@ (8008510 <expf+0x48>)
 80084f8:	f7f8 fdda 	bl	80010b0 <__aeabi_fcmplt>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d0f7      	beq.n	80084f0 <expf+0x28>
 8008500:	f7fe f996 	bl	8006830 <__errno>
 8008504:	2322      	movs	r3, #34	@ 0x22
 8008506:	2400      	movs	r4, #0
 8008508:	6003      	str	r3, [r0, #0]
 800850a:	e7f1      	b.n	80084f0 <expf+0x28>
 800850c:	42b17217 	.word	0x42b17217
 8008510:	c2cff1b5 	.word	0xc2cff1b5

08008514 <sqrtf>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4605      	mov	r5, r0
 8008518:	f000 f84e 	bl	80085b8 <__ieee754_sqrtf>
 800851c:	4629      	mov	r1, r5
 800851e:	4604      	mov	r4, r0
 8008520:	4628      	mov	r0, r5
 8008522:	f7f8 fded 	bl	8001100 <__aeabi_fcmpun>
 8008526:	b968      	cbnz	r0, 8008544 <sqrtf+0x30>
 8008528:	2100      	movs	r1, #0
 800852a:	4628      	mov	r0, r5
 800852c:	f7f8 fdc0 	bl	80010b0 <__aeabi_fcmplt>
 8008530:	b140      	cbz	r0, 8008544 <sqrtf+0x30>
 8008532:	f7fe f97d 	bl	8006830 <__errno>
 8008536:	2321      	movs	r3, #33	@ 0x21
 8008538:	2100      	movs	r1, #0
 800853a:	6003      	str	r3, [r0, #0]
 800853c:	4608      	mov	r0, r1
 800853e:	f7f8 fccd 	bl	8000edc <__aeabi_fdiv>
 8008542:	4604      	mov	r4, r0
 8008544:	4620      	mov	r0, r4
 8008546:	bd38      	pop	{r3, r4, r5, pc}

08008548 <finitef>:
 8008548:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800854c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8008550:	bfac      	ite	ge
 8008552:	2000      	movge	r0, #0
 8008554:	2001      	movlt	r0, #1
 8008556:	4770      	bx	lr

08008558 <fminf>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4604      	mov	r4, r0
 800855c:	460d      	mov	r5, r1
 800855e:	f000 f811 	bl	8008584 <__fpclassifyf>
 8008562:	b910      	cbnz	r0, 800856a <fminf+0x12>
 8008564:	462c      	mov	r4, r5
 8008566:	4620      	mov	r0, r4
 8008568:	bd38      	pop	{r3, r4, r5, pc}
 800856a:	4628      	mov	r0, r5
 800856c:	f000 f80a 	bl	8008584 <__fpclassifyf>
 8008570:	2800      	cmp	r0, #0
 8008572:	d0f8      	beq.n	8008566 <fminf+0xe>
 8008574:	4629      	mov	r1, r5
 8008576:	4620      	mov	r0, r4
 8008578:	f7f8 fd9a 	bl	80010b0 <__aeabi_fcmplt>
 800857c:	2800      	cmp	r0, #0
 800857e:	d0f1      	beq.n	8008564 <fminf+0xc>
 8008580:	e7f1      	b.n	8008566 <fminf+0xe>
	...

08008584 <__fpclassifyf>:
 8008584:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8008588:	d00d      	beq.n	80085a6 <__fpclassifyf+0x22>
 800858a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800858e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8008592:	d30a      	bcc.n	80085aa <__fpclassifyf+0x26>
 8008594:	4b07      	ldr	r3, [pc, #28]	@ (80085b4 <__fpclassifyf+0x30>)
 8008596:	1e42      	subs	r2, r0, #1
 8008598:	429a      	cmp	r2, r3
 800859a:	d908      	bls.n	80085ae <__fpclassifyf+0x2a>
 800859c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80085a0:	4258      	negs	r0, r3
 80085a2:	4158      	adcs	r0, r3
 80085a4:	4770      	bx	lr
 80085a6:	2002      	movs	r0, #2
 80085a8:	4770      	bx	lr
 80085aa:	2004      	movs	r0, #4
 80085ac:	4770      	bx	lr
 80085ae:	2003      	movs	r0, #3
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	007ffffe 	.word	0x007ffffe

080085b8 <__ieee754_sqrtf>:
 80085b8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80085bc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80085c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c4:	4603      	mov	r3, r0
 80085c6:	4604      	mov	r4, r0
 80085c8:	d30a      	bcc.n	80085e0 <__ieee754_sqrtf+0x28>
 80085ca:	4601      	mov	r1, r0
 80085cc:	f7f8 fbd2 	bl	8000d74 <__aeabi_fmul>
 80085d0:	4601      	mov	r1, r0
 80085d2:	4620      	mov	r0, r4
 80085d4:	f7f8 fac6 	bl	8000b64 <__addsf3>
 80085d8:	4604      	mov	r4, r0
 80085da:	4620      	mov	r0, r4
 80085dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e0:	2a00      	cmp	r2, #0
 80085e2:	d0fa      	beq.n	80085da <__ieee754_sqrtf+0x22>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	da06      	bge.n	80085f6 <__ieee754_sqrtf+0x3e>
 80085e8:	4601      	mov	r1, r0
 80085ea:	f7f8 fab9 	bl	8000b60 <__aeabi_fsub>
 80085ee:	4601      	mov	r1, r0
 80085f0:	f7f8 fc74 	bl	8000edc <__aeabi_fdiv>
 80085f4:	e7f0      	b.n	80085d8 <__ieee754_sqrtf+0x20>
 80085f6:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 80085fa:	d03c      	beq.n	8008676 <__ieee754_sqrtf+0xbe>
 80085fc:	15c2      	asrs	r2, r0, #23
 80085fe:	2400      	movs	r4, #0
 8008600:	2019      	movs	r0, #25
 8008602:	4626      	mov	r6, r4
 8008604:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8008608:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800860c:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8008610:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008614:	07d2      	lsls	r2, r2, #31
 8008616:	bf58      	it	pl
 8008618:	005b      	lslpl	r3, r3, #1
 800861a:	106d      	asrs	r5, r5, #1
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	1872      	adds	r2, r6, r1
 8008620:	429a      	cmp	r2, r3
 8008622:	bfcf      	iteee	gt
 8008624:	461a      	movgt	r2, r3
 8008626:	1856      	addle	r6, r2, r1
 8008628:	1864      	addle	r4, r4, r1
 800862a:	1a9a      	suble	r2, r3, r2
 800862c:	3801      	subs	r0, #1
 800862e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8008632:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008636:	d1f2      	bne.n	800861e <__ieee754_sqrtf+0x66>
 8008638:	b1ba      	cbz	r2, 800866a <__ieee754_sqrtf+0xb2>
 800863a:	4e15      	ldr	r6, [pc, #84]	@ (8008690 <__ieee754_sqrtf+0xd8>)
 800863c:	4f15      	ldr	r7, [pc, #84]	@ (8008694 <__ieee754_sqrtf+0xdc>)
 800863e:	6830      	ldr	r0, [r6, #0]
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	f7f8 fa8d 	bl	8000b60 <__aeabi_fsub>
 8008646:	f8d6 8000 	ldr.w	r8, [r6]
 800864a:	4601      	mov	r1, r0
 800864c:	4640      	mov	r0, r8
 800864e:	f7f8 fd39 	bl	80010c4 <__aeabi_fcmple>
 8008652:	b150      	cbz	r0, 800866a <__ieee754_sqrtf+0xb2>
 8008654:	6830      	ldr	r0, [r6, #0]
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	f7f8 fa84 	bl	8000b64 <__addsf3>
 800865c:	6836      	ldr	r6, [r6, #0]
 800865e:	4601      	mov	r1, r0
 8008660:	4630      	mov	r0, r6
 8008662:	f7f8 fd25 	bl	80010b0 <__aeabi_fcmplt>
 8008666:	b170      	cbz	r0, 8008686 <__ieee754_sqrtf+0xce>
 8008668:	3402      	adds	r4, #2
 800866a:	1064      	asrs	r4, r4, #1
 800866c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8008670:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8008674:	e7b1      	b.n	80085da <__ieee754_sqrtf+0x22>
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	0218      	lsls	r0, r3, #8
 800867a:	460a      	mov	r2, r1
 800867c:	f101 0101 	add.w	r1, r1, #1
 8008680:	d5f9      	bpl.n	8008676 <__ieee754_sqrtf+0xbe>
 8008682:	4252      	negs	r2, r2
 8008684:	e7bb      	b.n	80085fe <__ieee754_sqrtf+0x46>
 8008686:	3401      	adds	r4, #1
 8008688:	f024 0401 	bic.w	r4, r4, #1
 800868c:	e7ed      	b.n	800866a <__ieee754_sqrtf+0xb2>
 800868e:	bf00      	nop
 8008690:	0800d618 	.word	0x0800d618
 8008694:	0800d614 	.word	0x0800d614

08008698 <__ieee754_expf>:
 8008698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800869c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80086a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80086a4:	4604      	mov	r4, r0
 80086a6:	d904      	bls.n	80086b2 <__ieee754_expf+0x1a>
 80086a8:	4601      	mov	r1, r0
 80086aa:	f7f8 fa5b 	bl	8000b64 <__addsf3>
 80086ae:	4604      	mov	r4, r0
 80086b0:	e005      	b.n	80086be <__ieee754_expf+0x26>
 80086b2:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 80086b6:	d105      	bne.n	80086c4 <__ieee754_expf+0x2c>
 80086b8:	2e00      	cmp	r6, #0
 80086ba:	f040 80c3 	bne.w	8008844 <__ieee754_expf+0x1ac>
 80086be:	4620      	mov	r0, r4
 80086c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c4:	4960      	ldr	r1, [pc, #384]	@ (8008848 <__ieee754_expf+0x1b0>)
 80086c6:	4288      	cmp	r0, r1
 80086c8:	dd04      	ble.n	80086d4 <__ieee754_expf+0x3c>
 80086ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086ce:	2000      	movs	r0, #0
 80086d0:	f000 b8f3 	b.w	80088ba <__math_oflowf>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	da07      	bge.n	80086e8 <__ieee754_expf+0x50>
 80086d8:	4a5c      	ldr	r2, [pc, #368]	@ (800884c <__ieee754_expf+0x1b4>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d904      	bls.n	80086e8 <__ieee754_expf+0x50>
 80086de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e2:	2000      	movs	r0, #0
 80086e4:	f000 b8e5 	b.w	80088b2 <__math_uflowf>
 80086e8:	4a59      	ldr	r2, [pc, #356]	@ (8008850 <__ieee754_expf+0x1b8>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d971      	bls.n	80087d2 <__ieee754_expf+0x13a>
 80086ee:	4a59      	ldr	r2, [pc, #356]	@ (8008854 <__ieee754_expf+0x1bc>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d851      	bhi.n	8008798 <__ieee754_expf+0x100>
 80086f4:	4b58      	ldr	r3, [pc, #352]	@ (8008858 <__ieee754_expf+0x1c0>)
 80086f6:	4620      	mov	r0, r4
 80086f8:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80086fc:	f7f8 fa30 	bl	8000b60 <__aeabi_fsub>
 8008700:	4605      	mov	r5, r0
 8008702:	4b56      	ldr	r3, [pc, #344]	@ (800885c <__ieee754_expf+0x1c4>)
 8008704:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8008708:	f086 0301 	eor.w	r3, r6, #1
 800870c:	eba3 0806 	sub.w	r8, r3, r6
 8008710:	4639      	mov	r1, r7
 8008712:	4628      	mov	r0, r5
 8008714:	f7f8 fa24 	bl	8000b60 <__aeabi_fsub>
 8008718:	4604      	mov	r4, r0
 800871a:	4621      	mov	r1, r4
 800871c:	4620      	mov	r0, r4
 800871e:	f7f8 fb29 	bl	8000d74 <__aeabi_fmul>
 8008722:	4606      	mov	r6, r0
 8008724:	494e      	ldr	r1, [pc, #312]	@ (8008860 <__ieee754_expf+0x1c8>)
 8008726:	f7f8 fb25 	bl	8000d74 <__aeabi_fmul>
 800872a:	494e      	ldr	r1, [pc, #312]	@ (8008864 <__ieee754_expf+0x1cc>)
 800872c:	f7f8 fa18 	bl	8000b60 <__aeabi_fsub>
 8008730:	4631      	mov	r1, r6
 8008732:	f7f8 fb1f 	bl	8000d74 <__aeabi_fmul>
 8008736:	494c      	ldr	r1, [pc, #304]	@ (8008868 <__ieee754_expf+0x1d0>)
 8008738:	f7f8 fa14 	bl	8000b64 <__addsf3>
 800873c:	4631      	mov	r1, r6
 800873e:	f7f8 fb19 	bl	8000d74 <__aeabi_fmul>
 8008742:	494a      	ldr	r1, [pc, #296]	@ (800886c <__ieee754_expf+0x1d4>)
 8008744:	f7f8 fa0c 	bl	8000b60 <__aeabi_fsub>
 8008748:	4631      	mov	r1, r6
 800874a:	f7f8 fb13 	bl	8000d74 <__aeabi_fmul>
 800874e:	4948      	ldr	r1, [pc, #288]	@ (8008870 <__ieee754_expf+0x1d8>)
 8008750:	f7f8 fa08 	bl	8000b64 <__addsf3>
 8008754:	4631      	mov	r1, r6
 8008756:	f7f8 fb0d 	bl	8000d74 <__aeabi_fmul>
 800875a:	4601      	mov	r1, r0
 800875c:	4620      	mov	r0, r4
 800875e:	f7f8 f9ff 	bl	8000b60 <__aeabi_fsub>
 8008762:	4601      	mov	r1, r0
 8008764:	4606      	mov	r6, r0
 8008766:	4620      	mov	r0, r4
 8008768:	f7f8 fb04 	bl	8000d74 <__aeabi_fmul>
 800876c:	4681      	mov	r9, r0
 800876e:	f1b8 0f00 	cmp.w	r8, #0
 8008772:	d143      	bne.n	80087fc <__ieee754_expf+0x164>
 8008774:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008778:	4630      	mov	r0, r6
 800877a:	f7f8 f9f1 	bl	8000b60 <__aeabi_fsub>
 800877e:	4601      	mov	r1, r0
 8008780:	4648      	mov	r0, r9
 8008782:	f7f8 fbab 	bl	8000edc <__aeabi_fdiv>
 8008786:	4621      	mov	r1, r4
 8008788:	f7f8 f9ea 	bl	8000b60 <__aeabi_fsub>
 800878c:	4601      	mov	r1, r0
 800878e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008792:	f7f8 f9e5 	bl	8000b60 <__aeabi_fsub>
 8008796:	e78a      	b.n	80086ae <__ieee754_expf+0x16>
 8008798:	4936      	ldr	r1, [pc, #216]	@ (8008874 <__ieee754_expf+0x1dc>)
 800879a:	4620      	mov	r0, r4
 800879c:	f7f8 faea 	bl	8000d74 <__aeabi_fmul>
 80087a0:	4b35      	ldr	r3, [pc, #212]	@ (8008878 <__ieee754_expf+0x1e0>)
 80087a2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80087a6:	f7f8 f9dd 	bl	8000b64 <__addsf3>
 80087aa:	f7f8 fcbf 	bl	800112c <__aeabi_f2iz>
 80087ae:	4680      	mov	r8, r0
 80087b0:	f7f8 fa8c 	bl	8000ccc <__aeabi_i2f>
 80087b4:	4931      	ldr	r1, [pc, #196]	@ (800887c <__ieee754_expf+0x1e4>)
 80087b6:	4606      	mov	r6, r0
 80087b8:	f7f8 fadc 	bl	8000d74 <__aeabi_fmul>
 80087bc:	4601      	mov	r1, r0
 80087be:	4620      	mov	r0, r4
 80087c0:	f7f8 f9ce 	bl	8000b60 <__aeabi_fsub>
 80087c4:	492e      	ldr	r1, [pc, #184]	@ (8008880 <__ieee754_expf+0x1e8>)
 80087c6:	4605      	mov	r5, r0
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7f8 fad3 	bl	8000d74 <__aeabi_fmul>
 80087ce:	4607      	mov	r7, r0
 80087d0:	e79e      	b.n	8008710 <__ieee754_expf+0x78>
 80087d2:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 80087d6:	d20c      	bcs.n	80087f2 <__ieee754_expf+0x15a>
 80087d8:	492a      	ldr	r1, [pc, #168]	@ (8008884 <__ieee754_expf+0x1ec>)
 80087da:	4620      	mov	r0, r4
 80087dc:	f7f8 f9c2 	bl	8000b64 <__addsf3>
 80087e0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80087e4:	f7f8 fc82 	bl	80010ec <__aeabi_fcmpgt>
 80087e8:	b130      	cbz	r0, 80087f8 <__ieee754_expf+0x160>
 80087ea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80087ee:	4620      	mov	r0, r4
 80087f0:	e75b      	b.n	80086aa <__ieee754_expf+0x12>
 80087f2:	f04f 0800 	mov.w	r8, #0
 80087f6:	e790      	b.n	800871a <__ieee754_expf+0x82>
 80087f8:	4680      	mov	r8, r0
 80087fa:	e78e      	b.n	800871a <__ieee754_expf+0x82>
 80087fc:	4631      	mov	r1, r6
 80087fe:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8008802:	f7f8 f9ad 	bl	8000b60 <__aeabi_fsub>
 8008806:	4601      	mov	r1, r0
 8008808:	4648      	mov	r0, r9
 800880a:	f7f8 fb67 	bl	8000edc <__aeabi_fdiv>
 800880e:	4601      	mov	r1, r0
 8008810:	4638      	mov	r0, r7
 8008812:	f7f8 f9a5 	bl	8000b60 <__aeabi_fsub>
 8008816:	4629      	mov	r1, r5
 8008818:	f7f8 f9a2 	bl	8000b60 <__aeabi_fsub>
 800881c:	4601      	mov	r1, r0
 800881e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008822:	f7f8 f99d 	bl	8000b60 <__aeabi_fsub>
 8008826:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 800882a:	db02      	blt.n	8008832 <__ieee754_expf+0x19a>
 800882c:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 8008830:	e745      	b.n	80086be <__ieee754_expf+0x26>
 8008832:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 8008836:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 800883a:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 800883e:	f7f8 fa99 	bl	8000d74 <__aeabi_fmul>
 8008842:	e734      	b.n	80086ae <__ieee754_expf+0x16>
 8008844:	2400      	movs	r4, #0
 8008846:	e73a      	b.n	80086be <__ieee754_expf+0x26>
 8008848:	42b17217 	.word	0x42b17217
 800884c:	42cff1b5 	.word	0x42cff1b5
 8008850:	3eb17218 	.word	0x3eb17218
 8008854:	3f851591 	.word	0x3f851591
 8008858:	0800d624 	.word	0x0800d624
 800885c:	0800d61c 	.word	0x0800d61c
 8008860:	3331bb4c 	.word	0x3331bb4c
 8008864:	35ddea0e 	.word	0x35ddea0e
 8008868:	388ab355 	.word	0x388ab355
 800886c:	3b360b61 	.word	0x3b360b61
 8008870:	3e2aaaab 	.word	0x3e2aaaab
 8008874:	3fb8aa3b 	.word	0x3fb8aa3b
 8008878:	0800d62c 	.word	0x0800d62c
 800887c:	3f317180 	.word	0x3f317180
 8008880:	3717f7d1 	.word	0x3717f7d1
 8008884:	7149f2ca 	.word	0x7149f2ca

08008888 <with_errnof>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4604      	mov	r4, r0
 800888c:	460d      	mov	r5, r1
 800888e:	f7fd ffcf 	bl	8006830 <__errno>
 8008892:	6005      	str	r5, [r0, #0]
 8008894:	4620      	mov	r0, r4
 8008896:	bd38      	pop	{r3, r4, r5, pc}

08008898 <xflowf>:
 8008898:	b508      	push	{r3, lr}
 800889a:	b140      	cbz	r0, 80088ae <xflowf+0x16>
 800889c:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80088a0:	f7f8 fa68 	bl	8000d74 <__aeabi_fmul>
 80088a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80088a8:	2122      	movs	r1, #34	@ 0x22
 80088aa:	f7ff bfed 	b.w	8008888 <with_errnof>
 80088ae:	4608      	mov	r0, r1
 80088b0:	e7f6      	b.n	80088a0 <xflowf+0x8>

080088b2 <__math_uflowf>:
 80088b2:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80088b6:	f7ff bfef 	b.w	8008898 <xflowf>

080088ba <__math_oflowf>:
 80088ba:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80088be:	f7ff bfeb 	b.w	8008898 <xflowf>
	...

080088c4 <_init>:
 80088c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c6:	bf00      	nop
 80088c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ca:	bc08      	pop	{r3}
 80088cc:	469e      	mov	lr, r3
 80088ce:	4770      	bx	lr

080088d0 <_fini>:
 80088d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d2:	bf00      	nop
 80088d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088d6:	bc08      	pop	{r3}
 80088d8:	469e      	mov	lr, r3
 80088da:	4770      	bx	lr
