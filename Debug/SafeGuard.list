
SafeGuard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008340  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000229c  08008480  08008480  00009480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a71c  0800a71c  0000c1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a71c  0800a71c  0000b71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a724  0800a724  0000c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a724  0800a724  0000b724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a728  0800a728  0000b728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800a72c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001070  200001ec  0800a918  0000c1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000125c  0800a918  0000c25c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001648d  00000000  00000000  0000c215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b65  00000000  00000000  000226a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00024208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff4  00000000  00000000  00025690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017666  00000000  00000000  00026684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117d7  00000000  00000000  0003dcea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092317  00000000  00000000  0004f4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  000e17d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cc8  00000000  00000000  000e1860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e8528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ec 	.word	0x200001ec
 800015c:	00000000 	.word	0x00000000
 8000160:	08008468 	.word	0x08008468

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f0 	.word	0x200001f0
 800017c:	08008468 	.word	0x08008468

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <__aeabi_f2uiz>:
 800114c:	0042      	lsls	r2, r0, #1
 800114e:	d20e      	bcs.n	800116e <__aeabi_f2uiz+0x22>
 8001150:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001154:	d30b      	bcc.n	800116e <__aeabi_f2uiz+0x22>
 8001156:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800115a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115e:	d409      	bmi.n	8001174 <__aeabi_f2uiz+0x28>
 8001160:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001164:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001168:	fa23 f002 	lsr.w	r0, r3, r2
 800116c:	4770      	bx	lr
 800116e:	f04f 0000 	mov.w	r0, #0
 8001172:	4770      	bx	lr
 8001174:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001178:	d101      	bne.n	800117e <__aeabi_f2uiz+0x32>
 800117a:	0242      	lsls	r2, r0, #9
 800117c:	d102      	bne.n	8001184 <__aeabi_f2uiz+0x38>
 800117e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001182:	4770      	bx	lr
 8001184:	f04f 0000 	mov.w	r0, #0
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <__aeabi_uldivmod>:
 800118c:	b953      	cbnz	r3, 80011a4 <__aeabi_uldivmod+0x18>
 800118e:	b94a      	cbnz	r2, 80011a4 <__aeabi_uldivmod+0x18>
 8001190:	2900      	cmp	r1, #0
 8001192:	bf08      	it	eq
 8001194:	2800      	cmpeq	r0, #0
 8001196:	bf1c      	itt	ne
 8001198:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800119c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80011a0:	f000 b98c 	b.w	80014bc <__aeabi_idiv0>
 80011a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ac:	f000 f806 	bl	80011bc <__udivmoddi4>
 80011b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr

080011bc <__udivmoddi4>:
 80011bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c0:	9d08      	ldr	r5, [sp, #32]
 80011c2:	468e      	mov	lr, r1
 80011c4:	4604      	mov	r4, r0
 80011c6:	4688      	mov	r8, r1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d14a      	bne.n	8001262 <__udivmoddi4+0xa6>
 80011cc:	428a      	cmp	r2, r1
 80011ce:	4617      	mov	r7, r2
 80011d0:	d962      	bls.n	8001298 <__udivmoddi4+0xdc>
 80011d2:	fab2 f682 	clz	r6, r2
 80011d6:	b14e      	cbz	r6, 80011ec <__udivmoddi4+0x30>
 80011d8:	f1c6 0320 	rsb	r3, r6, #32
 80011dc:	fa01 f806 	lsl.w	r8, r1, r6
 80011e0:	fa20 f303 	lsr.w	r3, r0, r3
 80011e4:	40b7      	lsls	r7, r6
 80011e6:	ea43 0808 	orr.w	r8, r3, r8
 80011ea:	40b4      	lsls	r4, r6
 80011ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011f0:	fbb8 f1fe 	udiv	r1, r8, lr
 80011f4:	fa1f fc87 	uxth.w	ip, r7
 80011f8:	fb0e 8811 	mls	r8, lr, r1, r8
 80011fc:	fb01 f20c 	mul.w	r2, r1, ip
 8001200:	0c23      	lsrs	r3, r4, #16
 8001202:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001206:	429a      	cmp	r2, r3
 8001208:	d909      	bls.n	800121e <__udivmoddi4+0x62>
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8001210:	f080 80eb 	bcs.w	80013ea <__udivmoddi4+0x22e>
 8001214:	429a      	cmp	r2, r3
 8001216:	f240 80e8 	bls.w	80013ea <__udivmoddi4+0x22e>
 800121a:	3902      	subs	r1, #2
 800121c:	443b      	add	r3, r7
 800121e:	1a9a      	subs	r2, r3, r2
 8001220:	fbb2 f0fe 	udiv	r0, r2, lr
 8001224:	fb0e 2210 	mls	r2, lr, r0, r2
 8001228:	fb00 fc0c 	mul.w	ip, r0, ip
 800122c:	b2a3      	uxth	r3, r4
 800122e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001232:	459c      	cmp	ip, r3
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x8e>
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800123c:	f080 80d7 	bcs.w	80013ee <__udivmoddi4+0x232>
 8001240:	459c      	cmp	ip, r3
 8001242:	f240 80d4 	bls.w	80013ee <__udivmoddi4+0x232>
 8001246:	443b      	add	r3, r7
 8001248:	3802      	subs	r0, #2
 800124a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800124e:	2100      	movs	r1, #0
 8001250:	eba3 030c 	sub.w	r3, r3, ip
 8001254:	b11d      	cbz	r5, 800125e <__udivmoddi4+0xa2>
 8001256:	2200      	movs	r2, #0
 8001258:	40f3      	lsrs	r3, r6
 800125a:	e9c5 3200 	strd	r3, r2, [r5]
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	428b      	cmp	r3, r1
 8001264:	d905      	bls.n	8001272 <__udivmoddi4+0xb6>
 8001266:	b10d      	cbz	r5, 800126c <__udivmoddi4+0xb0>
 8001268:	e9c5 0100 	strd	r0, r1, [r5]
 800126c:	2100      	movs	r1, #0
 800126e:	4608      	mov	r0, r1
 8001270:	e7f5      	b.n	800125e <__udivmoddi4+0xa2>
 8001272:	fab3 f183 	clz	r1, r3
 8001276:	2900      	cmp	r1, #0
 8001278:	d146      	bne.n	8001308 <__udivmoddi4+0x14c>
 800127a:	4573      	cmp	r3, lr
 800127c:	d302      	bcc.n	8001284 <__udivmoddi4+0xc8>
 800127e:	4282      	cmp	r2, r0
 8001280:	f200 8108 	bhi.w	8001494 <__udivmoddi4+0x2d8>
 8001284:	1a84      	subs	r4, r0, r2
 8001286:	eb6e 0203 	sbc.w	r2, lr, r3
 800128a:	2001      	movs	r0, #1
 800128c:	4690      	mov	r8, r2
 800128e:	2d00      	cmp	r5, #0
 8001290:	d0e5      	beq.n	800125e <__udivmoddi4+0xa2>
 8001292:	e9c5 4800 	strd	r4, r8, [r5]
 8001296:	e7e2      	b.n	800125e <__udivmoddi4+0xa2>
 8001298:	2a00      	cmp	r2, #0
 800129a:	f000 8091 	beq.w	80013c0 <__udivmoddi4+0x204>
 800129e:	fab2 f682 	clz	r6, r2
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	f040 80a5 	bne.w	80013f2 <__udivmoddi4+0x236>
 80012a8:	1a8a      	subs	r2, r1, r2
 80012aa:	2101      	movs	r1, #1
 80012ac:	0c03      	lsrs	r3, r0, #16
 80012ae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012b2:	b280      	uxth	r0, r0
 80012b4:	b2bc      	uxth	r4, r7
 80012b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80012ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80012be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012c2:	fb04 f20c 	mul.w	r2, r4, ip
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d907      	bls.n	80012da <__udivmoddi4+0x11e>
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80012d0:	d202      	bcs.n	80012d8 <__udivmoddi4+0x11c>
 80012d2:	429a      	cmp	r2, r3
 80012d4:	f200 80e3 	bhi.w	800149e <__udivmoddi4+0x2e2>
 80012d8:	46c4      	mov	ip, r8
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80012e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80012e4:	fb02 f404 	mul.w	r4, r2, r4
 80012e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80012ec:	429c      	cmp	r4, r3
 80012ee:	d907      	bls.n	8001300 <__udivmoddi4+0x144>
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80012f6:	d202      	bcs.n	80012fe <__udivmoddi4+0x142>
 80012f8:	429c      	cmp	r4, r3
 80012fa:	f200 80cd 	bhi.w	8001498 <__udivmoddi4+0x2dc>
 80012fe:	4602      	mov	r2, r0
 8001300:	1b1b      	subs	r3, r3, r4
 8001302:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001306:	e7a5      	b.n	8001254 <__udivmoddi4+0x98>
 8001308:	f1c1 0620 	rsb	r6, r1, #32
 800130c:	408b      	lsls	r3, r1
 800130e:	fa22 f706 	lsr.w	r7, r2, r6
 8001312:	431f      	orrs	r7, r3
 8001314:	fa2e fa06 	lsr.w	sl, lr, r6
 8001318:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800131c:	fbba f8f9 	udiv	r8, sl, r9
 8001320:	fa0e fe01 	lsl.w	lr, lr, r1
 8001324:	fa20 f306 	lsr.w	r3, r0, r6
 8001328:	fb09 aa18 	mls	sl, r9, r8, sl
 800132c:	fa1f fc87 	uxth.w	ip, r7
 8001330:	ea43 030e 	orr.w	r3, r3, lr
 8001334:	fa00 fe01 	lsl.w	lr, r0, r1
 8001338:	fb08 f00c 	mul.w	r0, r8, ip
 800133c:	0c1c      	lsrs	r4, r3, #16
 800133e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001342:	42a0      	cmp	r0, r4
 8001344:	fa02 f201 	lsl.w	r2, r2, r1
 8001348:	d90a      	bls.n	8001360 <__udivmoddi4+0x1a4>
 800134a:	193c      	adds	r4, r7, r4
 800134c:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 8001350:	f080 809e 	bcs.w	8001490 <__udivmoddi4+0x2d4>
 8001354:	42a0      	cmp	r0, r4
 8001356:	f240 809b 	bls.w	8001490 <__udivmoddi4+0x2d4>
 800135a:	f1a8 0802 	sub.w	r8, r8, #2
 800135e:	443c      	add	r4, r7
 8001360:	1a24      	subs	r4, r4, r0
 8001362:	b298      	uxth	r0, r3
 8001364:	fbb4 f3f9 	udiv	r3, r4, r9
 8001368:	fb09 4413 	mls	r4, r9, r3, r4
 800136c:	fb03 fc0c 	mul.w	ip, r3, ip
 8001370:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001374:	45a4      	cmp	ip, r4
 8001376:	d909      	bls.n	800138c <__udivmoddi4+0x1d0>
 8001378:	193c      	adds	r4, r7, r4
 800137a:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800137e:	f080 8085 	bcs.w	800148c <__udivmoddi4+0x2d0>
 8001382:	45a4      	cmp	ip, r4
 8001384:	f240 8082 	bls.w	800148c <__udivmoddi4+0x2d0>
 8001388:	3b02      	subs	r3, #2
 800138a:	443c      	add	r4, r7
 800138c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001390:	eba4 040c 	sub.w	r4, r4, ip
 8001394:	fba0 8c02 	umull	r8, ip, r0, r2
 8001398:	4564      	cmp	r4, ip
 800139a:	4643      	mov	r3, r8
 800139c:	46e1      	mov	r9, ip
 800139e:	d364      	bcc.n	800146a <__udivmoddi4+0x2ae>
 80013a0:	d061      	beq.n	8001466 <__udivmoddi4+0x2aa>
 80013a2:	b15d      	cbz	r5, 80013bc <__udivmoddi4+0x200>
 80013a4:	ebbe 0203 	subs.w	r2, lr, r3
 80013a8:	eb64 0409 	sbc.w	r4, r4, r9
 80013ac:	fa04 f606 	lsl.w	r6, r4, r6
 80013b0:	fa22 f301 	lsr.w	r3, r2, r1
 80013b4:	431e      	orrs	r6, r3
 80013b6:	40cc      	lsrs	r4, r1
 80013b8:	e9c5 6400 	strd	r6, r4, [r5]
 80013bc:	2100      	movs	r1, #0
 80013be:	e74e      	b.n	800125e <__udivmoddi4+0xa2>
 80013c0:	fbb1 fcf2 	udiv	ip, r1, r2
 80013c4:	0c01      	lsrs	r1, r0, #16
 80013c6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80013ca:	b280      	uxth	r0, r0
 80013cc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80013d0:	463b      	mov	r3, r7
 80013d2:	fbb1 f1f7 	udiv	r1, r1, r7
 80013d6:	4638      	mov	r0, r7
 80013d8:	463c      	mov	r4, r7
 80013da:	46b8      	mov	r8, r7
 80013dc:	46be      	mov	lr, r7
 80013de:	2620      	movs	r6, #32
 80013e0:	eba2 0208 	sub.w	r2, r2, r8
 80013e4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013e8:	e765      	b.n	80012b6 <__udivmoddi4+0xfa>
 80013ea:	4601      	mov	r1, r0
 80013ec:	e717      	b.n	800121e <__udivmoddi4+0x62>
 80013ee:	4610      	mov	r0, r2
 80013f0:	e72b      	b.n	800124a <__udivmoddi4+0x8e>
 80013f2:	f1c6 0120 	rsb	r1, r6, #32
 80013f6:	fa2e fc01 	lsr.w	ip, lr, r1
 80013fa:	40b7      	lsls	r7, r6
 80013fc:	fa0e fe06 	lsl.w	lr, lr, r6
 8001400:	fa20 f101 	lsr.w	r1, r0, r1
 8001404:	ea41 010e 	orr.w	r1, r1, lr
 8001408:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800140c:	fbbc f8fe 	udiv	r8, ip, lr
 8001410:	b2bc      	uxth	r4, r7
 8001412:	fb0e cc18 	mls	ip, lr, r8, ip
 8001416:	fb08 f904 	mul.w	r9, r8, r4
 800141a:	0c0a      	lsrs	r2, r1, #16
 800141c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001420:	40b0      	lsls	r0, r6
 8001422:	4591      	cmp	r9, r2
 8001424:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001428:	b280      	uxth	r0, r0
 800142a:	d93e      	bls.n	80014aa <__udivmoddi4+0x2ee>
 800142c:	18ba      	adds	r2, r7, r2
 800142e:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8001432:	d201      	bcs.n	8001438 <__udivmoddi4+0x27c>
 8001434:	4591      	cmp	r9, r2
 8001436:	d81f      	bhi.n	8001478 <__udivmoddi4+0x2bc>
 8001438:	eba2 0209 	sub.w	r2, r2, r9
 800143c:	fbb2 f9fe 	udiv	r9, r2, lr
 8001440:	fb09 f804 	mul.w	r8, r9, r4
 8001444:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001448:	b28a      	uxth	r2, r1
 800144a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800144e:	4542      	cmp	r2, r8
 8001450:	d229      	bcs.n	80014a6 <__udivmoddi4+0x2ea>
 8001452:	18ba      	adds	r2, r7, r2
 8001454:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8001458:	d2c2      	bcs.n	80013e0 <__udivmoddi4+0x224>
 800145a:	4542      	cmp	r2, r8
 800145c:	d2c0      	bcs.n	80013e0 <__udivmoddi4+0x224>
 800145e:	f1a9 0102 	sub.w	r1, r9, #2
 8001462:	443a      	add	r2, r7
 8001464:	e7bc      	b.n	80013e0 <__udivmoddi4+0x224>
 8001466:	45c6      	cmp	lr, r8
 8001468:	d29b      	bcs.n	80013a2 <__udivmoddi4+0x1e6>
 800146a:	ebb8 0302 	subs.w	r3, r8, r2
 800146e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001472:	3801      	subs	r0, #1
 8001474:	46e1      	mov	r9, ip
 8001476:	e794      	b.n	80013a2 <__udivmoddi4+0x1e6>
 8001478:	eba7 0909 	sub.w	r9, r7, r9
 800147c:	444a      	add	r2, r9
 800147e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001482:	f1a8 0c02 	sub.w	ip, r8, #2
 8001486:	fb09 f804 	mul.w	r8, r9, r4
 800148a:	e7db      	b.n	8001444 <__udivmoddi4+0x288>
 800148c:	4603      	mov	r3, r0
 800148e:	e77d      	b.n	800138c <__udivmoddi4+0x1d0>
 8001490:	46d0      	mov	r8, sl
 8001492:	e765      	b.n	8001360 <__udivmoddi4+0x1a4>
 8001494:	4608      	mov	r0, r1
 8001496:	e6fa      	b.n	800128e <__udivmoddi4+0xd2>
 8001498:	443b      	add	r3, r7
 800149a:	3a02      	subs	r2, #2
 800149c:	e730      	b.n	8001300 <__udivmoddi4+0x144>
 800149e:	f1ac 0c02 	sub.w	ip, ip, #2
 80014a2:	443b      	add	r3, r7
 80014a4:	e719      	b.n	80012da <__udivmoddi4+0x11e>
 80014a6:	4649      	mov	r1, r9
 80014a8:	e79a      	b.n	80013e0 <__udivmoddi4+0x224>
 80014aa:	eba2 0209 	sub.w	r2, r2, r9
 80014ae:	fbb2 f9fe 	udiv	r9, r2, lr
 80014b2:	46c4      	mov	ip, r8
 80014b4:	fb09 f804 	mul.w	r8, r9, r4
 80014b8:	e7c4      	b.n	8001444 <__udivmoddi4+0x288>
 80014ba:	bf00      	nop

080014bc <__aeabi_idiv0>:
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80014c0:	b5b0      	push	{r4, r5, r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	/* Initialize mems driver interface */
	dev_ctx.write_reg = platform_write;
 80014c6:	4b9a      	ldr	r3, [pc, #616]	@ (8001730 <main+0x270>)
 80014c8:	4a9a      	ldr	r2, [pc, #616]	@ (8001734 <main+0x274>)
 80014ca:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 80014cc:	4b98      	ldr	r3, [pc, #608]	@ (8001730 <main+0x270>)
 80014ce:	4a9a      	ldr	r2, [pc, #616]	@ (8001738 <main+0x278>)
 80014d0:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &hi2c1;
 80014d2:	4b97      	ldr	r3, [pc, #604]	@ (8001730 <main+0x270>)
 80014d4:	4a99      	ldr	r2, [pc, #612]	@ (800173c <main+0x27c>)
 80014d6:	60da      	str	r2, [r3, #12]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014d8:	f001 f837 	bl	800254a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014dc:	f000 f95e 	bl	800179c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	iks01a3_i2c_stuck_quirk();
 80014e0:	f000 fe06 	bl	80020f0 <iks01a3_i2c_stuck_quirk>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014e4:	f000 fa00 	bl	80018e8 <MX_GPIO_Init>
	MX_I2C1_Init();
 80014e8:	f000 f9a6 	bl	8001838 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80014ec:	f000 f9d2 	bl	8001894 <MX_USART2_UART_Init>
	//  MX_LSM6DSO_Init();

	/* USER CODE BEGIN 2 */
	KIN1_InitCycleCounter();
 80014f0:	4b93      	ldr	r3, [pc, #588]	@ (8001740 <main+0x280>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a92      	ldr	r2, [pc, #584]	@ (8001740 <main+0x280>)
 80014f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014fa:	6013      	str	r3, [r2, #0]
	KIN1_EnableCycleCounter();
 80014fc:	4b91      	ldr	r3, [pc, #580]	@ (8001744 <main+0x284>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a90      	ldr	r2, [pc, #576]	@ (8001744 <main+0x284>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]
	lsm6dso_initialize();
 8001508:	f000 fc9c 	bl	8001e44 <lsm6dso_initialize>
	if (NEAI_MODE) {
		neai_state = neai_classification_init(knowledge);
 800150c:	488e      	ldr	r0, [pc, #568]	@ (8001748 <main+0x288>)
 800150e:	f003 ff6d 	bl	80053ec <neai_classification_init>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	4b8d      	ldr	r3, [pc, #564]	@ (800174c <main+0x28c>)
 8001518:	701a      	strb	r2, [r3, #0]
		printf("Initialize NEAI Classification library. NEAI init return: %d.\r\n", neai_state);
 800151a:	4b8c      	ldr	r3, [pc, #560]	@ (800174c <main+0x28c>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4619      	mov	r1, r3
 8001520:	488b      	ldr	r0, [pc, #556]	@ (8001750 <main+0x290>)
 8001522:	f004 fe47 	bl	80061b4 <iprintf>

		if (neai_state != NEAI_OK) {
 8001526:	4b89      	ldr	r3, [pc, #548]	@ (800174c <main+0x28c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <main+0x74>
			printf("ERREUR: Échec d'initialisation NanoEdgeAI!\r\n");
 800152e:	4889      	ldr	r0, [pc, #548]	@ (8001754 <main+0x294>)
 8001530:	f004 fea8 	bl	8006284 <puts>
			// Gestion d'erreur appropriée
		}

		printf("SafeGuard - Système de détection de chute activé\r\n");
 8001534:	4888      	ldr	r0, [pc, #544]	@ (8001758 <main+0x298>)
 8001536:	f004 fea5 	bl	8006284 <puts>
		printf("Classes disponibles: %s, %s, %s\r\n",
 800153a:	4b88      	ldr	r3, [pc, #544]	@ (800175c <main+0x29c>)
 800153c:	6859      	ldr	r1, [r3, #4]
 800153e:	4b87      	ldr	r3, [pc, #540]	@ (800175c <main+0x29c>)
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	4b86      	ldr	r3, [pc, #536]	@ (800175c <main+0x29c>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	4886      	ldr	r0, [pc, #536]	@ (8001760 <main+0x2a0>)
 8001548:	f004 fe34 	bl	80061b4 <iprintf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		uint8_t wtm_flag = 0, status2 = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	72fb      	strb	r3, [r7, #11]
 8001550:	2300      	movs	r3, #0
 8001552:	70fb      	strb	r3, [r7, #3]
		uint16_t num = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	803b      	strh	r3, [r7, #0]
		if (drdy) {
 8001558:	4b82      	ldr	r3, [pc, #520]	@ (8001764 <main+0x2a4>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f4      	beq.n	800154c <main+0x8c>
			/* Reset data ready condition */
			drdy = 0;
 8001562:	4b80      	ldr	r3, [pc, #512]	@ (8001764 <main+0x2a4>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
			lsm6dso_read_reg(&dev_ctx, LSM6DSO_FIFO_STATUS2, &status2, 1);
 8001568:	1cfa      	adds	r2, r7, #3
 800156a:	2301      	movs	r3, #1
 800156c:	213b      	movs	r1, #59	@ 0x3b
 800156e:	4870      	ldr	r0, [pc, #448]	@ (8001730 <main+0x270>)
 8001570:	f003 fbde 	bl	8004d30 <lsm6dso_read_reg>
			wtm_flag = status2 >> 7;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	09db      	lsrs	r3, r3, #7
 8001578:	72fb      	strb	r3, [r7, #11]
			if (wtm_flag) {
 800157a:	7afb      	ldrb	r3, [r7, #11]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0e5      	beq.n	800154c <main+0x8c>
				lsm6dso_fifo_data_level_get(&dev_ctx, &num);
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	486a      	ldr	r0, [pc, #424]	@ (8001730 <main+0x270>)
 8001586:	f003 fe9d 	bl	80052c4 <lsm6dso_fifo_data_level_get>
				if (data_left < num) {
 800158a:	4b77      	ldr	r3, [pc, #476]	@ (8001768 <main+0x2a8>)
 800158c:	881a      	ldrh	r2, [r3, #0]
 800158e:	883b      	ldrh	r3, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d202      	bcs.n	800159a <main+0xda>
					num = data_left;
 8001594:	4b74      	ldr	r3, [pc, #464]	@ (8001768 <main+0x2a8>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	803b      	strh	r3, [r7, #0]
				}
				lsm6dso_get_buffer_from_fifo(num);
 800159a:	883b      	ldrh	r3, [r7, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fcad 	bl	8001efc <lsm6dso_get_buffer_from_fifo>
				data_left -= num;
 80015a2:	4b71      	ldr	r3, [pc, #452]	@ (8001768 <main+0x2a8>)
 80015a4:	881a      	ldrh	r2, [r3, #0]
 80015a6:	883b      	ldrh	r3, [r7, #0]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4b6e      	ldr	r3, [pc, #440]	@ (8001768 <main+0x2a8>)
 80015ae:	801a      	strh	r2, [r3, #0]
				number_read += num;
 80015b0:	4b6e      	ldr	r3, [pc, #440]	@ (800176c <main+0x2ac>)
 80015b2:	881a      	ldrh	r2, [r3, #0]
 80015b4:	883b      	ldrh	r3, [r7, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b6c      	ldr	r3, [pc, #432]	@ (800176c <main+0x2ac>)
 80015bc:	801a      	strh	r2, [r3, #0]
				if (data_left == 0) {
 80015be:	4b6a      	ldr	r3, [pc, #424]	@ (8001768 <main+0x2a8>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 80a4 	bne.w	8001710 <main+0x250>
					lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_BYPASS_MODE);
 80015c8:	2100      	movs	r1, #0
 80015ca:	4859      	ldr	r0, [pc, #356]	@ (8001730 <main+0x270>)
 80015cc:	f003 fe54 	bl	8005278 <lsm6dso_fifo_mode_set>
#if NEAI_MODE
					uint32_t cycles_cnt = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]

					// CHANGÉ: Classification au lieu de learn/detect
					KIN1_ResetCycleCounter();
 80015d4:	4b66      	ldr	r3, [pc, #408]	@ (8001770 <main+0x2b0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
					neai_state = neai_classification(neai_buffer, neai_output_buffer, &neai_id_class);
 80015da:	4a66      	ldr	r2, [pc, #408]	@ (8001774 <main+0x2b4>)
 80015dc:	4966      	ldr	r1, [pc, #408]	@ (8001778 <main+0x2b8>)
 80015de:	4867      	ldr	r0, [pc, #412]	@ (800177c <main+0x2bc>)
 80015e0:	f003 ffbe 	bl	8005560 <neai_classification>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b58      	ldr	r3, [pc, #352]	@ (800174c <main+0x28c>)
 80015ea:	701a      	strb	r2, [r3, #0]
					cycles_cnt = KIN1_GetCycleCounter();
 80015ec:	4b60      	ldr	r3, [pc, #384]	@ (8001770 <main+0x2b0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	607b      	str	r3, [r7, #4]
					neai_time = (cycles_cnt * 1000000.0) / HAL_RCC_GetSysClockFreq();
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7fe ff0e 	bl	8000414 <__aeabi_ui2d>
 80015f8:	a34b      	add	r3, pc, #300	@ (adr r3, 8001728 <main+0x268>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7fe ff83 	bl	8000508 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4614      	mov	r4, r2
 8001608:	461d      	mov	r5, r3
 800160a:	f002 ff85 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800160e:	4603      	mov	r3, r0
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe feff 	bl	8000414 <__aeabi_ui2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7ff f89d 	bl	800075c <__aeabi_ddiv>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fa45 	bl	8000ab8 <__aeabi_d2f>
 800162e:	4603      	mov	r3, r0
 8001630:	4a53      	ldr	r2, [pc, #332]	@ (8001780 <main+0x2c0>)
 8001632:	6013      	str	r3, [r2, #0]

					// Affichage des résultats
					printf("Classe détectée: %s (ID: %d, Confiance: %.1f%%).\r\n",
 8001634:	4b4f      	ldr	r3, [pc, #316]	@ (8001774 <main+0x2b4>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b48      	ldr	r3, [pc, #288]	@ (800175c <main+0x29c>)
 800163c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001640:	4b4c      	ldr	r3, [pc, #304]	@ (8001774 <main+0x2b4>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	461d      	mov	r5, r3
							id2class[neai_id_class], neai_id_class, neai_output_buffer[neai_id_class] * 100.0f);
 8001646:	4b4b      	ldr	r3, [pc, #300]	@ (8001774 <main+0x2b4>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4b4a      	ldr	r3, [pc, #296]	@ (8001778 <main+0x2b8>)
 800164e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001652:	494c      	ldr	r1, [pc, #304]	@ (8001784 <main+0x2c4>)
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fb8d 	bl	8000d74 <__aeabi_fmul>
 800165a:	4603      	mov	r3, r0
					printf("Classe détectée: %s (ID: %d, Confiance: %.1f%%).\r\n",
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fefb 	bl	8000458 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	e9cd 2300 	strd	r2, r3, [sp]
 800166a:	462a      	mov	r2, r5
 800166c:	4621      	mov	r1, r4
 800166e:	4846      	ldr	r0, [pc, #280]	@ (8001788 <main+0x2c8>)
 8001670:	f004 fda0 	bl	80061b4 <iprintf>
					printf("NEAI classification return: %d. Cycles: %ld = %.1f µs.\r\n",
 8001674:	4b35      	ldr	r3, [pc, #212]	@ (800174c <main+0x28c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461c      	mov	r4, r3
 800167a:	4b41      	ldr	r3, [pc, #260]	@ (8001780 <main+0x2c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe feea 	bl	8000458 <__aeabi_f2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	e9cd 2300 	strd	r2, r3, [sp]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4621      	mov	r1, r4
 8001690:	483e      	ldr	r0, [pc, #248]	@ (800178c <main+0x2cc>)
 8001692:	f004 fd8f 	bl	80061b4 <iprintf>
							neai_state, cycles_cnt, neai_time);

					// Affichage détaillé des probabilités
					printf("Probabilités: \r\n");
 8001696:	483e      	ldr	r0, [pc, #248]	@ (8001790 <main+0x2d0>)
 8001698:	f004 fdf4 	bl	8006284 <puts>
					for(int i = 1; i <= CLASS_NUMBER; i++) {
 800169c:	2301      	movs	r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e019      	b.n	80016d6 <main+0x216>
						printf("%s=%.1f%% ", id2class[i], neai_output_buffer[i-1] * 100.0f);
 80016a2:	4a2e      	ldr	r2, [pc, #184]	@ (800175c <main+0x29c>)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	4a32      	ldr	r2, [pc, #200]	@ (8001778 <main+0x2b8>)
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	4933      	ldr	r1, [pc, #204]	@ (8001784 <main+0x2c4>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fb5c 	bl	8000d74 <__aeabi_fmul>
 80016bc:	4603      	mov	r3, r0
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe feca 	bl	8000458 <__aeabi_f2d>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4621      	mov	r1, r4
 80016ca:	4832      	ldr	r0, [pc, #200]	@ (8001794 <main+0x2d4>)
 80016cc:	f004 fd72 	bl	80061b4 <iprintf>
					for(int i = 1; i <= CLASS_NUMBER; i++) {
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	3301      	adds	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	dde2      	ble.n	80016a2 <main+0x1e2>
					}
					printf("\r\n");
 80016dc:	482e      	ldr	r0, [pc, #184]	@ (8001798 <main+0x2d8>)
 80016de:	f004 fdd1 	bl	8006284 <puts>

					// AJOUTÉ: Vérification de détection de chute
					check_fall_detection();
 80016e2:	f000 f985 	bl	80019f0 <check_fall_detection>
						printf("%.3f ", neai_buffer[i]);
					}
					printf("\r\n");
#endif
					// Reset pour le prochain cycle
					data_left = (uint16_t) SAMPLES;
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <main+0x2a8>)
 80016e8:	2280      	movs	r2, #128	@ 0x80
 80016ea:	801a      	strh	r2, [r3, #0]
					number_read = 0;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <main+0x2ac>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	801a      	strh	r2, [r3, #0]
					memset(neai_buffer, 0x00, AXIS * SAMPLES * sizeof(float));
 80016f2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80016f6:	2100      	movs	r1, #0
 80016f8:	4820      	ldr	r0, [pc, #128]	@ (800177c <main+0x2bc>)
 80016fa:	f004 fea3 	bl	8006444 <memset>

					if (SAMPLES <= MAX_FIFO_SIZE) {
						lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 80016fe:	2180      	movs	r1, #128	@ 0x80
 8001700:	480b      	ldr	r0, [pc, #44]	@ (8001730 <main+0x270>)
 8001702:	f003 fd37 	bl	8005174 <lsm6dso_fifo_watermark_set>
					}
					else {
						lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
					}
					lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_FIFO_MODE);
 8001706:	2101      	movs	r1, #1
 8001708:	4809      	ldr	r0, [pc, #36]	@ (8001730 <main+0x270>)
 800170a:	f003 fdb5 	bl	8005278 <lsm6dso_fifo_mode_set>
 800170e:	e71d      	b.n	800154c <main+0x8c>
				}
				else if (data_left < MAX_FIFO_SIZE) {
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <main+0x2a8>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	2bff      	cmp	r3, #255	@ 0xff
 8001716:	f63f af19 	bhi.w	800154c <main+0x8c>
					lsm6dso_fifo_watermark_set(&dev_ctx, data_left);
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <main+0x2a8>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	4619      	mov	r1, r3
 8001720:	4803      	ldr	r0, [pc, #12]	@ (8001730 <main+0x270>)
 8001722:	f003 fd27 	bl	8005174 <lsm6dso_fifo_watermark_set>
	{
 8001726:	e711      	b.n	800154c <main+0x8c>
 8001728:	00000000 	.word	0x00000000
 800172c:	412e8480 	.word	0x412e8480
 8001730:	200008e0 	.word	0x200008e0
 8001734:	08001dd1 	.word	0x08001dd1
 8001738:	08001e0b 	.word	0x08001e0b
 800173c:	20000208 	.word	0x20000208
 8001740:	e000edfc 	.word	0xe000edfc
 8001744:	e0001000 	.word	0xe0001000
 8001748:	08008908 	.word	0x08008908
 800174c:	200002a8 	.word	0x200002a8
 8001750:	080084a4 	.word	0x080084a4
 8001754:	080084e4 	.word	0x080084e4
 8001758:	08008514 	.word	0x08008514
 800175c:	20000004 	.word	0x20000004
 8001760:	0800854c 	.word	0x0800854c
 8001764:	200002a9 	.word	0x200002a9
 8001768:	20000000 	.word	0x20000000
 800176c:	200002aa 	.word	0x200002aa
 8001770:	e0001004 	.word	0xe0001004
 8001774:	200002a6 	.word	0x200002a6
 8001778:	200008b4 	.word	0x200008b4
 800177c:	200002b4 	.word	0x200002b4
 8001780:	200002b0 	.word	0x200002b0
 8001784:	42c80000 	.word	0x42c80000
 8001788:	08008570 	.word	0x08008570
 800178c:	080085a8 	.word	0x080085a8
 8001790:	080085e4 	.word	0x080085e4
 8001794:	080085f8 	.word	0x080085f8
 8001798:	08008604 	.word	0x08008604

0800179c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b092      	sub	sp, #72	@ 0x48
 80017a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	2234      	movs	r2, #52	@ 0x34
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fe4a 	bl	8006444 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b0:	463b      	mov	r3, r7
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017be:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <SystemClock_Config+0x98>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80017c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001834 <SystemClock_Config+0x98>)
 80017c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017cc:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ce:	2302      	movs	r3, #2
 80017d0:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d2:	2301      	movs	r3, #1
 80017d4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d6:	2310      	movs	r3, #16
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017da:	2302      	movs	r3, #2
 80017dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017de:	2300      	movs	r3, #0
 80017e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80017e2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80017e6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80017e8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80017ec:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4618      	mov	r0, r3
 80017f4:	f002 fa2c 	bl	8003c50 <HAL_RCC_OscConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0x66>
	{
		Error_Handler();
 80017fe:	f000 fcc7 	bl	8002190 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001802:	230f      	movs	r3, #15
 8001804:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001806:	2303      	movs	r3, #3
 8001808:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001816:	463b      	mov	r3, r7
 8001818:	2101      	movs	r1, #1
 800181a:	4618      	mov	r0, r3
 800181c:	f002 fd48 	bl	80042b0 <HAL_RCC_ClockConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8001826:	f000 fcb3 	bl	8002190 <Error_Handler>
	}
}
 800182a:	bf00      	nop
 800182c:	3748      	adds	r7, #72	@ 0x48
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40007000 	.word	0x40007000

08001838 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800183c:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <MX_I2C1_Init+0x50>)
 800183e:	4a13      	ldr	r2, [pc, #76]	@ (800188c <MX_I2C1_Init+0x54>)
 8001840:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001842:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <MX_I2C1_Init+0x50>)
 8001844:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <MX_I2C1_Init+0x58>)
 8001846:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001848:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <MX_I2C1_Init+0x50>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <MX_I2C1_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <MX_I2C1_Init+0x50>)
 8001856:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800185a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800185c:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <MX_I2C1_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <MX_I2C1_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001868:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <MX_I2C1_Init+0x50>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <MX_I2C1_Init+0x50>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001874:	4804      	ldr	r0, [pc, #16]	@ (8001888 <MX_I2C1_Init+0x50>)
 8001876:	f001 f9c7 	bl	8002c08 <HAL_I2C_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001880:	f000 fc86 	bl	8002190 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000208 	.word	0x20000208
 800188c:	40005400 	.word	0x40005400
 8001890:	00061a80 	.word	0x00061a80

08001894 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 800189a:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <MX_USART2_UART_Init+0x50>)
 800189c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018cc:	f002 ffb6 	bl	800483c <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80018d6:	f000 fc5b 	bl	8002190 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000025c 	.word	0x2000025c
 80018e4:	40004400 	.word	0x40004400

080018e8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018fe:	4b37      	ldr	r3, [pc, #220]	@ (80019dc <MX_GPIO_Init+0xf4>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a36      	ldr	r2, [pc, #216]	@ (80019dc <MX_GPIO_Init+0xf4>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b34      	ldr	r3, [pc, #208]	@ (80019dc <MX_GPIO_Init+0xf4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	4b31      	ldr	r3, [pc, #196]	@ (80019dc <MX_GPIO_Init+0xf4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a30      	ldr	r2, [pc, #192]	@ (80019dc <MX_GPIO_Init+0xf4>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b2e      	ldr	r3, [pc, #184]	@ (80019dc <MX_GPIO_Init+0xf4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	4b2b      	ldr	r3, [pc, #172]	@ (80019dc <MX_GPIO_Init+0xf4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a2a      	ldr	r2, [pc, #168]	@ (80019dc <MX_GPIO_Init+0xf4>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b28      	ldr	r3, [pc, #160]	@ (80019dc <MX_GPIO_Init+0xf4>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	2120      	movs	r1, #32
 800194a:	4825      	ldr	r0, [pc, #148]	@ (80019e0 <MX_GPIO_Init+0xf8>)
 800194c:	f001 f92c 	bl	8002ba8 <HAL_GPIO_WritePin>

	/* Configure GPIO pins : USART2_TX_Pin USART2_RX_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3; // PA2: USART2_TX, PA3: USART2_RX
 8001950:	230c      	movs	r3, #12
 8001952:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195c:	2302      	movs	r3, #2
 800195e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001960:	2307      	movs	r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	4619      	mov	r1, r3
 800196a:	481d      	ldr	r0, [pc, #116]	@ (80019e0 <MX_GPIO_Init+0xf8>)
 800196c:	f000 ff8c 	bl	8002888 <HAL_GPIO_Init>

	/* Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001974:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001976:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800197a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	4817      	ldr	r0, [pc, #92]	@ (80019e4 <MX_GPIO_Init+0xfc>)
 8001988:	f000 ff7e 	bl	8002888 <HAL_GPIO_Init>

	/* Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800198c:	2320      	movs	r3, #32
 800198e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	480f      	ldr	r0, [pc, #60]	@ (80019e0 <MX_GPIO_Init+0xf8>)
 80019a4:	f000 ff70 	bl	8002888 <HAL_GPIO_Init>

	/* Configure GPIO pin : GYRO_ACC_INT_Pin */
	GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin;
 80019a8:	2320      	movs	r3, #32
 80019aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019b0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GYRO_ACC_INT_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	4619      	mov	r1, r3
 80019bc:	480a      	ldr	r0, [pc, #40]	@ (80019e8 <MX_GPIO_Init+0x100>)
 80019be:	f000 ff63 	bl	8002888 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	2017      	movs	r0, #23
 80019c8:	f000 ff27 	bl	800281a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019cc:	2017      	movs	r0, #23
 80019ce:	f000 ff40 	bl	8002852 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80019d2:	bf00      	nop
 80019d4:	3720      	adds	r7, #32
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020400 	.word	0x40020400
 80019ec:	00000000 	.word	0x00000000

080019f0 <check_fall_detection>:
/**
 * @brief  Vérifie si une chute a été détectée avec filtres anti-faux-positifs et anti-cascade
 * @retval None
 */
static void check_fall_detection(void)
{
 80019f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019f4:	b08e      	sub	sp, #56	@ 0x38
 80019f6:	af08      	add	r7, sp, #32
	uint32_t current_time = HAL_GetTick();
 80019f8:	f000 fe0c 	bl	8002614 <HAL_GetTick>
 80019fc:	6178      	str	r0, [r7, #20]

	// === FILTRE COOLDOWN GLOBAL ===
	// Éviter les détections multiples rapprochées
	if (current_time - last_fall_time < FALL_COOLDOWN_MS) {
 80019fe:	4b96      	ldr	r3, [pc, #600]	@ (8001c58 <check_fall_detection+0x268>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	f240 8180 	bls.w	8001d10 <check_fall_detection+0x320>
		return;
	}

	// === MODE POST-CHUTE ===
	// Ignorer toute détection pendant 10s après une chute confirmée
	if (post_fall_mode) {
 8001a10:	4b92      	ldr	r3, [pc, #584]	@ (8001c5c <check_fall_detection+0x26c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d019      	beq.n	8001a4c <check_fall_detection+0x5c>
		if (current_time - post_fall_start_time > POST_FALL_DURATION_MS) {
 8001a18:	4b91      	ldr	r3, [pc, #580]	@ (8001c60 <check_fall_detection+0x270>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d906      	bls.n	8001a36 <check_fall_detection+0x46>
			post_fall_mode = 0;
 8001a28:	4b8c      	ldr	r3, [pc, #560]	@ (8001c5c <check_fall_detection+0x26c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
			printf("🟢 Fin mode post-chute, surveillance normale reprise\r\n");
 8001a2e:	488d      	ldr	r0, [pc, #564]	@ (8001c64 <check_fall_detection+0x274>)
 8001a30:	f004 fc28 	bl	8006284 <puts>
 8001a34:	e00a      	b.n	8001a4c <check_fall_detection+0x5c>
		} else {
			printf("⏳ Mode post-chute actif (%lu/%d ms)\r\n",
 8001a36:	4b8a      	ldr	r3, [pc, #552]	@ (8001c60 <check_fall_detection+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001a42:	4619      	mov	r1, r3
 8001a44:	4888      	ldr	r0, [pc, #544]	@ (8001c68 <check_fall_detection+0x278>)
 8001a46:	f004 fbb5 	bl	80061b4 <iprintf>
					current_time - post_fall_start_time, POST_FALL_DURATION_MS);
			return;
 8001a4a:	e162      	b.n	8001d12 <check_fall_detection+0x322>
		}
	}

	float tomber_prob = neai_output_buffer[0] * 100.0f;
 8001a4c:	4b87      	ldr	r3, [pc, #540]	@ (8001c6c <check_fall_detection+0x27c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4987      	ldr	r1, [pc, #540]	@ (8001c70 <check_fall_detection+0x280>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f98e 	bl	8000d74 <__aeabi_fmul>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	613b      	str	r3, [r7, #16]
	float pas_bouger_prob = neai_output_buffer[1] * 100.0f;
 8001a5c:	4b83      	ldr	r3, [pc, #524]	@ (8001c6c <check_fall_detection+0x27c>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4983      	ldr	r1, [pc, #524]	@ (8001c70 <check_fall_detection+0x280>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f986 	bl	8000d74 <__aeabi_fmul>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60fb      	str	r3, [r7, #12]
	float marche_prob = neai_output_buffer[2] * 100.0f;
 8001a6c:	4b7f      	ldr	r3, [pc, #508]	@ (8001c6c <check_fall_detection+0x27c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	497f      	ldr	r1, [pc, #508]	@ (8001c70 <check_fall_detection+0x280>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f97e 	bl	8000d74 <__aeabi_fmul>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60bb      	str	r3, [r7, #8]

#ifdef DEBUG_FALL_DETECTION
	printf("DEBUG - Classe: %d (%s) | Tomber: %.1f%% | Pas_bouger: %.1f%% | Marche: %.1f%% | Count: %d\r\n",
 8001a7c:	4b7d      	ldr	r3, [pc, #500]	@ (8001c74 <check_fall_detection+0x284>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	469a      	mov	sl, r3
 8001a82:	4b7c      	ldr	r3, [pc, #496]	@ (8001c74 <check_fall_detection+0x284>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b7b      	ldr	r3, [pc, #492]	@ (8001c78 <check_fall_detection+0x288>)
 8001a8a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8001a8e:	6938      	ldr	r0, [r7, #16]
 8001a90:	f7fe fce2 	bl	8000458 <__aeabi_f2d>
 8001a94:	4604      	mov	r4, r0
 8001a96:	460d      	mov	r5, r1
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7fe fcdd 	bl	8000458 <__aeabi_f2d>
 8001a9e:	4680      	mov	r8, r0
 8001aa0:	4689      	mov	r9, r1
 8001aa2:	68b8      	ldr	r0, [r7, #8]
 8001aa4:	f7fe fcd8 	bl	8000458 <__aeabi_f2d>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4973      	ldr	r1, [pc, #460]	@ (8001c7c <check_fall_detection+0x28c>)
 8001aae:	7809      	ldrb	r1, [r1, #0]
 8001ab0:	9106      	str	r1, [sp, #24]
 8001ab2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ab6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001aba:	e9cd 4500 	strd	r4, r5, [sp]
 8001abe:	4632      	mov	r2, r6
 8001ac0:	4651      	mov	r1, sl
 8001ac2:	486f      	ldr	r0, [pc, #444]	@ (8001c80 <check_fall_detection+0x290>)
 8001ac4:	f004 fb76 	bl	80061b4 <iprintf>
			neai_id_class, id2class[neai_id_class], tomber_prob, pas_bouger_prob, marche_prob, consecutive_fall_count);
#endif

	// === FILTRE 1: SEUIL PLUS STRICT ===
	if (neai_id_class == 1 && tomber_prob > FALL_DETECTION_THRESHOLD_IMPACT) {
 8001ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c74 <check_fall_detection+0x284>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d167      	bne.n	8001ba0 <check_fall_detection+0x1b0>
 8001ad0:	496c      	ldr	r1, [pc, #432]	@ (8001c84 <check_fall_detection+0x294>)
 8001ad2:	6938      	ldr	r0, [r7, #16]
 8001ad4:	f7ff fb0a 	bl	80010ec <__aeabi_fcmpgt>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d060      	beq.n	8001ba0 <check_fall_detection+0x1b0>

		// Première détection de chute potentielle
		if (consecutive_fall_count == 0) {
 8001ade:	4b67      	ldr	r3, [pc, #412]	@ (8001c7c <check_fall_detection+0x28c>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <check_fall_detection+0xfc>
			first_fall_time = current_time;
 8001ae6:	4a68      	ldr	r2, [pc, #416]	@ (8001c88 <check_fall_detection+0x298>)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	6013      	str	r3, [r2, #0]
		}

		consecutive_fall_count++;
 8001aec:	4b63      	ldr	r3, [pc, #396]	@ (8001c7c <check_fall_detection+0x28c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b61      	ldr	r3, [pc, #388]	@ (8001c7c <check_fall_detection+0x28c>)
 8001af6:	701a      	strb	r2, [r3, #0]
		printf("🟡 Chute potentielle %d/%d (%.1f%% > %.1f%%)\r\n",
 8001af8:	4b60      	ldr	r3, [pc, #384]	@ (8001c7c <check_fall_detection+0x28c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461c      	mov	r4, r3
 8001afe:	6938      	ldr	r0, [r7, #16]
 8001b00:	f7fe fcaa 	bl	8000458 <__aeabi_f2d>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	a151      	add	r1, pc, #324	@ (adr r1, 8001c50 <check_fall_detection+0x260>)
 8001b0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b12:	e9cd 2300 	strd	r2, r3, [sp]
 8001b16:	2202      	movs	r2, #2
 8001b18:	4621      	mov	r1, r4
 8001b1a:	485c      	ldr	r0, [pc, #368]	@ (8001c8c <check_fall_detection+0x29c>)
 8001b1c:	f004 fb4a 	bl	80061b4 <iprintf>
				consecutive_fall_count, MIN_CONSECUTIVE_FALLS, tomber_prob, (float)FALL_DETECTION_THRESHOLD_IMPACT);

		// === FILTRE 2: DÉTECTIONS CONSÉCUTIVES ===
		if (consecutive_fall_count >= MIN_CONSECUTIVE_FALLS) {
 8001b20:	4b56      	ldr	r3, [pc, #344]	@ (8001c7c <check_fall_detection+0x28c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	f240 80d6 	bls.w	8001cd6 <check_fall_detection+0x2e6>

			// === FILTRE 3: DURÉE RAISONNABLE DE SÉQUENCE ===
			uint32_t sequence_duration = current_time - first_fall_time;
 8001b2a:	4b57      	ldr	r3, [pc, #348]	@ (8001c88 <check_fall_detection+0x298>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	607b      	str	r3, [r7, #4]
			if (sequence_duration <= MAX_FALL_SEQUENCE_TIME_MS) {
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d828      	bhi.n	8001b90 <check_fall_detection+0x1a0>

				// === VRAIE CHUTE DÉTECTÉE ===
				fall_detected = 1;
 8001b3e:	4b54      	ldr	r3, [pc, #336]	@ (8001c90 <check_fall_detection+0x2a0>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
				last_fall_time = current_time;
 8001b44:	4a44      	ldr	r2, [pc, #272]	@ (8001c58 <check_fall_detection+0x268>)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	6013      	str	r3, [r2, #0]
				consecutive_fall_count = 0; // Reset pour prochaine fois
 8001b4a:	4b4c      	ldr	r3, [pc, #304]	@ (8001c7c <check_fall_detection+0x28c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]

				printf("\n🚨 === ALERTE CHUTE CONFIRMÉE === 🚨\r\n");
 8001b50:	4850      	ldr	r0, [pc, #320]	@ (8001c94 <check_fall_detection+0x2a4>)
 8001b52:	f004 fb97 	bl	8006284 <puts>
				printf("Probabilité finale: %.1f%%\r\n", tomber_prob);
 8001b56:	6938      	ldr	r0, [r7, #16]
 8001b58:	f7fe fc7e 	bl	8000458 <__aeabi_f2d>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	484d      	ldr	r0, [pc, #308]	@ (8001c98 <check_fall_detection+0x2a8>)
 8001b62:	f004 fb27 	bl	80061b4 <iprintf>
				printf("Détections consécutives: %d\r\n", MIN_CONSECUTIVE_FALLS);
 8001b66:	2102      	movs	r1, #2
 8001b68:	484c      	ldr	r0, [pc, #304]	@ (8001c9c <check_fall_detection+0x2ac>)
 8001b6a:	f004 fb23 	bl	80061b4 <iprintf>
				printf("Durée séquence: %lu ms\r\n", sequence_duration);
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	484b      	ldr	r0, [pc, #300]	@ (8001ca0 <check_fall_detection+0x2b0>)
 8001b72:	f004 fb1f 	bl	80061b4 <iprintf>

				trigger_fall_alert();
 8001b76:	f000 f8df 	bl	8001d38 <trigger_fall_alert>

				// === ACTIVATION MODE POST-CHUTE ===
				post_fall_mode = 1;
 8001b7a:	4b38      	ldr	r3, [pc, #224]	@ (8001c5c <check_fall_detection+0x26c>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
				post_fall_start_time = current_time;
 8001b80:	4a37      	ldr	r2, [pc, #220]	@ (8001c60 <check_fall_detection+0x270>)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	6013      	str	r3, [r2, #0]
				printf("⏳ Mode post-chute activé pour %d secondes\r\n", POST_FALL_DURATION_MS/1000);
 8001b86:	210a      	movs	r1, #10
 8001b88:	4846      	ldr	r0, [pc, #280]	@ (8001ca4 <check_fall_detection+0x2b4>)
 8001b8a:	f004 fb13 	bl	80061b4 <iprintf>

				return; // Sortir immédiatement pour éviter cascade
 8001b8e:	e0c0      	b.n	8001d12 <check_fall_detection+0x322>

			} else {
				// Séquence trop longue = probablement faux positif
				printf("❌ Séquence trop longue (%lu ms), reset\r\n", sequence_duration);
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4845      	ldr	r0, [pc, #276]	@ (8001ca8 <check_fall_detection+0x2b8>)
 8001b94:	f004 fb0e 	bl	80061b4 <iprintf>
				consecutive_fall_count = 0;
 8001b98:	4b38      	ldr	r3, [pc, #224]	@ (8001c7c <check_fall_detection+0x28c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
		if (consecutive_fall_count >= MIN_CONSECUTIVE_FALLS) {
 8001b9e:	e09a      	b.n	8001cd6 <check_fall_detection+0x2e6>
			}
		}
	}
	// === RESET DU COMPTEUR ===
	else if (neai_id_class == 1 && tomber_prob < FALL_RECOVERY_THRESHOLD) {
 8001ba0:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <check_fall_detection+0x284>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d120      	bne.n	8001bea <check_fall_detection+0x1fa>
 8001ba8:	4940      	ldr	r1, [pc, #256]	@ (8001cac <check_fall_detection+0x2bc>)
 8001baa:	6938      	ldr	r0, [r7, #16]
 8001bac:	f7ff fa80 	bl	80010b0 <__aeabi_fcmplt>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d019      	beq.n	8001bea <check_fall_detection+0x1fa>
		// Tomber détecté mais confiance trop faible = reset
		if (consecutive_fall_count > 0) {
 8001bb6:	4b31      	ldr	r3, [pc, #196]	@ (8001c7c <check_fall_detection+0x28c>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d011      	beq.n	8001be2 <check_fall_detection+0x1f2>
			printf("🔄 Reset compteur chute (%.1f%% < %.1f%%)\r\n", tomber_prob, (float)FALL_RECOVERY_THRESHOLD);
 8001bbe:	6938      	ldr	r0, [r7, #16]
 8001bc0:	f7fe fc4a 	bl	8000458 <__aeabi_f2d>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	4938      	ldr	r1, [pc, #224]	@ (8001cb0 <check_fall_detection+0x2c0>)
 8001bce:	e9cd 0100 	strd	r0, r1, [sp]
 8001bd2:	4838      	ldr	r0, [pc, #224]	@ (8001cb4 <check_fall_detection+0x2c4>)
 8001bd4:	f004 faee 	bl	80061b4 <iprintf>
			false_positives_avoided++;
 8001bd8:	4b37      	ldr	r3, [pc, #220]	@ (8001cb8 <check_fall_detection+0x2c8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	4a36      	ldr	r2, [pc, #216]	@ (8001cb8 <check_fall_detection+0x2c8>)
 8001be0:	6013      	str	r3, [r2, #0]
		}
		consecutive_fall_count = 0;
 8001be2:	4b26      	ldr	r3, [pc, #152]	@ (8001c7c <check_fall_detection+0x28c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	e075      	b.n	8001cd6 <check_fall_detection+0x2e6>
	}
	else if (neai_id_class != 1) {
 8001bea:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <check_fall_detection+0x284>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d071      	beq.n	8001cd6 <check_fall_detection+0x2e6>
		// Autre classe détectée = reset total
		if (consecutive_fall_count > 0) {
 8001bf2:	4b22      	ldr	r3, [pc, #136]	@ (8001c7c <check_fall_detection+0x28c>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00e      	beq.n	8001c18 <check_fall_detection+0x228>
			printf("🔄 Reset compteur chute (classe: %s)\r\n", id2class[neai_id_class]);
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <check_fall_detection+0x284>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <check_fall_detection+0x288>)
 8001c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c06:	4619      	mov	r1, r3
 8001c08:	482c      	ldr	r0, [pc, #176]	@ (8001cbc <check_fall_detection+0x2cc>)
 8001c0a:	f004 fad3 	bl	80061b4 <iprintf>
			false_positives_avoided++;
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb8 <check_fall_detection+0x2c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a28      	ldr	r2, [pc, #160]	@ (8001cb8 <check_fall_detection+0x2c8>)
 8001c16:	6013      	str	r3, [r2, #0]
		}
		consecutive_fall_count = 0;
 8001c18:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <check_fall_detection+0x28c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]

		// Affichage status normal (seulement si pas en mode post-chute)
		switch(neai_id_class) {
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <check_fall_detection+0x284>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d002      	beq.n	8001c2c <check_fall_detection+0x23c>
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d009      	beq.n	8001c3e <check_fall_detection+0x24e>
 8001c2a:	e04d      	b.n	8001cc8 <check_fall_detection+0x2d8>
		case 2: // Pas bouger
			printf("🟢 Statut: Immobile (%.1f%%)\r\n", pas_bouger_prob);
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f7fe fc13 	bl	8000458 <__aeabi_f2d>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4822      	ldr	r0, [pc, #136]	@ (8001cc0 <check_fall_detection+0x2d0>)
 8001c38:	f004 fabc 	bl	80061b4 <iprintf>
			break;
 8001c3c:	e04b      	b.n	8001cd6 <check_fall_detection+0x2e6>
		case 3: // Marche
			printf("🔵 Statut: En mouvement/Marche (%.1f%%)\r\n", marche_prob);
 8001c3e:	68b8      	ldr	r0, [r7, #8]
 8001c40:	f7fe fc0a 	bl	8000458 <__aeabi_f2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	481e      	ldr	r0, [pc, #120]	@ (8001cc4 <check_fall_detection+0x2d4>)
 8001c4a:	f004 fab3 	bl	80061b4 <iprintf>
			break;
 8001c4e:	e042      	b.n	8001cd6 <check_fall_detection+0x2e6>
 8001c50:	00000000 	.word	0x00000000
 8001c54:	4057c000 	.word	0x4057c000
 8001c58:	200008c4 	.word	0x200008c4
 8001c5c:	200008d0 	.word	0x200008d0
 8001c60:	200008d4 	.word	0x200008d4
 8001c64:	08008608 	.word	0x08008608
 8001c68:	08008640 	.word	0x08008640
 8001c6c:	200008b4 	.word	0x200008b4
 8001c70:	42c80000 	.word	0x42c80000
 8001c74:	200002a6 	.word	0x200002a6
 8001c78:	20000004 	.word	0x20000004
 8001c7c:	200008c8 	.word	0x200008c8
 8001c80:	08008668 	.word	0x08008668
 8001c84:	42be0000 	.word	0x42be0000
 8001c88:	200008cc 	.word	0x200008cc
 8001c8c:	080086c8 	.word	0x080086c8
 8001c90:	200008c0 	.word	0x200008c0
 8001c94:	080086fc 	.word	0x080086fc
 8001c98:	08008728 	.word	0x08008728
 8001c9c:	08008748 	.word	0x08008748
 8001ca0:	08008768 	.word	0x08008768
 8001ca4:	08008784 	.word	0x08008784
 8001ca8:	080087b4 	.word	0x080087b4
 8001cac:	42700000 	.word	0x42700000
 8001cb0:	404e0000 	.word	0x404e0000
 8001cb4:	080087e0 	.word	0x080087e0
 8001cb8:	200008dc 	.word	0x200008dc
 8001cbc:	08008810 	.word	0x08008810
 8001cc0:	0800883c 	.word	0x0800883c
 8001cc4:	08008860 	.word	0x08008860
		default:
			printf("❓ Classe inconnue: %d\r\n", neai_id_class);
 8001cc8:	4b14      	ldr	r3, [pc, #80]	@ (8001d1c <check_fall_detection+0x32c>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4814      	ldr	r0, [pc, #80]	@ (8001d20 <check_fall_detection+0x330>)
 8001cd0:	f004 fa70 	bl	80061b4 <iprintf>
			break;
 8001cd4:	bf00      	nop
		}
	}

	// === TIMEOUT DE SÉQUENCE ===
	if (consecutive_fall_count > 0 && (current_time - first_fall_time) > MAX_FALL_SEQUENCE_TIME_MS) {
 8001cd6:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <check_fall_detection+0x334>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d012      	beq.n	8001d04 <check_fall_detection+0x314>
 8001cde:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <check_fall_detection+0x338>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d90a      	bls.n	8001d04 <check_fall_detection+0x314>
		printf("⏰ Timeout séquence chute, reset\r\n");
 8001cee:	480f      	ldr	r0, [pc, #60]	@ (8001d2c <check_fall_detection+0x33c>)
 8001cf0:	f004 fac8 	bl	8006284 <puts>
		false_positives_avoided++;
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <check_fall_detection+0x340>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <check_fall_detection+0x340>)
 8001cfc:	6013      	str	r3, [r2, #0]
		consecutive_fall_count = 0;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <check_fall_detection+0x334>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
	}

	total_classifications++;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <check_fall_detection+0x344>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <check_fall_detection+0x344>)
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e000      	b.n	8001d12 <check_fall_detection+0x322>
		return;
 8001d10:	bf00      	nop
}
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200002a6 	.word	0x200002a6
 8001d20:	0800888c 	.word	0x0800888c
 8001d24:	200008c8 	.word	0x200008c8
 8001d28:	200008cc 	.word	0x200008cc
 8001d2c:	080088a8 	.word	0x080088a8
 8001d30:	200008dc 	.word	0x200008dc
 8001d34:	200008d8 	.word	0x200008d8

08001d38 <trigger_fall_alert>:
/**
 * @brief  Déclenche l'alerte de chute (LED, buzzer, transmission, etc.)
 * @retval None
 */
static void trigger_fall_alert(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	// Allumer la LED d'alerte
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2120      	movs	r1, #32
 8001d40:	480b      	ldr	r0, [pc, #44]	@ (8001d70 <trigger_fall_alert+0x38>)
 8001d42:	f000 ff31 	bl	8002ba8 <HAL_GPIO_WritePin>
	// - Activation buzzer/sirène
	// - Envoi SMS/notification
	// - Transmission radio/LoRa/WiFi
	// - Logs dans mémoire

	printf("🚨 Procédures d'urgence activées!\r\n");
 8001d46:	480b      	ldr	r0, [pc, #44]	@ (8001d74 <trigger_fall_alert+0x3c>)
 8001d48:	f004 fa9c 	bl	8006284 <puts>
	printf("Timestamp: %lu ms\r\n", HAL_GetTick());
 8001d4c:	f000 fc62 	bl	8002614 <HAL_GetTick>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4619      	mov	r1, r3
 8001d54:	4808      	ldr	r0, [pc, #32]	@ (8001d78 <trigger_fall_alert+0x40>)
 8001d56:	f004 fa2d 	bl	80061b4 <iprintf>

	// Simulation temporisation d'alerte (à remplacer par vraie logique)
	HAL_Delay(1000);
 8001d5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d5e:	f000 fc63 	bl	8002628 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2120      	movs	r1, #32
 8001d66:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <trigger_fall_alert+0x38>)
 8001d68:	f000 ff1e 	bl	8002ba8 <HAL_GPIO_WritePin>
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40020000 	.word	0x40020000
 8001d74:	080088cc 	.word	0x080088cc
 8001d78:	080088f4 	.word	0x080088f4

08001d7c <__io_putchar>:
 * @brief  Redirecting stdout to USART2 which is connected on the STLINK port
 * @retval
 * @param
 */
int __io_putchar(int ch)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8001d8a:	f107 010c 	add.w	r1, r7, #12
 8001d8e:	230a      	movs	r3, #10
 8001d90:	2201      	movs	r2, #1
 8001d92:	4804      	ldr	r0, [pc, #16]	@ (8001da4 <__io_putchar+0x28>)
 8001d94:	f002 fda2 	bl	80048dc <HAL_UART_Transmit>
	return ch;
 8001d98:	687b      	ldr	r3, [r7, #4]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000025c 	.word	0x2000025c

08001da8 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line rising detection callback.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d103      	bne.n	8001dc0 <HAL_GPIO_EXTI_Callback+0x18>
	case GYRO_ACC_INT_Pin:
		drdy = 1;
 8001db8:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <HAL_GPIO_EXTI_Callback+0x24>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
		break;
 8001dbe:	bf00      	nop
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	200002a9 	.word	0x200002a9

08001dd0 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
		uint16_t len)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af04      	add	r7, sp, #16
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	460b      	mov	r3, r1
 8001dde:	72fb      	strb	r3, [r7, #11]
 8001de0:	4613      	mov	r3, r2
 8001de2:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Write(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001de4:	7afb      	ldrb	r3, [r7, #11]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dec:	9302      	str	r3, [sp, #8]
 8001dee:	893b      	ldrh	r3, [r7, #8]
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2301      	movs	r3, #1
 8001df8:	21d7      	movs	r1, #215	@ 0xd7
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f001 f848 	bl	8002e90 <HAL_I2C_Mem_Write>
	return 0;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b088      	sub	sp, #32
 8001e0e:	af04      	add	r7, sp, #16
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	461a      	mov	r2, r3
 8001e16:	460b      	mov	r3, r1
 8001e18:	72fb      	strb	r3, [r7, #11]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001e1e:	7afb      	ldrb	r3, [r7, #11]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	893b      	ldrh	r3, [r7, #8]
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2301      	movs	r3, #1
 8001e32:	21d7      	movs	r1, #215	@ 0xd7
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f001 f925 	bl	8003084 <HAL_I2C_Mem_Read>
	return 0;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <lsm6dso_initialize>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize()
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	lsm6dso_initialize_basics();
 8001e48:	f000 f80e 	bl	8001e68 <lsm6dso_initialize_basics>
#ifdef ACCELEROMETER
	/* Accelelerometer configuration */
	lsm6dso_xl_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 8001e4c:	2108      	movs	r1, #8
 8001e4e:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <lsm6dso_initialize+0x20>)
 8001e50:	f002 ffda 	bl	8004e08 <lsm6dso_xl_data_rate_set>
	lsm6dso_xl_full_scale_set(&dev_ctx, ACCELEROMETER_FS);
 8001e54:	2100      	movs	r1, #0
 8001e56:	4803      	ldr	r0, [pc, #12]	@ (8001e64 <lsm6dso_initialize+0x20>)
 8001e58:	f002 ffb0 	bl	8004dbc <lsm6dso_xl_full_scale_set>
#else
	/* Gyroscope configuration */
	lsm6dso_gy_data_rate_set(&dev_ctx, GYROSCOPE_ODR);
	lsm6dso_gy_full_scale_set(&dev_ctx, GYROSCOPE_FS);
#endif
	lsm6dso_initialize_fifo();
 8001e5c:	f000 f82c 	bl	8001eb8 <lsm6dso_initialize_fifo>
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200008e0 	.word	0x200008e0

08001e68 <lsm6dso_initialize_basics>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_basics()
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	/* Check device ID */
	whoamI = 0;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <lsm6dso_initialize_basics+0x44>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]

	do {
		HAL_Delay(20);
 8001e72:	2014      	movs	r0, #20
 8001e74:	f000 fbd8 	bl	8002628 <HAL_Delay>
		lsm6dso_device_id_get(&dev_ctx, &whoamI);
 8001e78:	490c      	ldr	r1, [pc, #48]	@ (8001eac <lsm6dso_initialize_basics+0x44>)
 8001e7a:	480d      	ldr	r0, [pc, #52]	@ (8001eb0 <lsm6dso_initialize_basics+0x48>)
 8001e7c:	f003 f8e4 	bl	8005048 <lsm6dso_device_id_get>
	} while(whoamI != LSM6DSO_ID);
 8001e80:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <lsm6dso_initialize_basics+0x44>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b6c      	cmp	r3, #108	@ 0x6c
 8001e86:	d1f4      	bne.n	8001e72 <lsm6dso_initialize_basics+0xa>

	/* Restore default configuration */
	lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4809      	ldr	r0, [pc, #36]	@ (8001eb0 <lsm6dso_initialize_basics+0x48>)
 8001e8c:	f003 f8ed 	bl	800506a <lsm6dso_reset_set>

	do {
		lsm6dso_reset_get(&dev_ctx, &rst);
 8001e90:	4908      	ldr	r1, [pc, #32]	@ (8001eb4 <lsm6dso_initialize_basics+0x4c>)
 8001e92:	4807      	ldr	r0, [pc, #28]	@ (8001eb0 <lsm6dso_initialize_basics+0x48>)
 8001e94:	f003 f90f 	bl	80050b6 <lsm6dso_reset_get>
	} while (rst);
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <lsm6dso_initialize_basics+0x4c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f7      	bne.n	8001e90 <lsm6dso_initialize_basics+0x28>

	/* Disable I3C interface */
	lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
 8001ea0:	2180      	movs	r1, #128	@ 0x80
 8001ea2:	4803      	ldr	r0, [pc, #12]	@ (8001eb0 <lsm6dso_initialize_basics+0x48>)
 8001ea4:	f003 f920 	bl	80050e8 <lsm6dso_i3c_disable_set>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200002a4 	.word	0x200002a4
 8001eb0:	200008e0 	.word	0x200008e0
 8001eb4:	200002a5 	.word	0x200002a5

08001eb8 <lsm6dso_initialize_fifo>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_fifo()
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
#ifdef ACCELEROMETER
	/* Batch odr config */
	lsm6dso_fifo_xl_batch_set(&dev_ctx, ACCELEROMETER_ODR);
 8001ebe:	2108      	movs	r1, #8
 8001ec0:	480d      	ldr	r0, [pc, #52]	@ (8001ef8 <lsm6dso_initialize_fifo+0x40>)
 8001ec2:	f003 f98d 	bl	80051e0 <lsm6dso_fifo_xl_batch_set>
	lsm6dso_fifo_gy_batch_set(&dev_ctx, 0);
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	480b      	ldr	r0, [pc, #44]	@ (8001ef8 <lsm6dso_initialize_fifo+0x40>)
 8001eca:	f003 f9af 	bl	800522c <lsm6dso_fifo_gy_batch_set>
	/* Batch odr config */
	lsm6dso_fifo_xl_batch_set(&dev_ctx, 0);
	lsm6dso_fifo_gy_batch_set(&dev_ctx, GYROSCOPE_ODR);
#endif
	/* FIFO MODE */
	lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_FIFO_MODE);
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4809      	ldr	r0, [pc, #36]	@ (8001ef8 <lsm6dso_initialize_fifo+0x40>)
 8001ed2:	f003 f9d1 	bl	8005278 <lsm6dso_fifo_mode_set>
	/* Watermark config */
	if (SAMPLES <= MAX_FIFO_SIZE) {
		lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 8001ed6:	2180      	movs	r1, #128	@ 0x80
 8001ed8:	4807      	ldr	r0, [pc, #28]	@ (8001ef8 <lsm6dso_initialize_fifo+0x40>)
 8001eda:	f003 f94b 	bl	8005174 <lsm6dso_fifo_watermark_set>
	}
	else {
		lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
	}
	/* Need to enable interrupt pin when wtm is reached */
	uint8_t ctrl = 0x08;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	71fb      	strb	r3, [r7, #7]
	lsm6dso_write_reg(&dev_ctx, LSM6DSO_INT1_CTRL, (uint8_t *) &ctrl, 1);
 8001ee2:	1dfa      	adds	r2, r7, #7
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	210d      	movs	r1, #13
 8001ee8:	4803      	ldr	r0, [pc, #12]	@ (8001ef8 <lsm6dso_initialize_fifo+0x40>)
 8001eea:	f002 ff39 	bl	8004d60 <lsm6dso_write_reg>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200008e0 	.word	0x200008e0

08001efc <lsm6dso_get_buffer_from_fifo>:
 *
 * @return No
 *
 */
static void lsm6dso_get_buffer_from_fifo(uint16_t nb)
{
 8001efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f00:	b087      	sub	sp, #28
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	80fb      	strh	r3, [r7, #6]
 8001f08:	466b      	mov	r3, sp
 8001f0a:	461e      	mov	r6, r3
	uint8_t reg_tag = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	74fb      	strb	r3, [r7, #19]
	uint8_t buff_tmp[nb * FIFO_WORD];
 8001f10:	88fa      	ldrh	r2, [r7, #6]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	1a99      	subs	r1, r3, r2
 8001f18:	1e4b      	subs	r3, r1, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	2300      	movs	r3, #0
 8001f20:	4690      	mov	r8, r2
 8001f22:	4699      	mov	r9, r3
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f38:	460a      	mov	r2, r1
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	4614      	mov	r4, r2
 8001f3e:	461d      	mov	r5, r3
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	00eb      	lsls	r3, r5, #3
 8001f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f4e:	00e2      	lsls	r2, r4, #3
 8001f50:	460b      	mov	r3, r1
 8001f52:	3307      	adds	r3, #7
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	ebad 0d03 	sub.w	sp, sp, r3
 8001f5c:	466b      	mov	r3, sp
 8001f5e:	3300      	adds	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
	 * The data stored in FIFO are accessible from dedicated registers and each FIFO word is composed of 7
	 * bytes: one tag byte (FIFO_DATA_OUT_TAG (78h)), in order to identify the sensor, and 6 bytes of fixed data
	 * (FIFO_DATA_OUT registers from (79h) to (7Eh))
	 * So, here we read the fifo in only one transaction in order to save time
	 */
	lsm6dso_read_reg(&dev_ctx, LSM6DSO_FIFO_DATA_OUT_TAG, buff_tmp, nb * FIFO_WORD);
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	461a      	mov	r2, r3
 8001f66:	00d2      	lsls	r2, r2, #3
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	2178      	movs	r1, #120	@ 0x78
 8001f70:	484b      	ldr	r0, [pc, #300]	@ (80020a0 <lsm6dso_get_buffer_from_fifo+0x1a4>)
 8001f72:	f002 fedd 	bl	8004d30 <lsm6dso_read_reg>
	for (uint16_t i = 0; i < nb; i++) {
 8001f76:	2300      	movs	r3, #0
 8001f78:	82fb      	strh	r3, [r7, #22]
 8001f7a:	e079      	b.n	8002070 <lsm6dso_get_buffer_from_fifo+0x174>
		/* According to the datasheet, the TAG_SENSOR is the 5 MSB of the FIFO_DATA_OUT_TAG register, so we shift 3 bits to the right */
		reg_tag = buff_tmp[FIFO_WORD * i] >> 3;
 8001f7c:	8afa      	ldrh	r2, [r7, #22]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	08db      	lsrs	r3, r3, #3
 8001f8a:	74fb      	strb	r3, [r7, #19]
		if(reg_tag == LSM6DSO_XL_NC_TAG) {
 8001f8c:	7cfb      	ldrb	r3, [r7, #19]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d134      	bne.n	8001ffc <lsm6dso_get_buffer_from_fifo+0x100>
			for(uint8_t j = 0; j < AXIS; j++) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	757b      	strb	r3, [r7, #21]
 8001f96:	e02d      	b.n	8001ff4 <lsm6dso_get_buffer_from_fifo+0xf8>
				neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i) + j] = lsm6dso_convert_accel_data_to_mg((uint16_t) buff_tmp[(FIFO_WORD * i) + (2 * j) + 2] << 8 | buff_tmp[(FIFO_WORD * i) + (2 * j) + 1]);
 8001f98:	8afa      	ldrh	r2, [r7, #22]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	1a9a      	subs	r2, r3, r2
 8001fa0:	7d7b      	ldrb	r3, [r7, #21]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	b21b      	sxth	r3, r3
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	b219      	sxth	r1, r3
 8001fb2:	8afa      	ldrh	r2, [r7, #22]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	1a9a      	subs	r2, r3, r2
 8001fba:	7d7b      	ldrb	r3, [r7, #21]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	5cd3      	ldrb	r3, [r2, r3]
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	b219      	sxth	r1, r3
 8001fcc:	4b35      	ldr	r3, [pc, #212]	@ (80020a4 <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	8afb      	ldrh	r3, [r7, #22]
 8001fd4:	441a      	add	r2, r3
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	441a      	add	r2, r3
 8001fdc:	7d7b      	ldrb	r3, [r7, #21]
 8001fde:	18d4      	adds	r4, r2, r3
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	f000 f871 	bl	80020c8 <lsm6dso_convert_accel_data_to_mg>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4a2f      	ldr	r2, [pc, #188]	@ (80020a8 <lsm6dso_get_buffer_from_fifo+0x1ac>)
 8001fea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for(uint8_t j = 0; j < AXIS; j++) {
 8001fee:	7d7b      	ldrb	r3, [r7, #21]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	757b      	strb	r3, [r7, #21]
 8001ff4:	7d7b      	ldrb	r3, [r7, #21]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d9ce      	bls.n	8001f98 <lsm6dso_get_buffer_from_fifo+0x9c>
 8001ffa:	e036      	b.n	800206a <lsm6dso_get_buffer_from_fifo+0x16e>
			}
		}
		else if(reg_tag == LSM6DSO_GYRO_NC_TAG) {
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d133      	bne.n	800206a <lsm6dso_get_buffer_from_fifo+0x16e>
			for(uint8_t j = 0; j < AXIS; j++) {
 8002002:	2300      	movs	r3, #0
 8002004:	753b      	strb	r3, [r7, #20]
 8002006:	e02d      	b.n	8002064 <lsm6dso_get_buffer_from_fifo+0x168>
				neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i) + j] = lsm6dso_convert_gyro_data_to_mdps((uint16_t) buff_tmp[(FIFO_WORD * i) + (2 * j) + 2] << 8 | buff_tmp[(FIFO_WORD * i) + (2 * j) + 1]);
 8002008:	8afa      	ldrh	r2, [r7, #22]
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	1a9a      	subs	r2, r3, r2
 8002010:	7d3b      	ldrb	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	3302      	adds	r3, #2
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	5cd3      	ldrb	r3, [r2, r3]
 800201c:	b21b      	sxth	r3, r3
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b219      	sxth	r1, r3
 8002022:	8afa      	ldrh	r2, [r7, #22]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9a      	subs	r2, r3, r2
 800202a:	7d3b      	ldrb	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	3301      	adds	r3, #1
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	5cd3      	ldrb	r3, [r2, r3]
 8002036:	b21b      	sxth	r3, r3
 8002038:	430b      	orrs	r3, r1
 800203a:	b219      	sxth	r1, r3
 800203c:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <lsm6dso_get_buffer_from_fifo+0x1a8>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	8afb      	ldrh	r3, [r7, #22]
 8002044:	441a      	add	r2, r3
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	441a      	add	r2, r3
 800204c:	7d3b      	ldrb	r3, [r7, #20]
 800204e:	18d4      	adds	r4, r2, r3
 8002050:	4608      	mov	r0, r1
 8002052:	f000 f82b 	bl	80020ac <lsm6dso_convert_gyro_data_to_mdps>
 8002056:	4603      	mov	r3, r0
 8002058:	4a13      	ldr	r2, [pc, #76]	@ (80020a8 <lsm6dso_get_buffer_from_fifo+0x1ac>)
 800205a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for(uint8_t j = 0; j < AXIS; j++) {
 800205e:	7d3b      	ldrb	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	753b      	strb	r3, [r7, #20]
 8002064:	7d3b      	ldrb	r3, [r7, #20]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d9ce      	bls.n	8002008 <lsm6dso_get_buffer_from_fifo+0x10c>
	for (uint16_t i = 0; i < nb; i++) {
 800206a:	8afb      	ldrh	r3, [r7, #22]
 800206c:	3301      	adds	r3, #1
 800206e:	82fb      	strh	r3, [r7, #22]
 8002070:	8afa      	ldrh	r2, [r7, #22]
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	429a      	cmp	r2, r3
 8002076:	d381      	bcc.n	8001f7c <lsm6dso_get_buffer_from_fifo+0x80>
			}
		}
	}
	neai_buffer_ptr += nb;
 8002078:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <lsm6dso_get_buffer_from_fifo+0x1a8>)
 800207a:	881a      	ldrh	r2, [r3, #0]
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	4413      	add	r3, r2
 8002080:	b29a      	uxth	r2, r3
 8002082:	4b08      	ldr	r3, [pc, #32]	@ (80020a4 <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8002084:	801a      	strh	r2, [r3, #0]
	if (neai_buffer_ptr == SAMPLES) {
 8002086:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	2b80      	cmp	r3, #128	@ 0x80
 800208c:	d102      	bne.n	8002094 <lsm6dso_get_buffer_from_fifo+0x198>
		neai_buffer_ptr = 0;
 800208e:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8002090:	2200      	movs	r2, #0
 8002092:	801a      	strh	r2, [r3, #0]
 8002094:	46b5      	mov	sp, r6
	}
}
 8002096:	bf00      	nop
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020a0:	200008e0 	.word	0x200008e0
 80020a4:	200002ac 	.word	0x200002ac
 80020a8:	200002b4 	.word	0x200002b4

080020ac <lsm6dso_convert_gyro_data_to_mdps>:
 *
 * @return The converted value in milli degrees per second (mdps)
 *
 */
static float lsm6dso_convert_gyro_data_to_mdps(int16_t gyro_raw_data)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	80fb      	strh	r3, [r7, #6]
	float gyro_data_mdps = 0.0;
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
	default:
		gyro_data_mdps = 0.0;
		break;
	}
#endif
	return gyro_data_mdps;
 80020bc:	68fb      	ldr	r3, [r7, #12]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <lsm6dso_convert_accel_data_to_mg>:
 *
 * @return The converted value in milli-G' (mg)
 *
 */
static float lsm6dso_convert_accel_data_to_mg(int16_t accel_raw_data)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
	float accel_data_mg = 0.0;
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
#ifdef ACCELEROMETER
	switch (ACCELEROMETER_FS)
	{
	case LSM6DSO_2g:
		accel_data_mg = lsm6dso_from_fs2_to_mg(accel_raw_data);
 80020d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 fe57 	bl	8004d90 <lsm6dso_from_fs2_to_mg>
 80020e2:	60f8      	str	r0, [r7, #12]
		break;
 80020e4:	bf00      	nop
	default:
		accel_data_mg = 0.0;
		break;
	}
#endif
	return accel_data_mg;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <iks01a3_i2c_stuck_quirk>:
 *
 * As a workaround we simply configure the SCL pin as a GPIO and send a burst
 * of pulses to bring the sensor back to an idle state.
 */
static void iks01a3_i2c_stuck_quirk(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f6:	f107 0308 	add.w	r3, r7, #8
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]
 8002104:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	4b20      	ldr	r3, [pc, #128]	@ (8002188 <iks01a3_i2c_stuck_quirk+0x98>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a1f      	ldr	r2, [pc, #124]	@ (8002188 <iks01a3_i2c_stuck_quirk+0x98>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	61d3      	str	r3, [r2, #28]
 8002112:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <iks01a3_i2c_stuck_quirk+0x98>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]

	/* Configure SCL as a GPIO */
	GPIO_InitStruct.Pin = SCL_PIN;
 800211e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002122:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002124:	2301      	movs	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002130:	2304      	movs	r3, #4
 8002132:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct);
 8002134:	f107 0308 	add.w	r3, r7, #8
 8002138:	4619      	mov	r1, r3
 800213a:	4814      	ldr	r0, [pc, #80]	@ (800218c <iks01a3_i2c_stuck_quirk+0x9c>)
 800213c:	f000 fba4 	bl	8002888 <HAL_GPIO_Init>

	/* Send a burst of pulses on SCL */
	int pulses = 20;
 8002140:	2314      	movs	r3, #20
 8002142:	61fb      	str	r3, [r7, #28]
	do {
		HAL_Delay(1);
 8002144:	2001      	movs	r0, #1
 8002146:	f000 fa6f 	bl	8002628 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002150:	480e      	ldr	r0, [pc, #56]	@ (800218c <iks01a3_i2c_stuck_quirk+0x9c>)
 8002152:	f000 fd29 	bl	8002ba8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002156:	2001      	movs	r0, #1
 8002158:	f000 fa66 	bl	8002628 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002162:	480a      	ldr	r0, [pc, #40]	@ (800218c <iks01a3_i2c_stuck_quirk+0x9c>)
 8002164:	f000 fd20 	bl	8002ba8 <HAL_GPIO_WritePin>
	} while (pulses--);
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	1e5a      	subs	r2, r3, #1
 800216c:	61fa      	str	r2, [r7, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1e8      	bne.n	8002144 <iks01a3_i2c_stuck_quirk+0x54>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8002172:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <iks01a3_i2c_stuck_quirk+0x98>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a04      	ldr	r2, [pc, #16]	@ (8002188 <iks01a3_i2c_stuck_quirk+0x98>)
 8002178:	f023 0302 	bic.w	r3, r3, #2
 800217c:	61d3      	str	r3, [r2, #28]
}
 800217e:	bf00      	nop
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40020400 	.word	0x40020400

08002190 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002194:	b672      	cpsid	i
}
 8002196:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <Error_Handler+0x8>

0800219c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <HAL_MspInit+0x5c>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	4a14      	ldr	r2, [pc, #80]	@ (80021f8 <HAL_MspInit+0x5c>)
 80021a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80021ac:	6253      	str	r3, [r2, #36]	@ 0x24
 80021ae:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <HAL_MspInit+0x5c>)
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ba:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <HAL_MspInit+0x5c>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a0e      	ldr	r2, [pc, #56]	@ (80021f8 <HAL_MspInit+0x5c>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6213      	str	r3, [r2, #32]
 80021c6:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <HAL_MspInit+0x5c>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <HAL_MspInit+0x5c>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	4a08      	ldr	r2, [pc, #32]	@ (80021f8 <HAL_MspInit+0x5c>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	6253      	str	r3, [r2, #36]	@ 0x24
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_MspInit+0x5c>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021ea:	2007      	movs	r0, #7
 80021ec:	f000 fb0a 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40023800 	.word	0x40023800

080021fc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	@ 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a17      	ldr	r2, [pc, #92]	@ (8002278 <HAL_I2C_MspInit+0x7c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d128      	bne.n	8002270 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	4b17      	ldr	r3, [pc, #92]	@ (800227c <HAL_I2C_MspInit+0x80>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a16      	ldr	r2, [pc, #88]	@ (800227c <HAL_I2C_MspInit+0x80>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b14      	ldr	r3, [pc, #80]	@ (800227c <HAL_I2C_MspInit+0x80>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002236:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800223a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223c:	2312      	movs	r3, #18
 800223e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002248:	2304      	movs	r3, #4
 800224a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	480b      	ldr	r0, [pc, #44]	@ (8002280 <HAL_I2C_MspInit+0x84>)
 8002254:	f000 fb18 	bl	8002888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002258:	4b08      	ldr	r3, [pc, #32]	@ (800227c <HAL_I2C_MspInit+0x80>)
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	4a07      	ldr	r2, [pc, #28]	@ (800227c <HAL_I2C_MspInit+0x80>)
 800225e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002262:	6253      	str	r3, [r2, #36]	@ 0x24
 8002264:	4b05      	ldr	r3, [pc, #20]	@ (800227c <HAL_I2C_MspInit+0x80>)
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002270:	bf00      	nop
 8002272:	3728      	adds	r7, #40	@ 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40005400 	.word	0x40005400
 800227c:	40023800 	.word	0x40023800
 8002280:	40020400 	.word	0x40020400

08002284 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	@ 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a17      	ldr	r2, [pc, #92]	@ (8002300 <HAL_UART_MspInit+0x7c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d127      	bne.n	80022f6 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a6:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <HAL_UART_MspInit+0x80>)
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	4a16      	ldr	r2, [pc, #88]	@ (8002304 <HAL_UART_MspInit+0x80>)
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b0:	6253      	str	r3, [r2, #36]	@ 0x24
 80022b2:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <HAL_UART_MspInit+0x80>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_UART_MspInit+0x80>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	4a10      	ldr	r2, [pc, #64]	@ (8002304 <HAL_UART_MspInit+0x80>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	61d3      	str	r3, [r2, #28]
 80022ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <HAL_UART_MspInit+0x80>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022d6:	230c      	movs	r3, #12
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e6:	2307      	movs	r3, #7
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	4805      	ldr	r0, [pc, #20]	@ (8002308 <HAL_UART_MspInit+0x84>)
 80022f2:	f000 fac9 	bl	8002888 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80022f6:	bf00      	nop
 80022f8:	3728      	adds	r7, #40	@ 0x28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40004400 	.word	0x40004400
 8002304:	40023800 	.word	0x40023800
 8002308:	40020000 	.word	0x40020000

0800230c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <NMI_Handler+0x4>

08002314 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <HardFault_Handler+0x4>

0800231c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <MemManage_Handler+0x4>

08002324 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <BusFault_Handler+0x4>

0800232c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <UsageFault_Handler+0x4>

08002334 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800235c:	f000 f948 	bl	80025f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_ACC_INT_Pin);
 8002368:	2020      	movs	r0, #32
 800236a:	f000 fc35 	bl	8002bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}

08002372 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  return 1;
 8002376:	2301      	movs	r3, #1
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <_kill>:

int _kill(int pid, int sig)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800238a:	f004 f8ad 	bl	80064e8 <__errno>
 800238e:	4603      	mov	r3, r0
 8002390:	2216      	movs	r2, #22
 8002392:	601a      	str	r2, [r3, #0]
  return -1;
 8002394:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_exit>:

void _exit (int status)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ffe7 	bl	8002380 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023b2:	bf00      	nop
 80023b4:	e7fd      	b.n	80023b2 <_exit+0x12>

080023b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e00a      	b.n	80023de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023c8:	f3af 8000 	nop.w
 80023cc:	4601      	mov	r1, r0
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	60ba      	str	r2, [r7, #8]
 80023d4:	b2ca      	uxtb	r2, r1
 80023d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3301      	adds	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	dbf0      	blt.n	80023c8 <_read+0x12>
  }

  return len;
 80023e6:	687b      	ldr	r3, [r7, #4]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e009      	b.n	8002416 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	60ba      	str	r2, [r7, #8]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fcb6 	bl	8001d7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	dbf1      	blt.n	8002402 <_write+0x12>
  }
  return len;
 800241e:	687b      	ldr	r3, [r7, #4]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_close>:

int _close(int file)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002430:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800244e:	605a      	str	r2, [r3, #4]
  return 0;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <_isatty>:

int _isatty(int file)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002464:	2301      	movs	r3, #1
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002490:	4a14      	ldr	r2, [pc, #80]	@ (80024e4 <_sbrk+0x5c>)
 8002492:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <_sbrk+0x60>)
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800249c:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a4:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <_sbrk+0x64>)
 80024a6:	4a12      	ldr	r2, [pc, #72]	@ (80024f0 <_sbrk+0x68>)
 80024a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024aa:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <_sbrk+0x64>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d207      	bcs.n	80024c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b8:	f004 f816 	bl	80064e8 <__errno>
 80024bc:	4603      	mov	r3, r0
 80024be:	220c      	movs	r2, #12
 80024c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024c6:	e009      	b.n	80024dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	4a05      	ldr	r2, [pc, #20]	@ (80024ec <_sbrk+0x64>)
 80024d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024da:	68fb      	ldr	r3, [r7, #12]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20014000 	.word	0x20014000
 80024e8:	00000400 	.word	0x00000400
 80024ec:	200008f0 	.word	0x200008f0
 80024f0:	20001260 	.word	0x20001260

080024f4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002500:	f7ff fff8 	bl	80024f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002504:	480b      	ldr	r0, [pc, #44]	@ (8002534 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002506:	490c      	ldr	r1, [pc, #48]	@ (8002538 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002508:	4a0c      	ldr	r2, [pc, #48]	@ (800253c <LoopFillZerobss+0x16>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800250c:	e002      	b.n	8002514 <LoopCopyDataInit>

0800250e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002512:	3304      	adds	r3, #4

08002514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002518:	d3f9      	bcc.n	800250e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251a:	4a09      	ldr	r2, [pc, #36]	@ (8002540 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800251c:	4c09      	ldr	r4, [pc, #36]	@ (8002544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002520:	e001      	b.n	8002526 <LoopFillZerobss>

08002522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002524:	3204      	adds	r2, #4

08002526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002528:	d3fb      	bcc.n	8002522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800252a:	f003 ffe3 	bl	80064f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800252e:	f7fe ffc7 	bl	80014c0 <main>
  bx lr
 8002532:	4770      	bx	lr
  ldr r0, =_sdata
 8002534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002538:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800253c:	0800a72c 	.word	0x0800a72c
  ldr r2, =_sbss
 8002540:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002544:	2000125c 	.word	0x2000125c

08002548 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002548:	e7fe      	b.n	8002548 <ADC1_IRQHandler>

0800254a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002554:	2003      	movs	r0, #3
 8002556:	f000 f955 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800255a:	2000      	movs	r0, #0
 800255c:	f000 f80e 	bl	800257c <HAL_InitTick>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	71fb      	strb	r3, [r7, #7]
 800256a:	e001      	b.n	8002570 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800256c:	f7ff fe16 	bl	800219c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002570:	79fb      	ldrb	r3, [r7, #7]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002588:	4b16      	ldr	r3, [pc, #88]	@ (80025e4 <HAL_InitTick+0x68>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d022      	beq.n	80025d6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002590:	4b15      	ldr	r3, [pc, #84]	@ (80025e8 <HAL_InitTick+0x6c>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b13      	ldr	r3, [pc, #76]	@ (80025e4 <HAL_InitTick+0x68>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800259c:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 f962 	bl	800286e <HAL_SYSTICK_Config>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10f      	bne.n	80025d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	d809      	bhi.n	80025ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b6:	2200      	movs	r2, #0
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025be:	f000 f92c 	bl	800281a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025c2:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <HAL_InitTick+0x70>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	e007      	b.n	80025da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	e004      	b.n	80025da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e001      	b.n	80025da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2000001c 	.word	0x2000001c
 80025e8:	20000014 	.word	0x20000014
 80025ec:	20000018 	.word	0x20000018

080025f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f4:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_IncTick+0x1c>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <HAL_IncTick+0x20>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	4a03      	ldr	r2, [pc, #12]	@ (800260c <HAL_IncTick+0x1c>)
 8002600:	6013      	str	r3, [r2, #0]
}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	200008f4 	.word	0x200008f4
 8002610:	2000001c 	.word	0x2000001c

08002614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return uwTick;
 8002618:	4b02      	ldr	r3, [pc, #8]	@ (8002624 <HAL_GetTick+0x10>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	200008f4 	.word	0x200008f4

08002628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7ff fff0 	bl	8002614 <HAL_GetTick>
 8002634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002640:	d004      	beq.n	800264c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002642:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <HAL_Delay+0x40>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4413      	add	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800264c:	bf00      	nop
 800264e:	f7ff ffe1 	bl	8002614 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	429a      	cmp	r2, r3
 800265c:	d8f7      	bhi.n	800264e <HAL_Delay+0x26>
  {
  }
}
 800265e:	bf00      	nop
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	2000001c 	.word	0x2000001c

0800266c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800267c:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002694:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800269c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269e:	4a04      	ldr	r2, [pc, #16]	@ (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	60d3      	str	r3, [r2, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b8:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <__NVIC_GetPriorityGrouping+0x18>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0307 	and.w	r3, r3, #7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db0b      	blt.n	80026fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4906      	ldr	r1, [pc, #24]	@ (8002704 <__NVIC_EnableIRQ+0x34>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2001      	movs	r0, #1
 80026f2:	fa00 f202 	lsl.w	r2, r0, r2
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	@ (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	@ (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	@ 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	@ 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027e4:	f7ff ff90 	bl	8002708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff2d 	bl	800266c <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff42 	bl	80026b4 <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff90 	bl	800275c <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5f 	bl	8002708 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff35 	bl	80026d0 <__NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffa2 	bl	80027c0 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800289e:	e160      	b.n	8002b62 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2101      	movs	r1, #1
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	4013      	ands	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8152 	beq.w	8002b5c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d005      	beq.n	80028d0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d130      	bne.n	8002932 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002906:	2201      	movs	r2, #1
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 0201 	and.w	r2, r3, #1
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b03      	cmp	r3, #3
 800293c:	d017      	beq.n	800296e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d123      	bne.n	80029c2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	08da      	lsrs	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3208      	adds	r2, #8
 8002982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002986:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	220f      	movs	r2, #15
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	08da      	lsrs	r2, r3, #3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3208      	adds	r2, #8
 80029bc:	6939      	ldr	r1, [r7, #16]
 80029be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	2203      	movs	r2, #3
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0203 	and.w	r2, r3, #3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80ac 	beq.w	8002b5c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a04:	4b5e      	ldr	r3, [pc, #376]	@ (8002b80 <HAL_GPIO_Init+0x2f8>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	4a5d      	ldr	r2, [pc, #372]	@ (8002b80 <HAL_GPIO_Init+0x2f8>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6213      	str	r3, [r2, #32]
 8002a10:	4b5b      	ldr	r3, [pc, #364]	@ (8002b80 <HAL_GPIO_Init+0x2f8>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a1c:	4a59      	ldr	r2, [pc, #356]	@ (8002b84 <HAL_GPIO_Init+0x2fc>)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	220f      	movs	r2, #15
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a51      	ldr	r2, [pc, #324]	@ (8002b88 <HAL_GPIO_Init+0x300>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d025      	beq.n	8002a94 <HAL_GPIO_Init+0x20c>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a50      	ldr	r2, [pc, #320]	@ (8002b8c <HAL_GPIO_Init+0x304>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d01f      	beq.n	8002a90 <HAL_GPIO_Init+0x208>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a4f      	ldr	r2, [pc, #316]	@ (8002b90 <HAL_GPIO_Init+0x308>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d019      	beq.n	8002a8c <HAL_GPIO_Init+0x204>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a4e      	ldr	r2, [pc, #312]	@ (8002b94 <HAL_GPIO_Init+0x30c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d013      	beq.n	8002a88 <HAL_GPIO_Init+0x200>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a4d      	ldr	r2, [pc, #308]	@ (8002b98 <HAL_GPIO_Init+0x310>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00d      	beq.n	8002a84 <HAL_GPIO_Init+0x1fc>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a4c      	ldr	r2, [pc, #304]	@ (8002b9c <HAL_GPIO_Init+0x314>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d007      	beq.n	8002a80 <HAL_GPIO_Init+0x1f8>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba0 <HAL_GPIO_Init+0x318>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d101      	bne.n	8002a7c <HAL_GPIO_Init+0x1f4>
 8002a78:	2306      	movs	r3, #6
 8002a7a:	e00c      	b.n	8002a96 <HAL_GPIO_Init+0x20e>
 8002a7c:	2307      	movs	r3, #7
 8002a7e:	e00a      	b.n	8002a96 <HAL_GPIO_Init+0x20e>
 8002a80:	2305      	movs	r3, #5
 8002a82:	e008      	b.n	8002a96 <HAL_GPIO_Init+0x20e>
 8002a84:	2304      	movs	r3, #4
 8002a86:	e006      	b.n	8002a96 <HAL_GPIO_Init+0x20e>
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e004      	b.n	8002a96 <HAL_GPIO_Init+0x20e>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e002      	b.n	8002a96 <HAL_GPIO_Init+0x20e>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <HAL_GPIO_Init+0x20e>
 8002a94:	2300      	movs	r3, #0
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	f002 0203 	and.w	r2, r2, #3
 8002a9c:	0092      	lsls	r2, r2, #2
 8002a9e:	4093      	lsls	r3, r2
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002aa6:	4937      	ldr	r1, [pc, #220]	@ (8002b84 <HAL_GPIO_Init+0x2fc>)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba4 <HAL_GPIO_Init+0x31c>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ad8:	4a32      	ldr	r2, [pc, #200]	@ (8002ba4 <HAL_GPIO_Init+0x31c>)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ade:	4b31      	ldr	r3, [pc, #196]	@ (8002ba4 <HAL_GPIO_Init+0x31c>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b02:	4a28      	ldr	r2, [pc, #160]	@ (8002ba4 <HAL_GPIO_Init+0x31c>)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b08:	4b26      	ldr	r3, [pc, #152]	@ (8002ba4 <HAL_GPIO_Init+0x31c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba4 <HAL_GPIO_Init+0x31c>)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba4 <HAL_GPIO_Init+0x31c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b56:	4a13      	ldr	r2, [pc, #76]	@ (8002ba4 <HAL_GPIO_Init+0x31c>)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f47f ae97 	bne.w	80028a0 <HAL_GPIO_Init+0x18>
  }
}
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40010000 	.word	0x40010000
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40020800 	.word	0x40020800
 8002b94:	40020c00 	.word	0x40020c00
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40021400 	.word	0x40021400
 8002ba0:	40021800 	.word	0x40021800
 8002ba4:	40010400 	.word	0x40010400

08002ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bb8:	787b      	ldrb	r3, [r7, #1]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bbe:	887a      	ldrh	r2, [r7, #2]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002bc4:	e003      	b.n	8002bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002bc6:	887b      	ldrh	r3, [r7, #2]
 8002bc8:	041a      	lsls	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	619a      	str	r2, [r3, #24]
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002be2:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bee:	4a05      	ldr	r2, [pc, #20]	@ (8002c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f8d6 	bl	8001da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40010400 	.word	0x40010400

08002c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e12b      	b.n	8002e72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fae4 	bl	80021fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2224      	movs	r2, #36	@ 0x24
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c6c:	f001 fd5e 	bl	800472c <HAL_RCC_GetPCLK1Freq>
 8002c70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4a81      	ldr	r2, [pc, #516]	@ (8002e7c <HAL_I2C_Init+0x274>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d807      	bhi.n	8002c8c <HAL_I2C_Init+0x84>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a80      	ldr	r2, [pc, #512]	@ (8002e80 <HAL_I2C_Init+0x278>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	bf94      	ite	ls
 8002c84:	2301      	movls	r3, #1
 8002c86:	2300      	movhi	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e006      	b.n	8002c9a <HAL_I2C_Init+0x92>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a7d      	ldr	r2, [pc, #500]	@ (8002e84 <HAL_I2C_Init+0x27c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	bf94      	ite	ls
 8002c94:	2301      	movls	r3, #1
 8002c96:	2300      	movhi	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e0e7      	b.n	8002e72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4a78      	ldr	r2, [pc, #480]	@ (8002e88 <HAL_I2C_Init+0x280>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	0c9b      	lsrs	r3, r3, #18
 8002cac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e7c <HAL_I2C_Init+0x274>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d802      	bhi.n	8002cdc <HAL_I2C_Init+0xd4>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	e009      	b.n	8002cf0 <HAL_I2C_Init+0xe8>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	4a69      	ldr	r2, [pc, #420]	@ (8002e8c <HAL_I2C_Init+0x284>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	3301      	adds	r3, #1
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	495c      	ldr	r1, [pc, #368]	@ (8002e7c <HAL_I2C_Init+0x274>)
 8002d0c:	428b      	cmp	r3, r1
 8002d0e:	d819      	bhi.n	8002d44 <HAL_I2C_Init+0x13c>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1e59      	subs	r1, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d1e:	1c59      	adds	r1, r3, #1
 8002d20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d24:	400b      	ands	r3, r1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_I2C_Init+0x138>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1e59      	subs	r1, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3e:	e051      	b.n	8002de4 <HAL_I2C_Init+0x1dc>
 8002d40:	2304      	movs	r3, #4
 8002d42:	e04f      	b.n	8002de4 <HAL_I2C_Init+0x1dc>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d111      	bne.n	8002d70 <HAL_I2C_Init+0x168>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1e58      	subs	r0, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	440b      	add	r3, r1
 8002d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e012      	b.n	8002d96 <HAL_I2C_Init+0x18e>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e58      	subs	r0, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	0099      	lsls	r1, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Init+0x196>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e022      	b.n	8002de4 <HAL_I2C_Init+0x1dc>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10e      	bne.n	8002dc4 <HAL_I2C_Init+0x1bc>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1e58      	subs	r0, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	440b      	add	r3, r1
 8002db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dc2:	e00f      	b.n	8002de4 <HAL_I2C_Init+0x1dc>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1e58      	subs	r0, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	0099      	lsls	r1, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	6809      	ldr	r1, [r1, #0]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69da      	ldr	r2, [r3, #28]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6911      	ldr	r1, [r2, #16]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68d2      	ldr	r2, [r2, #12]
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	000186a0 	.word	0x000186a0
 8002e80:	001e847f 	.word	0x001e847f
 8002e84:	003d08ff 	.word	0x003d08ff
 8002e88:	431bde83 	.word	0x431bde83
 8002e8c:	10624dd3 	.word	0x10624dd3

08002e90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	4608      	mov	r0, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	817b      	strh	r3, [r7, #10]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	813b      	strh	r3, [r7, #8]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eaa:	f7ff fbb3 	bl	8002614 <HAL_GetTick>
 8002eae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	f040 80d9 	bne.w	8003070 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2319      	movs	r3, #25
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	496d      	ldr	r1, [pc, #436]	@ (800307c <HAL_I2C_Mem_Write+0x1ec>)
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fc8b 	bl	80037e4 <I2C_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e0cc      	b.n	8003072 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_I2C_Mem_Write+0x56>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e0c5      	b.n	8003072 <HAL_I2C_Mem_Write+0x1e2>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d007      	beq.n	8002f0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2221      	movs	r2, #33	@ 0x21
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2240      	movs	r2, #64	@ 0x40
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a3a      	ldr	r2, [r7, #32]
 8002f36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4a4d      	ldr	r2, [pc, #308]	@ (8003080 <HAL_I2C_Mem_Write+0x1f0>)
 8002f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f4e:	88f8      	ldrh	r0, [r7, #6]
 8002f50:	893a      	ldrh	r2, [r7, #8]
 8002f52:	8979      	ldrh	r1, [r7, #10]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fac2 	bl	80034e8 <I2C_RequestMemoryWrite>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d052      	beq.n	8003010 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e081      	b.n	8003072 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fd50 	bl	8003a18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00d      	beq.n	8002f9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d107      	bne.n	8002f96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e06b      	b.n	8003072 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	781a      	ldrb	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d11b      	bne.n	8003010 <HAL_I2C_Mem_Write+0x180>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d017      	beq.n	8003010 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	781a      	ldrb	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1aa      	bne.n	8002f6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fd43 	bl	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00d      	beq.n	8003044 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	2b04      	cmp	r3, #4
 800302e:	d107      	bne.n	8003040 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800303e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e016      	b.n	8003072 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	00100002 	.word	0x00100002
 8003080:	ffff0000 	.word	0xffff0000

08003084 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08c      	sub	sp, #48	@ 0x30
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	4608      	mov	r0, r1
 800308e:	4611      	mov	r1, r2
 8003090:	461a      	mov	r2, r3
 8003092:	4603      	mov	r3, r0
 8003094:	817b      	strh	r3, [r7, #10]
 8003096:	460b      	mov	r3, r1
 8003098:	813b      	strh	r3, [r7, #8]
 800309a:	4613      	mov	r3, r2
 800309c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800309e:	f7ff fab9 	bl	8002614 <HAL_GetTick>
 80030a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	f040 8214 	bne.w	80034da <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	2319      	movs	r3, #25
 80030b8:	2201      	movs	r2, #1
 80030ba:	497b      	ldr	r1, [pc, #492]	@ (80032a8 <HAL_I2C_Mem_Read+0x224>)
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fb91 	bl	80037e4 <I2C_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
 80030ca:	e207      	b.n	80034dc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_I2C_Mem_Read+0x56>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e200      	b.n	80034dc <HAL_I2C_Mem_Read+0x458>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d007      	beq.n	8003100 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800310e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2222      	movs	r2, #34	@ 0x22
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2240      	movs	r2, #64	@ 0x40
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800312a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003130:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a5b      	ldr	r2, [pc, #364]	@ (80032ac <HAL_I2C_Mem_Read+0x228>)
 8003140:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003142:	88f8      	ldrh	r0, [r7, #6]
 8003144:	893a      	ldrh	r2, [r7, #8]
 8003146:	8979      	ldrh	r1, [r7, #10]
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4603      	mov	r3, r0
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fa5e 	bl	8003614 <I2C_RequestMemoryRead>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e1bc      	b.n	80034dc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003166:	2b00      	cmp	r3, #0
 8003168:	d113      	bne.n	8003192 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800316a:	2300      	movs	r3, #0
 800316c:	623b      	str	r3, [r7, #32]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	623b      	str	r3, [r7, #32]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	623b      	str	r3, [r7, #32]
 800317e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e190      	b.n	80034b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003196:	2b01      	cmp	r3, #1
 8003198:	d11b      	bne.n	80031d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e170      	b.n	80034b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d11b      	bne.n	8003212 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	e150      	b.n	80034b4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003228:	e144      	b.n	80034b4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322e:	2b03      	cmp	r3, #3
 8003230:	f200 80f1 	bhi.w	8003416 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003238:	2b01      	cmp	r3, #1
 800323a:	d123      	bne.n	8003284 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 fc79 	bl	8003b38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e145      	b.n	80034dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003282:	e117      	b.n	80034b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003288:	2b02      	cmp	r3, #2
 800328a:	d14e      	bne.n	800332a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003292:	2200      	movs	r2, #0
 8003294:	4906      	ldr	r1, [pc, #24]	@ (80032b0 <HAL_I2C_Mem_Read+0x22c>)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 faa4 	bl	80037e4 <I2C_WaitOnFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e11a      	b.n	80034dc <HAL_I2C_Mem_Read+0x458>
 80032a6:	bf00      	nop
 80032a8:	00100002 	.word	0x00100002
 80032ac:	ffff0000 	.word	0xffff0000
 80032b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003328:	e0c4      	b.n	80034b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003330:	2200      	movs	r2, #0
 8003332:	496c      	ldr	r1, [pc, #432]	@ (80034e4 <HAL_I2C_Mem_Read+0x460>)
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 fa55 	bl	80037e4 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0cb      	b.n	80034dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338c:	2200      	movs	r2, #0
 800338e:	4955      	ldr	r1, [pc, #340]	@ (80034e4 <HAL_I2C_Mem_Read+0x460>)
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fa27 	bl	80037e4 <I2C_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e09d      	b.n	80034dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003414:	e04e      	b.n	80034b4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003418:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fb8c 	bl	8003b38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e058      	b.n	80034dc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d124      	bne.n	80034b4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346e:	2b03      	cmp	r3, #3
 8003470:	d107      	bne.n	8003482 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003480:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f47f aeb6 	bne.w	800322a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e000      	b.n	80034dc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80034da:	2302      	movs	r3, #2
  }
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3728      	adds	r7, #40	@ 0x28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	00010004 	.word	0x00010004

080034e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	4608      	mov	r0, r1
 80034f2:	4611      	mov	r1, r2
 80034f4:	461a      	mov	r2, r3
 80034f6:	4603      	mov	r3, r0
 80034f8:	817b      	strh	r3, [r7, #10]
 80034fa:	460b      	mov	r3, r1
 80034fc:	813b      	strh	r3, [r7, #8]
 80034fe:	4613      	mov	r3, r2
 8003500:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003510:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	2200      	movs	r2, #0
 800351a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f960 	bl	80037e4 <I2C_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003538:	d103      	bne.n	8003542 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003540:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e05f      	b.n	8003606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003546:	897b      	ldrh	r3, [r7, #10]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003554:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	6a3a      	ldr	r2, [r7, #32]
 800355a:	492d      	ldr	r1, [pc, #180]	@ (8003610 <I2C_RequestMemoryWrite+0x128>)
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f9bb 	bl	80038d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e04c      	b.n	8003606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003584:	6a39      	ldr	r1, [r7, #32]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fa46 	bl	8003a18 <I2C_WaitOnTXEFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00d      	beq.n	80035ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	2b04      	cmp	r3, #4
 8003598:	d107      	bne.n	80035aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e02b      	b.n	8003606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035b4:	893b      	ldrh	r3, [r7, #8]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	611a      	str	r2, [r3, #16]
 80035be:	e021      	b.n	8003604 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035c0:	893b      	ldrh	r3, [r7, #8]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d0:	6a39      	ldr	r1, [r7, #32]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fa20 	bl	8003a18 <I2C_WaitOnTXEFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00d      	beq.n	80035fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d107      	bne.n	80035f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e005      	b.n	8003606 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035fa:	893b      	ldrh	r3, [r7, #8]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	00010002 	.word	0x00010002

08003614 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	4608      	mov	r0, r1
 800361e:	4611      	mov	r1, r2
 8003620:	461a      	mov	r2, r3
 8003622:	4603      	mov	r3, r0
 8003624:	817b      	strh	r3, [r7, #10]
 8003626:	460b      	mov	r3, r1
 8003628:	813b      	strh	r3, [r7, #8]
 800362a:	4613      	mov	r3, r2
 800362c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800363c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800364c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	2200      	movs	r2, #0
 8003656:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f8c2 	bl	80037e4 <I2C_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003670:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003674:	d103      	bne.n	800367e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800367c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0aa      	b.n	80037d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003682:	897b      	ldrh	r3, [r7, #10]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003690:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	6a3a      	ldr	r2, [r7, #32]
 8003696:	4952      	ldr	r1, [pc, #328]	@ (80037e0 <I2C_RequestMemoryRead+0x1cc>)
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f91d 	bl	80038d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e097      	b.n	80037d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c0:	6a39      	ldr	r1, [r7, #32]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f9a8 	bl	8003a18 <I2C_WaitOnTXEFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d107      	bne.n	80036e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e076      	b.n	80037d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036f0:	893b      	ldrh	r3, [r7, #8]
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	611a      	str	r2, [r3, #16]
 80036fa:	e021      	b.n	8003740 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036fc:	893b      	ldrh	r3, [r7, #8]
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	b29b      	uxth	r3, r3
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800370a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370c:	6a39      	ldr	r1, [r7, #32]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 f982 	bl	8003a18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	2b04      	cmp	r3, #4
 8003720:	d107      	bne.n	8003732 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003730:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e050      	b.n	80037d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003736:	893b      	ldrh	r3, [r7, #8]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003742:	6a39      	ldr	r1, [r7, #32]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f967 	bl	8003a18 <I2C_WaitOnTXEFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003754:	2b04      	cmp	r3, #4
 8003756:	d107      	bne.n	8003768 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003766:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e035      	b.n	80037d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800377a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	2200      	movs	r2, #0
 8003784:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f82b 	bl	80037e4 <I2C_WaitOnFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00d      	beq.n	80037b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037a2:	d103      	bne.n	80037ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e013      	b.n	80037d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037b0:	897b      	ldrh	r3, [r7, #10]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	6a3a      	ldr	r2, [r7, #32]
 80037c4:	4906      	ldr	r1, [pc, #24]	@ (80037e0 <I2C_RequestMemoryRead+0x1cc>)
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f886 	bl	80038d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	00010002 	.word	0x00010002

080037e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037f4:	e048      	b.n	8003888 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037fc:	d044      	beq.n	8003888 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7fe ff09 	bl	8002614 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <I2C_WaitOnFlagUntilTimeout+0x30>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d139      	bne.n	8003888 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	0c1b      	lsrs	r3, r3, #16
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d10d      	bne.n	800383a <I2C_WaitOnFlagUntilTimeout+0x56>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	43da      	mvns	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	e00c      	b.n	8003854 <I2C_WaitOnFlagUntilTimeout+0x70>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	43da      	mvns	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	4013      	ands	r3, r2
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf0c      	ite	eq
 800384c:	2301      	moveq	r3, #1
 800384e:	2300      	movne	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	429a      	cmp	r2, r3
 8003858:	d116      	bne.n	8003888 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e023      	b.n	80038d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	0c1b      	lsrs	r3, r3, #16
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d10d      	bne.n	80038ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	43da      	mvns	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	e00c      	b.n	80038c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	43da      	mvns	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4013      	ands	r3, r2
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d093      	beq.n	80037f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038e6:	e071      	b.n	80039cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f6:	d123      	bne.n	8003940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003906:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003910:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	f043 0204 	orr.w	r2, r3, #4
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e067      	b.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003946:	d041      	beq.n	80039cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003948:	f7fe fe64 	bl	8002614 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	d302      	bcc.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d136      	bne.n	80039cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	d10c      	bne.n	8003982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	43da      	mvns	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4013      	ands	r3, r2
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	bf14      	ite	ne
 800397a:	2301      	movne	r3, #1
 800397c:	2300      	moveq	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	e00b      	b.n	800399a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	43da      	mvns	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	4013      	ands	r3, r2
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d016      	beq.n	80039cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e021      	b.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	0c1b      	lsrs	r3, r3, #16
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d10c      	bne.n	80039f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	43da      	mvns	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4013      	ands	r3, r2
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e00b      	b.n	8003a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	43da      	mvns	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4013      	ands	r3, r2
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf14      	ite	ne
 8003a02:	2301      	movne	r3, #1
 8003a04:	2300      	moveq	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f47f af6d 	bne.w	80038e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a24:	e034      	b.n	8003a90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f8e3 	bl	8003bf2 <I2C_IsAcknowledgeFailed>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e034      	b.n	8003aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a3c:	d028      	beq.n	8003a90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3e:	f7fe fde9 	bl	8002614 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d302      	bcc.n	8003a54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d11d      	bne.n	8003a90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5e:	2b80      	cmp	r3, #128	@ 0x80
 8003a60:	d016      	beq.n	8003a90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7c:	f043 0220 	orr.w	r2, r3, #32
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e007      	b.n	8003aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9a:	2b80      	cmp	r3, #128	@ 0x80
 8003a9c:	d1c3      	bne.n	8003a26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ab4:	e034      	b.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f89b 	bl	8003bf2 <I2C_IsAcknowledgeFailed>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e034      	b.n	8003b30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003acc:	d028      	beq.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ace:	f7fe fda1 	bl	8002614 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d11d      	bne.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d016      	beq.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e007      	b.n	8003b30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d1c3      	bne.n	8003ab6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b44:	e049      	b.n	8003bda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d119      	bne.n	8003b88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0210 	mvn.w	r2, #16
 8003b5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e030      	b.n	8003bea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b88:	f7fe fd44 	bl	8002614 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d302      	bcc.n	8003b9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d11d      	bne.n	8003bda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba8:	2b40      	cmp	r3, #64	@ 0x40
 8003baa:	d016      	beq.n	8003bda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e007      	b.n	8003bea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be4:	2b40      	cmp	r3, #64	@ 0x40
 8003be6:	d1ae      	bne.n	8003b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c08:	d11b      	bne.n	8003c42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	f043 0204 	orr.w	r2, r3, #4
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr
	...

08003c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e31d      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c62:	4b94      	ldr	r3, [pc, #592]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c6c:	4b91      	ldr	r3, [pc, #580]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c74:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d07b      	beq.n	8003d7a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d006      	beq.n	8003c96 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2b0c      	cmp	r3, #12
 8003c8c:	d10f      	bne.n	8003cae <HAL_RCC_OscConfig+0x5e>
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c94:	d10b      	bne.n	8003cae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c96:	4b87      	ldr	r3, [pc, #540]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d06a      	beq.n	8003d78 <HAL_RCC_OscConfig+0x128>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d166      	bne.n	8003d78 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e2f7      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d106      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x74>
 8003cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a7e      	ldr	r2, [pc, #504]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e02d      	b.n	8003d20 <HAL_RCC_OscConfig+0xd0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10c      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x96>
 8003ccc:	4b79      	ldr	r3, [pc, #484]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a78      	ldr	r2, [pc, #480]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	4b76      	ldr	r3, [pc, #472]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a75      	ldr	r2, [pc, #468]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003cde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	e01c      	b.n	8003d20 <HAL_RCC_OscConfig+0xd0>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCC_OscConfig+0xb8>
 8003cee:	4b71      	ldr	r3, [pc, #452]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a70      	ldr	r2, [pc, #448]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	4b6e      	ldr	r3, [pc, #440]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a6d      	ldr	r2, [pc, #436]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e00b      	b.n	8003d20 <HAL_RCC_OscConfig+0xd0>
 8003d08:	4b6a      	ldr	r3, [pc, #424]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a69      	ldr	r2, [pc, #420]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	4b67      	ldr	r3, [pc, #412]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a66      	ldr	r2, [pc, #408]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d013      	beq.n	8003d50 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fe fc74 	bl	8002614 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fe fc70 	bl	8002614 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	@ 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e2ad      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d42:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0xe0>
 8003d4e:	e014      	b.n	8003d7a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fe fc60 	bl	8002614 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fe fc5c 	bl	8002614 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	@ 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e299      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d6a:	4b52      	ldr	r3, [pc, #328]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x108>
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d05a      	beq.n	8003e3c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d119      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x176>
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d116      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d98:	4b46      	ldr	r3, [pc, #280]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_OscConfig+0x160>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e276      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db0:	4b40      	ldr	r3, [pc, #256]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	493d      	ldr	r1, [pc, #244]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc4:	e03a      	b.n	8003e3c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d020      	beq.n	8003e10 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dce:	4b3a      	ldr	r3, [pc, #232]	@ (8003eb8 <HAL_RCC_OscConfig+0x268>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7fe fc1e 	bl	8002614 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ddc:	f7fe fc1a 	bl	8002614 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e257      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dee:	4b31      	ldr	r3, [pc, #196]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	492a      	ldr	r1, [pc, #168]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
 8003e0e:	e015      	b.n	8003e3c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e10:	4b29      	ldr	r3, [pc, #164]	@ (8003eb8 <HAL_RCC_OscConfig+0x268>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e16:	f7fe fbfd 	bl	8002614 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e1e:	f7fe fbf9 	bl	8002614 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e236      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e30:	4b20      	ldr	r3, [pc, #128]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f0      	bne.n	8003e1e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80b8 	beq.w	8003fba <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d170      	bne.n	8003f32 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e50:	4b18      	ldr	r3, [pc, #96]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_OscConfig+0x218>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e21a      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1a      	ldr	r2, [r3, #32]
 8003e6c:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d921      	bls.n	8003ebc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fc7d 	bl	800477c <RCC_SetFlashLatencyFromMSIRange>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e208      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e8c:	4b09      	ldr	r3, [pc, #36]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	4906      	ldr	r1, [pc, #24]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e9e:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	4901      	ldr	r1, [pc, #4]	@ (8003eb4 <HAL_RCC_OscConfig+0x264>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
 8003eb2:	e020      	b.n	8003ef6 <HAL_RCC_OscConfig+0x2a6>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ebc:	4b99      	ldr	r3, [pc, #612]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	4996      	ldr	r1, [pc, #600]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ece:	4b95      	ldr	r3, [pc, #596]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	061b      	lsls	r3, r3, #24
 8003edc:	4991      	ldr	r1, [pc, #580]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fc48 	bl	800477c <RCC_SetFlashLatencyFromMSIRange>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e1d3      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	0b5b      	lsrs	r3, r3, #13
 8003efc:	3301      	adds	r3, #1
 8003efe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003f06:	4a87      	ldr	r2, [pc, #540]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8003f08:	6892      	ldr	r2, [r2, #8]
 8003f0a:	0912      	lsrs	r2, r2, #4
 8003f0c:	f002 020f 	and.w	r2, r2, #15
 8003f10:	4985      	ldr	r1, [pc, #532]	@ (8004128 <HAL_RCC_OscConfig+0x4d8>)
 8003f12:	5c8a      	ldrb	r2, [r1, r2]
 8003f14:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f16:	4a85      	ldr	r2, [pc, #532]	@ (800412c <HAL_RCC_OscConfig+0x4dc>)
 8003f18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f1a:	4b85      	ldr	r3, [pc, #532]	@ (8004130 <HAL_RCC_OscConfig+0x4e0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe fb2c 	bl	800257c <HAL_InitTick>
 8003f24:	4603      	mov	r3, r0
 8003f26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d045      	beq.n	8003fba <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	e1b5      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d029      	beq.n	8003f8e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f3a:	4b7e      	ldr	r3, [pc, #504]	@ (8004134 <HAL_RCC_OscConfig+0x4e4>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fe fb68 	bl	8002614 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f48:	f7fe fb64 	bl	8002614 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e1a1      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f5a:	4b72      	ldr	r3, [pc, #456]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f66:	4b6f      	ldr	r3, [pc, #444]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	496c      	ldr	r1, [pc, #432]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f78:	4b6a      	ldr	r3, [pc, #424]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	4967      	ldr	r1, [pc, #412]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]
 8003f8c:	e015      	b.n	8003fba <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f8e:	4b69      	ldr	r3, [pc, #420]	@ (8004134 <HAL_RCC_OscConfig+0x4e4>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fe fb3e 	bl	8002614 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f9c:	f7fe fb3a 	bl	8002614 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e177      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003fae:	4b5d      	ldr	r3, [pc, #372]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d030      	beq.n	8004028 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fce:	4b5a      	ldr	r3, [pc, #360]	@ (8004138 <HAL_RCC_OscConfig+0x4e8>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd4:	f7fe fb1e 	bl	8002614 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fdc:	f7fe fb1a 	bl	8002614 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e157      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fee:	4b4d      	ldr	r3, [pc, #308]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x38c>
 8003ffa:	e015      	b.n	8004028 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ffc:	4b4e      	ldr	r3, [pc, #312]	@ (8004138 <HAL_RCC_OscConfig+0x4e8>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004002:	f7fe fb07 	bl	8002614 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800400a:	f7fe fb03 	bl	8002614 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e140      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800401c:	4b41      	ldr	r3, [pc, #260]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 800401e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1f0      	bne.n	800400a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80b5 	beq.w	80041a0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403a:	4b3a      	ldr	r3, [pc, #232]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10d      	bne.n	8004062 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004046:	4b37      	ldr	r3, [pc, #220]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	4a36      	ldr	r2, [pc, #216]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 800404c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004050:	6253      	str	r3, [r2, #36]	@ 0x24
 8004052:	4b34      	ldr	r3, [pc, #208]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405e:	2301      	movs	r3, #1
 8004060:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004062:	4b36      	ldr	r3, [pc, #216]	@ (800413c <HAL_RCC_OscConfig+0x4ec>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406a:	2b00      	cmp	r3, #0
 800406c:	d118      	bne.n	80040a0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800406e:	4b33      	ldr	r3, [pc, #204]	@ (800413c <HAL_RCC_OscConfig+0x4ec>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a32      	ldr	r2, [pc, #200]	@ (800413c <HAL_RCC_OscConfig+0x4ec>)
 8004074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800407a:	f7fe facb 	bl	8002614 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004082:	f7fe fac7 	bl	8002614 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b64      	cmp	r3, #100	@ 0x64
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e104      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004094:	4b29      	ldr	r3, [pc, #164]	@ (800413c <HAL_RCC_OscConfig+0x4ec>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d106      	bne.n	80040b6 <HAL_RCC_OscConfig+0x466>
 80040a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 80040aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 80040ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b2:	6353      	str	r3, [r2, #52]	@ 0x34
 80040b4:	e02d      	b.n	8004112 <HAL_RCC_OscConfig+0x4c2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x488>
 80040be:	4b19      	ldr	r3, [pc, #100]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 80040c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c2:	4a18      	ldr	r2, [pc, #96]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 80040c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040c8:	6353      	str	r3, [r2, #52]	@ 0x34
 80040ca:	4b16      	ldr	r3, [pc, #88]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 80040cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ce:	4a15      	ldr	r2, [pc, #84]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 80040d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040d4:	6353      	str	r3, [r2, #52]	@ 0x34
 80040d6:	e01c      	b.n	8004112 <HAL_RCC_OscConfig+0x4c2>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b05      	cmp	r3, #5
 80040de:	d10c      	bne.n	80040fa <HAL_RCC_OscConfig+0x4aa>
 80040e0:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 80040e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 80040e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040ea:	6353      	str	r3, [r2, #52]	@ 0x34
 80040ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 80040ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 80040f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f6:	6353      	str	r3, [r2, #52]	@ 0x34
 80040f8:	e00b      	b.n	8004112 <HAL_RCC_OscConfig+0x4c2>
 80040fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 80040fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fe:	4a09      	ldr	r2, [pc, #36]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8004100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004104:	6353      	str	r3, [r2, #52]	@ 0x34
 8004106:	4b07      	ldr	r3, [pc, #28]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 8004108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410a:	4a06      	ldr	r2, [pc, #24]	@ (8004124 <HAL_RCC_OscConfig+0x4d4>)
 800410c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004110:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d024      	beq.n	8004164 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411a:	f7fe fa7b 	bl	8002614 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004120:	e019      	b.n	8004156 <HAL_RCC_OscConfig+0x506>
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	0800a378 	.word	0x0800a378
 800412c:	20000014 	.word	0x20000014
 8004130:	20000018 	.word	0x20000018
 8004134:	42470020 	.word	0x42470020
 8004138:	42470680 	.word	0x42470680
 800413c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7fe fa68 	bl	8002614 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e0a3      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004156:	4b54      	ldr	r3, [pc, #336]	@ (80042a8 <HAL_RCC_OscConfig+0x658>)
 8004158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ee      	beq.n	8004140 <HAL_RCC_OscConfig+0x4f0>
 8004162:	e014      	b.n	800418e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004164:	f7fe fa56 	bl	8002614 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800416a:	e00a      	b.n	8004182 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fe fa52 	bl	8002614 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e08d      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004182:	4b49      	ldr	r3, [pc, #292]	@ (80042a8 <HAL_RCC_OscConfig+0x658>)
 8004184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004186:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1ee      	bne.n	800416c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800418e:	7ffb      	ldrb	r3, [r7, #31]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d105      	bne.n	80041a0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004194:	4b44      	ldr	r3, [pc, #272]	@ (80042a8 <HAL_RCC_OscConfig+0x658>)
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	4a43      	ldr	r2, [pc, #268]	@ (80042a8 <HAL_RCC_OscConfig+0x658>)
 800419a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800419e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d079      	beq.n	800429c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d056      	beq.n	800425c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d13b      	bne.n	800422e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b6:	4b3d      	ldr	r3, [pc, #244]	@ (80042ac <HAL_RCC_OscConfig+0x65c>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7fe fa2a 	bl	8002614 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c4:	f7fe fa26 	bl	8002614 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e063      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041d6:	4b34      	ldr	r3, [pc, #208]	@ (80042a8 <HAL_RCC_OscConfig+0x658>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e2:	4b31      	ldr	r3, [pc, #196]	@ (80042a8 <HAL_RCC_OscConfig+0x658>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f2:	4319      	orrs	r1, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f8:	430b      	orrs	r3, r1
 80041fa:	492b      	ldr	r1, [pc, #172]	@ (80042a8 <HAL_RCC_OscConfig+0x658>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004200:	4b2a      	ldr	r3, [pc, #168]	@ (80042ac <HAL_RCC_OscConfig+0x65c>)
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004206:	f7fe fa05 	bl	8002614 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800420e:	f7fe fa01 	bl	8002614 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e03e      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004220:	4b21      	ldr	r3, [pc, #132]	@ (80042a8 <HAL_RCC_OscConfig+0x658>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x5be>
 800422c:	e036      	b.n	800429c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422e:	4b1f      	ldr	r3, [pc, #124]	@ (80042ac <HAL_RCC_OscConfig+0x65c>)
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004234:	f7fe f9ee 	bl	8002614 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800423c:	f7fe f9ea 	bl	8002614 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e027      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800424e:	4b16      	ldr	r3, [pc, #88]	@ (80042a8 <HAL_RCC_OscConfig+0x658>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x5ec>
 800425a:	e01f      	b.n	800429c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e01a      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004268:	4b0f      	ldr	r3, [pc, #60]	@ (80042a8 <HAL_RCC_OscConfig+0x658>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004278:	429a      	cmp	r2, r3
 800427a:	d10d      	bne.n	8004298 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d106      	bne.n	8004298 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	42470060 	.word	0x42470060

080042b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e11a      	b.n	80044fa <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004504 <HAL_RCC_ClockConfig+0x254>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d919      	bls.n	8004306 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x34>
 80042d8:	4b8a      	ldr	r3, [pc, #552]	@ (8004504 <HAL_RCC_ClockConfig+0x254>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a89      	ldr	r2, [pc, #548]	@ (8004504 <HAL_RCC_ClockConfig+0x254>)
 80042de:	f043 0304 	orr.w	r3, r3, #4
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b87      	ldr	r3, [pc, #540]	@ (8004504 <HAL_RCC_ClockConfig+0x254>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 0201 	bic.w	r2, r3, #1
 80042ec:	4985      	ldr	r1, [pc, #532]	@ (8004504 <HAL_RCC_ClockConfig+0x254>)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f4:	4b83      	ldr	r3, [pc, #524]	@ (8004504 <HAL_RCC_ClockConfig+0x254>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d001      	beq.n	8004306 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e0f9      	b.n	80044fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004312:	4b7d      	ldr	r3, [pc, #500]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	497a      	ldr	r1, [pc, #488]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 8004320:	4313      	orrs	r3, r2
 8004322:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 808e 	beq.w	800444e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d107      	bne.n	800434a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800433a:	4b73      	ldr	r3, [pc, #460]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d121      	bne.n	800438a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e0d7      	b.n	80044fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d107      	bne.n	8004362 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004352:	4b6d      	ldr	r3, [pc, #436]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d115      	bne.n	800438a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e0cb      	b.n	80044fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d107      	bne.n	800437a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800436a:	4b67      	ldr	r3, [pc, #412]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0bf      	b.n	80044fa <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800437a:	4b63      	ldr	r3, [pc, #396]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e0b7      	b.n	80044fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438a:	4b5f      	ldr	r3, [pc, #380]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f023 0203 	bic.w	r2, r3, #3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	495c      	ldr	r1, [pc, #368]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 8004398:	4313      	orrs	r3, r2
 800439a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800439c:	f7fe f93a 	bl	8002614 <HAL_GetTick>
 80043a0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d112      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80043aa:	e00a      	b.n	80043c2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ac:	f7fe f932 	bl	8002614 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e09b      	b.n	80044fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80043c2:	4b51      	ldr	r3, [pc, #324]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d1ee      	bne.n	80043ac <HAL_RCC_ClockConfig+0xfc>
 80043ce:	e03e      	b.n	800444e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d112      	bne.n	80043fe <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043d8:	e00a      	b.n	80043f0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043da:	f7fe f91b 	bl	8002614 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e084      	b.n	80044fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043f0:	4b45      	ldr	r3, [pc, #276]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d1ee      	bne.n	80043da <HAL_RCC_ClockConfig+0x12a>
 80043fc:	e027      	b.n	800444e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d11d      	bne.n	8004442 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004406:	e00a      	b.n	800441e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004408:	f7fe f904 	bl	8002614 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e06d      	b.n	80044fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800441e:	4b3a      	ldr	r3, [pc, #232]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b04      	cmp	r3, #4
 8004428:	d1ee      	bne.n	8004408 <HAL_RCC_ClockConfig+0x158>
 800442a:	e010      	b.n	800444e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800442c:	f7fe f8f2 	bl	8002614 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e05b      	b.n	80044fa <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004442:	4b31      	ldr	r3, [pc, #196]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1ee      	bne.n	800442c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800444e:	4b2d      	ldr	r3, [pc, #180]	@ (8004504 <HAL_RCC_ClockConfig+0x254>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d219      	bcs.n	8004490 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d105      	bne.n	800446e <HAL_RCC_ClockConfig+0x1be>
 8004462:	4b28      	ldr	r3, [pc, #160]	@ (8004504 <HAL_RCC_ClockConfig+0x254>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a27      	ldr	r2, [pc, #156]	@ (8004504 <HAL_RCC_ClockConfig+0x254>)
 8004468:	f043 0304 	orr.w	r3, r3, #4
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4b25      	ldr	r3, [pc, #148]	@ (8004504 <HAL_RCC_ClockConfig+0x254>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 0201 	bic.w	r2, r3, #1
 8004476:	4923      	ldr	r1, [pc, #140]	@ (8004504 <HAL_RCC_ClockConfig+0x254>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b21      	ldr	r3, [pc, #132]	@ (8004504 <HAL_RCC_ClockConfig+0x254>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e034      	b.n	80044fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800449c:	4b1a      	ldr	r3, [pc, #104]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4917      	ldr	r1, [pc, #92]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ba:	4b13      	ldr	r3, [pc, #76]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	490f      	ldr	r1, [pc, #60]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ce:	f000 f823 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80044d2:	4602      	mov	r2, r0
 80044d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <HAL_RCC_ClockConfig+0x258>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	490b      	ldr	r1, [pc, #44]	@ (800450c <HAL_RCC_ClockConfig+0x25c>)
 80044e0:	5ccb      	ldrb	r3, [r1, r3]
 80044e2:	fa22 f303 	lsr.w	r3, r2, r3
 80044e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004510 <HAL_RCC_ClockConfig+0x260>)
 80044e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004514 <HAL_RCC_ClockConfig+0x264>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe f844 	bl	800257c <HAL_InitTick>
 80044f4:	4603      	mov	r3, r0
 80044f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80044f8:	7afb      	ldrb	r3, [r7, #11]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40023c00 	.word	0x40023c00
 8004508:	40023800 	.word	0x40023800
 800450c:	0800a378 	.word	0x0800a378
 8004510:	20000014 	.word	0x20000014
 8004514:	20000018 	.word	0x20000018

08004518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800451c:	b092      	sub	sp, #72	@ 0x48
 800451e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004520:	4b79      	ldr	r3, [pc, #484]	@ (8004708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b0c      	cmp	r3, #12
 800452e:	d00d      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x34>
 8004530:	2b0c      	cmp	r3, #12
 8004532:	f200 80d5 	bhi.w	80046e0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004536:	2b04      	cmp	r3, #4
 8004538:	d002      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x28>
 800453a:	2b08      	cmp	r3, #8
 800453c:	d003      	beq.n	8004546 <HAL_RCC_GetSysClockFreq+0x2e>
 800453e:	e0cf      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004540:	4b72      	ldr	r3, [pc, #456]	@ (800470c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004542:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004544:	e0da      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004546:	4b72      	ldr	r3, [pc, #456]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004548:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800454a:	e0d7      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800454c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800454e:	0c9b      	lsrs	r3, r3, #18
 8004550:	f003 020f 	and.w	r2, r3, #15
 8004554:	4b6f      	ldr	r3, [pc, #444]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004556:	5c9b      	ldrb	r3, [r3, r2]
 8004558:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800455a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800455c:	0d9b      	lsrs	r3, r3, #22
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	3301      	adds	r3, #1
 8004564:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004566:	4b68      	ldr	r3, [pc, #416]	@ (8004708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d05d      	beq.n	800462e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004574:	2200      	movs	r2, #0
 8004576:	4618      	mov	r0, r3
 8004578:	4611      	mov	r1, r2
 800457a:	4604      	mov	r4, r0
 800457c:	460d      	mov	r5, r1
 800457e:	4622      	mov	r2, r4
 8004580:	462b      	mov	r3, r5
 8004582:	f04f 0000 	mov.w	r0, #0
 8004586:	f04f 0100 	mov.w	r1, #0
 800458a:	0159      	lsls	r1, r3, #5
 800458c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004590:	0150      	lsls	r0, r2, #5
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4621      	mov	r1, r4
 8004598:	1a51      	subs	r1, r2, r1
 800459a:	6139      	str	r1, [r7, #16]
 800459c:	4629      	mov	r1, r5
 800459e:	eb63 0301 	sbc.w	r3, r3, r1
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045b0:	4659      	mov	r1, fp
 80045b2:	018b      	lsls	r3, r1, #6
 80045b4:	4651      	mov	r1, sl
 80045b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ba:	4651      	mov	r1, sl
 80045bc:	018a      	lsls	r2, r1, #6
 80045be:	46d4      	mov	ip, sl
 80045c0:	ebb2 080c 	subs.w	r8, r2, ip
 80045c4:	4659      	mov	r1, fp
 80045c6:	eb63 0901 	sbc.w	r9, r3, r1
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045de:	4690      	mov	r8, r2
 80045e0:	4699      	mov	r9, r3
 80045e2:	4623      	mov	r3, r4
 80045e4:	eb18 0303 	adds.w	r3, r8, r3
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	462b      	mov	r3, r5
 80045ec:	eb49 0303 	adc.w	r3, r9, r3
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045fe:	4629      	mov	r1, r5
 8004600:	024b      	lsls	r3, r1, #9
 8004602:	4620      	mov	r0, r4
 8004604:	4629      	mov	r1, r5
 8004606:	4604      	mov	r4, r0
 8004608:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800460c:	4601      	mov	r1, r0
 800460e:	024a      	lsls	r2, r1, #9
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004616:	2200      	movs	r2, #0
 8004618:	62bb      	str	r3, [r7, #40]	@ 0x28
 800461a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800461c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004620:	f7fc fdb4 	bl	800118c <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4613      	mov	r3, r2
 800462a:	647b      	str	r3, [r7, #68]	@ 0x44
 800462c:	e055      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800462e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004630:	2200      	movs	r2, #0
 8004632:	623b      	str	r3, [r7, #32]
 8004634:	627a      	str	r2, [r7, #36]	@ 0x24
 8004636:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800463a:	4642      	mov	r2, r8
 800463c:	464b      	mov	r3, r9
 800463e:	f04f 0000 	mov.w	r0, #0
 8004642:	f04f 0100 	mov.w	r1, #0
 8004646:	0159      	lsls	r1, r3, #5
 8004648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800464c:	0150      	lsls	r0, r2, #5
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	46c4      	mov	ip, r8
 8004654:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004658:	4640      	mov	r0, r8
 800465a:	4649      	mov	r1, r9
 800465c:	468c      	mov	ip, r1
 800465e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800466e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004672:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004676:	ebb2 040a 	subs.w	r4, r2, sl
 800467a:	eb63 050b 	sbc.w	r5, r3, fp
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	00eb      	lsls	r3, r5, #3
 8004688:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800468c:	00e2      	lsls	r2, r4, #3
 800468e:	4614      	mov	r4, r2
 8004690:	461d      	mov	r5, r3
 8004692:	4603      	mov	r3, r0
 8004694:	18e3      	adds	r3, r4, r3
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	460b      	mov	r3, r1
 800469a:	eb45 0303 	adc.w	r3, r5, r3
 800469e:	607b      	str	r3, [r7, #4]
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ac:	4629      	mov	r1, r5
 80046ae:	028b      	lsls	r3, r1, #10
 80046b0:	4620      	mov	r0, r4
 80046b2:	4629      	mov	r1, r5
 80046b4:	4604      	mov	r4, r0
 80046b6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80046ba:	4601      	mov	r1, r0
 80046bc:	028a      	lsls	r2, r1, #10
 80046be:	4610      	mov	r0, r2
 80046c0:	4619      	mov	r1, r3
 80046c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c4:	2200      	movs	r2, #0
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	61fa      	str	r2, [r7, #28]
 80046ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ce:	f7fc fd5d 	bl	800118c <__aeabi_uldivmod>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4613      	mov	r3, r2
 80046d8:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 80046da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046dc:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80046de:	e00d      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80046e0:	4b09      	ldr	r3, [pc, #36]	@ (8004708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	0b5b      	lsrs	r3, r3, #13
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80046ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ee:	3301      	adds	r3, #1
 80046f0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80046fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3748      	adds	r7, #72	@ 0x48
 8004702:	46bd      	mov	sp, r7
 8004704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004708:	40023800 	.word	0x40023800
 800470c:	00f42400 	.word	0x00f42400
 8004710:	007a1200 	.word	0x007a1200
 8004714:	0800a36c 	.word	0x0800a36c

08004718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800471c:	4b02      	ldr	r3, [pc, #8]	@ (8004728 <HAL_RCC_GetHCLKFreq+0x10>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr
 8004728:	20000014 	.word	0x20000014

0800472c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004730:	f7ff fff2 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8004734:	4602      	mov	r2, r0
 8004736:	4b05      	ldr	r3, [pc, #20]	@ (800474c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	0a1b      	lsrs	r3, r3, #8
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	4903      	ldr	r1, [pc, #12]	@ (8004750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004742:	5ccb      	ldrb	r3, [r1, r3]
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	0800a388 	.word	0x0800a388

08004754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004758:	f7ff ffde 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 800475c:	4602      	mov	r2, r0
 800475e:	4b05      	ldr	r3, [pc, #20]	@ (8004774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	0adb      	lsrs	r3, r3, #11
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	4903      	ldr	r1, [pc, #12]	@ (8004778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800476a:	5ccb      	ldrb	r3, [r1, r3]
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40023800 	.word	0x40023800
 8004778:	0800a388 	.word	0x0800a388

0800477c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004788:	4b29      	ldr	r3, [pc, #164]	@ (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d12c      	bne.n	80047ee <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004794:	4b26      	ldr	r3, [pc, #152]	@ (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80047a0:	4b24      	ldr	r3, [pc, #144]	@ (8004834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e016      	b.n	80047da <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ac:	4b20      	ldr	r3, [pc, #128]	@ (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80047b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b6:	6253      	str	r3, [r2, #36]	@ 0x24
 80047b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80047ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80047c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80047cc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ce:	4b18      	ldr	r3, [pc, #96]	@ (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	4a17      	ldr	r2, [pc, #92]	@ (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80047d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047d8:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80047e0:	d105      	bne.n	80047ee <RCC_SetFlashLatencyFromMSIRange+0x72>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80047e8:	d101      	bne.n	80047ee <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80047ea:	2301      	movs	r3, #1
 80047ec:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80047f4:	4b10      	ldr	r3, [pc, #64]	@ (8004838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a0f      	ldr	r2, [pc, #60]	@ (8004838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047fa:	f043 0304 	orr.w	r3, r3, #4
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	4b0d      	ldr	r3, [pc, #52]	@ (8004838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 0201 	bic.w	r2, r3, #1
 8004808:	490b      	ldr	r1, [pc, #44]	@ (8004838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004810:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	429a      	cmp	r2, r3
 800481c:	d001      	beq.n	8004822 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800
 8004834:	40007000 	.word	0x40007000
 8004838:	40023c00 	.word	0x40023c00

0800483c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e042      	b.n	80048d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fd fd0e 	bl	8002284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2224      	movs	r2, #36	@ 0x24
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800487e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f971 	bl	8004b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695a      	ldr	r2, [r3, #20]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	@ 0x28
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d175      	bne.n	80049e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_UART_Transmit+0x2c>
 8004902:	88fb      	ldrh	r3, [r7, #6]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e06e      	b.n	80049ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2221      	movs	r2, #33	@ 0x21
 8004916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800491a:	f7fd fe7b 	bl	8002614 <HAL_GetTick>
 800491e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	88fa      	ldrh	r2, [r7, #6]
 8004924:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	88fa      	ldrh	r2, [r7, #6]
 800492a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004934:	d108      	bne.n	8004948 <HAL_UART_Transmit+0x6c>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	e003      	b.n	8004950 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004950:	e02e      	b.n	80049b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2200      	movs	r2, #0
 800495a:	2180      	movs	r1, #128	@ 0x80
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f848 	bl	80049f2 <UART_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e03a      	b.n	80049ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004988:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	3302      	adds	r3, #2
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	e007      	b.n	80049a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	3301      	adds	r3, #1
 80049a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1cb      	bne.n	8004952 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2200      	movs	r2, #0
 80049c2:	2140      	movs	r1, #64	@ 0x40
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f814 	bl	80049f2 <UART_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e006      	b.n	80049ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	e000      	b.n	80049ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049e8:	2302      	movs	r3, #2
  }
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b086      	sub	sp, #24
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	603b      	str	r3, [r7, #0]
 80049fe:	4613      	mov	r3, r2
 8004a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a02:	e03b      	b.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a0a:	d037      	beq.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0c:	f7fd fe02 	bl	8002614 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	6a3a      	ldr	r2, [r7, #32]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d302      	bcc.n	8004a22 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e03a      	b.n	8004a9c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d023      	beq.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b80      	cmp	r3, #128	@ 0x80
 8004a38:	d020      	beq.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b40      	cmp	r3, #64	@ 0x40
 8004a3e:	d01d      	beq.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d116      	bne.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f81d 	bl	8004aa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e00f      	b.n	8004a9c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4013      	ands	r3, r2
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d0b4      	beq.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b095      	sub	sp, #84	@ 0x54
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	330c      	adds	r3, #12
 8004ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004acc:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e5      	bne.n	8004aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3314      	adds	r3, #20
 8004ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d119      	bne.n	8004b50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f023 0310 	bic.w	r3, r3, #16
 8004b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b3c:	61ba      	str	r2, [r7, #24]
 8004b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6979      	ldr	r1, [r7, #20]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	613b      	str	r3, [r7, #16]
   return(result);
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e5      	bne.n	8004b1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b5e:	bf00      	nop
 8004b60:	3754      	adds	r7, #84	@ 0x54
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004ba8:	f023 030c 	bic.w	r3, r3, #12
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699a      	ldr	r2, [r3, #24]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a55      	ldr	r2, [pc, #340]	@ (8004d28 <UART_SetConfig+0x1c0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d103      	bne.n	8004bde <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004bd6:	f7ff fdbd 	bl	8004754 <HAL_RCC_GetPCLK2Freq>
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	e002      	b.n	8004be4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bde:	f7ff fda5 	bl	800472c <HAL_RCC_GetPCLK1Freq>
 8004be2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bec:	d14c      	bne.n	8004c88 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009a      	lsls	r2, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	4a49      	ldr	r2, [pc, #292]	@ (8004d2c <UART_SetConfig+0x1c4>)
 8004c06:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	0119      	lsls	r1, r3, #4
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009a      	lsls	r2, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c24:	4b41      	ldr	r3, [pc, #260]	@ (8004d2c <UART_SetConfig+0x1c4>)
 8004c26:	fba3 0302 	umull	r0, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	2064      	movs	r0, #100	@ 0x64
 8004c2e:	fb00 f303 	mul.w	r3, r0, r3
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	3332      	adds	r3, #50	@ 0x32
 8004c38:	4a3c      	ldr	r2, [pc, #240]	@ (8004d2c <UART_SetConfig+0x1c4>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c46:	4419      	add	r1, r3
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	009a      	lsls	r2, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c5e:	4b33      	ldr	r3, [pc, #204]	@ (8004d2c <UART_SetConfig+0x1c4>)
 8004c60:	fba3 0302 	umull	r0, r3, r3, r2
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	2064      	movs	r0, #100	@ 0x64
 8004c68:	fb00 f303 	mul.w	r3, r0, r3
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	3332      	adds	r3, #50	@ 0x32
 8004c72:	4a2e      	ldr	r2, [pc, #184]	@ (8004d2c <UART_SetConfig+0x1c4>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	f003 0207 	and.w	r2, r3, #7
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	440a      	add	r2, r1
 8004c84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c86:	e04a      	b.n	8004d1e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009a      	lsls	r2, r3, #2
 8004c92:	441a      	add	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9e:	4a23      	ldr	r2, [pc, #140]	@ (8004d2c <UART_SetConfig+0x1c4>)
 8004ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	0119      	lsls	r1, r3, #4
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4613      	mov	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	009a      	lsls	r2, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004d2c <UART_SetConfig+0x1c4>)
 8004cc0:	fba3 0302 	umull	r0, r3, r3, r2
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	2064      	movs	r0, #100	@ 0x64
 8004cc8:	fb00 f303 	mul.w	r3, r0, r3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	3332      	adds	r3, #50	@ 0x32
 8004cd2:	4a16      	ldr	r2, [pc, #88]	@ (8004d2c <UART_SetConfig+0x1c4>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cde:	4419      	add	r1, r3
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009a      	lsls	r2, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d2c <UART_SetConfig+0x1c4>)
 8004cf8:	fba3 0302 	umull	r0, r3, r3, r2
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	2064      	movs	r0, #100	@ 0x64
 8004d00:	fb00 f303 	mul.w	r3, r0, r3
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	3332      	adds	r3, #50	@ 0x32
 8004d0a:	4a08      	ldr	r2, [pc, #32]	@ (8004d2c <UART_SetConfig+0x1c4>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	f003 020f 	and.w	r2, r3, #15
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]
}
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40013800 	.word	0x40013800
 8004d2c:	51eb851f 	.word	0x51eb851f

08004d30 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004d30:	b590      	push	{r4, r7, lr}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	72fb      	strb	r3, [r7, #11]
 8004d40:	4613      	mov	r3, r2
 8004d42:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685c      	ldr	r4, [r3, #4]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68d8      	ldr	r0, [r3, #12]
 8004d4c:	893b      	ldrh	r3, [r7, #8]
 8004d4e:	7af9      	ldrb	r1, [r7, #11]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	47a0      	blx	r4
 8004d54:	6178      	str	r0, [r7, #20]

  return ret;
 8004d56:	697b      	ldr	r3, [r7, #20]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd90      	pop	{r4, r7, pc}

08004d60 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004d60:	b590      	push	{r4, r7, lr}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	72fb      	strb	r3, [r7, #11]
 8004d70:	4613      	mov	r3, r2
 8004d72:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681c      	ldr	r4, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	68d8      	ldr	r0, [r3, #12]
 8004d7c:	893b      	ldrh	r3, [r7, #8]
 8004d7e:	7af9      	ldrb	r1, [r7, #11]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	47a0      	blx	r4
 8004d84:	6178      	str	r0, [r7, #20]

  return ret;
 8004d86:	697b      	ldr	r3, [r7, #20]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd90      	pop	{r4, r7, pc}

08004d90 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 8004d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fb ff94 	bl	8000ccc <__aeabi_i2f>
 8004da4:	4603      	mov	r3, r0
 8004da6:	4904      	ldr	r1, [pc, #16]	@ (8004db8 <lsm6dso_from_fs2_to_mg+0x28>)
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fb ffe3 	bl	8000d74 <__aeabi_fmul>
 8004dae:	4603      	mov	r3, r0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	3d79db23 	.word	0x3d79db23

08004dbc <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004dc8:	f107 0208 	add.w	r2, r7, #8
 8004dcc:	2301      	movs	r3, #1
 8004dce:	2110      	movs	r1, #16
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff ffad 	bl	8004d30 <lsm6dso_read_reg>
 8004dd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10f      	bne.n	8004dfe <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	7a3b      	ldrb	r3, [r7, #8]
 8004de8:	f362 0383 	bfi	r3, r2, #2, #2
 8004dec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004dee:	f107 0208 	add.w	r2, r7, #8
 8004df2:	2301      	movs	r3, #1
 8004df4:	2110      	movs	r1, #16
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff ffb2 	bl	8004d60 <lsm6dso_write_reg>
 8004dfc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004e18:	f107 030c 	add.w	r3, r7, #12
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fa78 	bl	8005314 <lsm6dso_fsm_enable_get>
 8004e24:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f040 80c4 	bne.w	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004e2e:	7b3b      	ldrb	r3, [r7, #12]
 8004e30:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004e36:	7b3b      	ldrb	r3, [r7, #12]
 8004e38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e3c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004e42:	7b3b      	ldrb	r3, [r7, #12]
 8004e44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004e4e:	7b3b      	ldrb	r3, [r7, #12]
 8004e50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004e56:	4313      	orrs	r3, r2
 8004e58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004e5a:	7b3b      	ldrb	r3, [r7, #12]
 8004e5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004e60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004e62:	4313      	orrs	r3, r2
 8004e64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004e66:	7b3b      	ldrb	r3, [r7, #12]
 8004e68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004e6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004e72:	7b3b      	ldrb	r3, [r7, #12]
 8004e74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004e78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004e7e:	7b3b      	ldrb	r3, [r7, #12]
 8004e80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004e84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004e86:	4313      	orrs	r3, r2
 8004e88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004e8a:	7b7b      	ldrb	r3, [r7, #13]
 8004e8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004e92:	4313      	orrs	r3, r2
 8004e94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004e96:	7b7b      	ldrb	r3, [r7, #13]
 8004e98:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004ea2:	7b7b      	ldrb	r3, [r7, #13]
 8004ea4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ea8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004eae:	7b7b      	ldrb	r3, [r7, #13]
 8004eb0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004eb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004eba:	7b7b      	ldrb	r3, [r7, #13]
 8004ebc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004ec0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004ec6:	7b7b      	ldrb	r3, [r7, #13]
 8004ec8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004ecc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004ed2:	7b7b      	ldrb	r3, [r7, #13]
 8004ed4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ed8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004eda:	4313      	orrs	r3, r2
 8004edc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004ede:	7b7b      	ldrb	r3, [r7, #13]
 8004ee0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ee4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d163      	bne.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004eee:	f107 030b 	add.w	r3, r7, #11
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fa2f 	bl	8005358 <lsm6dso_fsm_data_rate_get>
 8004efa:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d159      	bne.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004f02:	7afb      	ldrb	r3, [r7, #11]
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d853      	bhi.n	8004fb0 <lsm6dso_xl_data_rate_set+0x1a8>
 8004f08:	a201      	add	r2, pc, #4	@ (adr r2, 8004f10 <lsm6dso_xl_data_rate_set+0x108>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f21 	.word	0x08004f21
 8004f14:	08004f33 	.word	0x08004f33
 8004f18:	08004f51 	.word	0x08004f51
 8004f1c:	08004f7b 	.word	0x08004f7b
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004f2a:	e044      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	75fb      	strb	r3, [r7, #23]
            break;
 8004f30:	e041      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d102      	bne.n	8004f3e <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004f3c:	e03b      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d102      	bne.n	8004f4a <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004f44:	2302      	movs	r3, #2
 8004f46:	75fb      	strb	r3, [r7, #23]
            break;
 8004f48:	e035      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	75fb      	strb	r3, [r7, #23]
            break;
 8004f4e:	e032      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004f56:	2303      	movs	r3, #3
 8004f58:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004f5a:	e02c      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d102      	bne.n	8004f68 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004f62:	2303      	movs	r3, #3
 8004f64:	75fb      	strb	r3, [r7, #23]
            break;
 8004f66:	e026      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d102      	bne.n	8004f74 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	75fb      	strb	r3, [r7, #23]
            break;
 8004f72:	e020      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	75fb      	strb	r3, [r7, #23]
            break;
 8004f78:	e01d      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d102      	bne.n	8004f86 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004f80:	2304      	movs	r3, #4
 8004f82:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004f84:	e017      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004f86:	78fb      	ldrb	r3, [r7, #3]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d102      	bne.n	8004f92 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8004f90:	e011      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d102      	bne.n	8004f9e <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004f98:	2304      	movs	r3, #4
 8004f9a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f9c:	e00b      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d102      	bne.n	8004faa <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	75fb      	strb	r3, [r7, #23]
            break;
 8004fa8:	e005      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	75fb      	strb	r3, [r7, #23]
            break;
 8004fae:	e002      	b.n	8004fb6 <lsm6dso_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	75fb      	strb	r3, [r7, #23]
            break;
 8004fb4:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d107      	bne.n	8004fcc <lsm6dso_xl_data_rate_set+0x1c4>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004fbc:	f107 0208 	add.w	r2, r7, #8
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	2110      	movs	r1, #16
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff feb3 	bl	8004d30 <lsm6dso_read_reg>
 8004fca:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10f      	bne.n	8004ff2 <lsm6dso_xl_data_rate_set+0x1ea>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	7a3b      	ldrb	r3, [r7, #8]
 8004fdc:	f362 1307 	bfi	r3, r2, #4, #4
 8004fe0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004fe2:	f107 0208 	add.w	r2, r7, #8
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	2110      	movs	r1, #16
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff feb8 	bl	8004d60 <lsm6dso_write_reg>
 8004ff0:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8004ff2:	693b      	ldr	r3, [r7, #16]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005008:	f107 0208 	add.w	r2, r7, #8
 800500c:	2301      	movs	r3, #1
 800500e:	2101      	movs	r1, #1
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff fe8d 	bl	8004d30 <lsm6dso_read_reg>
 8005016:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10f      	bne.n	800503e <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	b2da      	uxtb	r2, r3
 8005026:	7a3b      	ldrb	r3, [r7, #8]
 8005028:	f362 1387 	bfi	r3, r2, #6, #2
 800502c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800502e:	f107 0208 	add.w	r2, r7, #8
 8005032:	2301      	movs	r3, #1
 8005034:	2101      	movs	r1, #1
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fe92 	bl	8004d60 <lsm6dso_write_reg>
 800503c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800503e:	68fb      	ldr	r3, [r7, #12]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8005052:	2301      	movs	r3, #1
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	210f      	movs	r1, #15
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff fe69 	bl	8004d30 <lsm6dso_read_reg>
 800505e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005060:	68fb      	ldr	r3, [r7, #12]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005076:	f107 0208 	add.w	r2, r7, #8
 800507a:	2301      	movs	r3, #1
 800507c:	2112      	movs	r1, #18
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff fe56 	bl	8004d30 <lsm6dso_read_reg>
 8005084:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10f      	bne.n	80050ac <lsm6dso_reset_set+0x42>
  {
    reg.sw_reset = val;
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	b2da      	uxtb	r2, r3
 8005094:	7a3b      	ldrb	r3, [r7, #8]
 8005096:	f362 0300 	bfi	r3, r2, #0, #1
 800509a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800509c:	f107 0208 	add.w	r2, r7, #8
 80050a0:	2301      	movs	r3, #1
 80050a2:	2112      	movs	r1, #18
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff fe5b 	bl	8004d60 <lsm6dso_write_reg>
 80050aa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050ac:	68fb      	ldr	r3, [r7, #12]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80050c0:	f107 0208 	add.w	r2, r7, #8
 80050c4:	2301      	movs	r3, #1
 80050c6:	2112      	movs	r1, #18
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff fe31 	bl	8004d30 <lsm6dso_read_reg>
 80050ce:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 80050d0:	7a3b      	ldrb	r3, [r7, #8]
 80050d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	701a      	strb	r2, [r3, #0]

  return ret;
 80050de:	68fb      	ldr	r3, [r7, #12]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80050f4:	f107 020c 	add.w	r2, r7, #12
 80050f8:	2301      	movs	r3, #1
 80050fa:	2118      	movs	r1, #24
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fe17 	bl	8004d30 <lsm6dso_read_reg>
 8005102:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d111      	bne.n	800512e <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	09db      	lsrs	r3, r3, #7
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	b2da      	uxtb	r2, r3
 8005116:	7b3b      	ldrb	r3, [r7, #12]
 8005118:	f362 0341 	bfi	r3, r2, #1, #1
 800511c:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800511e:	f107 020c 	add.w	r2, r7, #12
 8005122:	2301      	movs	r3, #1
 8005124:	2118      	movs	r1, #24
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff fe1a 	bl	8004d60 <lsm6dso_write_reg>
 800512c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d107      	bne.n	8005144 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005134:	f107 0210 	add.w	r2, r7, #16
 8005138:	2301      	movs	r3, #1
 800513a:	2162      	movs	r1, #98	@ 0x62
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff fdf7 	bl	8004d30 <lsm6dso_read_reg>
 8005142:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10f      	bne.n	800516a <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	b2da      	uxtb	r2, r3
 8005152:	7c3b      	ldrb	r3, [r7, #16]
 8005154:	f362 03c4 	bfi	r3, r2, #3, #2
 8005158:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800515a:	f107 0210 	add.w	r2, r7, #16
 800515e:	2301      	movs	r3, #1
 8005160:	2162      	movs	r1, #98	@ 0x62
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff fdfc 	bl	8004d60 <lsm6dso_write_reg>
 8005168:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800516a:	697b      	ldr	r3, [r7, #20]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <lsm6dso_fifo_watermark_set>:
  * @param  val      change the values of wtm in reg FIFO_CTRL1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	807b      	strh	r3, [r7, #2]
  lsm6dso_fifo_ctrl1_t fifo_ctrl1;
  lsm6dso_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL2,
 8005180:	f107 020c 	add.w	r2, r7, #12
 8005184:	2301      	movs	r3, #1
 8005186:	2108      	movs	r1, #8
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff fdd1 	bl	8004d30 <lsm6dso_read_reg>
 800518e:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d114      	bne.n	80051c0 <lsm6dso_fifo_watermark_set+0x4c>
  {
    fifo_ctrl1.wtm = 0x00FFU & (uint8_t)val;
 8005196:	887b      	ldrh	r3, [r7, #2]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.wtm = (uint8_t)((0x0100U & val) >> 8);
 800519c:	887b      	ldrh	r3, [r7, #2]
 800519e:	0a1b      	lsrs	r3, r3, #8
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	7b3b      	ldrb	r3, [r7, #12]
 80051aa:	f362 0300 	bfi	r3, r2, #0, #1
 80051ae:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL1,
 80051b0:	f107 0210 	add.w	r2, r7, #16
 80051b4:	2301      	movs	r3, #1
 80051b6:	2107      	movs	r1, #7
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff fdd1 	bl	8004d60 <lsm6dso_write_reg>
 80051be:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl1, 1);
  }

  if (ret == 0)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d107      	bne.n	80051d6 <lsm6dso_fifo_watermark_set+0x62>
  {
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL2,
 80051c6:	f107 020c 	add.w	r2, r7, #12
 80051ca:	2301      	movs	r3, #1
 80051cc:	2108      	movs	r1, #8
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff fdc6 	bl	8004d60 <lsm6dso_write_reg>
 80051d4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl2, 1);
  }

  return ret;
 80051d6:	697b      	ldr	r3, [r7, #20]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <lsm6dso_fifo_xl_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_xl_t val)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 80051ec:	f107 0208 	add.w	r2, r7, #8
 80051f0:	2301      	movs	r3, #1
 80051f2:	2109      	movs	r1, #9
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff fd9b 	bl	8004d30 <lsm6dso_read_reg>
 80051fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10f      	bne.n	8005222 <lsm6dso_fifo_xl_batch_set+0x42>
  {
    reg.bdr_xl = (uint8_t)val;
 8005202:	78fb      	ldrb	r3, [r7, #3]
 8005204:	f003 030f 	and.w	r3, r3, #15
 8005208:	b2da      	uxtb	r2, r3
 800520a:	7a3b      	ldrb	r3, [r7, #8]
 800520c:	f362 0303 	bfi	r3, r2, #0, #4
 8005210:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8005212:	f107 0208 	add.w	r2, r7, #8
 8005216:	2301      	movs	r3, #1
 8005218:	2109      	movs	r1, #9
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff fda0 	bl	8004d60 <lsm6dso_write_reg>
 8005220:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005222:	68fb      	ldr	r3, [r7, #12]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <lsm6dso_fifo_gy_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_gy_t val)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8005238:	f107 0208 	add.w	r2, r7, #8
 800523c:	2301      	movs	r3, #1
 800523e:	2109      	movs	r1, #9
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff fd75 	bl	8004d30 <lsm6dso_read_reg>
 8005246:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10f      	bne.n	800526e <lsm6dso_fifo_gy_batch_set+0x42>
  {
    reg.bdr_gy = (uint8_t)val;
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	b2da      	uxtb	r2, r3
 8005256:	7a3b      	ldrb	r3, [r7, #8]
 8005258:	f362 1307 	bfi	r3, r2, #4, #4
 800525c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 800525e:	f107 0208 	add.w	r2, r7, #8
 8005262:	2301      	movs	r3, #1
 8005264:	2109      	movs	r1, #9
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff fd7a 	bl	8004d60 <lsm6dso_write_reg>
 800526c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800526e:	68fb      	ldr	r3, [r7, #12]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005284:	f107 0208 	add.w	r2, r7, #8
 8005288:	2301      	movs	r3, #1
 800528a:	210a      	movs	r1, #10
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff fd4f 	bl	8004d30 <lsm6dso_read_reg>
 8005292:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10f      	bne.n	80052ba <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	7a3b      	ldrb	r3, [r7, #8]
 80052a4:	f362 0302 	bfi	r3, r2, #0, #3
 80052a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80052aa:	f107 0208 	add.w	r2, r7, #8
 80052ae:	2301      	movs	r3, #1
 80052b0:	210a      	movs	r1, #10
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff fd54 	bl	8004d60 <lsm6dso_write_reg>
 80052b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80052ba:	68fb      	ldr	r3, [r7, #12]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <lsm6dso_fifo_data_level_get>:
  * @param  val      change the values of diff_fifo in reg FIFO_STATUS1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_data_level_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  lsm6dso_fifo_status1_t fifo_status1;
  lsm6dso_fifo_status2_t fifo_status2;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_STATUS1,
 80052ce:	f107 0210 	add.w	r2, r7, #16
 80052d2:	2301      	movs	r3, #1
 80052d4:	213a      	movs	r1, #58	@ 0x3a
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fd2a 	bl	8004d30 <lsm6dso_read_reg>
 80052dc:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_status1, 1);

  if (ret == 0)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d112      	bne.n	800530a <lsm6dso_fifo_data_level_get+0x46>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_STATUS2,
 80052e4:	f107 020c 	add.w	r2, r7, #12
 80052e8:	2301      	movs	r3, #1
 80052ea:	213b      	movs	r1, #59	@ 0x3b
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff fd1f 	bl	8004d30 <lsm6dso_read_reg>
 80052f2:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&fifo_status2, 1);
    *val = ((uint16_t)fifo_status2.diff_fifo << 8) +
 80052f4:	7b3b      	ldrb	r3, [r7, #12]
 80052f6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	b29b      	uxth	r3, r3
           (uint16_t)fifo_status1.diff_fifo;
 8005300:	7c3a      	ldrb	r2, [r7, #16]
    *val = ((uint16_t)fifo_status2.diff_fifo << 8) +
 8005302:	4413      	add	r3, r2
 8005304:	b29a      	uxth	r2, r3
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800530a:	697b      	ldr	r3, [r7, #20]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800531e:	2102      	movs	r1, #2
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff fe6b 	bl	8004ffc <lsm6dso_mem_bank_set>
 8005326:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 800532e:	2302      	movs	r3, #2
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	2146      	movs	r1, #70	@ 0x46
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff fcfb 	bl	8004d30 <lsm6dso_read_reg>
 800533a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d104      	bne.n	800534c <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005342:	2100      	movs	r1, #0
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff fe59 	bl	8004ffc <lsm6dso_mem_bank_set>
 800534a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800534c:	68fb      	ldr	r3, [r7, #12]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005362:	2102      	movs	r1, #2
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff fe49 	bl	8004ffc <lsm6dso_mem_bank_set>
 800536a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d107      	bne.n	8005382 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8005372:	f107 0208 	add.w	r2, r7, #8
 8005376:	2301      	movs	r3, #1
 8005378:	215f      	movs	r1, #95	@ 0x5f
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff fcd8 	bl	8004d30 <lsm6dso_read_reg>
 8005380:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d12a      	bne.n	80053de <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8005388:	7a3b      	ldrb	r3, [r7, #8]
 800538a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b03      	cmp	r3, #3
 8005392:	d81b      	bhi.n	80053cc <lsm6dso_fsm_data_rate_get+0x74>
 8005394:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <lsm6dso_fsm_data_rate_get+0x44>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	080053ad 	.word	0x080053ad
 80053a0:	080053b5 	.word	0x080053b5
 80053a4:	080053bd 	.word	0x080053bd
 80053a8:	080053c5 	.word	0x080053c5
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
        break;
 80053b2:	e00f      	b.n	80053d4 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2201      	movs	r2, #1
 80053b8:	701a      	strb	r2, [r3, #0]
        break;
 80053ba:	e00b      	b.n	80053d4 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2202      	movs	r2, #2
 80053c0:	701a      	strb	r2, [r3, #0]
        break;
 80053c2:	e007      	b.n	80053d4 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2203      	movs	r2, #3
 80053c8:	701a      	strb	r2, [r3, #0]
        break;
 80053ca:	e003      	b.n	80053d4 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
        break;
 80053d2:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80053d4:	2100      	movs	r1, #0
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff fe10 	bl	8004ffc <lsm6dso_mem_bank_set>
 80053dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053de:	68fb      	ldr	r3, [r7, #12]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <_fminf>:
 80053e8:	f002 bef8 	b.w	80081dc <fminf>

080053ec <neai_classification_init>:
 80053ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f0:	4605      	mov	r5, r0
 80053f2:	6800      	ldr	r0, [r0, #0]
 80053f4:	f7fb feaa 	bl	800114c <__aeabi_f2uiz>
 80053f8:	4604      	mov	r4, r0
 80053fa:	6868      	ldr	r0, [r5, #4]
 80053fc:	f7fb fea6 	bl	800114c <__aeabi_f2uiz>
 8005400:	4b4a      	ldr	r3, [pc, #296]	@ (800552c <neai_classification_init+0x140>)
 8005402:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8005530 <neai_classification_init+0x144>
 8005406:	6018      	str	r0, [r3, #0]
 8005408:	1823      	adds	r3, r4, r0
 800540a:	4a4a      	ldr	r2, [pc, #296]	@ (8005534 <neai_classification_init+0x148>)
 800540c:	f105 0808 	add.w	r8, r5, #8
 8005410:	3302      	adds	r3, #2
 8005412:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005416:	f8df e120 	ldr.w	lr, [pc, #288]	@ 8005538 <neai_classification_init+0x14c>
 800541a:	f8cc 8000 	str.w	r8, [ip]
 800541e:	f100 0c02 	add.w	ip, r0, #2
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	eb0c 0244 	add.w	r2, ip, r4, lsl #1
 8005428:	eb05 038c 	add.w	r3, r5, ip, lsl #2
 800542c:	4f43      	ldr	r7, [pc, #268]	@ (800553c <neai_classification_init+0x150>)
 800542e:	4e44      	ldr	r6, [pc, #272]	@ (8005540 <neai_classification_init+0x154>)
 8005430:	f8ce 3000 	str.w	r3, [lr]
 8005434:	18a3      	adds	r3, r4, r2
 8005436:	441c      	add	r4, r3
 8005438:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800543c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005440:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8005444:	493f      	ldr	r1, [pc, #252]	@ (8005544 <neai_classification_init+0x158>)
 8005446:	603a      	str	r2, [r7, #0]
 8005448:	6033      	str	r3, [r6, #0]
 800544a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800544e:	f7fb fe25 	bl	800109c <__aeabi_fcmpeq>
 8005452:	2800      	cmp	r0, #0
 8005454:	d057      	beq.n	8005506 <neai_classification_init+0x11a>
 8005456:	493c      	ldr	r1, [pc, #240]	@ (8005548 <neai_classification_init+0x15c>)
 8005458:	6860      	ldr	r0, [r4, #4]
 800545a:	f7fb fe1f 	bl	800109c <__aeabi_fcmpeq>
 800545e:	2800      	cmp	r0, #0
 8005460:	d051      	beq.n	8005506 <neai_classification_init+0x11a>
 8005462:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 8005466:	68a0      	ldr	r0, [r4, #8]
 8005468:	f7fb fe18 	bl	800109c <__aeabi_fcmpeq>
 800546c:	2800      	cmp	r0, #0
 800546e:	d04a      	beq.n	8005506 <neai_classification_init+0x11a>
 8005470:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005474:	68e0      	ldr	r0, [r4, #12]
 8005476:	f7fb fe11 	bl	800109c <__aeabi_fcmpeq>
 800547a:	2800      	cmp	r0, #0
 800547c:	d043      	beq.n	8005506 <neai_classification_init+0x11a>
 800547e:	2100      	movs	r1, #0
 8005480:	6920      	ldr	r0, [r4, #16]
 8005482:	f7fb fe0b 	bl	800109c <__aeabi_fcmpeq>
 8005486:	2800      	cmp	r0, #0
 8005488:	d03d      	beq.n	8005506 <neai_classification_init+0x11a>
 800548a:	2100      	movs	r1, #0
 800548c:	6960      	ldr	r0, [r4, #20]
 800548e:	f7fb fe05 	bl	800109c <__aeabi_fcmpeq>
 8005492:	2800      	cmp	r0, #0
 8005494:	d037      	beq.n	8005506 <neai_classification_init+0x11a>
 8005496:	2100      	movs	r1, #0
 8005498:	69a0      	ldr	r0, [r4, #24]
 800549a:	f7fb fdff 	bl	800109c <__aeabi_fcmpeq>
 800549e:	2800      	cmp	r0, #0
 80054a0:	d031      	beq.n	8005506 <neai_classification_init+0x11a>
 80054a2:	2100      	movs	r1, #0
 80054a4:	69e0      	ldr	r0, [r4, #28]
 80054a6:	f7fb fdf9 	bl	800109c <__aeabi_fcmpeq>
 80054aa:	b360      	cbz	r0, 8005506 <neai_classification_init+0x11a>
 80054ac:	4927      	ldr	r1, [pc, #156]	@ (800554c <neai_classification_init+0x160>)
 80054ae:	6a20      	ldr	r0, [r4, #32]
 80054b0:	f7fb fdf4 	bl	800109c <__aeabi_fcmpeq>
 80054b4:	b338      	cbz	r0, 8005506 <neai_classification_init+0x11a>
 80054b6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80054ba:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80054bc:	f7fb fdee 	bl	800109c <__aeabi_fcmpeq>
 80054c0:	b308      	cbz	r0, 8005506 <neai_classification_init+0x11a>
 80054c2:	2100      	movs	r1, #0
 80054c4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80054c6:	f7fb fde9 	bl	800109c <__aeabi_fcmpeq>
 80054ca:	b1e0      	cbz	r0, 8005506 <neai_classification_init+0x11a>
 80054cc:	491e      	ldr	r1, [pc, #120]	@ (8005548 <neai_classification_init+0x15c>)
 80054ce:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80054d0:	f7fb fde4 	bl	800109c <__aeabi_fcmpeq>
 80054d4:	b1b8      	cbz	r0, 8005506 <neai_classification_init+0x11a>
 80054d6:	2100      	movs	r1, #0
 80054d8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80054da:	f7fb fddf 	bl	800109c <__aeabi_fcmpeq>
 80054de:	b190      	cbz	r0, 8005506 <neai_classification_init+0x11a>
 80054e0:	2100      	movs	r1, #0
 80054e2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80054e4:	f7fb fdda 	bl	800109c <__aeabi_fcmpeq>
 80054e8:	b168      	cbz	r0, 8005506 <neai_classification_init+0x11a>
 80054ea:	2100      	movs	r1, #0
 80054ec:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80054ee:	f7fb fdd5 	bl	800109c <__aeabi_fcmpeq>
 80054f2:	b140      	cbz	r0, 8005506 <neai_classification_init+0x11a>
 80054f4:	4916      	ldr	r1, [pc, #88]	@ (8005550 <neai_classification_init+0x164>)
 80054f6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80054f8:	f7fb fdd0 	bl	800109c <__aeabi_fcmpeq>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	bf0c      	ite	eq
 8005500:	237d      	moveq	r3, #125	@ 0x7d
 8005502:	2300      	movne	r3, #0
 8005504:	e000      	b.n	8005508 <neai_classification_init+0x11c>
 8005506:	237d      	movs	r3, #125	@ 0x7d
 8005508:	4c12      	ldr	r4, [pc, #72]	@ (8005554 <neai_classification_init+0x168>)
 800550a:	4913      	ldr	r1, [pc, #76]	@ (8005558 <neai_classification_init+0x16c>)
 800550c:	4813      	ldr	r0, [pc, #76]	@ (800555c <neai_classification_init+0x170>)
 800550e:	7023      	strb	r3, [r4, #0]
 8005510:	f7ff ff6a 	bl	80053e8 <_fminf>
 8005514:	4911      	ldr	r1, [pc, #68]	@ (800555c <neai_classification_init+0x170>)
 8005516:	f7fb fdc1 	bl	800109c <__aeabi_fcmpeq>
 800551a:	b110      	cbz	r0, 8005522 <neai_classification_init+0x136>
 800551c:	7820      	ldrb	r0, [r4, #0]
 800551e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005522:	2381      	movs	r3, #129	@ 0x81
 8005524:	7023      	strb	r3, [r4, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800552c:	2000090c 	.word	0x2000090c
 8005530:	20000908 	.word	0x20000908
 8005534:	20000900 	.word	0x20000900
 8005538:	20000904 	.word	0x20000904
 800553c:	200008fc 	.word	0x200008fc
 8005540:	200008f8 	.word	0x200008f8
 8005544:	40a00000 	.word	0x40a00000
 8005548:	40400000 	.word	0x40400000
 800554c:	42c80000 	.word	0x42c80000
 8005550:	49742400 	.word	0x49742400
 8005554:	20000020 	.word	0x20000020
 8005558:	40066666 	.word	0x40066666
 800555c:	3f8ccccd 	.word	0x3f8ccccd

08005560 <neai_classification>:
 8005560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005564:	4b7b      	ldr	r3, [pc, #492]	@ (8005754 <neai_classification+0x1f4>)
 8005566:	b087      	sub	sp, #28
 8005568:	781d      	ldrb	r5, [r3, #0]
 800556a:	9101      	str	r1, [sp, #4]
 800556c:	9204      	str	r2, [sp, #16]
 800556e:	b115      	cbz	r5, 8005576 <neai_classification+0x16>
 8005570:	2d81      	cmp	r5, #129	@ 0x81
 8005572:	f040 80de 	bne.w	8005732 <neai_classification+0x1d2>
 8005576:	4f78      	ldr	r7, [pc, #480]	@ (8005758 <neai_classification+0x1f8>)
 8005578:	4604      	mov	r4, r0
 800557a:	46b9      	mov	r9, r7
 800557c:	2600      	movs	r6, #0
 800557e:	f8df 81dc 	ldr.w	r8, [pc, #476]	@ 800575c <neai_classification+0x1fc>
 8005582:	2300      	movs	r3, #0
 8005584:	4a76      	ldr	r2, [pc, #472]	@ (8005760 <neai_classification+0x200>)
 8005586:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800558a:	3303      	adds	r3, #3
 800558c:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8005590:	f842 1f04 	str.w	r1, [r2, #4]!
 8005594:	d1f7      	bne.n	8005586 <neai_classification+0x26>
 8005596:	4648      	mov	r0, r9
 8005598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800559c:	4641      	mov	r1, r8
 800559e:	3601      	adds	r6, #1
 80055a0:	f000 ffdd 	bl	800655e <memcpy>
 80055a4:	2e03      	cmp	r6, #3
 80055a6:	f509 7900 	add.w	r9, r9, #512	@ 0x200
 80055aa:	f104 0404 	add.w	r4, r4, #4
 80055ae:	d1e8      	bne.n	8005582 <neai_classification+0x22>
 80055b0:	2600      	movs	r6, #0
 80055b2:	9b01      	ldr	r3, [sp, #4]
 80055b4:	601e      	str	r6, [r3, #0]
 80055b6:	605e      	str	r6, [r3, #4]
 80055b8:	609e      	str	r6, [r3, #8]
 80055ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005764 <neai_classification+0x204>)
 80055bc:	681c      	ldr	r4, [r3, #0]
 80055be:	2c00      	cmp	r4, #0
 80055c0:	d06c      	beq.n	800569c <neai_classification+0x13c>
 80055c2:	4a69      	ldr	r2, [pc, #420]	@ (8005768 <neai_classification+0x208>)
 80055c4:	4b69      	ldr	r3, [pc, #420]	@ (800576c <neai_classification+0x20c>)
 80055c6:	f8d2 9000 	ldr.w	r9, [r2]
 80055ca:	4a69      	ldr	r2, [pc, #420]	@ (8005770 <neai_classification+0x210>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f8d2 8000 	ldr.w	r8, [r2]
 80055d2:	4a68      	ldr	r2, [pc, #416]	@ (8005774 <neai_classification+0x214>)
 80055d4:	4620      	mov	r0, r4
 80055d6:	f8d2 b000 	ldr.w	fp, [r2]
 80055da:	4a67      	ldr	r2, [pc, #412]	@ (8005778 <neai_classification+0x218>)
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	f8d2 a000 	ldr.w	sl, [r2]
 80055e2:	f7fb fb6f 	bl	8000cc4 <__aeabi_ui2f>
 80055e6:	4601      	mov	r1, r0
 80055e8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80055ec:	f7fb fc76 	bl	8000edc <__aeabi_fdiv>
 80055f0:	9b00      	ldr	r3, [sp, #0]
 80055f2:	9002      	str	r0, [sp, #8]
 80055f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80055f8:	3b04      	subs	r3, #4
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	1f23      	subs	r3, r4, #4
 80055fe:	9303      	str	r3, [sp, #12]
 8005600:	9505      	str	r5, [sp, #20]
 8005602:	9b00      	ldr	r3, [sp, #0]
 8005604:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	f7fb fd9f 	bl	800114c <__aeabi_f2uiz>
 800560e:	4605      	mov	r5, r0
 8005610:	4604      	mov	r4, r0
 8005612:	e00a      	b.n	800562a <neai_classification+0xca>
 8005614:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 8005618:	4631      	mov	r1, r6
 800561a:	4620      	mov	r0, r4
 800561c:	f7fb fd48 	bl	80010b0 <__aeabi_fcmplt>
 8005620:	b9b8      	cbnz	r0, 8005652 <neai_classification+0xf2>
 8005622:	4620      	mov	r0, r4
 8005624:	f7fb fd92 	bl	800114c <__aeabi_f2uiz>
 8005628:	1944      	adds	r4, r0, r5
 800562a:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 800562e:	f7fb fd8d 	bl	800114c <__aeabi_f2uiz>
 8005632:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 8005636:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800563a:	f7fb fd39 	bl	80010b0 <__aeabi_fcmplt>
 800563e:	2800      	cmp	r0, #0
 8005640:	d1e8      	bne.n	8005614 <neai_classification+0xb4>
 8005642:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 8005646:	4631      	mov	r1, r6
 8005648:	4620      	mov	r0, r4
 800564a:	f7fb fd31 	bl	80010b0 <__aeabi_fcmplt>
 800564e:	2800      	cmp	r0, #0
 8005650:	d0e7      	beq.n	8005622 <neai_classification+0xc2>
 8005652:	f104 4000 	add.w	r0, r4, #2147483648	@ 0x80000000
 8005656:	f7fb fd79 	bl	800114c <__aeabi_f2uiz>
 800565a:	b284      	uxth	r4, r0
 800565c:	9d01      	ldr	r5, [sp, #4]
 800565e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8005662:	3c01      	subs	r4, #1
 8005664:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8005668:	9902      	ldr	r1, [sp, #8]
 800566a:	f7fb fa7b 	bl	8000b64 <__addsf3>
 800566e:	9b00      	ldr	r3, [sp, #0]
 8005670:	9a03      	ldr	r2, [sp, #12]
 8005672:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8005676:	4293      	cmp	r3, r2
 8005678:	d1c3      	bne.n	8005602 <neai_classification+0xa2>
 800567a:	462b      	mov	r3, r5
 800567c:	685c      	ldr	r4, [r3, #4]
 800567e:	681f      	ldr	r7, [r3, #0]
 8005680:	4620      	mov	r0, r4
 8005682:	4639      	mov	r1, r7
 8005684:	9d05      	ldr	r5, [sp, #20]
 8005686:	689e      	ldr	r6, [r3, #8]
 8005688:	f7fb fd30 	bl	80010ec <__aeabi_fcmpgt>
 800568c:	2800      	cmp	r0, #0
 800568e:	d058      	beq.n	8005742 <neai_classification+0x1e2>
 8005690:	4631      	mov	r1, r6
 8005692:	4620      	mov	r0, r4
 8005694:	f7fb fd0c 	bl	80010b0 <__aeabi_fcmplt>
 8005698:	2800      	cmp	r0, #0
 800569a:	d050      	beq.n	800573e <neai_classification+0x1de>
 800569c:	f04f 0800 	mov.w	r8, #0
 80056a0:	f04f 4782 	mov.w	r7, #1090519040	@ 0x41000000
 80056a4:	9b01      	ldr	r3, [sp, #4]
 80056a6:	f1a3 0904 	sub.w	r9, r3, #4
 80056aa:	f103 0408 	add.w	r4, r3, #8
 80056ae:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80056b2:	4631      	mov	r1, r6
 80056b4:	f7fb fa54 	bl	8000b60 <__aeabi_fsub>
 80056b8:	4639      	mov	r1, r7
 80056ba:	f7fb fb5b 	bl	8000d74 <__aeabi_fmul>
 80056be:	f002 fd5f 	bl	8008180 <expf>
 80056c2:	4601      	mov	r1, r0
 80056c4:	4640      	mov	r0, r8
 80056c6:	f8c9 1000 	str.w	r1, [r9]
 80056ca:	f7fb fa4b 	bl	8000b64 <__addsf3>
 80056ce:	45a1      	cmp	r9, r4
 80056d0:	4680      	mov	r8, r0
 80056d2:	d1ec      	bne.n	80056ae <neai_classification+0x14e>
 80056d4:	4601      	mov	r1, r0
 80056d6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80056da:	f7fb fbff 	bl	8000edc <__aeabi_fdiv>
 80056de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80056e2:	4607      	mov	r7, r0
 80056e4:	f8d8 1000 	ldr.w	r1, [r8]
 80056e8:	f7fb fb44 	bl	8000d74 <__aeabi_fmul>
 80056ec:	4606      	mov	r6, r0
 80056ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80056f2:	4638      	mov	r0, r7
 80056f4:	f8c8 6000 	str.w	r6, [r8]
 80056f8:	f7fb fb3c 	bl	8000d74 <__aeabi_fmul>
 80056fc:	4604      	mov	r4, r0
 80056fe:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8005702:	4638      	mov	r0, r7
 8005704:	f8c8 4004 	str.w	r4, [r8, #4]
 8005708:	f7fb fb34 	bl	8000d74 <__aeabi_fmul>
 800570c:	4631      	mov	r1, r6
 800570e:	4607      	mov	r7, r0
 8005710:	f8c8 0008 	str.w	r0, [r8, #8]
 8005714:	4620      	mov	r0, r4
 8005716:	f7fb fce9 	bl	80010ec <__aeabi_fcmpgt>
 800571a:	b970      	cbnz	r0, 800573a <neai_classification+0x1da>
 800571c:	4634      	mov	r4, r6
 800571e:	2601      	movs	r6, #1
 8005720:	4639      	mov	r1, r7
 8005722:	4620      	mov	r0, r4
 8005724:	f7fb fcc4 	bl	80010b0 <__aeabi_fcmplt>
 8005728:	2800      	cmp	r0, #0
 800572a:	bf18      	it	ne
 800572c:	2603      	movne	r6, #3
 800572e:	9b04      	ldr	r3, [sp, #16]
 8005730:	801e      	strh	r6, [r3, #0]
 8005732:	4628      	mov	r0, r5
 8005734:	b007      	add	sp, #28
 8005736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573a:	2602      	movs	r6, #2
 800573c:	e7f0      	b.n	8005720 <neai_classification+0x1c0>
 800573e:	4626      	mov	r6, r4
 8005740:	e7ac      	b.n	800569c <neai_classification+0x13c>
 8005742:	463c      	mov	r4, r7
 8005744:	4631      	mov	r1, r6
 8005746:	4620      	mov	r0, r4
 8005748:	f7fb fcb2 	bl	80010b0 <__aeabi_fcmplt>
 800574c:	2800      	cmp	r0, #0
 800574e:	d1a5      	bne.n	800569c <neai_classification+0x13c>
 8005750:	e7f5      	b.n	800573e <neai_classification+0x1de>
 8005752:	bf00      	nop
 8005754:	20000020 	.word	0x20000020
 8005758:	20000b10 	.word	0x20000b10
 800575c:	20000910 	.word	0x20000910
 8005760:	2000090c 	.word	0x2000090c
 8005764:	2000090c 	.word	0x2000090c
 8005768:	20000904 	.word	0x20000904
 800576c:	20000908 	.word	0x20000908
 8005770:	200008f8 	.word	0x200008f8
 8005774:	200008fc 	.word	0x200008fc
 8005778:	20000900 	.word	0x20000900

0800577c <__cvt>:
 800577c:	2b00      	cmp	r3, #0
 800577e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005782:	461d      	mov	r5, r3
 8005784:	bfbb      	ittet	lt
 8005786:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800578a:	461d      	movlt	r5, r3
 800578c:	2300      	movge	r3, #0
 800578e:	232d      	movlt	r3, #45	@ 0x2d
 8005790:	b088      	sub	sp, #32
 8005792:	4614      	mov	r4, r2
 8005794:	bfb8      	it	lt
 8005796:	4614      	movlt	r4, r2
 8005798:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800579a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800579c:	7013      	strb	r3, [r2, #0]
 800579e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80057a4:	f023 0820 	bic.w	r8, r3, #32
 80057a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057ac:	d005      	beq.n	80057ba <__cvt+0x3e>
 80057ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80057b2:	d100      	bne.n	80057b6 <__cvt+0x3a>
 80057b4:	3601      	adds	r6, #1
 80057b6:	2302      	movs	r3, #2
 80057b8:	e000      	b.n	80057bc <__cvt+0x40>
 80057ba:	2303      	movs	r3, #3
 80057bc:	aa07      	add	r2, sp, #28
 80057be:	9204      	str	r2, [sp, #16]
 80057c0:	aa06      	add	r2, sp, #24
 80057c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80057c6:	e9cd 3600 	strd	r3, r6, [sp]
 80057ca:	4622      	mov	r2, r4
 80057cc:	462b      	mov	r3, r5
 80057ce:	f000 ff5f 	bl	8006690 <_dtoa_r>
 80057d2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80057d6:	4607      	mov	r7, r0
 80057d8:	d119      	bne.n	800580e <__cvt+0x92>
 80057da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80057dc:	07db      	lsls	r3, r3, #31
 80057de:	d50e      	bpl.n	80057fe <__cvt+0x82>
 80057e0:	eb00 0906 	add.w	r9, r0, r6
 80057e4:	2200      	movs	r2, #0
 80057e6:	2300      	movs	r3, #0
 80057e8:	4620      	mov	r0, r4
 80057ea:	4629      	mov	r1, r5
 80057ec:	f7fb f8f4 	bl	80009d8 <__aeabi_dcmpeq>
 80057f0:	b108      	cbz	r0, 80057f6 <__cvt+0x7a>
 80057f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80057f6:	2230      	movs	r2, #48	@ 0x30
 80057f8:	9b07      	ldr	r3, [sp, #28]
 80057fa:	454b      	cmp	r3, r9
 80057fc:	d31e      	bcc.n	800583c <__cvt+0xc0>
 80057fe:	4638      	mov	r0, r7
 8005800:	9b07      	ldr	r3, [sp, #28]
 8005802:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005804:	1bdb      	subs	r3, r3, r7
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	b008      	add	sp, #32
 800580a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005812:	eb00 0906 	add.w	r9, r0, r6
 8005816:	d1e5      	bne.n	80057e4 <__cvt+0x68>
 8005818:	7803      	ldrb	r3, [r0, #0]
 800581a:	2b30      	cmp	r3, #48	@ 0x30
 800581c:	d10a      	bne.n	8005834 <__cvt+0xb8>
 800581e:	2200      	movs	r2, #0
 8005820:	2300      	movs	r3, #0
 8005822:	4620      	mov	r0, r4
 8005824:	4629      	mov	r1, r5
 8005826:	f7fb f8d7 	bl	80009d8 <__aeabi_dcmpeq>
 800582a:	b918      	cbnz	r0, 8005834 <__cvt+0xb8>
 800582c:	f1c6 0601 	rsb	r6, r6, #1
 8005830:	f8ca 6000 	str.w	r6, [sl]
 8005834:	f8da 3000 	ldr.w	r3, [sl]
 8005838:	4499      	add	r9, r3
 800583a:	e7d3      	b.n	80057e4 <__cvt+0x68>
 800583c:	1c59      	adds	r1, r3, #1
 800583e:	9107      	str	r1, [sp, #28]
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	e7d9      	b.n	80057f8 <__cvt+0x7c>

08005844 <__exponent>:
 8005844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005846:	2900      	cmp	r1, #0
 8005848:	bfb6      	itet	lt
 800584a:	232d      	movlt	r3, #45	@ 0x2d
 800584c:	232b      	movge	r3, #43	@ 0x2b
 800584e:	4249      	neglt	r1, r1
 8005850:	2909      	cmp	r1, #9
 8005852:	7002      	strb	r2, [r0, #0]
 8005854:	7043      	strb	r3, [r0, #1]
 8005856:	dd29      	ble.n	80058ac <__exponent+0x68>
 8005858:	f10d 0307 	add.w	r3, sp, #7
 800585c:	461d      	mov	r5, r3
 800585e:	270a      	movs	r7, #10
 8005860:	fbb1 f6f7 	udiv	r6, r1, r7
 8005864:	461a      	mov	r2, r3
 8005866:	fb07 1416 	mls	r4, r7, r6, r1
 800586a:	3430      	adds	r4, #48	@ 0x30
 800586c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005870:	460c      	mov	r4, r1
 8005872:	2c63      	cmp	r4, #99	@ 0x63
 8005874:	4631      	mov	r1, r6
 8005876:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800587a:	dcf1      	bgt.n	8005860 <__exponent+0x1c>
 800587c:	3130      	adds	r1, #48	@ 0x30
 800587e:	1e94      	subs	r4, r2, #2
 8005880:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005884:	4623      	mov	r3, r4
 8005886:	1c41      	adds	r1, r0, #1
 8005888:	42ab      	cmp	r3, r5
 800588a:	d30a      	bcc.n	80058a2 <__exponent+0x5e>
 800588c:	f10d 0309 	add.w	r3, sp, #9
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	42ac      	cmp	r4, r5
 8005894:	bf88      	it	hi
 8005896:	2300      	movhi	r3, #0
 8005898:	3302      	adds	r3, #2
 800589a:	4403      	add	r3, r0
 800589c:	1a18      	subs	r0, r3, r0
 800589e:	b003      	add	sp, #12
 80058a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80058a6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80058aa:	e7ed      	b.n	8005888 <__exponent+0x44>
 80058ac:	2330      	movs	r3, #48	@ 0x30
 80058ae:	3130      	adds	r1, #48	@ 0x30
 80058b0:	7083      	strb	r3, [r0, #2]
 80058b2:	70c1      	strb	r1, [r0, #3]
 80058b4:	1d03      	adds	r3, r0, #4
 80058b6:	e7f1      	b.n	800589c <__exponent+0x58>

080058b8 <_printf_float>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	b091      	sub	sp, #68	@ 0x44
 80058be:	460c      	mov	r4, r1
 80058c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80058c4:	4616      	mov	r6, r2
 80058c6:	461f      	mov	r7, r3
 80058c8:	4605      	mov	r5, r0
 80058ca:	f000 fdc3 	bl	8006454 <_localeconv_r>
 80058ce:	6803      	ldr	r3, [r0, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	9308      	str	r3, [sp, #32]
 80058d4:	f7fa fc54 	bl	8000180 <strlen>
 80058d8:	2300      	movs	r3, #0
 80058da:	930e      	str	r3, [sp, #56]	@ 0x38
 80058dc:	f8d8 3000 	ldr.w	r3, [r8]
 80058e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80058e2:	3307      	adds	r3, #7
 80058e4:	f023 0307 	bic.w	r3, r3, #7
 80058e8:	f103 0208 	add.w	r2, r3, #8
 80058ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058f0:	f8d4 b000 	ldr.w	fp, [r4]
 80058f4:	f8c8 2000 	str.w	r2, [r8]
 80058f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005900:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005902:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005906:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800590a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800590e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005912:	4b9c      	ldr	r3, [pc, #624]	@ (8005b84 <_printf_float+0x2cc>)
 8005914:	f7fb f892 	bl	8000a3c <__aeabi_dcmpun>
 8005918:	bb70      	cbnz	r0, 8005978 <_printf_float+0xc0>
 800591a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800591e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005922:	4b98      	ldr	r3, [pc, #608]	@ (8005b84 <_printf_float+0x2cc>)
 8005924:	f7fb f86c 	bl	8000a00 <__aeabi_dcmple>
 8005928:	bb30      	cbnz	r0, 8005978 <_printf_float+0xc0>
 800592a:	2200      	movs	r2, #0
 800592c:	2300      	movs	r3, #0
 800592e:	4640      	mov	r0, r8
 8005930:	4649      	mov	r1, r9
 8005932:	f7fb f85b 	bl	80009ec <__aeabi_dcmplt>
 8005936:	b110      	cbz	r0, 800593e <_printf_float+0x86>
 8005938:	232d      	movs	r3, #45	@ 0x2d
 800593a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800593e:	4a92      	ldr	r2, [pc, #584]	@ (8005b88 <_printf_float+0x2d0>)
 8005940:	4b92      	ldr	r3, [pc, #584]	@ (8005b8c <_printf_float+0x2d4>)
 8005942:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005946:	bf8c      	ite	hi
 8005948:	4690      	movhi	r8, r2
 800594a:	4698      	movls	r8, r3
 800594c:	2303      	movs	r3, #3
 800594e:	f04f 0900 	mov.w	r9, #0
 8005952:	6123      	str	r3, [r4, #16]
 8005954:	f02b 0304 	bic.w	r3, fp, #4
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	4633      	mov	r3, r6
 800595c:	4621      	mov	r1, r4
 800595e:	4628      	mov	r0, r5
 8005960:	9700      	str	r7, [sp, #0]
 8005962:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005964:	f000 f9d4 	bl	8005d10 <_printf_common>
 8005968:	3001      	adds	r0, #1
 800596a:	f040 8090 	bne.w	8005a8e <_printf_float+0x1d6>
 800596e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005972:	b011      	add	sp, #68	@ 0x44
 8005974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005978:	4642      	mov	r2, r8
 800597a:	464b      	mov	r3, r9
 800597c:	4640      	mov	r0, r8
 800597e:	4649      	mov	r1, r9
 8005980:	f7fb f85c 	bl	8000a3c <__aeabi_dcmpun>
 8005984:	b148      	cbz	r0, 800599a <_printf_float+0xe2>
 8005986:	464b      	mov	r3, r9
 8005988:	2b00      	cmp	r3, #0
 800598a:	bfb8      	it	lt
 800598c:	232d      	movlt	r3, #45	@ 0x2d
 800598e:	4a80      	ldr	r2, [pc, #512]	@ (8005b90 <_printf_float+0x2d8>)
 8005990:	bfb8      	it	lt
 8005992:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005996:	4b7f      	ldr	r3, [pc, #508]	@ (8005b94 <_printf_float+0x2dc>)
 8005998:	e7d3      	b.n	8005942 <_printf_float+0x8a>
 800599a:	6863      	ldr	r3, [r4, #4]
 800599c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	d13f      	bne.n	8005a24 <_printf_float+0x16c>
 80059a4:	2306      	movs	r3, #6
 80059a6:	6063      	str	r3, [r4, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80059ae:	6023      	str	r3, [r4, #0]
 80059b0:	9206      	str	r2, [sp, #24]
 80059b2:	aa0e      	add	r2, sp, #56	@ 0x38
 80059b4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80059b8:	aa0d      	add	r2, sp, #52	@ 0x34
 80059ba:	9203      	str	r2, [sp, #12]
 80059bc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80059c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80059c4:	6863      	ldr	r3, [r4, #4]
 80059c6:	4642      	mov	r2, r8
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	4628      	mov	r0, r5
 80059cc:	464b      	mov	r3, r9
 80059ce:	910a      	str	r1, [sp, #40]	@ 0x28
 80059d0:	f7ff fed4 	bl	800577c <__cvt>
 80059d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059d6:	4680      	mov	r8, r0
 80059d8:	2947      	cmp	r1, #71	@ 0x47
 80059da:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80059dc:	d128      	bne.n	8005a30 <_printf_float+0x178>
 80059de:	1cc8      	adds	r0, r1, #3
 80059e0:	db02      	blt.n	80059e8 <_printf_float+0x130>
 80059e2:	6863      	ldr	r3, [r4, #4]
 80059e4:	4299      	cmp	r1, r3
 80059e6:	dd40      	ble.n	8005a6a <_printf_float+0x1b2>
 80059e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80059ec:	fa5f fa8a 	uxtb.w	sl, sl
 80059f0:	4652      	mov	r2, sl
 80059f2:	3901      	subs	r1, #1
 80059f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80059f8:	910d      	str	r1, [sp, #52]	@ 0x34
 80059fa:	f7ff ff23 	bl	8005844 <__exponent>
 80059fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a00:	4681      	mov	r9, r0
 8005a02:	1813      	adds	r3, r2, r0
 8005a04:	2a01      	cmp	r2, #1
 8005a06:	6123      	str	r3, [r4, #16]
 8005a08:	dc02      	bgt.n	8005a10 <_printf_float+0x158>
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	07d2      	lsls	r2, r2, #31
 8005a0e:	d501      	bpl.n	8005a14 <_printf_float+0x15c>
 8005a10:	3301      	adds	r3, #1
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d09e      	beq.n	800595a <_printf_float+0xa2>
 8005a1c:	232d      	movs	r3, #45	@ 0x2d
 8005a1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a22:	e79a      	b.n	800595a <_printf_float+0xa2>
 8005a24:	2947      	cmp	r1, #71	@ 0x47
 8005a26:	d1bf      	bne.n	80059a8 <_printf_float+0xf0>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1bd      	bne.n	80059a8 <_printf_float+0xf0>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e7ba      	b.n	80059a6 <_printf_float+0xee>
 8005a30:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a34:	d9dc      	bls.n	80059f0 <_printf_float+0x138>
 8005a36:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a3a:	d118      	bne.n	8005a6e <_printf_float+0x1b6>
 8005a3c:	2900      	cmp	r1, #0
 8005a3e:	6863      	ldr	r3, [r4, #4]
 8005a40:	dd0b      	ble.n	8005a5a <_printf_float+0x1a2>
 8005a42:	6121      	str	r1, [r4, #16]
 8005a44:	b913      	cbnz	r3, 8005a4c <_printf_float+0x194>
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	07d0      	lsls	r0, r2, #31
 8005a4a:	d502      	bpl.n	8005a52 <_printf_float+0x19a>
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	440b      	add	r3, r1
 8005a50:	6123      	str	r3, [r4, #16]
 8005a52:	f04f 0900 	mov.w	r9, #0
 8005a56:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a58:	e7dc      	b.n	8005a14 <_printf_float+0x15c>
 8005a5a:	b913      	cbnz	r3, 8005a62 <_printf_float+0x1aa>
 8005a5c:	6822      	ldr	r2, [r4, #0]
 8005a5e:	07d2      	lsls	r2, r2, #31
 8005a60:	d501      	bpl.n	8005a66 <_printf_float+0x1ae>
 8005a62:	3302      	adds	r3, #2
 8005a64:	e7f4      	b.n	8005a50 <_printf_float+0x198>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e7f2      	b.n	8005a50 <_printf_float+0x198>
 8005a6a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a70:	4299      	cmp	r1, r3
 8005a72:	db05      	blt.n	8005a80 <_printf_float+0x1c8>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	6121      	str	r1, [r4, #16]
 8005a78:	07d8      	lsls	r0, r3, #31
 8005a7a:	d5ea      	bpl.n	8005a52 <_printf_float+0x19a>
 8005a7c:	1c4b      	adds	r3, r1, #1
 8005a7e:	e7e7      	b.n	8005a50 <_printf_float+0x198>
 8005a80:	2900      	cmp	r1, #0
 8005a82:	bfcc      	ite	gt
 8005a84:	2201      	movgt	r2, #1
 8005a86:	f1c1 0202 	rsble	r2, r1, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	e7e0      	b.n	8005a50 <_printf_float+0x198>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	055a      	lsls	r2, r3, #21
 8005a92:	d407      	bmi.n	8005aa4 <_printf_float+0x1ec>
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	4642      	mov	r2, r8
 8005a98:	4631      	mov	r1, r6
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	47b8      	blx	r7
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d12b      	bne.n	8005afa <_printf_float+0x242>
 8005aa2:	e764      	b.n	800596e <_printf_float+0xb6>
 8005aa4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005aa8:	f240 80dc 	bls.w	8005c64 <_printf_float+0x3ac>
 8005aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f7fa ff90 	bl	80009d8 <__aeabi_dcmpeq>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d033      	beq.n	8005b24 <_printf_float+0x26c>
 8005abc:	2301      	movs	r3, #1
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	4a35      	ldr	r2, [pc, #212]	@ (8005b98 <_printf_float+0x2e0>)
 8005ac4:	47b8      	blx	r7
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	f43f af51 	beq.w	800596e <_printf_float+0xb6>
 8005acc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005ad0:	4543      	cmp	r3, r8
 8005ad2:	db02      	blt.n	8005ada <_printf_float+0x222>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	07d8      	lsls	r0, r3, #31
 8005ad8:	d50f      	bpl.n	8005afa <_printf_float+0x242>
 8005ada:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ade:	4631      	mov	r1, r6
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	47b8      	blx	r7
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	f43f af42 	beq.w	800596e <_printf_float+0xb6>
 8005aea:	f04f 0900 	mov.w	r9, #0
 8005aee:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005af2:	f104 0a1a 	add.w	sl, r4, #26
 8005af6:	45c8      	cmp	r8, r9
 8005af8:	dc09      	bgt.n	8005b0e <_printf_float+0x256>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	079b      	lsls	r3, r3, #30
 8005afe:	f100 8102 	bmi.w	8005d06 <_printf_float+0x44e>
 8005b02:	68e0      	ldr	r0, [r4, #12]
 8005b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b06:	4298      	cmp	r0, r3
 8005b08:	bfb8      	it	lt
 8005b0a:	4618      	movlt	r0, r3
 8005b0c:	e731      	b.n	8005972 <_printf_float+0xba>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4652      	mov	r2, sl
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	47b8      	blx	r7
 8005b18:	3001      	adds	r0, #1
 8005b1a:	f43f af28 	beq.w	800596e <_printf_float+0xb6>
 8005b1e:	f109 0901 	add.w	r9, r9, #1
 8005b22:	e7e8      	b.n	8005af6 <_printf_float+0x23e>
 8005b24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dc38      	bgt.n	8005b9c <_printf_float+0x2e4>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4628      	mov	r0, r5
 8005b30:	4a19      	ldr	r2, [pc, #100]	@ (8005b98 <_printf_float+0x2e0>)
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	f43f af1a 	beq.w	800596e <_printf_float+0xb6>
 8005b3a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005b3e:	ea59 0303 	orrs.w	r3, r9, r3
 8005b42:	d102      	bne.n	8005b4a <_printf_float+0x292>
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	07d9      	lsls	r1, r3, #31
 8005b48:	d5d7      	bpl.n	8005afa <_printf_float+0x242>
 8005b4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4628      	mov	r0, r5
 8005b52:	47b8      	blx	r7
 8005b54:	3001      	adds	r0, #1
 8005b56:	f43f af0a 	beq.w	800596e <_printf_float+0xb6>
 8005b5a:	f04f 0a00 	mov.w	sl, #0
 8005b5e:	f104 0b1a 	add.w	fp, r4, #26
 8005b62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b64:	425b      	negs	r3, r3
 8005b66:	4553      	cmp	r3, sl
 8005b68:	dc01      	bgt.n	8005b6e <_printf_float+0x2b6>
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	e793      	b.n	8005a96 <_printf_float+0x1de>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	465a      	mov	r2, fp
 8005b72:	4631      	mov	r1, r6
 8005b74:	4628      	mov	r0, r5
 8005b76:	47b8      	blx	r7
 8005b78:	3001      	adds	r0, #1
 8005b7a:	f43f aef8 	beq.w	800596e <_printf_float+0xb6>
 8005b7e:	f10a 0a01 	add.w	sl, sl, #1
 8005b82:	e7ee      	b.n	8005b62 <_printf_float+0x2aa>
 8005b84:	7fefffff 	.word	0x7fefffff
 8005b88:	0800a394 	.word	0x0800a394
 8005b8c:	0800a390 	.word	0x0800a390
 8005b90:	0800a39c 	.word	0x0800a39c
 8005b94:	0800a398 	.word	0x0800a398
 8005b98:	0800a3a0 	.word	0x0800a3a0
 8005b9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b9e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005ba2:	4553      	cmp	r3, sl
 8005ba4:	bfa8      	it	ge
 8005ba6:	4653      	movge	r3, sl
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	4699      	mov	r9, r3
 8005bac:	dc36      	bgt.n	8005c1c <_printf_float+0x364>
 8005bae:	f04f 0b00 	mov.w	fp, #0
 8005bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bb6:	f104 021a 	add.w	r2, r4, #26
 8005bba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bbe:	eba3 0309 	sub.w	r3, r3, r9
 8005bc2:	455b      	cmp	r3, fp
 8005bc4:	dc31      	bgt.n	8005c2a <_printf_float+0x372>
 8005bc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bc8:	459a      	cmp	sl, r3
 8005bca:	dc3a      	bgt.n	8005c42 <_printf_float+0x38a>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	07da      	lsls	r2, r3, #31
 8005bd0:	d437      	bmi.n	8005c42 <_printf_float+0x38a>
 8005bd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bd4:	ebaa 0903 	sub.w	r9, sl, r3
 8005bd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bda:	ebaa 0303 	sub.w	r3, sl, r3
 8005bde:	4599      	cmp	r9, r3
 8005be0:	bfa8      	it	ge
 8005be2:	4699      	movge	r9, r3
 8005be4:	f1b9 0f00 	cmp.w	r9, #0
 8005be8:	dc33      	bgt.n	8005c52 <_printf_float+0x39a>
 8005bea:	f04f 0800 	mov.w	r8, #0
 8005bee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bf2:	f104 0b1a 	add.w	fp, r4, #26
 8005bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bf8:	ebaa 0303 	sub.w	r3, sl, r3
 8005bfc:	eba3 0309 	sub.w	r3, r3, r9
 8005c00:	4543      	cmp	r3, r8
 8005c02:	f77f af7a 	ble.w	8005afa <_printf_float+0x242>
 8005c06:	2301      	movs	r3, #1
 8005c08:	465a      	mov	r2, fp
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b8      	blx	r7
 8005c10:	3001      	adds	r0, #1
 8005c12:	f43f aeac 	beq.w	800596e <_printf_float+0xb6>
 8005c16:	f108 0801 	add.w	r8, r8, #1
 8005c1a:	e7ec      	b.n	8005bf6 <_printf_float+0x33e>
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	d1c2      	bne.n	8005bae <_printf_float+0x2f6>
 8005c28:	e6a1      	b.n	800596e <_printf_float+0xb6>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	4628      	mov	r0, r5
 8005c30:	920a      	str	r2, [sp, #40]	@ 0x28
 8005c32:	47b8      	blx	r7
 8005c34:	3001      	adds	r0, #1
 8005c36:	f43f ae9a 	beq.w	800596e <_printf_float+0xb6>
 8005c3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c3c:	f10b 0b01 	add.w	fp, fp, #1
 8005c40:	e7bb      	b.n	8005bba <_printf_float+0x302>
 8005c42:	4631      	mov	r1, r6
 8005c44:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c48:	4628      	mov	r0, r5
 8005c4a:	47b8      	blx	r7
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d1c0      	bne.n	8005bd2 <_printf_float+0x31a>
 8005c50:	e68d      	b.n	800596e <_printf_float+0xb6>
 8005c52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c54:	464b      	mov	r3, r9
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	4442      	add	r2, r8
 8005c5c:	47b8      	blx	r7
 8005c5e:	3001      	adds	r0, #1
 8005c60:	d1c3      	bne.n	8005bea <_printf_float+0x332>
 8005c62:	e684      	b.n	800596e <_printf_float+0xb6>
 8005c64:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005c68:	f1ba 0f01 	cmp.w	sl, #1
 8005c6c:	dc01      	bgt.n	8005c72 <_printf_float+0x3ba>
 8005c6e:	07db      	lsls	r3, r3, #31
 8005c70:	d536      	bpl.n	8005ce0 <_printf_float+0x428>
 8005c72:	2301      	movs	r3, #1
 8005c74:	4642      	mov	r2, r8
 8005c76:	4631      	mov	r1, r6
 8005c78:	4628      	mov	r0, r5
 8005c7a:	47b8      	blx	r7
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	f43f ae76 	beq.w	800596e <_printf_float+0xb6>
 8005c82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c86:	4631      	mov	r1, r6
 8005c88:	4628      	mov	r0, r5
 8005c8a:	47b8      	blx	r7
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	f43f ae6e 	beq.w	800596e <_printf_float+0xb6>
 8005c92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c96:	2200      	movs	r2, #0
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005c9e:	f7fa fe9b 	bl	80009d8 <__aeabi_dcmpeq>
 8005ca2:	b9c0      	cbnz	r0, 8005cd6 <_printf_float+0x41e>
 8005ca4:	4653      	mov	r3, sl
 8005ca6:	f108 0201 	add.w	r2, r8, #1
 8005caa:	4631      	mov	r1, r6
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b8      	blx	r7
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d10c      	bne.n	8005cce <_printf_float+0x416>
 8005cb4:	e65b      	b.n	800596e <_printf_float+0xb6>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	465a      	mov	r2, fp
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b8      	blx	r7
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	f43f ae54 	beq.w	800596e <_printf_float+0xb6>
 8005cc6:	f108 0801 	add.w	r8, r8, #1
 8005cca:	45d0      	cmp	r8, sl
 8005ccc:	dbf3      	blt.n	8005cb6 <_printf_float+0x3fe>
 8005cce:	464b      	mov	r3, r9
 8005cd0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005cd4:	e6e0      	b.n	8005a98 <_printf_float+0x1e0>
 8005cd6:	f04f 0800 	mov.w	r8, #0
 8005cda:	f104 0b1a 	add.w	fp, r4, #26
 8005cde:	e7f4      	b.n	8005cca <_printf_float+0x412>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	4642      	mov	r2, r8
 8005ce4:	e7e1      	b.n	8005caa <_printf_float+0x3f2>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	464a      	mov	r2, r9
 8005cea:	4631      	mov	r1, r6
 8005cec:	4628      	mov	r0, r5
 8005cee:	47b8      	blx	r7
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	f43f ae3c 	beq.w	800596e <_printf_float+0xb6>
 8005cf6:	f108 0801 	add.w	r8, r8, #1
 8005cfa:	68e3      	ldr	r3, [r4, #12]
 8005cfc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005cfe:	1a5b      	subs	r3, r3, r1
 8005d00:	4543      	cmp	r3, r8
 8005d02:	dcf0      	bgt.n	8005ce6 <_printf_float+0x42e>
 8005d04:	e6fd      	b.n	8005b02 <_printf_float+0x24a>
 8005d06:	f04f 0800 	mov.w	r8, #0
 8005d0a:	f104 0919 	add.w	r9, r4, #25
 8005d0e:	e7f4      	b.n	8005cfa <_printf_float+0x442>

08005d10 <_printf_common>:
 8005d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d14:	4616      	mov	r6, r2
 8005d16:	4698      	mov	r8, r3
 8005d18:	688a      	ldr	r2, [r1, #8]
 8005d1a:	690b      	ldr	r3, [r1, #16]
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	bfb8      	it	lt
 8005d22:	4613      	movlt	r3, r2
 8005d24:	6033      	str	r3, [r6, #0]
 8005d26:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d30:	b10a      	cbz	r2, 8005d36 <_printf_common+0x26>
 8005d32:	3301      	adds	r3, #1
 8005d34:	6033      	str	r3, [r6, #0]
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	0699      	lsls	r1, r3, #26
 8005d3a:	bf42      	ittt	mi
 8005d3c:	6833      	ldrmi	r3, [r6, #0]
 8005d3e:	3302      	addmi	r3, #2
 8005d40:	6033      	strmi	r3, [r6, #0]
 8005d42:	6825      	ldr	r5, [r4, #0]
 8005d44:	f015 0506 	ands.w	r5, r5, #6
 8005d48:	d106      	bne.n	8005d58 <_printf_common+0x48>
 8005d4a:	f104 0a19 	add.w	sl, r4, #25
 8005d4e:	68e3      	ldr	r3, [r4, #12]
 8005d50:	6832      	ldr	r2, [r6, #0]
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	42ab      	cmp	r3, r5
 8005d56:	dc2b      	bgt.n	8005db0 <_printf_common+0xa0>
 8005d58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d5c:	6822      	ldr	r2, [r4, #0]
 8005d5e:	3b00      	subs	r3, #0
 8005d60:	bf18      	it	ne
 8005d62:	2301      	movne	r3, #1
 8005d64:	0692      	lsls	r2, r2, #26
 8005d66:	d430      	bmi.n	8005dca <_printf_common+0xba>
 8005d68:	4641      	mov	r1, r8
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d70:	47c8      	blx	r9
 8005d72:	3001      	adds	r0, #1
 8005d74:	d023      	beq.n	8005dbe <_printf_common+0xae>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	6922      	ldr	r2, [r4, #16]
 8005d7a:	f003 0306 	and.w	r3, r3, #6
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	bf14      	ite	ne
 8005d82:	2500      	movne	r5, #0
 8005d84:	6833      	ldreq	r3, [r6, #0]
 8005d86:	f04f 0600 	mov.w	r6, #0
 8005d8a:	bf08      	it	eq
 8005d8c:	68e5      	ldreq	r5, [r4, #12]
 8005d8e:	f104 041a 	add.w	r4, r4, #26
 8005d92:	bf08      	it	eq
 8005d94:	1aed      	subeq	r5, r5, r3
 8005d96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d9a:	bf08      	it	eq
 8005d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005da0:	4293      	cmp	r3, r2
 8005da2:	bfc4      	itt	gt
 8005da4:	1a9b      	subgt	r3, r3, r2
 8005da6:	18ed      	addgt	r5, r5, r3
 8005da8:	42b5      	cmp	r5, r6
 8005daa:	d11a      	bne.n	8005de2 <_printf_common+0xd2>
 8005dac:	2000      	movs	r0, #0
 8005dae:	e008      	b.n	8005dc2 <_printf_common+0xb2>
 8005db0:	2301      	movs	r3, #1
 8005db2:	4652      	mov	r2, sl
 8005db4:	4641      	mov	r1, r8
 8005db6:	4638      	mov	r0, r7
 8005db8:	47c8      	blx	r9
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d103      	bne.n	8005dc6 <_printf_common+0xb6>
 8005dbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc6:	3501      	adds	r5, #1
 8005dc8:	e7c1      	b.n	8005d4e <_printf_common+0x3e>
 8005dca:	2030      	movs	r0, #48	@ 0x30
 8005dcc:	18e1      	adds	r1, r4, r3
 8005dce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dd8:	4422      	add	r2, r4
 8005dda:	3302      	adds	r3, #2
 8005ddc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005de0:	e7c2      	b.n	8005d68 <_printf_common+0x58>
 8005de2:	2301      	movs	r3, #1
 8005de4:	4622      	mov	r2, r4
 8005de6:	4641      	mov	r1, r8
 8005de8:	4638      	mov	r0, r7
 8005dea:	47c8      	blx	r9
 8005dec:	3001      	adds	r0, #1
 8005dee:	d0e6      	beq.n	8005dbe <_printf_common+0xae>
 8005df0:	3601      	adds	r6, #1
 8005df2:	e7d9      	b.n	8005da8 <_printf_common+0x98>

08005df4 <_printf_i>:
 8005df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df8:	7e0f      	ldrb	r7, [r1, #24]
 8005dfa:	4691      	mov	r9, r2
 8005dfc:	2f78      	cmp	r7, #120	@ 0x78
 8005dfe:	4680      	mov	r8, r0
 8005e00:	460c      	mov	r4, r1
 8005e02:	469a      	mov	sl, r3
 8005e04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e0a:	d807      	bhi.n	8005e1c <_printf_i+0x28>
 8005e0c:	2f62      	cmp	r7, #98	@ 0x62
 8005e0e:	d80a      	bhi.n	8005e26 <_printf_i+0x32>
 8005e10:	2f00      	cmp	r7, #0
 8005e12:	f000 80d1 	beq.w	8005fb8 <_printf_i+0x1c4>
 8005e16:	2f58      	cmp	r7, #88	@ 0x58
 8005e18:	f000 80b8 	beq.w	8005f8c <_printf_i+0x198>
 8005e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e24:	e03a      	b.n	8005e9c <_printf_i+0xa8>
 8005e26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e2a:	2b15      	cmp	r3, #21
 8005e2c:	d8f6      	bhi.n	8005e1c <_printf_i+0x28>
 8005e2e:	a101      	add	r1, pc, #4	@ (adr r1, 8005e34 <_printf_i+0x40>)
 8005e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e34:	08005e8d 	.word	0x08005e8d
 8005e38:	08005ea1 	.word	0x08005ea1
 8005e3c:	08005e1d 	.word	0x08005e1d
 8005e40:	08005e1d 	.word	0x08005e1d
 8005e44:	08005e1d 	.word	0x08005e1d
 8005e48:	08005e1d 	.word	0x08005e1d
 8005e4c:	08005ea1 	.word	0x08005ea1
 8005e50:	08005e1d 	.word	0x08005e1d
 8005e54:	08005e1d 	.word	0x08005e1d
 8005e58:	08005e1d 	.word	0x08005e1d
 8005e5c:	08005e1d 	.word	0x08005e1d
 8005e60:	08005f9f 	.word	0x08005f9f
 8005e64:	08005ecb 	.word	0x08005ecb
 8005e68:	08005f59 	.word	0x08005f59
 8005e6c:	08005e1d 	.word	0x08005e1d
 8005e70:	08005e1d 	.word	0x08005e1d
 8005e74:	08005fc1 	.word	0x08005fc1
 8005e78:	08005e1d 	.word	0x08005e1d
 8005e7c:	08005ecb 	.word	0x08005ecb
 8005e80:	08005e1d 	.word	0x08005e1d
 8005e84:	08005e1d 	.word	0x08005e1d
 8005e88:	08005f61 	.word	0x08005f61
 8005e8c:	6833      	ldr	r3, [r6, #0]
 8005e8e:	1d1a      	adds	r2, r3, #4
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6032      	str	r2, [r6, #0]
 8005e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e09c      	b.n	8005fda <_printf_i+0x1e6>
 8005ea0:	6833      	ldr	r3, [r6, #0]
 8005ea2:	6820      	ldr	r0, [r4, #0]
 8005ea4:	1d19      	adds	r1, r3, #4
 8005ea6:	6031      	str	r1, [r6, #0]
 8005ea8:	0606      	lsls	r6, r0, #24
 8005eaa:	d501      	bpl.n	8005eb0 <_printf_i+0xbc>
 8005eac:	681d      	ldr	r5, [r3, #0]
 8005eae:	e003      	b.n	8005eb8 <_printf_i+0xc4>
 8005eb0:	0645      	lsls	r5, r0, #25
 8005eb2:	d5fb      	bpl.n	8005eac <_printf_i+0xb8>
 8005eb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005eb8:	2d00      	cmp	r5, #0
 8005eba:	da03      	bge.n	8005ec4 <_printf_i+0xd0>
 8005ebc:	232d      	movs	r3, #45	@ 0x2d
 8005ebe:	426d      	negs	r5, r5
 8005ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ec4:	230a      	movs	r3, #10
 8005ec6:	4858      	ldr	r0, [pc, #352]	@ (8006028 <_printf_i+0x234>)
 8005ec8:	e011      	b.n	8005eee <_printf_i+0xfa>
 8005eca:	6821      	ldr	r1, [r4, #0]
 8005ecc:	6833      	ldr	r3, [r6, #0]
 8005ece:	0608      	lsls	r0, r1, #24
 8005ed0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ed4:	d402      	bmi.n	8005edc <_printf_i+0xe8>
 8005ed6:	0649      	lsls	r1, r1, #25
 8005ed8:	bf48      	it	mi
 8005eda:	b2ad      	uxthmi	r5, r5
 8005edc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ede:	6033      	str	r3, [r6, #0]
 8005ee0:	bf14      	ite	ne
 8005ee2:	230a      	movne	r3, #10
 8005ee4:	2308      	moveq	r3, #8
 8005ee6:	4850      	ldr	r0, [pc, #320]	@ (8006028 <_printf_i+0x234>)
 8005ee8:	2100      	movs	r1, #0
 8005eea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eee:	6866      	ldr	r6, [r4, #4]
 8005ef0:	2e00      	cmp	r6, #0
 8005ef2:	60a6      	str	r6, [r4, #8]
 8005ef4:	db05      	blt.n	8005f02 <_printf_i+0x10e>
 8005ef6:	6821      	ldr	r1, [r4, #0]
 8005ef8:	432e      	orrs	r6, r5
 8005efa:	f021 0104 	bic.w	r1, r1, #4
 8005efe:	6021      	str	r1, [r4, #0]
 8005f00:	d04b      	beq.n	8005f9a <_printf_i+0x1a6>
 8005f02:	4616      	mov	r6, r2
 8005f04:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f08:	fb03 5711 	mls	r7, r3, r1, r5
 8005f0c:	5dc7      	ldrb	r7, [r0, r7]
 8005f0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f12:	462f      	mov	r7, r5
 8005f14:	42bb      	cmp	r3, r7
 8005f16:	460d      	mov	r5, r1
 8005f18:	d9f4      	bls.n	8005f04 <_printf_i+0x110>
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d10b      	bne.n	8005f36 <_printf_i+0x142>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	07df      	lsls	r7, r3, #31
 8005f22:	d508      	bpl.n	8005f36 <_printf_i+0x142>
 8005f24:	6923      	ldr	r3, [r4, #16]
 8005f26:	6861      	ldr	r1, [r4, #4]
 8005f28:	4299      	cmp	r1, r3
 8005f2a:	bfde      	ittt	le
 8005f2c:	2330      	movle	r3, #48	@ 0x30
 8005f2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f32:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005f36:	1b92      	subs	r2, r2, r6
 8005f38:	6122      	str	r2, [r4, #16]
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4640      	mov	r0, r8
 8005f40:	f8cd a000 	str.w	sl, [sp]
 8005f44:	aa03      	add	r2, sp, #12
 8005f46:	f7ff fee3 	bl	8005d10 <_printf_common>
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d14a      	bne.n	8005fe4 <_printf_i+0x1f0>
 8005f4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f52:	b004      	add	sp, #16
 8005f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	f043 0320 	orr.w	r3, r3, #32
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	2778      	movs	r7, #120	@ 0x78
 8005f62:	4832      	ldr	r0, [pc, #200]	@ (800602c <_printf_i+0x238>)
 8005f64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	6831      	ldr	r1, [r6, #0]
 8005f6c:	061f      	lsls	r7, r3, #24
 8005f6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f72:	d402      	bmi.n	8005f7a <_printf_i+0x186>
 8005f74:	065f      	lsls	r7, r3, #25
 8005f76:	bf48      	it	mi
 8005f78:	b2ad      	uxthmi	r5, r5
 8005f7a:	6031      	str	r1, [r6, #0]
 8005f7c:	07d9      	lsls	r1, r3, #31
 8005f7e:	bf44      	itt	mi
 8005f80:	f043 0320 	orrmi.w	r3, r3, #32
 8005f84:	6023      	strmi	r3, [r4, #0]
 8005f86:	b11d      	cbz	r5, 8005f90 <_printf_i+0x19c>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	e7ad      	b.n	8005ee8 <_printf_i+0xf4>
 8005f8c:	4826      	ldr	r0, [pc, #152]	@ (8006028 <_printf_i+0x234>)
 8005f8e:	e7e9      	b.n	8005f64 <_printf_i+0x170>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	f023 0320 	bic.w	r3, r3, #32
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	e7f6      	b.n	8005f88 <_printf_i+0x194>
 8005f9a:	4616      	mov	r6, r2
 8005f9c:	e7bd      	b.n	8005f1a <_printf_i+0x126>
 8005f9e:	6833      	ldr	r3, [r6, #0]
 8005fa0:	6825      	ldr	r5, [r4, #0]
 8005fa2:	1d18      	adds	r0, r3, #4
 8005fa4:	6961      	ldr	r1, [r4, #20]
 8005fa6:	6030      	str	r0, [r6, #0]
 8005fa8:	062e      	lsls	r6, r5, #24
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	d501      	bpl.n	8005fb2 <_printf_i+0x1be>
 8005fae:	6019      	str	r1, [r3, #0]
 8005fb0:	e002      	b.n	8005fb8 <_printf_i+0x1c4>
 8005fb2:	0668      	lsls	r0, r5, #25
 8005fb4:	d5fb      	bpl.n	8005fae <_printf_i+0x1ba>
 8005fb6:	8019      	strh	r1, [r3, #0]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4616      	mov	r6, r2
 8005fbc:	6123      	str	r3, [r4, #16]
 8005fbe:	e7bc      	b.n	8005f3a <_printf_i+0x146>
 8005fc0:	6833      	ldr	r3, [r6, #0]
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	1d1a      	adds	r2, r3, #4
 8005fc6:	6032      	str	r2, [r6, #0]
 8005fc8:	681e      	ldr	r6, [r3, #0]
 8005fca:	6862      	ldr	r2, [r4, #4]
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 fab8 	bl	8006542 <memchr>
 8005fd2:	b108      	cbz	r0, 8005fd8 <_printf_i+0x1e4>
 8005fd4:	1b80      	subs	r0, r0, r6
 8005fd6:	6060      	str	r0, [r4, #4]
 8005fd8:	6863      	ldr	r3, [r4, #4]
 8005fda:	6123      	str	r3, [r4, #16]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fe2:	e7aa      	b.n	8005f3a <_printf_i+0x146>
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4640      	mov	r0, r8
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	47d0      	blx	sl
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d0ad      	beq.n	8005f4e <_printf_i+0x15a>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	079b      	lsls	r3, r3, #30
 8005ff6:	d413      	bmi.n	8006020 <_printf_i+0x22c>
 8005ff8:	68e0      	ldr	r0, [r4, #12]
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	4298      	cmp	r0, r3
 8005ffe:	bfb8      	it	lt
 8006000:	4618      	movlt	r0, r3
 8006002:	e7a6      	b.n	8005f52 <_printf_i+0x15e>
 8006004:	2301      	movs	r3, #1
 8006006:	4632      	mov	r2, r6
 8006008:	4649      	mov	r1, r9
 800600a:	4640      	mov	r0, r8
 800600c:	47d0      	blx	sl
 800600e:	3001      	adds	r0, #1
 8006010:	d09d      	beq.n	8005f4e <_printf_i+0x15a>
 8006012:	3501      	adds	r5, #1
 8006014:	68e3      	ldr	r3, [r4, #12]
 8006016:	9903      	ldr	r1, [sp, #12]
 8006018:	1a5b      	subs	r3, r3, r1
 800601a:	42ab      	cmp	r3, r5
 800601c:	dcf2      	bgt.n	8006004 <_printf_i+0x210>
 800601e:	e7eb      	b.n	8005ff8 <_printf_i+0x204>
 8006020:	2500      	movs	r5, #0
 8006022:	f104 0619 	add.w	r6, r4, #25
 8006026:	e7f5      	b.n	8006014 <_printf_i+0x220>
 8006028:	0800a3a2 	.word	0x0800a3a2
 800602c:	0800a3b3 	.word	0x0800a3b3

08006030 <std>:
 8006030:	2300      	movs	r3, #0
 8006032:	b510      	push	{r4, lr}
 8006034:	4604      	mov	r4, r0
 8006036:	e9c0 3300 	strd	r3, r3, [r0]
 800603a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800603e:	6083      	str	r3, [r0, #8]
 8006040:	8181      	strh	r1, [r0, #12]
 8006042:	6643      	str	r3, [r0, #100]	@ 0x64
 8006044:	81c2      	strh	r2, [r0, #14]
 8006046:	6183      	str	r3, [r0, #24]
 8006048:	4619      	mov	r1, r3
 800604a:	2208      	movs	r2, #8
 800604c:	305c      	adds	r0, #92	@ 0x5c
 800604e:	f000 f9f9 	bl	8006444 <memset>
 8006052:	4b0d      	ldr	r3, [pc, #52]	@ (8006088 <std+0x58>)
 8006054:	6224      	str	r4, [r4, #32]
 8006056:	6263      	str	r3, [r4, #36]	@ 0x24
 8006058:	4b0c      	ldr	r3, [pc, #48]	@ (800608c <std+0x5c>)
 800605a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800605c:	4b0c      	ldr	r3, [pc, #48]	@ (8006090 <std+0x60>)
 800605e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006060:	4b0c      	ldr	r3, [pc, #48]	@ (8006094 <std+0x64>)
 8006062:	6323      	str	r3, [r4, #48]	@ 0x30
 8006064:	4b0c      	ldr	r3, [pc, #48]	@ (8006098 <std+0x68>)
 8006066:	429c      	cmp	r4, r3
 8006068:	d006      	beq.n	8006078 <std+0x48>
 800606a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800606e:	4294      	cmp	r4, r2
 8006070:	d002      	beq.n	8006078 <std+0x48>
 8006072:	33d0      	adds	r3, #208	@ 0xd0
 8006074:	429c      	cmp	r4, r3
 8006076:	d105      	bne.n	8006084 <std+0x54>
 8006078:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800607c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006080:	f000 ba5c 	b.w	800653c <__retarget_lock_init_recursive>
 8006084:	bd10      	pop	{r4, pc}
 8006086:	bf00      	nop
 8006088:	08006295 	.word	0x08006295
 800608c:	080062b7 	.word	0x080062b7
 8006090:	080062ef 	.word	0x080062ef
 8006094:	08006313 	.word	0x08006313
 8006098:	20001110 	.word	0x20001110

0800609c <stdio_exit_handler>:
 800609c:	4a02      	ldr	r2, [pc, #8]	@ (80060a8 <stdio_exit_handler+0xc>)
 800609e:	4903      	ldr	r1, [pc, #12]	@ (80060ac <stdio_exit_handler+0x10>)
 80060a0:	4803      	ldr	r0, [pc, #12]	@ (80060b0 <stdio_exit_handler+0x14>)
 80060a2:	f000 b869 	b.w	8006178 <_fwalk_sglue>
 80060a6:	bf00      	nop
 80060a8:	20000024 	.word	0x20000024
 80060ac:	08007ea9 	.word	0x08007ea9
 80060b0:	20000034 	.word	0x20000034

080060b4 <cleanup_stdio>:
 80060b4:	6841      	ldr	r1, [r0, #4]
 80060b6:	4b0c      	ldr	r3, [pc, #48]	@ (80060e8 <cleanup_stdio+0x34>)
 80060b8:	b510      	push	{r4, lr}
 80060ba:	4299      	cmp	r1, r3
 80060bc:	4604      	mov	r4, r0
 80060be:	d001      	beq.n	80060c4 <cleanup_stdio+0x10>
 80060c0:	f001 fef2 	bl	8007ea8 <_fflush_r>
 80060c4:	68a1      	ldr	r1, [r4, #8]
 80060c6:	4b09      	ldr	r3, [pc, #36]	@ (80060ec <cleanup_stdio+0x38>)
 80060c8:	4299      	cmp	r1, r3
 80060ca:	d002      	beq.n	80060d2 <cleanup_stdio+0x1e>
 80060cc:	4620      	mov	r0, r4
 80060ce:	f001 feeb 	bl	8007ea8 <_fflush_r>
 80060d2:	68e1      	ldr	r1, [r4, #12]
 80060d4:	4b06      	ldr	r3, [pc, #24]	@ (80060f0 <cleanup_stdio+0x3c>)
 80060d6:	4299      	cmp	r1, r3
 80060d8:	d004      	beq.n	80060e4 <cleanup_stdio+0x30>
 80060da:	4620      	mov	r0, r4
 80060dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e0:	f001 bee2 	b.w	8007ea8 <_fflush_r>
 80060e4:	bd10      	pop	{r4, pc}
 80060e6:	bf00      	nop
 80060e8:	20001110 	.word	0x20001110
 80060ec:	20001178 	.word	0x20001178
 80060f0:	200011e0 	.word	0x200011e0

080060f4 <global_stdio_init.part.0>:
 80060f4:	b510      	push	{r4, lr}
 80060f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006124 <global_stdio_init.part.0+0x30>)
 80060f8:	4c0b      	ldr	r4, [pc, #44]	@ (8006128 <global_stdio_init.part.0+0x34>)
 80060fa:	4a0c      	ldr	r2, [pc, #48]	@ (800612c <global_stdio_init.part.0+0x38>)
 80060fc:	4620      	mov	r0, r4
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	2104      	movs	r1, #4
 8006102:	2200      	movs	r2, #0
 8006104:	f7ff ff94 	bl	8006030 <std>
 8006108:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800610c:	2201      	movs	r2, #1
 800610e:	2109      	movs	r1, #9
 8006110:	f7ff ff8e 	bl	8006030 <std>
 8006114:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006118:	2202      	movs	r2, #2
 800611a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800611e:	2112      	movs	r1, #18
 8006120:	f7ff bf86 	b.w	8006030 <std>
 8006124:	20001248 	.word	0x20001248
 8006128:	20001110 	.word	0x20001110
 800612c:	0800609d 	.word	0x0800609d

08006130 <__sfp_lock_acquire>:
 8006130:	4801      	ldr	r0, [pc, #4]	@ (8006138 <__sfp_lock_acquire+0x8>)
 8006132:	f000 ba04 	b.w	800653e <__retarget_lock_acquire_recursive>
 8006136:	bf00      	nop
 8006138:	20001251 	.word	0x20001251

0800613c <__sfp_lock_release>:
 800613c:	4801      	ldr	r0, [pc, #4]	@ (8006144 <__sfp_lock_release+0x8>)
 800613e:	f000 b9ff 	b.w	8006540 <__retarget_lock_release_recursive>
 8006142:	bf00      	nop
 8006144:	20001251 	.word	0x20001251

08006148 <__sinit>:
 8006148:	b510      	push	{r4, lr}
 800614a:	4604      	mov	r4, r0
 800614c:	f7ff fff0 	bl	8006130 <__sfp_lock_acquire>
 8006150:	6a23      	ldr	r3, [r4, #32]
 8006152:	b11b      	cbz	r3, 800615c <__sinit+0x14>
 8006154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006158:	f7ff bff0 	b.w	800613c <__sfp_lock_release>
 800615c:	4b04      	ldr	r3, [pc, #16]	@ (8006170 <__sinit+0x28>)
 800615e:	6223      	str	r3, [r4, #32]
 8006160:	4b04      	ldr	r3, [pc, #16]	@ (8006174 <__sinit+0x2c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1f5      	bne.n	8006154 <__sinit+0xc>
 8006168:	f7ff ffc4 	bl	80060f4 <global_stdio_init.part.0>
 800616c:	e7f2      	b.n	8006154 <__sinit+0xc>
 800616e:	bf00      	nop
 8006170:	080060b5 	.word	0x080060b5
 8006174:	20001248 	.word	0x20001248

08006178 <_fwalk_sglue>:
 8006178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800617c:	4607      	mov	r7, r0
 800617e:	4688      	mov	r8, r1
 8006180:	4614      	mov	r4, r2
 8006182:	2600      	movs	r6, #0
 8006184:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006188:	f1b9 0901 	subs.w	r9, r9, #1
 800618c:	d505      	bpl.n	800619a <_fwalk_sglue+0x22>
 800618e:	6824      	ldr	r4, [r4, #0]
 8006190:	2c00      	cmp	r4, #0
 8006192:	d1f7      	bne.n	8006184 <_fwalk_sglue+0xc>
 8006194:	4630      	mov	r0, r6
 8006196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800619a:	89ab      	ldrh	r3, [r5, #12]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d907      	bls.n	80061b0 <_fwalk_sglue+0x38>
 80061a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061a4:	3301      	adds	r3, #1
 80061a6:	d003      	beq.n	80061b0 <_fwalk_sglue+0x38>
 80061a8:	4629      	mov	r1, r5
 80061aa:	4638      	mov	r0, r7
 80061ac:	47c0      	blx	r8
 80061ae:	4306      	orrs	r6, r0
 80061b0:	3568      	adds	r5, #104	@ 0x68
 80061b2:	e7e9      	b.n	8006188 <_fwalk_sglue+0x10>

080061b4 <iprintf>:
 80061b4:	b40f      	push	{r0, r1, r2, r3}
 80061b6:	b507      	push	{r0, r1, r2, lr}
 80061b8:	4906      	ldr	r1, [pc, #24]	@ (80061d4 <iprintf+0x20>)
 80061ba:	ab04      	add	r3, sp, #16
 80061bc:	6808      	ldr	r0, [r1, #0]
 80061be:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c2:	6881      	ldr	r1, [r0, #8]
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	f001 fcd7 	bl	8007b78 <_vfiprintf_r>
 80061ca:	b003      	add	sp, #12
 80061cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80061d0:	b004      	add	sp, #16
 80061d2:	4770      	bx	lr
 80061d4:	20000030 	.word	0x20000030

080061d8 <_puts_r>:
 80061d8:	6a03      	ldr	r3, [r0, #32]
 80061da:	b570      	push	{r4, r5, r6, lr}
 80061dc:	4605      	mov	r5, r0
 80061de:	460e      	mov	r6, r1
 80061e0:	6884      	ldr	r4, [r0, #8]
 80061e2:	b90b      	cbnz	r3, 80061e8 <_puts_r+0x10>
 80061e4:	f7ff ffb0 	bl	8006148 <__sinit>
 80061e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061ea:	07db      	lsls	r3, r3, #31
 80061ec:	d405      	bmi.n	80061fa <_puts_r+0x22>
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	0598      	lsls	r0, r3, #22
 80061f2:	d402      	bmi.n	80061fa <_puts_r+0x22>
 80061f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061f6:	f000 f9a2 	bl	800653e <__retarget_lock_acquire_recursive>
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	0719      	lsls	r1, r3, #28
 80061fe:	d502      	bpl.n	8006206 <_puts_r+0x2e>
 8006200:	6923      	ldr	r3, [r4, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d135      	bne.n	8006272 <_puts_r+0x9a>
 8006206:	4621      	mov	r1, r4
 8006208:	4628      	mov	r0, r5
 800620a:	f000 f8c5 	bl	8006398 <__swsetup_r>
 800620e:	b380      	cbz	r0, 8006272 <_puts_r+0x9a>
 8006210:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006214:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006216:	07da      	lsls	r2, r3, #31
 8006218:	d405      	bmi.n	8006226 <_puts_r+0x4e>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	059b      	lsls	r3, r3, #22
 800621e:	d402      	bmi.n	8006226 <_puts_r+0x4e>
 8006220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006222:	f000 f98d 	bl	8006540 <__retarget_lock_release_recursive>
 8006226:	4628      	mov	r0, r5
 8006228:	bd70      	pop	{r4, r5, r6, pc}
 800622a:	2b00      	cmp	r3, #0
 800622c:	da04      	bge.n	8006238 <_puts_r+0x60>
 800622e:	69a2      	ldr	r2, [r4, #24]
 8006230:	429a      	cmp	r2, r3
 8006232:	dc17      	bgt.n	8006264 <_puts_r+0x8c>
 8006234:	290a      	cmp	r1, #10
 8006236:	d015      	beq.n	8006264 <_puts_r+0x8c>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	6022      	str	r2, [r4, #0]
 800623e:	7019      	strb	r1, [r3, #0]
 8006240:	68a3      	ldr	r3, [r4, #8]
 8006242:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006246:	3b01      	subs	r3, #1
 8006248:	60a3      	str	r3, [r4, #8]
 800624a:	2900      	cmp	r1, #0
 800624c:	d1ed      	bne.n	800622a <_puts_r+0x52>
 800624e:	2b00      	cmp	r3, #0
 8006250:	da11      	bge.n	8006276 <_puts_r+0x9e>
 8006252:	4622      	mov	r2, r4
 8006254:	210a      	movs	r1, #10
 8006256:	4628      	mov	r0, r5
 8006258:	f000 f85f 	bl	800631a <__swbuf_r>
 800625c:	3001      	adds	r0, #1
 800625e:	d0d7      	beq.n	8006210 <_puts_r+0x38>
 8006260:	250a      	movs	r5, #10
 8006262:	e7d7      	b.n	8006214 <_puts_r+0x3c>
 8006264:	4622      	mov	r2, r4
 8006266:	4628      	mov	r0, r5
 8006268:	f000 f857 	bl	800631a <__swbuf_r>
 800626c:	3001      	adds	r0, #1
 800626e:	d1e7      	bne.n	8006240 <_puts_r+0x68>
 8006270:	e7ce      	b.n	8006210 <_puts_r+0x38>
 8006272:	3e01      	subs	r6, #1
 8006274:	e7e4      	b.n	8006240 <_puts_r+0x68>
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	6022      	str	r2, [r4, #0]
 800627c:	220a      	movs	r2, #10
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	e7ee      	b.n	8006260 <_puts_r+0x88>
	...

08006284 <puts>:
 8006284:	4b02      	ldr	r3, [pc, #8]	@ (8006290 <puts+0xc>)
 8006286:	4601      	mov	r1, r0
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	f7ff bfa5 	b.w	80061d8 <_puts_r>
 800628e:	bf00      	nop
 8006290:	20000030 	.word	0x20000030

08006294 <__sread>:
 8006294:	b510      	push	{r4, lr}
 8006296:	460c      	mov	r4, r1
 8006298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629c:	f000 f900 	bl	80064a0 <_read_r>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	bfab      	itete	ge
 80062a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062a6:	89a3      	ldrhlt	r3, [r4, #12]
 80062a8:	181b      	addge	r3, r3, r0
 80062aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062ae:	bfac      	ite	ge
 80062b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062b2:	81a3      	strhlt	r3, [r4, #12]
 80062b4:	bd10      	pop	{r4, pc}

080062b6 <__swrite>:
 80062b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ba:	461f      	mov	r7, r3
 80062bc:	898b      	ldrh	r3, [r1, #12]
 80062be:	4605      	mov	r5, r0
 80062c0:	05db      	lsls	r3, r3, #23
 80062c2:	460c      	mov	r4, r1
 80062c4:	4616      	mov	r6, r2
 80062c6:	d505      	bpl.n	80062d4 <__swrite+0x1e>
 80062c8:	2302      	movs	r3, #2
 80062ca:	2200      	movs	r2, #0
 80062cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d0:	f000 f8d4 	bl	800647c <_lseek_r>
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	4632      	mov	r2, r6
 80062d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062dc:	81a3      	strh	r3, [r4, #12]
 80062de:	4628      	mov	r0, r5
 80062e0:	463b      	mov	r3, r7
 80062e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ea:	f000 b8eb 	b.w	80064c4 <_write_r>

080062ee <__sseek>:
 80062ee:	b510      	push	{r4, lr}
 80062f0:	460c      	mov	r4, r1
 80062f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f6:	f000 f8c1 	bl	800647c <_lseek_r>
 80062fa:	1c43      	adds	r3, r0, #1
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	bf15      	itete	ne
 8006300:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006302:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006306:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800630a:	81a3      	strheq	r3, [r4, #12]
 800630c:	bf18      	it	ne
 800630e:	81a3      	strhne	r3, [r4, #12]
 8006310:	bd10      	pop	{r4, pc}

08006312 <__sclose>:
 8006312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006316:	f000 b8a1 	b.w	800645c <_close_r>

0800631a <__swbuf_r>:
 800631a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631c:	460e      	mov	r6, r1
 800631e:	4614      	mov	r4, r2
 8006320:	4605      	mov	r5, r0
 8006322:	b118      	cbz	r0, 800632c <__swbuf_r+0x12>
 8006324:	6a03      	ldr	r3, [r0, #32]
 8006326:	b90b      	cbnz	r3, 800632c <__swbuf_r+0x12>
 8006328:	f7ff ff0e 	bl	8006148 <__sinit>
 800632c:	69a3      	ldr	r3, [r4, #24]
 800632e:	60a3      	str	r3, [r4, #8]
 8006330:	89a3      	ldrh	r3, [r4, #12]
 8006332:	071a      	lsls	r2, r3, #28
 8006334:	d501      	bpl.n	800633a <__swbuf_r+0x20>
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	b943      	cbnz	r3, 800634c <__swbuf_r+0x32>
 800633a:	4621      	mov	r1, r4
 800633c:	4628      	mov	r0, r5
 800633e:	f000 f82b 	bl	8006398 <__swsetup_r>
 8006342:	b118      	cbz	r0, 800634c <__swbuf_r+0x32>
 8006344:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006348:	4638      	mov	r0, r7
 800634a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	6922      	ldr	r2, [r4, #16]
 8006350:	b2f6      	uxtb	r6, r6
 8006352:	1a98      	subs	r0, r3, r2
 8006354:	6963      	ldr	r3, [r4, #20]
 8006356:	4637      	mov	r7, r6
 8006358:	4283      	cmp	r3, r0
 800635a:	dc05      	bgt.n	8006368 <__swbuf_r+0x4e>
 800635c:	4621      	mov	r1, r4
 800635e:	4628      	mov	r0, r5
 8006360:	f001 fda2 	bl	8007ea8 <_fflush_r>
 8006364:	2800      	cmp	r0, #0
 8006366:	d1ed      	bne.n	8006344 <__swbuf_r+0x2a>
 8006368:	68a3      	ldr	r3, [r4, #8]
 800636a:	3b01      	subs	r3, #1
 800636c:	60a3      	str	r3, [r4, #8]
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	6022      	str	r2, [r4, #0]
 8006374:	701e      	strb	r6, [r3, #0]
 8006376:	6962      	ldr	r2, [r4, #20]
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	429a      	cmp	r2, r3
 800637c:	d004      	beq.n	8006388 <__swbuf_r+0x6e>
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	07db      	lsls	r3, r3, #31
 8006382:	d5e1      	bpl.n	8006348 <__swbuf_r+0x2e>
 8006384:	2e0a      	cmp	r6, #10
 8006386:	d1df      	bne.n	8006348 <__swbuf_r+0x2e>
 8006388:	4621      	mov	r1, r4
 800638a:	4628      	mov	r0, r5
 800638c:	f001 fd8c 	bl	8007ea8 <_fflush_r>
 8006390:	2800      	cmp	r0, #0
 8006392:	d0d9      	beq.n	8006348 <__swbuf_r+0x2e>
 8006394:	e7d6      	b.n	8006344 <__swbuf_r+0x2a>
	...

08006398 <__swsetup_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4b29      	ldr	r3, [pc, #164]	@ (8006440 <__swsetup_r+0xa8>)
 800639c:	4605      	mov	r5, r0
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	460c      	mov	r4, r1
 80063a2:	b118      	cbz	r0, 80063ac <__swsetup_r+0x14>
 80063a4:	6a03      	ldr	r3, [r0, #32]
 80063a6:	b90b      	cbnz	r3, 80063ac <__swsetup_r+0x14>
 80063a8:	f7ff fece 	bl	8006148 <__sinit>
 80063ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b0:	0719      	lsls	r1, r3, #28
 80063b2:	d422      	bmi.n	80063fa <__swsetup_r+0x62>
 80063b4:	06da      	lsls	r2, r3, #27
 80063b6:	d407      	bmi.n	80063c8 <__swsetup_r+0x30>
 80063b8:	2209      	movs	r2, #9
 80063ba:	602a      	str	r2, [r5, #0]
 80063bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063c4:	81a3      	strh	r3, [r4, #12]
 80063c6:	e033      	b.n	8006430 <__swsetup_r+0x98>
 80063c8:	0758      	lsls	r0, r3, #29
 80063ca:	d512      	bpl.n	80063f2 <__swsetup_r+0x5a>
 80063cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063ce:	b141      	cbz	r1, 80063e2 <__swsetup_r+0x4a>
 80063d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063d4:	4299      	cmp	r1, r3
 80063d6:	d002      	beq.n	80063de <__swsetup_r+0x46>
 80063d8:	4628      	mov	r0, r5
 80063da:	f000 ff2d 	bl	8007238 <_free_r>
 80063de:	2300      	movs	r3, #0
 80063e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	2300      	movs	r3, #0
 80063ec:	6063      	str	r3, [r4, #4]
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	f043 0308 	orr.w	r3, r3, #8
 80063f8:	81a3      	strh	r3, [r4, #12]
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	b94b      	cbnz	r3, 8006412 <__swsetup_r+0x7a>
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006408:	d003      	beq.n	8006412 <__swsetup_r+0x7a>
 800640a:	4621      	mov	r1, r4
 800640c:	4628      	mov	r0, r5
 800640e:	f001 fd98 	bl	8007f42 <__smakebuf_r>
 8006412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006416:	f013 0201 	ands.w	r2, r3, #1
 800641a:	d00a      	beq.n	8006432 <__swsetup_r+0x9a>
 800641c:	2200      	movs	r2, #0
 800641e:	60a2      	str	r2, [r4, #8]
 8006420:	6962      	ldr	r2, [r4, #20]
 8006422:	4252      	negs	r2, r2
 8006424:	61a2      	str	r2, [r4, #24]
 8006426:	6922      	ldr	r2, [r4, #16]
 8006428:	b942      	cbnz	r2, 800643c <__swsetup_r+0xa4>
 800642a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800642e:	d1c5      	bne.n	80063bc <__swsetup_r+0x24>
 8006430:	bd38      	pop	{r3, r4, r5, pc}
 8006432:	0799      	lsls	r1, r3, #30
 8006434:	bf58      	it	pl
 8006436:	6962      	ldrpl	r2, [r4, #20]
 8006438:	60a2      	str	r2, [r4, #8]
 800643a:	e7f4      	b.n	8006426 <__swsetup_r+0x8e>
 800643c:	2000      	movs	r0, #0
 800643e:	e7f7      	b.n	8006430 <__swsetup_r+0x98>
 8006440:	20000030 	.word	0x20000030

08006444 <memset>:
 8006444:	4603      	mov	r3, r0
 8006446:	4402      	add	r2, r0
 8006448:	4293      	cmp	r3, r2
 800644a:	d100      	bne.n	800644e <memset+0xa>
 800644c:	4770      	bx	lr
 800644e:	f803 1b01 	strb.w	r1, [r3], #1
 8006452:	e7f9      	b.n	8006448 <memset+0x4>

08006454 <_localeconv_r>:
 8006454:	4800      	ldr	r0, [pc, #0]	@ (8006458 <_localeconv_r+0x4>)
 8006456:	4770      	bx	lr
 8006458:	20000170 	.word	0x20000170

0800645c <_close_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	2300      	movs	r3, #0
 8006460:	4d05      	ldr	r5, [pc, #20]	@ (8006478 <_close_r+0x1c>)
 8006462:	4604      	mov	r4, r0
 8006464:	4608      	mov	r0, r1
 8006466:	602b      	str	r3, [r5, #0]
 8006468:	f7fb ffde 	bl	8002428 <_close>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_close_r+0x1a>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	b103      	cbz	r3, 8006476 <_close_r+0x1a>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	2000124c 	.word	0x2000124c

0800647c <_lseek_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4604      	mov	r4, r0
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	2200      	movs	r2, #0
 8006486:	4d05      	ldr	r5, [pc, #20]	@ (800649c <_lseek_r+0x20>)
 8006488:	602a      	str	r2, [r5, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	f7fb fff0 	bl	8002470 <_lseek>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_lseek_r+0x1e>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b103      	cbz	r3, 800649a <_lseek_r+0x1e>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	2000124c 	.word	0x2000124c

080064a0 <_read_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	4611      	mov	r1, r2
 80064a8:	2200      	movs	r2, #0
 80064aa:	4d05      	ldr	r5, [pc, #20]	@ (80064c0 <_read_r+0x20>)
 80064ac:	602a      	str	r2, [r5, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f7fb ff81 	bl	80023b6 <_read>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	d102      	bne.n	80064be <_read_r+0x1e>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	b103      	cbz	r3, 80064be <_read_r+0x1e>
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	bd38      	pop	{r3, r4, r5, pc}
 80064c0:	2000124c 	.word	0x2000124c

080064c4 <_write_r>:
 80064c4:	b538      	push	{r3, r4, r5, lr}
 80064c6:	4604      	mov	r4, r0
 80064c8:	4608      	mov	r0, r1
 80064ca:	4611      	mov	r1, r2
 80064cc:	2200      	movs	r2, #0
 80064ce:	4d05      	ldr	r5, [pc, #20]	@ (80064e4 <_write_r+0x20>)
 80064d0:	602a      	str	r2, [r5, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f7fb ff8c 	bl	80023f0 <_write>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	d102      	bne.n	80064e2 <_write_r+0x1e>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	b103      	cbz	r3, 80064e2 <_write_r+0x1e>
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	bd38      	pop	{r3, r4, r5, pc}
 80064e4:	2000124c 	.word	0x2000124c

080064e8 <__errno>:
 80064e8:	4b01      	ldr	r3, [pc, #4]	@ (80064f0 <__errno+0x8>)
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	20000030 	.word	0x20000030

080064f4 <__libc_init_array>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	2600      	movs	r6, #0
 80064f8:	4d0c      	ldr	r5, [pc, #48]	@ (800652c <__libc_init_array+0x38>)
 80064fa:	4c0d      	ldr	r4, [pc, #52]	@ (8006530 <__libc_init_array+0x3c>)
 80064fc:	1b64      	subs	r4, r4, r5
 80064fe:	10a4      	asrs	r4, r4, #2
 8006500:	42a6      	cmp	r6, r4
 8006502:	d109      	bne.n	8006518 <__libc_init_array+0x24>
 8006504:	f001 ffb0 	bl	8008468 <_init>
 8006508:	2600      	movs	r6, #0
 800650a:	4d0a      	ldr	r5, [pc, #40]	@ (8006534 <__libc_init_array+0x40>)
 800650c:	4c0a      	ldr	r4, [pc, #40]	@ (8006538 <__libc_init_array+0x44>)
 800650e:	1b64      	subs	r4, r4, r5
 8006510:	10a4      	asrs	r4, r4, #2
 8006512:	42a6      	cmp	r6, r4
 8006514:	d105      	bne.n	8006522 <__libc_init_array+0x2e>
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	f855 3b04 	ldr.w	r3, [r5], #4
 800651c:	4798      	blx	r3
 800651e:	3601      	adds	r6, #1
 8006520:	e7ee      	b.n	8006500 <__libc_init_array+0xc>
 8006522:	f855 3b04 	ldr.w	r3, [r5], #4
 8006526:	4798      	blx	r3
 8006528:	3601      	adds	r6, #1
 800652a:	e7f2      	b.n	8006512 <__libc_init_array+0x1e>
 800652c:	0800a724 	.word	0x0800a724
 8006530:	0800a724 	.word	0x0800a724
 8006534:	0800a724 	.word	0x0800a724
 8006538:	0800a728 	.word	0x0800a728

0800653c <__retarget_lock_init_recursive>:
 800653c:	4770      	bx	lr

0800653e <__retarget_lock_acquire_recursive>:
 800653e:	4770      	bx	lr

08006540 <__retarget_lock_release_recursive>:
 8006540:	4770      	bx	lr

08006542 <memchr>:
 8006542:	4603      	mov	r3, r0
 8006544:	b510      	push	{r4, lr}
 8006546:	b2c9      	uxtb	r1, r1
 8006548:	4402      	add	r2, r0
 800654a:	4293      	cmp	r3, r2
 800654c:	4618      	mov	r0, r3
 800654e:	d101      	bne.n	8006554 <memchr+0x12>
 8006550:	2000      	movs	r0, #0
 8006552:	e003      	b.n	800655c <memchr+0x1a>
 8006554:	7804      	ldrb	r4, [r0, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	428c      	cmp	r4, r1
 800655a:	d1f6      	bne.n	800654a <memchr+0x8>
 800655c:	bd10      	pop	{r4, pc}

0800655e <memcpy>:
 800655e:	440a      	add	r2, r1
 8006560:	4291      	cmp	r1, r2
 8006562:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006566:	d100      	bne.n	800656a <memcpy+0xc>
 8006568:	4770      	bx	lr
 800656a:	b510      	push	{r4, lr}
 800656c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006570:	4291      	cmp	r1, r2
 8006572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006576:	d1f9      	bne.n	800656c <memcpy+0xe>
 8006578:	bd10      	pop	{r4, pc}

0800657a <quorem>:
 800657a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657e:	6903      	ldr	r3, [r0, #16]
 8006580:	690c      	ldr	r4, [r1, #16]
 8006582:	4607      	mov	r7, r0
 8006584:	42a3      	cmp	r3, r4
 8006586:	db7e      	blt.n	8006686 <quorem+0x10c>
 8006588:	3c01      	subs	r4, #1
 800658a:	00a3      	lsls	r3, r4, #2
 800658c:	f100 0514 	add.w	r5, r0, #20
 8006590:	f101 0814 	add.w	r8, r1, #20
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065a4:	3301      	adds	r3, #1
 80065a6:	429a      	cmp	r2, r3
 80065a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80065ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065b0:	d32e      	bcc.n	8006610 <quorem+0x96>
 80065b2:	f04f 0a00 	mov.w	sl, #0
 80065b6:	46c4      	mov	ip, r8
 80065b8:	46ae      	mov	lr, r5
 80065ba:	46d3      	mov	fp, sl
 80065bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80065c0:	b298      	uxth	r0, r3
 80065c2:	fb06 a000 	mla	r0, r6, r0, sl
 80065c6:	0c1b      	lsrs	r3, r3, #16
 80065c8:	0c02      	lsrs	r2, r0, #16
 80065ca:	fb06 2303 	mla	r3, r6, r3, r2
 80065ce:	f8de 2000 	ldr.w	r2, [lr]
 80065d2:	b280      	uxth	r0, r0
 80065d4:	b292      	uxth	r2, r2
 80065d6:	1a12      	subs	r2, r2, r0
 80065d8:	445a      	add	r2, fp
 80065da:	f8de 0000 	ldr.w	r0, [lr]
 80065de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80065e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80065ec:	b292      	uxth	r2, r2
 80065ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80065f2:	45e1      	cmp	r9, ip
 80065f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80065f8:	f84e 2b04 	str.w	r2, [lr], #4
 80065fc:	d2de      	bcs.n	80065bc <quorem+0x42>
 80065fe:	9b00      	ldr	r3, [sp, #0]
 8006600:	58eb      	ldr	r3, [r5, r3]
 8006602:	b92b      	cbnz	r3, 8006610 <quorem+0x96>
 8006604:	9b01      	ldr	r3, [sp, #4]
 8006606:	3b04      	subs	r3, #4
 8006608:	429d      	cmp	r5, r3
 800660a:	461a      	mov	r2, r3
 800660c:	d32f      	bcc.n	800666e <quorem+0xf4>
 800660e:	613c      	str	r4, [r7, #16]
 8006610:	4638      	mov	r0, r7
 8006612:	f001 f981 	bl	8007918 <__mcmp>
 8006616:	2800      	cmp	r0, #0
 8006618:	db25      	blt.n	8006666 <quorem+0xec>
 800661a:	4629      	mov	r1, r5
 800661c:	2000      	movs	r0, #0
 800661e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006622:	f8d1 c000 	ldr.w	ip, [r1]
 8006626:	fa1f fe82 	uxth.w	lr, r2
 800662a:	fa1f f38c 	uxth.w	r3, ip
 800662e:	eba3 030e 	sub.w	r3, r3, lr
 8006632:	4403      	add	r3, r0
 8006634:	0c12      	lsrs	r2, r2, #16
 8006636:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800663a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800663e:	b29b      	uxth	r3, r3
 8006640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006644:	45c1      	cmp	r9, r8
 8006646:	ea4f 4022 	mov.w	r0, r2, asr #16
 800664a:	f841 3b04 	str.w	r3, [r1], #4
 800664e:	d2e6      	bcs.n	800661e <quorem+0xa4>
 8006650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006658:	b922      	cbnz	r2, 8006664 <quorem+0xea>
 800665a:	3b04      	subs	r3, #4
 800665c:	429d      	cmp	r5, r3
 800665e:	461a      	mov	r2, r3
 8006660:	d30b      	bcc.n	800667a <quorem+0x100>
 8006662:	613c      	str	r4, [r7, #16]
 8006664:	3601      	adds	r6, #1
 8006666:	4630      	mov	r0, r6
 8006668:	b003      	add	sp, #12
 800666a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	3b04      	subs	r3, #4
 8006672:	2a00      	cmp	r2, #0
 8006674:	d1cb      	bne.n	800660e <quorem+0x94>
 8006676:	3c01      	subs	r4, #1
 8006678:	e7c6      	b.n	8006608 <quorem+0x8e>
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	3b04      	subs	r3, #4
 800667e:	2a00      	cmp	r2, #0
 8006680:	d1ef      	bne.n	8006662 <quorem+0xe8>
 8006682:	3c01      	subs	r4, #1
 8006684:	e7ea      	b.n	800665c <quorem+0xe2>
 8006686:	2000      	movs	r0, #0
 8006688:	e7ee      	b.n	8006668 <quorem+0xee>
 800668a:	0000      	movs	r0, r0
 800668c:	0000      	movs	r0, r0
	...

08006690 <_dtoa_r>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	4614      	mov	r4, r2
 8006696:	461d      	mov	r5, r3
 8006698:	69c7      	ldr	r7, [r0, #28]
 800669a:	b097      	sub	sp, #92	@ 0x5c
 800669c:	4681      	mov	r9, r0
 800669e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80066a2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80066a4:	b97f      	cbnz	r7, 80066c6 <_dtoa_r+0x36>
 80066a6:	2010      	movs	r0, #16
 80066a8:	f000 fe0e 	bl	80072c8 <malloc>
 80066ac:	4602      	mov	r2, r0
 80066ae:	f8c9 001c 	str.w	r0, [r9, #28]
 80066b2:	b920      	cbnz	r0, 80066be <_dtoa_r+0x2e>
 80066b4:	21ef      	movs	r1, #239	@ 0xef
 80066b6:	4bac      	ldr	r3, [pc, #688]	@ (8006968 <_dtoa_r+0x2d8>)
 80066b8:	48ac      	ldr	r0, [pc, #688]	@ (800696c <_dtoa_r+0x2dc>)
 80066ba:	f001 fcb1 	bl	8008020 <__assert_func>
 80066be:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80066c2:	6007      	str	r7, [r0, #0]
 80066c4:	60c7      	str	r7, [r0, #12]
 80066c6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80066ca:	6819      	ldr	r1, [r3, #0]
 80066cc:	b159      	cbz	r1, 80066e6 <_dtoa_r+0x56>
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	2301      	movs	r3, #1
 80066d2:	4093      	lsls	r3, r2
 80066d4:	604a      	str	r2, [r1, #4]
 80066d6:	608b      	str	r3, [r1, #8]
 80066d8:	4648      	mov	r0, r9
 80066da:	f000 feeb 	bl	80074b4 <_Bfree>
 80066de:	2200      	movs	r2, #0
 80066e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	1e2b      	subs	r3, r5, #0
 80066e8:	bfaf      	iteee	ge
 80066ea:	2300      	movge	r3, #0
 80066ec:	2201      	movlt	r2, #1
 80066ee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80066f2:	9307      	strlt	r3, [sp, #28]
 80066f4:	bfa8      	it	ge
 80066f6:	6033      	strge	r3, [r6, #0]
 80066f8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80066fc:	4b9c      	ldr	r3, [pc, #624]	@ (8006970 <_dtoa_r+0x2e0>)
 80066fe:	bfb8      	it	lt
 8006700:	6032      	strlt	r2, [r6, #0]
 8006702:	ea33 0308 	bics.w	r3, r3, r8
 8006706:	d112      	bne.n	800672e <_dtoa_r+0x9e>
 8006708:	f242 730f 	movw	r3, #9999	@ 0x270f
 800670c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006714:	4323      	orrs	r3, r4
 8006716:	f000 855e 	beq.w	80071d6 <_dtoa_r+0xb46>
 800671a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800671c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006974 <_dtoa_r+0x2e4>
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8560 	beq.w	80071e6 <_dtoa_r+0xb56>
 8006726:	f10a 0303 	add.w	r3, sl, #3
 800672a:	f000 bd5a 	b.w	80071e2 <_dtoa_r+0xb52>
 800672e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006732:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800673a:	2200      	movs	r2, #0
 800673c:	2300      	movs	r3, #0
 800673e:	f7fa f94b 	bl	80009d8 <__aeabi_dcmpeq>
 8006742:	4607      	mov	r7, r0
 8006744:	b158      	cbz	r0, 800675e <_dtoa_r+0xce>
 8006746:	2301      	movs	r3, #1
 8006748:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800674a:	6013      	str	r3, [r2, #0]
 800674c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800674e:	b113      	cbz	r3, 8006756 <_dtoa_r+0xc6>
 8006750:	4b89      	ldr	r3, [pc, #548]	@ (8006978 <_dtoa_r+0x2e8>)
 8006752:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800697c <_dtoa_r+0x2ec>
 800675a:	f000 bd44 	b.w	80071e6 <_dtoa_r+0xb56>
 800675e:	ab14      	add	r3, sp, #80	@ 0x50
 8006760:	9301      	str	r3, [sp, #4]
 8006762:	ab15      	add	r3, sp, #84	@ 0x54
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	4648      	mov	r0, r9
 8006768:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800676c:	f001 f984 	bl	8007a78 <__d2b>
 8006770:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006774:	9003      	str	r0, [sp, #12]
 8006776:	2e00      	cmp	r6, #0
 8006778:	d078      	beq.n	800686c <_dtoa_r+0x1dc>
 800677a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800677e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006780:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006788:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800678c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006790:	9712      	str	r7, [sp, #72]	@ 0x48
 8006792:	4619      	mov	r1, r3
 8006794:	2200      	movs	r2, #0
 8006796:	4b7a      	ldr	r3, [pc, #488]	@ (8006980 <_dtoa_r+0x2f0>)
 8006798:	f7f9 fcfe 	bl	8000198 <__aeabi_dsub>
 800679c:	a36c      	add	r3, pc, #432	@ (adr r3, 8006950 <_dtoa_r+0x2c0>)
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f7f9 feb1 	bl	8000508 <__aeabi_dmul>
 80067a6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006958 <_dtoa_r+0x2c8>)
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f7f9 fcf6 	bl	800019c <__adddf3>
 80067b0:	4604      	mov	r4, r0
 80067b2:	4630      	mov	r0, r6
 80067b4:	460d      	mov	r5, r1
 80067b6:	f7f9 fe3d 	bl	8000434 <__aeabi_i2d>
 80067ba:	a369      	add	r3, pc, #420	@ (adr r3, 8006960 <_dtoa_r+0x2d0>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7f9 fea2 	bl	8000508 <__aeabi_dmul>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4620      	mov	r0, r4
 80067ca:	4629      	mov	r1, r5
 80067cc:	f7f9 fce6 	bl	800019c <__adddf3>
 80067d0:	4604      	mov	r4, r0
 80067d2:	460d      	mov	r5, r1
 80067d4:	f7fa f948 	bl	8000a68 <__aeabi_d2iz>
 80067d8:	2200      	movs	r2, #0
 80067da:	4607      	mov	r7, r0
 80067dc:	2300      	movs	r3, #0
 80067de:	4620      	mov	r0, r4
 80067e0:	4629      	mov	r1, r5
 80067e2:	f7fa f903 	bl	80009ec <__aeabi_dcmplt>
 80067e6:	b140      	cbz	r0, 80067fa <_dtoa_r+0x16a>
 80067e8:	4638      	mov	r0, r7
 80067ea:	f7f9 fe23 	bl	8000434 <__aeabi_i2d>
 80067ee:	4622      	mov	r2, r4
 80067f0:	462b      	mov	r3, r5
 80067f2:	f7fa f8f1 	bl	80009d8 <__aeabi_dcmpeq>
 80067f6:	b900      	cbnz	r0, 80067fa <_dtoa_r+0x16a>
 80067f8:	3f01      	subs	r7, #1
 80067fa:	2f16      	cmp	r7, #22
 80067fc:	d854      	bhi.n	80068a8 <_dtoa_r+0x218>
 80067fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006802:	4b60      	ldr	r3, [pc, #384]	@ (8006984 <_dtoa_r+0x2f4>)
 8006804:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f7fa f8ee 	bl	80009ec <__aeabi_dcmplt>
 8006810:	2800      	cmp	r0, #0
 8006812:	d04b      	beq.n	80068ac <_dtoa_r+0x21c>
 8006814:	2300      	movs	r3, #0
 8006816:	3f01      	subs	r7, #1
 8006818:	930f      	str	r3, [sp, #60]	@ 0x3c
 800681a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800681c:	1b9b      	subs	r3, r3, r6
 800681e:	1e5a      	subs	r2, r3, #1
 8006820:	bf49      	itett	mi
 8006822:	f1c3 0301 	rsbmi	r3, r3, #1
 8006826:	2300      	movpl	r3, #0
 8006828:	9304      	strmi	r3, [sp, #16]
 800682a:	2300      	movmi	r3, #0
 800682c:	9209      	str	r2, [sp, #36]	@ 0x24
 800682e:	bf54      	ite	pl
 8006830:	9304      	strpl	r3, [sp, #16]
 8006832:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006834:	2f00      	cmp	r7, #0
 8006836:	db3b      	blt.n	80068b0 <_dtoa_r+0x220>
 8006838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800683a:	970e      	str	r7, [sp, #56]	@ 0x38
 800683c:	443b      	add	r3, r7
 800683e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006840:	2300      	movs	r3, #0
 8006842:	930a      	str	r3, [sp, #40]	@ 0x28
 8006844:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006846:	2b09      	cmp	r3, #9
 8006848:	d865      	bhi.n	8006916 <_dtoa_r+0x286>
 800684a:	2b05      	cmp	r3, #5
 800684c:	bfc4      	itt	gt
 800684e:	3b04      	subgt	r3, #4
 8006850:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006852:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006854:	bfc8      	it	gt
 8006856:	2400      	movgt	r4, #0
 8006858:	f1a3 0302 	sub.w	r3, r3, #2
 800685c:	bfd8      	it	le
 800685e:	2401      	movle	r4, #1
 8006860:	2b03      	cmp	r3, #3
 8006862:	d864      	bhi.n	800692e <_dtoa_r+0x29e>
 8006864:	e8df f003 	tbb	[pc, r3]
 8006868:	2c385553 	.word	0x2c385553
 800686c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006870:	441e      	add	r6, r3
 8006872:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006876:	2b20      	cmp	r3, #32
 8006878:	bfc1      	itttt	gt
 800687a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800687e:	fa08 f803 	lslgt.w	r8, r8, r3
 8006882:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006886:	fa24 f303 	lsrgt.w	r3, r4, r3
 800688a:	bfd6      	itet	le
 800688c:	f1c3 0320 	rsble	r3, r3, #32
 8006890:	ea48 0003 	orrgt.w	r0, r8, r3
 8006894:	fa04 f003 	lslle.w	r0, r4, r3
 8006898:	f7f9 fdbc 	bl	8000414 <__aeabi_ui2d>
 800689c:	2201      	movs	r2, #1
 800689e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80068a2:	3e01      	subs	r6, #1
 80068a4:	9212      	str	r2, [sp, #72]	@ 0x48
 80068a6:	e774      	b.n	8006792 <_dtoa_r+0x102>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e7b5      	b.n	8006818 <_dtoa_r+0x188>
 80068ac:	900f      	str	r0, [sp, #60]	@ 0x3c
 80068ae:	e7b4      	b.n	800681a <_dtoa_r+0x18a>
 80068b0:	9b04      	ldr	r3, [sp, #16]
 80068b2:	1bdb      	subs	r3, r3, r7
 80068b4:	9304      	str	r3, [sp, #16]
 80068b6:	427b      	negs	r3, r7
 80068b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80068ba:	2300      	movs	r3, #0
 80068bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80068be:	e7c1      	b.n	8006844 <_dtoa_r+0x1b4>
 80068c0:	2301      	movs	r3, #1
 80068c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068c6:	eb07 0b03 	add.w	fp, r7, r3
 80068ca:	f10b 0301 	add.w	r3, fp, #1
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	9308      	str	r3, [sp, #32]
 80068d2:	bfb8      	it	lt
 80068d4:	2301      	movlt	r3, #1
 80068d6:	e006      	b.n	80068e6 <_dtoa_r+0x256>
 80068d8:	2301      	movs	r3, #1
 80068da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068de:	2b00      	cmp	r3, #0
 80068e0:	dd28      	ble.n	8006934 <_dtoa_r+0x2a4>
 80068e2:	469b      	mov	fp, r3
 80068e4:	9308      	str	r3, [sp, #32]
 80068e6:	2100      	movs	r1, #0
 80068e8:	2204      	movs	r2, #4
 80068ea:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80068ee:	f102 0514 	add.w	r5, r2, #20
 80068f2:	429d      	cmp	r5, r3
 80068f4:	d926      	bls.n	8006944 <_dtoa_r+0x2b4>
 80068f6:	6041      	str	r1, [r0, #4]
 80068f8:	4648      	mov	r0, r9
 80068fa:	f000 fd9b 	bl	8007434 <_Balloc>
 80068fe:	4682      	mov	sl, r0
 8006900:	2800      	cmp	r0, #0
 8006902:	d143      	bne.n	800698c <_dtoa_r+0x2fc>
 8006904:	4602      	mov	r2, r0
 8006906:	f240 11af 	movw	r1, #431	@ 0x1af
 800690a:	4b1f      	ldr	r3, [pc, #124]	@ (8006988 <_dtoa_r+0x2f8>)
 800690c:	e6d4      	b.n	80066b8 <_dtoa_r+0x28>
 800690e:	2300      	movs	r3, #0
 8006910:	e7e3      	b.n	80068da <_dtoa_r+0x24a>
 8006912:	2300      	movs	r3, #0
 8006914:	e7d5      	b.n	80068c2 <_dtoa_r+0x232>
 8006916:	2401      	movs	r4, #1
 8006918:	2300      	movs	r3, #0
 800691a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800691c:	9320      	str	r3, [sp, #128]	@ 0x80
 800691e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006922:	2200      	movs	r2, #0
 8006924:	2312      	movs	r3, #18
 8006926:	f8cd b020 	str.w	fp, [sp, #32]
 800692a:	9221      	str	r2, [sp, #132]	@ 0x84
 800692c:	e7db      	b.n	80068e6 <_dtoa_r+0x256>
 800692e:	2301      	movs	r3, #1
 8006930:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006932:	e7f4      	b.n	800691e <_dtoa_r+0x28e>
 8006934:	f04f 0b01 	mov.w	fp, #1
 8006938:	465b      	mov	r3, fp
 800693a:	f8cd b020 	str.w	fp, [sp, #32]
 800693e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006942:	e7d0      	b.n	80068e6 <_dtoa_r+0x256>
 8006944:	3101      	adds	r1, #1
 8006946:	0052      	lsls	r2, r2, #1
 8006948:	e7d1      	b.n	80068ee <_dtoa_r+0x25e>
 800694a:	bf00      	nop
 800694c:	f3af 8000 	nop.w
 8006950:	636f4361 	.word	0x636f4361
 8006954:	3fd287a7 	.word	0x3fd287a7
 8006958:	8b60c8b3 	.word	0x8b60c8b3
 800695c:	3fc68a28 	.word	0x3fc68a28
 8006960:	509f79fb 	.word	0x509f79fb
 8006964:	3fd34413 	.word	0x3fd34413
 8006968:	0800a3d1 	.word	0x0800a3d1
 800696c:	0800a3e8 	.word	0x0800a3e8
 8006970:	7ff00000 	.word	0x7ff00000
 8006974:	0800a3cd 	.word	0x0800a3cd
 8006978:	0800a3a1 	.word	0x0800a3a1
 800697c:	0800a3a0 	.word	0x0800a3a0
 8006980:	3ff80000 	.word	0x3ff80000
 8006984:	0800a538 	.word	0x0800a538
 8006988:	0800a440 	.word	0x0800a440
 800698c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006990:	6018      	str	r0, [r3, #0]
 8006992:	9b08      	ldr	r3, [sp, #32]
 8006994:	2b0e      	cmp	r3, #14
 8006996:	f200 80a1 	bhi.w	8006adc <_dtoa_r+0x44c>
 800699a:	2c00      	cmp	r4, #0
 800699c:	f000 809e 	beq.w	8006adc <_dtoa_r+0x44c>
 80069a0:	2f00      	cmp	r7, #0
 80069a2:	dd33      	ble.n	8006a0c <_dtoa_r+0x37c>
 80069a4:	4b9c      	ldr	r3, [pc, #624]	@ (8006c18 <_dtoa_r+0x588>)
 80069a6:	f007 020f 	and.w	r2, r7, #15
 80069aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069ae:	05f8      	lsls	r0, r7, #23
 80069b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069b4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80069b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80069bc:	d516      	bpl.n	80069ec <_dtoa_r+0x35c>
 80069be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069c2:	4b96      	ldr	r3, [pc, #600]	@ (8006c1c <_dtoa_r+0x58c>)
 80069c4:	2603      	movs	r6, #3
 80069c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069ca:	f7f9 fec7 	bl	800075c <__aeabi_ddiv>
 80069ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069d2:	f004 040f 	and.w	r4, r4, #15
 80069d6:	4d91      	ldr	r5, [pc, #580]	@ (8006c1c <_dtoa_r+0x58c>)
 80069d8:	b954      	cbnz	r4, 80069f0 <_dtoa_r+0x360>
 80069da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069e2:	f7f9 febb 	bl	800075c <__aeabi_ddiv>
 80069e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069ea:	e028      	b.n	8006a3e <_dtoa_r+0x3ae>
 80069ec:	2602      	movs	r6, #2
 80069ee:	e7f2      	b.n	80069d6 <_dtoa_r+0x346>
 80069f0:	07e1      	lsls	r1, r4, #31
 80069f2:	d508      	bpl.n	8006a06 <_dtoa_r+0x376>
 80069f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069fc:	f7f9 fd84 	bl	8000508 <__aeabi_dmul>
 8006a00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a04:	3601      	adds	r6, #1
 8006a06:	1064      	asrs	r4, r4, #1
 8006a08:	3508      	adds	r5, #8
 8006a0a:	e7e5      	b.n	80069d8 <_dtoa_r+0x348>
 8006a0c:	f000 80af 	beq.w	8006b6e <_dtoa_r+0x4de>
 8006a10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a14:	427c      	negs	r4, r7
 8006a16:	4b80      	ldr	r3, [pc, #512]	@ (8006c18 <_dtoa_r+0x588>)
 8006a18:	f004 020f 	and.w	r2, r4, #15
 8006a1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f7f9 fd70 	bl	8000508 <__aeabi_dmul>
 8006a28:	2602      	movs	r6, #2
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a30:	4d7a      	ldr	r5, [pc, #488]	@ (8006c1c <_dtoa_r+0x58c>)
 8006a32:	1124      	asrs	r4, r4, #4
 8006a34:	2c00      	cmp	r4, #0
 8006a36:	f040 808f 	bne.w	8006b58 <_dtoa_r+0x4c8>
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1d3      	bne.n	80069e6 <_dtoa_r+0x356>
 8006a3e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006a42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8094 	beq.w	8006b72 <_dtoa_r+0x4e2>
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	4b73      	ldr	r3, [pc, #460]	@ (8006c20 <_dtoa_r+0x590>)
 8006a52:	f7f9 ffcb 	bl	80009ec <__aeabi_dcmplt>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	f000 808b 	beq.w	8006b72 <_dtoa_r+0x4e2>
 8006a5c:	9b08      	ldr	r3, [sp, #32]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8087 	beq.w	8006b72 <_dtoa_r+0x4e2>
 8006a64:	f1bb 0f00 	cmp.w	fp, #0
 8006a68:	dd34      	ble.n	8006ad4 <_dtoa_r+0x444>
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4629      	mov	r1, r5
 8006a70:	4b6c      	ldr	r3, [pc, #432]	@ (8006c24 <_dtoa_r+0x594>)
 8006a72:	f7f9 fd49 	bl	8000508 <__aeabi_dmul>
 8006a76:	465c      	mov	r4, fp
 8006a78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a7c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006a80:	3601      	adds	r6, #1
 8006a82:	4630      	mov	r0, r6
 8006a84:	f7f9 fcd6 	bl	8000434 <__aeabi_i2d>
 8006a88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a8c:	f7f9 fd3c 	bl	8000508 <__aeabi_dmul>
 8006a90:	2200      	movs	r2, #0
 8006a92:	4b65      	ldr	r3, [pc, #404]	@ (8006c28 <_dtoa_r+0x598>)
 8006a94:	f7f9 fb82 	bl	800019c <__adddf3>
 8006a98:	4605      	mov	r5, r0
 8006a9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006a9e:	2c00      	cmp	r4, #0
 8006aa0:	d16a      	bne.n	8006b78 <_dtoa_r+0x4e8>
 8006aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	4b60      	ldr	r3, [pc, #384]	@ (8006c2c <_dtoa_r+0x59c>)
 8006aaa:	f7f9 fb75 	bl	8000198 <__aeabi_dsub>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ab6:	462a      	mov	r2, r5
 8006ab8:	4633      	mov	r3, r6
 8006aba:	f7f9 ffb5 	bl	8000a28 <__aeabi_dcmpgt>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f040 8298 	bne.w	8006ff4 <_dtoa_r+0x964>
 8006ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ac8:	462a      	mov	r2, r5
 8006aca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006ace:	f7f9 ff8d 	bl	80009ec <__aeabi_dcmplt>
 8006ad2:	bb38      	cbnz	r0, 8006b24 <_dtoa_r+0x494>
 8006ad4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006ad8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006adc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f2c0 8157 	blt.w	8006d92 <_dtoa_r+0x702>
 8006ae4:	2f0e      	cmp	r7, #14
 8006ae6:	f300 8154 	bgt.w	8006d92 <_dtoa_r+0x702>
 8006aea:	4b4b      	ldr	r3, [pc, #300]	@ (8006c18 <_dtoa_r+0x588>)
 8006aec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006af0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006af4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006af8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f280 80e5 	bge.w	8006cca <_dtoa_r+0x63a>
 8006b00:	9b08      	ldr	r3, [sp, #32]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f300 80e1 	bgt.w	8006cca <_dtoa_r+0x63a>
 8006b08:	d10c      	bne.n	8006b24 <_dtoa_r+0x494>
 8006b0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	4b46      	ldr	r3, [pc, #280]	@ (8006c2c <_dtoa_r+0x59c>)
 8006b12:	f7f9 fcf9 	bl	8000508 <__aeabi_dmul>
 8006b16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b1a:	f7f9 ff7b 	bl	8000a14 <__aeabi_dcmpge>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f000 8266 	beq.w	8006ff0 <_dtoa_r+0x960>
 8006b24:	2400      	movs	r4, #0
 8006b26:	4625      	mov	r5, r4
 8006b28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b2a:	4656      	mov	r6, sl
 8006b2c:	ea6f 0803 	mvn.w	r8, r3
 8006b30:	2700      	movs	r7, #0
 8006b32:	4621      	mov	r1, r4
 8006b34:	4648      	mov	r0, r9
 8006b36:	f000 fcbd 	bl	80074b4 <_Bfree>
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	f000 80bd 	beq.w	8006cba <_dtoa_r+0x62a>
 8006b40:	b12f      	cbz	r7, 8006b4e <_dtoa_r+0x4be>
 8006b42:	42af      	cmp	r7, r5
 8006b44:	d003      	beq.n	8006b4e <_dtoa_r+0x4be>
 8006b46:	4639      	mov	r1, r7
 8006b48:	4648      	mov	r0, r9
 8006b4a:	f000 fcb3 	bl	80074b4 <_Bfree>
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4648      	mov	r0, r9
 8006b52:	f000 fcaf 	bl	80074b4 <_Bfree>
 8006b56:	e0b0      	b.n	8006cba <_dtoa_r+0x62a>
 8006b58:	07e2      	lsls	r2, r4, #31
 8006b5a:	d505      	bpl.n	8006b68 <_dtoa_r+0x4d8>
 8006b5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b60:	f7f9 fcd2 	bl	8000508 <__aeabi_dmul>
 8006b64:	2301      	movs	r3, #1
 8006b66:	3601      	adds	r6, #1
 8006b68:	1064      	asrs	r4, r4, #1
 8006b6a:	3508      	adds	r5, #8
 8006b6c:	e762      	b.n	8006a34 <_dtoa_r+0x3a4>
 8006b6e:	2602      	movs	r6, #2
 8006b70:	e765      	b.n	8006a3e <_dtoa_r+0x3ae>
 8006b72:	46b8      	mov	r8, r7
 8006b74:	9c08      	ldr	r4, [sp, #32]
 8006b76:	e784      	b.n	8006a82 <_dtoa_r+0x3f2>
 8006b78:	4b27      	ldr	r3, [pc, #156]	@ (8006c18 <_dtoa_r+0x588>)
 8006b7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b84:	4454      	add	r4, sl
 8006b86:	2900      	cmp	r1, #0
 8006b88:	d054      	beq.n	8006c34 <_dtoa_r+0x5a4>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	4928      	ldr	r1, [pc, #160]	@ (8006c30 <_dtoa_r+0x5a0>)
 8006b8e:	f7f9 fde5 	bl	800075c <__aeabi_ddiv>
 8006b92:	4633      	mov	r3, r6
 8006b94:	462a      	mov	r2, r5
 8006b96:	f7f9 faff 	bl	8000198 <__aeabi_dsub>
 8006b9a:	4656      	mov	r6, sl
 8006b9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ba0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ba4:	f7f9 ff60 	bl	8000a68 <__aeabi_d2iz>
 8006ba8:	4605      	mov	r5, r0
 8006baa:	f7f9 fc43 	bl	8000434 <__aeabi_i2d>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bb6:	f7f9 faef 	bl	8000198 <__aeabi_dsub>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	3530      	adds	r5, #48	@ 0x30
 8006bc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006bc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006bc8:	f806 5b01 	strb.w	r5, [r6], #1
 8006bcc:	f7f9 ff0e 	bl	80009ec <__aeabi_dcmplt>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d172      	bne.n	8006cba <_dtoa_r+0x62a>
 8006bd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bd8:	2000      	movs	r0, #0
 8006bda:	4911      	ldr	r1, [pc, #68]	@ (8006c20 <_dtoa_r+0x590>)
 8006bdc:	f7f9 fadc 	bl	8000198 <__aeabi_dsub>
 8006be0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006be4:	f7f9 ff02 	bl	80009ec <__aeabi_dcmplt>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	f040 80b4 	bne.w	8006d56 <_dtoa_r+0x6c6>
 8006bee:	42a6      	cmp	r6, r4
 8006bf0:	f43f af70 	beq.w	8006ad4 <_dtoa_r+0x444>
 8006bf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <_dtoa_r+0x594>)
 8006bfc:	f7f9 fc84 	bl	8000508 <__aeabi_dmul>
 8006c00:	2200      	movs	r2, #0
 8006c02:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c0a:	4b06      	ldr	r3, [pc, #24]	@ (8006c24 <_dtoa_r+0x594>)
 8006c0c:	f7f9 fc7c 	bl	8000508 <__aeabi_dmul>
 8006c10:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c14:	e7c4      	b.n	8006ba0 <_dtoa_r+0x510>
 8006c16:	bf00      	nop
 8006c18:	0800a538 	.word	0x0800a538
 8006c1c:	0800a510 	.word	0x0800a510
 8006c20:	3ff00000 	.word	0x3ff00000
 8006c24:	40240000 	.word	0x40240000
 8006c28:	401c0000 	.word	0x401c0000
 8006c2c:	40140000 	.word	0x40140000
 8006c30:	3fe00000 	.word	0x3fe00000
 8006c34:	4631      	mov	r1, r6
 8006c36:	4628      	mov	r0, r5
 8006c38:	f7f9 fc66 	bl	8000508 <__aeabi_dmul>
 8006c3c:	4656      	mov	r6, sl
 8006c3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c42:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006c44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c48:	f7f9 ff0e 	bl	8000a68 <__aeabi_d2iz>
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	f7f9 fbf1 	bl	8000434 <__aeabi_i2d>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c5a:	f7f9 fa9d 	bl	8000198 <__aeabi_dsub>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	3530      	adds	r5, #48	@ 0x30
 8006c64:	f806 5b01 	strb.w	r5, [r6], #1
 8006c68:	42a6      	cmp	r6, r4
 8006c6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	d124      	bne.n	8006cbe <_dtoa_r+0x62e>
 8006c74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c78:	4bae      	ldr	r3, [pc, #696]	@ (8006f34 <_dtoa_r+0x8a4>)
 8006c7a:	f7f9 fa8f 	bl	800019c <__adddf3>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c86:	f7f9 fecf 	bl	8000a28 <__aeabi_dcmpgt>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d163      	bne.n	8006d56 <_dtoa_r+0x6c6>
 8006c8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c92:	2000      	movs	r0, #0
 8006c94:	49a7      	ldr	r1, [pc, #668]	@ (8006f34 <_dtoa_r+0x8a4>)
 8006c96:	f7f9 fa7f 	bl	8000198 <__aeabi_dsub>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ca2:	f7f9 fea3 	bl	80009ec <__aeabi_dcmplt>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	f43f af14 	beq.w	8006ad4 <_dtoa_r+0x444>
 8006cac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006cae:	1e73      	subs	r3, r6, #1
 8006cb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006cb6:	2b30      	cmp	r3, #48	@ 0x30
 8006cb8:	d0f8      	beq.n	8006cac <_dtoa_r+0x61c>
 8006cba:	4647      	mov	r7, r8
 8006cbc:	e03b      	b.n	8006d36 <_dtoa_r+0x6a6>
 8006cbe:	4b9e      	ldr	r3, [pc, #632]	@ (8006f38 <_dtoa_r+0x8a8>)
 8006cc0:	f7f9 fc22 	bl	8000508 <__aeabi_dmul>
 8006cc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cc8:	e7bc      	b.n	8006c44 <_dtoa_r+0x5b4>
 8006cca:	4656      	mov	r6, sl
 8006ccc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006cd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	f7f9 fd40 	bl	800075c <__aeabi_ddiv>
 8006cdc:	f7f9 fec4 	bl	8000a68 <__aeabi_d2iz>
 8006ce0:	4680      	mov	r8, r0
 8006ce2:	f7f9 fba7 	bl	8000434 <__aeabi_i2d>
 8006ce6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cea:	f7f9 fc0d 	bl	8000508 <__aeabi_dmul>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	f7f9 fa4f 	bl	8000198 <__aeabi_dsub>
 8006cfa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006cfe:	9d08      	ldr	r5, [sp, #32]
 8006d00:	f806 4b01 	strb.w	r4, [r6], #1
 8006d04:	eba6 040a 	sub.w	r4, r6, sl
 8006d08:	42a5      	cmp	r5, r4
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	d133      	bne.n	8006d78 <_dtoa_r+0x6e8>
 8006d10:	f7f9 fa44 	bl	800019c <__adddf3>
 8006d14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d18:	4604      	mov	r4, r0
 8006d1a:	460d      	mov	r5, r1
 8006d1c:	f7f9 fe84 	bl	8000a28 <__aeabi_dcmpgt>
 8006d20:	b9c0      	cbnz	r0, 8006d54 <_dtoa_r+0x6c4>
 8006d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d26:	4620      	mov	r0, r4
 8006d28:	4629      	mov	r1, r5
 8006d2a:	f7f9 fe55 	bl	80009d8 <__aeabi_dcmpeq>
 8006d2e:	b110      	cbz	r0, 8006d36 <_dtoa_r+0x6a6>
 8006d30:	f018 0f01 	tst.w	r8, #1
 8006d34:	d10e      	bne.n	8006d54 <_dtoa_r+0x6c4>
 8006d36:	4648      	mov	r0, r9
 8006d38:	9903      	ldr	r1, [sp, #12]
 8006d3a:	f000 fbbb 	bl	80074b4 <_Bfree>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	7033      	strb	r3, [r6, #0]
 8006d42:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006d44:	3701      	adds	r7, #1
 8006d46:	601f      	str	r7, [r3, #0]
 8006d48:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 824b 	beq.w	80071e6 <_dtoa_r+0xb56>
 8006d50:	601e      	str	r6, [r3, #0]
 8006d52:	e248      	b.n	80071e6 <_dtoa_r+0xb56>
 8006d54:	46b8      	mov	r8, r7
 8006d56:	4633      	mov	r3, r6
 8006d58:	461e      	mov	r6, r3
 8006d5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d5e:	2a39      	cmp	r2, #57	@ 0x39
 8006d60:	d106      	bne.n	8006d70 <_dtoa_r+0x6e0>
 8006d62:	459a      	cmp	sl, r3
 8006d64:	d1f8      	bne.n	8006d58 <_dtoa_r+0x6c8>
 8006d66:	2230      	movs	r2, #48	@ 0x30
 8006d68:	f108 0801 	add.w	r8, r8, #1
 8006d6c:	f88a 2000 	strb.w	r2, [sl]
 8006d70:	781a      	ldrb	r2, [r3, #0]
 8006d72:	3201      	adds	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	e7a0      	b.n	8006cba <_dtoa_r+0x62a>
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4b6f      	ldr	r3, [pc, #444]	@ (8006f38 <_dtoa_r+0x8a8>)
 8006d7c:	f7f9 fbc4 	bl	8000508 <__aeabi_dmul>
 8006d80:	2200      	movs	r2, #0
 8006d82:	2300      	movs	r3, #0
 8006d84:	4604      	mov	r4, r0
 8006d86:	460d      	mov	r5, r1
 8006d88:	f7f9 fe26 	bl	80009d8 <__aeabi_dcmpeq>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d09f      	beq.n	8006cd0 <_dtoa_r+0x640>
 8006d90:	e7d1      	b.n	8006d36 <_dtoa_r+0x6a6>
 8006d92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d94:	2a00      	cmp	r2, #0
 8006d96:	f000 80ea 	beq.w	8006f6e <_dtoa_r+0x8de>
 8006d9a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d9c:	2a01      	cmp	r2, #1
 8006d9e:	f300 80cd 	bgt.w	8006f3c <_dtoa_r+0x8ac>
 8006da2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006da4:	2a00      	cmp	r2, #0
 8006da6:	f000 80c1 	beq.w	8006f2c <_dtoa_r+0x89c>
 8006daa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006dae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006db0:	9e04      	ldr	r6, [sp, #16]
 8006db2:	9a04      	ldr	r2, [sp, #16]
 8006db4:	2101      	movs	r1, #1
 8006db6:	441a      	add	r2, r3
 8006db8:	9204      	str	r2, [sp, #16]
 8006dba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dbc:	4648      	mov	r0, r9
 8006dbe:	441a      	add	r2, r3
 8006dc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dc2:	f000 fc2b 	bl	800761c <__i2b>
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	b166      	cbz	r6, 8006de4 <_dtoa_r+0x754>
 8006dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	dd09      	ble.n	8006de4 <_dtoa_r+0x754>
 8006dd0:	42b3      	cmp	r3, r6
 8006dd2:	bfa8      	it	ge
 8006dd4:	4633      	movge	r3, r6
 8006dd6:	9a04      	ldr	r2, [sp, #16]
 8006dd8:	1af6      	subs	r6, r6, r3
 8006dda:	1ad2      	subs	r2, r2, r3
 8006ddc:	9204      	str	r2, [sp, #16]
 8006dde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006de6:	b30b      	cbz	r3, 8006e2c <_dtoa_r+0x79c>
 8006de8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 80c6 	beq.w	8006f7c <_dtoa_r+0x8ec>
 8006df0:	2c00      	cmp	r4, #0
 8006df2:	f000 80c0 	beq.w	8006f76 <_dtoa_r+0x8e6>
 8006df6:	4629      	mov	r1, r5
 8006df8:	4622      	mov	r2, r4
 8006dfa:	4648      	mov	r0, r9
 8006dfc:	f000 fcc6 	bl	800778c <__pow5mult>
 8006e00:	9a03      	ldr	r2, [sp, #12]
 8006e02:	4601      	mov	r1, r0
 8006e04:	4605      	mov	r5, r0
 8006e06:	4648      	mov	r0, r9
 8006e08:	f000 fc1e 	bl	8007648 <__multiply>
 8006e0c:	9903      	ldr	r1, [sp, #12]
 8006e0e:	4680      	mov	r8, r0
 8006e10:	4648      	mov	r0, r9
 8006e12:	f000 fb4f 	bl	80074b4 <_Bfree>
 8006e16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e18:	1b1b      	subs	r3, r3, r4
 8006e1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e1c:	f000 80b1 	beq.w	8006f82 <_dtoa_r+0x8f2>
 8006e20:	4641      	mov	r1, r8
 8006e22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e24:	4648      	mov	r0, r9
 8006e26:	f000 fcb1 	bl	800778c <__pow5mult>
 8006e2a:	9003      	str	r0, [sp, #12]
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	4648      	mov	r0, r9
 8006e30:	f000 fbf4 	bl	800761c <__i2b>
 8006e34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e36:	4604      	mov	r4, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 81d8 	beq.w	80071ee <_dtoa_r+0xb5e>
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4601      	mov	r1, r0
 8006e42:	4648      	mov	r0, r9
 8006e44:	f000 fca2 	bl	800778c <__pow5mult>
 8006e48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	f300 809f 	bgt.w	8006f90 <_dtoa_r+0x900>
 8006e52:	9b06      	ldr	r3, [sp, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f040 8097 	bne.w	8006f88 <_dtoa_r+0x8f8>
 8006e5a:	9b07      	ldr	r3, [sp, #28]
 8006e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f040 8093 	bne.w	8006f8c <_dtoa_r+0x8fc>
 8006e66:	9b07      	ldr	r3, [sp, #28]
 8006e68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e6c:	0d1b      	lsrs	r3, r3, #20
 8006e6e:	051b      	lsls	r3, r3, #20
 8006e70:	b133      	cbz	r3, 8006e80 <_dtoa_r+0x7f0>
 8006e72:	9b04      	ldr	r3, [sp, #16]
 8006e74:	3301      	adds	r3, #1
 8006e76:	9304      	str	r3, [sp, #16]
 8006e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7e:	2301      	movs	r3, #1
 8006e80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 81b8 	beq.w	80071fa <_dtoa_r+0xb6a>
 8006e8a:	6923      	ldr	r3, [r4, #16]
 8006e8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e90:	6918      	ldr	r0, [r3, #16]
 8006e92:	f000 fb77 	bl	8007584 <__hi0bits>
 8006e96:	f1c0 0020 	rsb	r0, r0, #32
 8006e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e9c:	4418      	add	r0, r3
 8006e9e:	f010 001f 	ands.w	r0, r0, #31
 8006ea2:	f000 8082 	beq.w	8006faa <_dtoa_r+0x91a>
 8006ea6:	f1c0 0320 	rsb	r3, r0, #32
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	dd73      	ble.n	8006f96 <_dtoa_r+0x906>
 8006eae:	9b04      	ldr	r3, [sp, #16]
 8006eb0:	f1c0 001c 	rsb	r0, r0, #28
 8006eb4:	4403      	add	r3, r0
 8006eb6:	9304      	str	r3, [sp, #16]
 8006eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eba:	4406      	add	r6, r0
 8006ebc:	4403      	add	r3, r0
 8006ebe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ec0:	9b04      	ldr	r3, [sp, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	dd05      	ble.n	8006ed2 <_dtoa_r+0x842>
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	4648      	mov	r0, r9
 8006eca:	9903      	ldr	r1, [sp, #12]
 8006ecc:	f000 fcb8 	bl	8007840 <__lshift>
 8006ed0:	9003      	str	r0, [sp, #12]
 8006ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	dd05      	ble.n	8006ee4 <_dtoa_r+0x854>
 8006ed8:	4621      	mov	r1, r4
 8006eda:	461a      	mov	r2, r3
 8006edc:	4648      	mov	r0, r9
 8006ede:	f000 fcaf 	bl	8007840 <__lshift>
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d061      	beq.n	8006fae <_dtoa_r+0x91e>
 8006eea:	4621      	mov	r1, r4
 8006eec:	9803      	ldr	r0, [sp, #12]
 8006eee:	f000 fd13 	bl	8007918 <__mcmp>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	da5b      	bge.n	8006fae <_dtoa_r+0x91e>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	220a      	movs	r2, #10
 8006efa:	4648      	mov	r0, r9
 8006efc:	9903      	ldr	r1, [sp, #12]
 8006efe:	f000 fafb 	bl	80074f8 <__multadd>
 8006f02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f04:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006f08:	9003      	str	r0, [sp, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8177 	beq.w	80071fe <_dtoa_r+0xb6e>
 8006f10:	4629      	mov	r1, r5
 8006f12:	2300      	movs	r3, #0
 8006f14:	220a      	movs	r2, #10
 8006f16:	4648      	mov	r0, r9
 8006f18:	f000 faee 	bl	80074f8 <__multadd>
 8006f1c:	f1bb 0f00 	cmp.w	fp, #0
 8006f20:	4605      	mov	r5, r0
 8006f22:	dc6f      	bgt.n	8007004 <_dtoa_r+0x974>
 8006f24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	dc49      	bgt.n	8006fbe <_dtoa_r+0x92e>
 8006f2a:	e06b      	b.n	8007004 <_dtoa_r+0x974>
 8006f2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006f32:	e73c      	b.n	8006dae <_dtoa_r+0x71e>
 8006f34:	3fe00000 	.word	0x3fe00000
 8006f38:	40240000 	.word	0x40240000
 8006f3c:	9b08      	ldr	r3, [sp, #32]
 8006f3e:	1e5c      	subs	r4, r3, #1
 8006f40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f42:	42a3      	cmp	r3, r4
 8006f44:	db09      	blt.n	8006f5a <_dtoa_r+0x8ca>
 8006f46:	1b1c      	subs	r4, r3, r4
 8006f48:	9b08      	ldr	r3, [sp, #32]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f6bf af30 	bge.w	8006db0 <_dtoa_r+0x720>
 8006f50:	9b04      	ldr	r3, [sp, #16]
 8006f52:	9a08      	ldr	r2, [sp, #32]
 8006f54:	1a9e      	subs	r6, r3, r2
 8006f56:	2300      	movs	r3, #0
 8006f58:	e72b      	b.n	8006db2 <_dtoa_r+0x722>
 8006f5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f5e:	1ae3      	subs	r3, r4, r3
 8006f60:	441a      	add	r2, r3
 8006f62:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f64:	9e04      	ldr	r6, [sp, #16]
 8006f66:	2400      	movs	r4, #0
 8006f68:	9b08      	ldr	r3, [sp, #32]
 8006f6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f6c:	e721      	b.n	8006db2 <_dtoa_r+0x722>
 8006f6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f70:	9e04      	ldr	r6, [sp, #16]
 8006f72:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006f74:	e728      	b.n	8006dc8 <_dtoa_r+0x738>
 8006f76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006f7a:	e751      	b.n	8006e20 <_dtoa_r+0x790>
 8006f7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f7e:	9903      	ldr	r1, [sp, #12]
 8006f80:	e750      	b.n	8006e24 <_dtoa_r+0x794>
 8006f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f86:	e751      	b.n	8006e2c <_dtoa_r+0x79c>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e779      	b.n	8006e80 <_dtoa_r+0x7f0>
 8006f8c:	9b06      	ldr	r3, [sp, #24]
 8006f8e:	e777      	b.n	8006e80 <_dtoa_r+0x7f0>
 8006f90:	2300      	movs	r3, #0
 8006f92:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f94:	e779      	b.n	8006e8a <_dtoa_r+0x7fa>
 8006f96:	d093      	beq.n	8006ec0 <_dtoa_r+0x830>
 8006f98:	9a04      	ldr	r2, [sp, #16]
 8006f9a:	331c      	adds	r3, #28
 8006f9c:	441a      	add	r2, r3
 8006f9e:	9204      	str	r2, [sp, #16]
 8006fa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fa2:	441e      	add	r6, r3
 8006fa4:	441a      	add	r2, r3
 8006fa6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fa8:	e78a      	b.n	8006ec0 <_dtoa_r+0x830>
 8006faa:	4603      	mov	r3, r0
 8006fac:	e7f4      	b.n	8006f98 <_dtoa_r+0x908>
 8006fae:	9b08      	ldr	r3, [sp, #32]
 8006fb0:	46b8      	mov	r8, r7
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dc20      	bgt.n	8006ff8 <_dtoa_r+0x968>
 8006fb6:	469b      	mov	fp, r3
 8006fb8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	dd1e      	ble.n	8006ffc <_dtoa_r+0x96c>
 8006fbe:	f1bb 0f00 	cmp.w	fp, #0
 8006fc2:	f47f adb1 	bne.w	8006b28 <_dtoa_r+0x498>
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	465b      	mov	r3, fp
 8006fca:	2205      	movs	r2, #5
 8006fcc:	4648      	mov	r0, r9
 8006fce:	f000 fa93 	bl	80074f8 <__multadd>
 8006fd2:	4601      	mov	r1, r0
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	9803      	ldr	r0, [sp, #12]
 8006fd8:	f000 fc9e 	bl	8007918 <__mcmp>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f77f ada3 	ble.w	8006b28 <_dtoa_r+0x498>
 8006fe2:	4656      	mov	r6, sl
 8006fe4:	2331      	movs	r3, #49	@ 0x31
 8006fe6:	f108 0801 	add.w	r8, r8, #1
 8006fea:	f806 3b01 	strb.w	r3, [r6], #1
 8006fee:	e59f      	b.n	8006b30 <_dtoa_r+0x4a0>
 8006ff0:	46b8      	mov	r8, r7
 8006ff2:	9c08      	ldr	r4, [sp, #32]
 8006ff4:	4625      	mov	r5, r4
 8006ff6:	e7f4      	b.n	8006fe2 <_dtoa_r+0x952>
 8006ff8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006ffc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 8101 	beq.w	8007206 <_dtoa_r+0xb76>
 8007004:	2e00      	cmp	r6, #0
 8007006:	dd05      	ble.n	8007014 <_dtoa_r+0x984>
 8007008:	4629      	mov	r1, r5
 800700a:	4632      	mov	r2, r6
 800700c:	4648      	mov	r0, r9
 800700e:	f000 fc17 	bl	8007840 <__lshift>
 8007012:	4605      	mov	r5, r0
 8007014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007016:	2b00      	cmp	r3, #0
 8007018:	d05c      	beq.n	80070d4 <_dtoa_r+0xa44>
 800701a:	4648      	mov	r0, r9
 800701c:	6869      	ldr	r1, [r5, #4]
 800701e:	f000 fa09 	bl	8007434 <_Balloc>
 8007022:	4606      	mov	r6, r0
 8007024:	b928      	cbnz	r0, 8007032 <_dtoa_r+0x9a2>
 8007026:	4602      	mov	r2, r0
 8007028:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800702c:	4b80      	ldr	r3, [pc, #512]	@ (8007230 <_dtoa_r+0xba0>)
 800702e:	f7ff bb43 	b.w	80066b8 <_dtoa_r+0x28>
 8007032:	692a      	ldr	r2, [r5, #16]
 8007034:	f105 010c 	add.w	r1, r5, #12
 8007038:	3202      	adds	r2, #2
 800703a:	0092      	lsls	r2, r2, #2
 800703c:	300c      	adds	r0, #12
 800703e:	f7ff fa8e 	bl	800655e <memcpy>
 8007042:	2201      	movs	r2, #1
 8007044:	4631      	mov	r1, r6
 8007046:	4648      	mov	r0, r9
 8007048:	f000 fbfa 	bl	8007840 <__lshift>
 800704c:	462f      	mov	r7, r5
 800704e:	4605      	mov	r5, r0
 8007050:	f10a 0301 	add.w	r3, sl, #1
 8007054:	9304      	str	r3, [sp, #16]
 8007056:	eb0a 030b 	add.w	r3, sl, fp
 800705a:	930a      	str	r3, [sp, #40]	@ 0x28
 800705c:	9b06      	ldr	r3, [sp, #24]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	9309      	str	r3, [sp, #36]	@ 0x24
 8007064:	9b04      	ldr	r3, [sp, #16]
 8007066:	4621      	mov	r1, r4
 8007068:	9803      	ldr	r0, [sp, #12]
 800706a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800706e:	f7ff fa84 	bl	800657a <quorem>
 8007072:	4603      	mov	r3, r0
 8007074:	4639      	mov	r1, r7
 8007076:	3330      	adds	r3, #48	@ 0x30
 8007078:	9006      	str	r0, [sp, #24]
 800707a:	9803      	ldr	r0, [sp, #12]
 800707c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800707e:	f000 fc4b 	bl	8007918 <__mcmp>
 8007082:	462a      	mov	r2, r5
 8007084:	9008      	str	r0, [sp, #32]
 8007086:	4621      	mov	r1, r4
 8007088:	4648      	mov	r0, r9
 800708a:	f000 fc61 	bl	8007950 <__mdiff>
 800708e:	68c2      	ldr	r2, [r0, #12]
 8007090:	4606      	mov	r6, r0
 8007092:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007094:	bb02      	cbnz	r2, 80070d8 <_dtoa_r+0xa48>
 8007096:	4601      	mov	r1, r0
 8007098:	9803      	ldr	r0, [sp, #12]
 800709a:	f000 fc3d 	bl	8007918 <__mcmp>
 800709e:	4602      	mov	r2, r0
 80070a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070a2:	4631      	mov	r1, r6
 80070a4:	4648      	mov	r0, r9
 80070a6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80070aa:	f000 fa03 	bl	80074b4 <_Bfree>
 80070ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80070b2:	9e04      	ldr	r6, [sp, #16]
 80070b4:	ea42 0103 	orr.w	r1, r2, r3
 80070b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ba:	4319      	orrs	r1, r3
 80070bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070be:	d10d      	bne.n	80070dc <_dtoa_r+0xa4c>
 80070c0:	2b39      	cmp	r3, #57	@ 0x39
 80070c2:	d027      	beq.n	8007114 <_dtoa_r+0xa84>
 80070c4:	9a08      	ldr	r2, [sp, #32]
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	dd01      	ble.n	80070ce <_dtoa_r+0xa3e>
 80070ca:	9b06      	ldr	r3, [sp, #24]
 80070cc:	3331      	adds	r3, #49	@ 0x31
 80070ce:	f88b 3000 	strb.w	r3, [fp]
 80070d2:	e52e      	b.n	8006b32 <_dtoa_r+0x4a2>
 80070d4:	4628      	mov	r0, r5
 80070d6:	e7b9      	b.n	800704c <_dtoa_r+0x9bc>
 80070d8:	2201      	movs	r2, #1
 80070da:	e7e2      	b.n	80070a2 <_dtoa_r+0xa12>
 80070dc:	9908      	ldr	r1, [sp, #32]
 80070de:	2900      	cmp	r1, #0
 80070e0:	db04      	blt.n	80070ec <_dtoa_r+0xa5c>
 80070e2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80070e4:	4301      	orrs	r1, r0
 80070e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070e8:	4301      	orrs	r1, r0
 80070ea:	d120      	bne.n	800712e <_dtoa_r+0xa9e>
 80070ec:	2a00      	cmp	r2, #0
 80070ee:	ddee      	ble.n	80070ce <_dtoa_r+0xa3e>
 80070f0:	2201      	movs	r2, #1
 80070f2:	9903      	ldr	r1, [sp, #12]
 80070f4:	4648      	mov	r0, r9
 80070f6:	9304      	str	r3, [sp, #16]
 80070f8:	f000 fba2 	bl	8007840 <__lshift>
 80070fc:	4621      	mov	r1, r4
 80070fe:	9003      	str	r0, [sp, #12]
 8007100:	f000 fc0a 	bl	8007918 <__mcmp>
 8007104:	2800      	cmp	r0, #0
 8007106:	9b04      	ldr	r3, [sp, #16]
 8007108:	dc02      	bgt.n	8007110 <_dtoa_r+0xa80>
 800710a:	d1e0      	bne.n	80070ce <_dtoa_r+0xa3e>
 800710c:	07da      	lsls	r2, r3, #31
 800710e:	d5de      	bpl.n	80070ce <_dtoa_r+0xa3e>
 8007110:	2b39      	cmp	r3, #57	@ 0x39
 8007112:	d1da      	bne.n	80070ca <_dtoa_r+0xa3a>
 8007114:	2339      	movs	r3, #57	@ 0x39
 8007116:	f88b 3000 	strb.w	r3, [fp]
 800711a:	4633      	mov	r3, r6
 800711c:	461e      	mov	r6, r3
 800711e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007122:	3b01      	subs	r3, #1
 8007124:	2a39      	cmp	r2, #57	@ 0x39
 8007126:	d04e      	beq.n	80071c6 <_dtoa_r+0xb36>
 8007128:	3201      	adds	r2, #1
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e501      	b.n	8006b32 <_dtoa_r+0x4a2>
 800712e:	2a00      	cmp	r2, #0
 8007130:	dd03      	ble.n	800713a <_dtoa_r+0xaaa>
 8007132:	2b39      	cmp	r3, #57	@ 0x39
 8007134:	d0ee      	beq.n	8007114 <_dtoa_r+0xa84>
 8007136:	3301      	adds	r3, #1
 8007138:	e7c9      	b.n	80070ce <_dtoa_r+0xa3e>
 800713a:	9a04      	ldr	r2, [sp, #16]
 800713c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800713e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007142:	428a      	cmp	r2, r1
 8007144:	d028      	beq.n	8007198 <_dtoa_r+0xb08>
 8007146:	2300      	movs	r3, #0
 8007148:	220a      	movs	r2, #10
 800714a:	9903      	ldr	r1, [sp, #12]
 800714c:	4648      	mov	r0, r9
 800714e:	f000 f9d3 	bl	80074f8 <__multadd>
 8007152:	42af      	cmp	r7, r5
 8007154:	9003      	str	r0, [sp, #12]
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	f04f 020a 	mov.w	r2, #10
 800715e:	4639      	mov	r1, r7
 8007160:	4648      	mov	r0, r9
 8007162:	d107      	bne.n	8007174 <_dtoa_r+0xae4>
 8007164:	f000 f9c8 	bl	80074f8 <__multadd>
 8007168:	4607      	mov	r7, r0
 800716a:	4605      	mov	r5, r0
 800716c:	9b04      	ldr	r3, [sp, #16]
 800716e:	3301      	adds	r3, #1
 8007170:	9304      	str	r3, [sp, #16]
 8007172:	e777      	b.n	8007064 <_dtoa_r+0x9d4>
 8007174:	f000 f9c0 	bl	80074f8 <__multadd>
 8007178:	4629      	mov	r1, r5
 800717a:	4607      	mov	r7, r0
 800717c:	2300      	movs	r3, #0
 800717e:	220a      	movs	r2, #10
 8007180:	4648      	mov	r0, r9
 8007182:	f000 f9b9 	bl	80074f8 <__multadd>
 8007186:	4605      	mov	r5, r0
 8007188:	e7f0      	b.n	800716c <_dtoa_r+0xadc>
 800718a:	f1bb 0f00 	cmp.w	fp, #0
 800718e:	bfcc      	ite	gt
 8007190:	465e      	movgt	r6, fp
 8007192:	2601      	movle	r6, #1
 8007194:	2700      	movs	r7, #0
 8007196:	4456      	add	r6, sl
 8007198:	2201      	movs	r2, #1
 800719a:	9903      	ldr	r1, [sp, #12]
 800719c:	4648      	mov	r0, r9
 800719e:	9304      	str	r3, [sp, #16]
 80071a0:	f000 fb4e 	bl	8007840 <__lshift>
 80071a4:	4621      	mov	r1, r4
 80071a6:	9003      	str	r0, [sp, #12]
 80071a8:	f000 fbb6 	bl	8007918 <__mcmp>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	dcb4      	bgt.n	800711a <_dtoa_r+0xa8a>
 80071b0:	d102      	bne.n	80071b8 <_dtoa_r+0xb28>
 80071b2:	9b04      	ldr	r3, [sp, #16]
 80071b4:	07db      	lsls	r3, r3, #31
 80071b6:	d4b0      	bmi.n	800711a <_dtoa_r+0xa8a>
 80071b8:	4633      	mov	r3, r6
 80071ba:	461e      	mov	r6, r3
 80071bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071c0:	2a30      	cmp	r2, #48	@ 0x30
 80071c2:	d0fa      	beq.n	80071ba <_dtoa_r+0xb2a>
 80071c4:	e4b5      	b.n	8006b32 <_dtoa_r+0x4a2>
 80071c6:	459a      	cmp	sl, r3
 80071c8:	d1a8      	bne.n	800711c <_dtoa_r+0xa8c>
 80071ca:	2331      	movs	r3, #49	@ 0x31
 80071cc:	f108 0801 	add.w	r8, r8, #1
 80071d0:	f88a 3000 	strb.w	r3, [sl]
 80071d4:	e4ad      	b.n	8006b32 <_dtoa_r+0x4a2>
 80071d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80071d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007234 <_dtoa_r+0xba4>
 80071dc:	b11b      	cbz	r3, 80071e6 <_dtoa_r+0xb56>
 80071de:	f10a 0308 	add.w	r3, sl, #8
 80071e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	4650      	mov	r0, sl
 80071e8:	b017      	add	sp, #92	@ 0x5c
 80071ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	f77f ae2e 	ble.w	8006e52 <_dtoa_r+0x7c2>
 80071f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80071fa:	2001      	movs	r0, #1
 80071fc:	e64d      	b.n	8006e9a <_dtoa_r+0x80a>
 80071fe:	f1bb 0f00 	cmp.w	fp, #0
 8007202:	f77f aed9 	ble.w	8006fb8 <_dtoa_r+0x928>
 8007206:	4656      	mov	r6, sl
 8007208:	4621      	mov	r1, r4
 800720a:	9803      	ldr	r0, [sp, #12]
 800720c:	f7ff f9b5 	bl	800657a <quorem>
 8007210:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007214:	f806 3b01 	strb.w	r3, [r6], #1
 8007218:	eba6 020a 	sub.w	r2, r6, sl
 800721c:	4593      	cmp	fp, r2
 800721e:	ddb4      	ble.n	800718a <_dtoa_r+0xafa>
 8007220:	2300      	movs	r3, #0
 8007222:	220a      	movs	r2, #10
 8007224:	4648      	mov	r0, r9
 8007226:	9903      	ldr	r1, [sp, #12]
 8007228:	f000 f966 	bl	80074f8 <__multadd>
 800722c:	9003      	str	r0, [sp, #12]
 800722e:	e7eb      	b.n	8007208 <_dtoa_r+0xb78>
 8007230:	0800a440 	.word	0x0800a440
 8007234:	0800a3c4 	.word	0x0800a3c4

08007238 <_free_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4605      	mov	r5, r0
 800723c:	2900      	cmp	r1, #0
 800723e:	d040      	beq.n	80072c2 <_free_r+0x8a>
 8007240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007244:	1f0c      	subs	r4, r1, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	bfb8      	it	lt
 800724a:	18e4      	addlt	r4, r4, r3
 800724c:	f000 f8e6 	bl	800741c <__malloc_lock>
 8007250:	4a1c      	ldr	r2, [pc, #112]	@ (80072c4 <_free_r+0x8c>)
 8007252:	6813      	ldr	r3, [r2, #0]
 8007254:	b933      	cbnz	r3, 8007264 <_free_r+0x2c>
 8007256:	6063      	str	r3, [r4, #4]
 8007258:	6014      	str	r4, [r2, #0]
 800725a:	4628      	mov	r0, r5
 800725c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007260:	f000 b8e2 	b.w	8007428 <__malloc_unlock>
 8007264:	42a3      	cmp	r3, r4
 8007266:	d908      	bls.n	800727a <_free_r+0x42>
 8007268:	6820      	ldr	r0, [r4, #0]
 800726a:	1821      	adds	r1, r4, r0
 800726c:	428b      	cmp	r3, r1
 800726e:	bf01      	itttt	eq
 8007270:	6819      	ldreq	r1, [r3, #0]
 8007272:	685b      	ldreq	r3, [r3, #4]
 8007274:	1809      	addeq	r1, r1, r0
 8007276:	6021      	streq	r1, [r4, #0]
 8007278:	e7ed      	b.n	8007256 <_free_r+0x1e>
 800727a:	461a      	mov	r2, r3
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	b10b      	cbz	r3, 8007284 <_free_r+0x4c>
 8007280:	42a3      	cmp	r3, r4
 8007282:	d9fa      	bls.n	800727a <_free_r+0x42>
 8007284:	6811      	ldr	r1, [r2, #0]
 8007286:	1850      	adds	r0, r2, r1
 8007288:	42a0      	cmp	r0, r4
 800728a:	d10b      	bne.n	80072a4 <_free_r+0x6c>
 800728c:	6820      	ldr	r0, [r4, #0]
 800728e:	4401      	add	r1, r0
 8007290:	1850      	adds	r0, r2, r1
 8007292:	4283      	cmp	r3, r0
 8007294:	6011      	str	r1, [r2, #0]
 8007296:	d1e0      	bne.n	800725a <_free_r+0x22>
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	4408      	add	r0, r1
 800729e:	6010      	str	r0, [r2, #0]
 80072a0:	6053      	str	r3, [r2, #4]
 80072a2:	e7da      	b.n	800725a <_free_r+0x22>
 80072a4:	d902      	bls.n	80072ac <_free_r+0x74>
 80072a6:	230c      	movs	r3, #12
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	e7d6      	b.n	800725a <_free_r+0x22>
 80072ac:	6820      	ldr	r0, [r4, #0]
 80072ae:	1821      	adds	r1, r4, r0
 80072b0:	428b      	cmp	r3, r1
 80072b2:	bf01      	itttt	eq
 80072b4:	6819      	ldreq	r1, [r3, #0]
 80072b6:	685b      	ldreq	r3, [r3, #4]
 80072b8:	1809      	addeq	r1, r1, r0
 80072ba:	6021      	streq	r1, [r4, #0]
 80072bc:	6063      	str	r3, [r4, #4]
 80072be:	6054      	str	r4, [r2, #4]
 80072c0:	e7cb      	b.n	800725a <_free_r+0x22>
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	20001258 	.word	0x20001258

080072c8 <malloc>:
 80072c8:	4b02      	ldr	r3, [pc, #8]	@ (80072d4 <malloc+0xc>)
 80072ca:	4601      	mov	r1, r0
 80072cc:	6818      	ldr	r0, [r3, #0]
 80072ce:	f000 b825 	b.w	800731c <_malloc_r>
 80072d2:	bf00      	nop
 80072d4:	20000030 	.word	0x20000030

080072d8 <sbrk_aligned>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	4e0f      	ldr	r6, [pc, #60]	@ (8007318 <sbrk_aligned+0x40>)
 80072dc:	460c      	mov	r4, r1
 80072de:	6831      	ldr	r1, [r6, #0]
 80072e0:	4605      	mov	r5, r0
 80072e2:	b911      	cbnz	r1, 80072ea <sbrk_aligned+0x12>
 80072e4:	f000 fe8c 	bl	8008000 <_sbrk_r>
 80072e8:	6030      	str	r0, [r6, #0]
 80072ea:	4621      	mov	r1, r4
 80072ec:	4628      	mov	r0, r5
 80072ee:	f000 fe87 	bl	8008000 <_sbrk_r>
 80072f2:	1c43      	adds	r3, r0, #1
 80072f4:	d103      	bne.n	80072fe <sbrk_aligned+0x26>
 80072f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80072fa:	4620      	mov	r0, r4
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	1cc4      	adds	r4, r0, #3
 8007300:	f024 0403 	bic.w	r4, r4, #3
 8007304:	42a0      	cmp	r0, r4
 8007306:	d0f8      	beq.n	80072fa <sbrk_aligned+0x22>
 8007308:	1a21      	subs	r1, r4, r0
 800730a:	4628      	mov	r0, r5
 800730c:	f000 fe78 	bl	8008000 <_sbrk_r>
 8007310:	3001      	adds	r0, #1
 8007312:	d1f2      	bne.n	80072fa <sbrk_aligned+0x22>
 8007314:	e7ef      	b.n	80072f6 <sbrk_aligned+0x1e>
 8007316:	bf00      	nop
 8007318:	20001254 	.word	0x20001254

0800731c <_malloc_r>:
 800731c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007320:	1ccd      	adds	r5, r1, #3
 8007322:	f025 0503 	bic.w	r5, r5, #3
 8007326:	3508      	adds	r5, #8
 8007328:	2d0c      	cmp	r5, #12
 800732a:	bf38      	it	cc
 800732c:	250c      	movcc	r5, #12
 800732e:	2d00      	cmp	r5, #0
 8007330:	4606      	mov	r6, r0
 8007332:	db01      	blt.n	8007338 <_malloc_r+0x1c>
 8007334:	42a9      	cmp	r1, r5
 8007336:	d904      	bls.n	8007342 <_malloc_r+0x26>
 8007338:	230c      	movs	r3, #12
 800733a:	6033      	str	r3, [r6, #0]
 800733c:	2000      	movs	r0, #0
 800733e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007418 <_malloc_r+0xfc>
 8007346:	f000 f869 	bl	800741c <__malloc_lock>
 800734a:	f8d8 3000 	ldr.w	r3, [r8]
 800734e:	461c      	mov	r4, r3
 8007350:	bb44      	cbnz	r4, 80073a4 <_malloc_r+0x88>
 8007352:	4629      	mov	r1, r5
 8007354:	4630      	mov	r0, r6
 8007356:	f7ff ffbf 	bl	80072d8 <sbrk_aligned>
 800735a:	1c43      	adds	r3, r0, #1
 800735c:	4604      	mov	r4, r0
 800735e:	d158      	bne.n	8007412 <_malloc_r+0xf6>
 8007360:	f8d8 4000 	ldr.w	r4, [r8]
 8007364:	4627      	mov	r7, r4
 8007366:	2f00      	cmp	r7, #0
 8007368:	d143      	bne.n	80073f2 <_malloc_r+0xd6>
 800736a:	2c00      	cmp	r4, #0
 800736c:	d04b      	beq.n	8007406 <_malloc_r+0xea>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	4639      	mov	r1, r7
 8007372:	4630      	mov	r0, r6
 8007374:	eb04 0903 	add.w	r9, r4, r3
 8007378:	f000 fe42 	bl	8008000 <_sbrk_r>
 800737c:	4581      	cmp	r9, r0
 800737e:	d142      	bne.n	8007406 <_malloc_r+0xea>
 8007380:	6821      	ldr	r1, [r4, #0]
 8007382:	4630      	mov	r0, r6
 8007384:	1a6d      	subs	r5, r5, r1
 8007386:	4629      	mov	r1, r5
 8007388:	f7ff ffa6 	bl	80072d8 <sbrk_aligned>
 800738c:	3001      	adds	r0, #1
 800738e:	d03a      	beq.n	8007406 <_malloc_r+0xea>
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	442b      	add	r3, r5
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	f8d8 3000 	ldr.w	r3, [r8]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	bb62      	cbnz	r2, 80073f8 <_malloc_r+0xdc>
 800739e:	f8c8 7000 	str.w	r7, [r8]
 80073a2:	e00f      	b.n	80073c4 <_malloc_r+0xa8>
 80073a4:	6822      	ldr	r2, [r4, #0]
 80073a6:	1b52      	subs	r2, r2, r5
 80073a8:	d420      	bmi.n	80073ec <_malloc_r+0xd0>
 80073aa:	2a0b      	cmp	r2, #11
 80073ac:	d917      	bls.n	80073de <_malloc_r+0xc2>
 80073ae:	1961      	adds	r1, r4, r5
 80073b0:	42a3      	cmp	r3, r4
 80073b2:	6025      	str	r5, [r4, #0]
 80073b4:	bf18      	it	ne
 80073b6:	6059      	strne	r1, [r3, #4]
 80073b8:	6863      	ldr	r3, [r4, #4]
 80073ba:	bf08      	it	eq
 80073bc:	f8c8 1000 	streq.w	r1, [r8]
 80073c0:	5162      	str	r2, [r4, r5]
 80073c2:	604b      	str	r3, [r1, #4]
 80073c4:	4630      	mov	r0, r6
 80073c6:	f000 f82f 	bl	8007428 <__malloc_unlock>
 80073ca:	f104 000b 	add.w	r0, r4, #11
 80073ce:	1d23      	adds	r3, r4, #4
 80073d0:	f020 0007 	bic.w	r0, r0, #7
 80073d4:	1ac2      	subs	r2, r0, r3
 80073d6:	bf1c      	itt	ne
 80073d8:	1a1b      	subne	r3, r3, r0
 80073da:	50a3      	strne	r3, [r4, r2]
 80073dc:	e7af      	b.n	800733e <_malloc_r+0x22>
 80073de:	6862      	ldr	r2, [r4, #4]
 80073e0:	42a3      	cmp	r3, r4
 80073e2:	bf0c      	ite	eq
 80073e4:	f8c8 2000 	streq.w	r2, [r8]
 80073e8:	605a      	strne	r2, [r3, #4]
 80073ea:	e7eb      	b.n	80073c4 <_malloc_r+0xa8>
 80073ec:	4623      	mov	r3, r4
 80073ee:	6864      	ldr	r4, [r4, #4]
 80073f0:	e7ae      	b.n	8007350 <_malloc_r+0x34>
 80073f2:	463c      	mov	r4, r7
 80073f4:	687f      	ldr	r7, [r7, #4]
 80073f6:	e7b6      	b.n	8007366 <_malloc_r+0x4a>
 80073f8:	461a      	mov	r2, r3
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	42a3      	cmp	r3, r4
 80073fe:	d1fb      	bne.n	80073f8 <_malloc_r+0xdc>
 8007400:	2300      	movs	r3, #0
 8007402:	6053      	str	r3, [r2, #4]
 8007404:	e7de      	b.n	80073c4 <_malloc_r+0xa8>
 8007406:	230c      	movs	r3, #12
 8007408:	4630      	mov	r0, r6
 800740a:	6033      	str	r3, [r6, #0]
 800740c:	f000 f80c 	bl	8007428 <__malloc_unlock>
 8007410:	e794      	b.n	800733c <_malloc_r+0x20>
 8007412:	6005      	str	r5, [r0, #0]
 8007414:	e7d6      	b.n	80073c4 <_malloc_r+0xa8>
 8007416:	bf00      	nop
 8007418:	20001258 	.word	0x20001258

0800741c <__malloc_lock>:
 800741c:	4801      	ldr	r0, [pc, #4]	@ (8007424 <__malloc_lock+0x8>)
 800741e:	f7ff b88e 	b.w	800653e <__retarget_lock_acquire_recursive>
 8007422:	bf00      	nop
 8007424:	20001250 	.word	0x20001250

08007428 <__malloc_unlock>:
 8007428:	4801      	ldr	r0, [pc, #4]	@ (8007430 <__malloc_unlock+0x8>)
 800742a:	f7ff b889 	b.w	8006540 <__retarget_lock_release_recursive>
 800742e:	bf00      	nop
 8007430:	20001250 	.word	0x20001250

08007434 <_Balloc>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	69c6      	ldr	r6, [r0, #28]
 8007438:	4604      	mov	r4, r0
 800743a:	460d      	mov	r5, r1
 800743c:	b976      	cbnz	r6, 800745c <_Balloc+0x28>
 800743e:	2010      	movs	r0, #16
 8007440:	f7ff ff42 	bl	80072c8 <malloc>
 8007444:	4602      	mov	r2, r0
 8007446:	61e0      	str	r0, [r4, #28]
 8007448:	b920      	cbnz	r0, 8007454 <_Balloc+0x20>
 800744a:	216b      	movs	r1, #107	@ 0x6b
 800744c:	4b17      	ldr	r3, [pc, #92]	@ (80074ac <_Balloc+0x78>)
 800744e:	4818      	ldr	r0, [pc, #96]	@ (80074b0 <_Balloc+0x7c>)
 8007450:	f000 fde6 	bl	8008020 <__assert_func>
 8007454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007458:	6006      	str	r6, [r0, #0]
 800745a:	60c6      	str	r6, [r0, #12]
 800745c:	69e6      	ldr	r6, [r4, #28]
 800745e:	68f3      	ldr	r3, [r6, #12]
 8007460:	b183      	cbz	r3, 8007484 <_Balloc+0x50>
 8007462:	69e3      	ldr	r3, [r4, #28]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800746a:	b9b8      	cbnz	r0, 800749c <_Balloc+0x68>
 800746c:	2101      	movs	r1, #1
 800746e:	fa01 f605 	lsl.w	r6, r1, r5
 8007472:	1d72      	adds	r2, r6, #5
 8007474:	4620      	mov	r0, r4
 8007476:	0092      	lsls	r2, r2, #2
 8007478:	f000 fdf0 	bl	800805c <_calloc_r>
 800747c:	b160      	cbz	r0, 8007498 <_Balloc+0x64>
 800747e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007482:	e00e      	b.n	80074a2 <_Balloc+0x6e>
 8007484:	2221      	movs	r2, #33	@ 0x21
 8007486:	2104      	movs	r1, #4
 8007488:	4620      	mov	r0, r4
 800748a:	f000 fde7 	bl	800805c <_calloc_r>
 800748e:	69e3      	ldr	r3, [r4, #28]
 8007490:	60f0      	str	r0, [r6, #12]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e4      	bne.n	8007462 <_Balloc+0x2e>
 8007498:	2000      	movs	r0, #0
 800749a:	bd70      	pop	{r4, r5, r6, pc}
 800749c:	6802      	ldr	r2, [r0, #0]
 800749e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074a2:	2300      	movs	r3, #0
 80074a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074a8:	e7f7      	b.n	800749a <_Balloc+0x66>
 80074aa:	bf00      	nop
 80074ac:	0800a3d1 	.word	0x0800a3d1
 80074b0:	0800a451 	.word	0x0800a451

080074b4 <_Bfree>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	69c6      	ldr	r6, [r0, #28]
 80074b8:	4605      	mov	r5, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	b976      	cbnz	r6, 80074dc <_Bfree+0x28>
 80074be:	2010      	movs	r0, #16
 80074c0:	f7ff ff02 	bl	80072c8 <malloc>
 80074c4:	4602      	mov	r2, r0
 80074c6:	61e8      	str	r0, [r5, #28]
 80074c8:	b920      	cbnz	r0, 80074d4 <_Bfree+0x20>
 80074ca:	218f      	movs	r1, #143	@ 0x8f
 80074cc:	4b08      	ldr	r3, [pc, #32]	@ (80074f0 <_Bfree+0x3c>)
 80074ce:	4809      	ldr	r0, [pc, #36]	@ (80074f4 <_Bfree+0x40>)
 80074d0:	f000 fda6 	bl	8008020 <__assert_func>
 80074d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074d8:	6006      	str	r6, [r0, #0]
 80074da:	60c6      	str	r6, [r0, #12]
 80074dc:	b13c      	cbz	r4, 80074ee <_Bfree+0x3a>
 80074de:	69eb      	ldr	r3, [r5, #28]
 80074e0:	6862      	ldr	r2, [r4, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074e8:	6021      	str	r1, [r4, #0]
 80074ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074ee:	bd70      	pop	{r4, r5, r6, pc}
 80074f0:	0800a3d1 	.word	0x0800a3d1
 80074f4:	0800a451 	.word	0x0800a451

080074f8 <__multadd>:
 80074f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074fc:	4607      	mov	r7, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	461e      	mov	r6, r3
 8007502:	2000      	movs	r0, #0
 8007504:	690d      	ldr	r5, [r1, #16]
 8007506:	f101 0c14 	add.w	ip, r1, #20
 800750a:	f8dc 3000 	ldr.w	r3, [ip]
 800750e:	3001      	adds	r0, #1
 8007510:	b299      	uxth	r1, r3
 8007512:	fb02 6101 	mla	r1, r2, r1, r6
 8007516:	0c1e      	lsrs	r6, r3, #16
 8007518:	0c0b      	lsrs	r3, r1, #16
 800751a:	fb02 3306 	mla	r3, r2, r6, r3
 800751e:	b289      	uxth	r1, r1
 8007520:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007524:	4285      	cmp	r5, r0
 8007526:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800752a:	f84c 1b04 	str.w	r1, [ip], #4
 800752e:	dcec      	bgt.n	800750a <__multadd+0x12>
 8007530:	b30e      	cbz	r6, 8007576 <__multadd+0x7e>
 8007532:	68a3      	ldr	r3, [r4, #8]
 8007534:	42ab      	cmp	r3, r5
 8007536:	dc19      	bgt.n	800756c <__multadd+0x74>
 8007538:	6861      	ldr	r1, [r4, #4]
 800753a:	4638      	mov	r0, r7
 800753c:	3101      	adds	r1, #1
 800753e:	f7ff ff79 	bl	8007434 <_Balloc>
 8007542:	4680      	mov	r8, r0
 8007544:	b928      	cbnz	r0, 8007552 <__multadd+0x5a>
 8007546:	4602      	mov	r2, r0
 8007548:	21ba      	movs	r1, #186	@ 0xba
 800754a:	4b0c      	ldr	r3, [pc, #48]	@ (800757c <__multadd+0x84>)
 800754c:	480c      	ldr	r0, [pc, #48]	@ (8007580 <__multadd+0x88>)
 800754e:	f000 fd67 	bl	8008020 <__assert_func>
 8007552:	6922      	ldr	r2, [r4, #16]
 8007554:	f104 010c 	add.w	r1, r4, #12
 8007558:	3202      	adds	r2, #2
 800755a:	0092      	lsls	r2, r2, #2
 800755c:	300c      	adds	r0, #12
 800755e:	f7fe fffe 	bl	800655e <memcpy>
 8007562:	4621      	mov	r1, r4
 8007564:	4638      	mov	r0, r7
 8007566:	f7ff ffa5 	bl	80074b4 <_Bfree>
 800756a:	4644      	mov	r4, r8
 800756c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007570:	3501      	adds	r5, #1
 8007572:	615e      	str	r6, [r3, #20]
 8007574:	6125      	str	r5, [r4, #16]
 8007576:	4620      	mov	r0, r4
 8007578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800757c:	0800a440 	.word	0x0800a440
 8007580:	0800a451 	.word	0x0800a451

08007584 <__hi0bits>:
 8007584:	4603      	mov	r3, r0
 8007586:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800758a:	bf3a      	itte	cc
 800758c:	0403      	lslcc	r3, r0, #16
 800758e:	2010      	movcc	r0, #16
 8007590:	2000      	movcs	r0, #0
 8007592:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007596:	bf3c      	itt	cc
 8007598:	021b      	lslcc	r3, r3, #8
 800759a:	3008      	addcc	r0, #8
 800759c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075a0:	bf3c      	itt	cc
 80075a2:	011b      	lslcc	r3, r3, #4
 80075a4:	3004      	addcc	r0, #4
 80075a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075aa:	bf3c      	itt	cc
 80075ac:	009b      	lslcc	r3, r3, #2
 80075ae:	3002      	addcc	r0, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	db05      	blt.n	80075c0 <__hi0bits+0x3c>
 80075b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80075b8:	f100 0001 	add.w	r0, r0, #1
 80075bc:	bf08      	it	eq
 80075be:	2020      	moveq	r0, #32
 80075c0:	4770      	bx	lr

080075c2 <__lo0bits>:
 80075c2:	6803      	ldr	r3, [r0, #0]
 80075c4:	4602      	mov	r2, r0
 80075c6:	f013 0007 	ands.w	r0, r3, #7
 80075ca:	d00b      	beq.n	80075e4 <__lo0bits+0x22>
 80075cc:	07d9      	lsls	r1, r3, #31
 80075ce:	d421      	bmi.n	8007614 <__lo0bits+0x52>
 80075d0:	0798      	lsls	r0, r3, #30
 80075d2:	bf49      	itett	mi
 80075d4:	085b      	lsrmi	r3, r3, #1
 80075d6:	089b      	lsrpl	r3, r3, #2
 80075d8:	2001      	movmi	r0, #1
 80075da:	6013      	strmi	r3, [r2, #0]
 80075dc:	bf5c      	itt	pl
 80075de:	2002      	movpl	r0, #2
 80075e0:	6013      	strpl	r3, [r2, #0]
 80075e2:	4770      	bx	lr
 80075e4:	b299      	uxth	r1, r3
 80075e6:	b909      	cbnz	r1, 80075ec <__lo0bits+0x2a>
 80075e8:	2010      	movs	r0, #16
 80075ea:	0c1b      	lsrs	r3, r3, #16
 80075ec:	b2d9      	uxtb	r1, r3
 80075ee:	b909      	cbnz	r1, 80075f4 <__lo0bits+0x32>
 80075f0:	3008      	adds	r0, #8
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	0719      	lsls	r1, r3, #28
 80075f6:	bf04      	itt	eq
 80075f8:	091b      	lsreq	r3, r3, #4
 80075fa:	3004      	addeq	r0, #4
 80075fc:	0799      	lsls	r1, r3, #30
 80075fe:	bf04      	itt	eq
 8007600:	089b      	lsreq	r3, r3, #2
 8007602:	3002      	addeq	r0, #2
 8007604:	07d9      	lsls	r1, r3, #31
 8007606:	d403      	bmi.n	8007610 <__lo0bits+0x4e>
 8007608:	085b      	lsrs	r3, r3, #1
 800760a:	f100 0001 	add.w	r0, r0, #1
 800760e:	d003      	beq.n	8007618 <__lo0bits+0x56>
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	4770      	bx	lr
 8007614:	2000      	movs	r0, #0
 8007616:	4770      	bx	lr
 8007618:	2020      	movs	r0, #32
 800761a:	4770      	bx	lr

0800761c <__i2b>:
 800761c:	b510      	push	{r4, lr}
 800761e:	460c      	mov	r4, r1
 8007620:	2101      	movs	r1, #1
 8007622:	f7ff ff07 	bl	8007434 <_Balloc>
 8007626:	4602      	mov	r2, r0
 8007628:	b928      	cbnz	r0, 8007636 <__i2b+0x1a>
 800762a:	f240 1145 	movw	r1, #325	@ 0x145
 800762e:	4b04      	ldr	r3, [pc, #16]	@ (8007640 <__i2b+0x24>)
 8007630:	4804      	ldr	r0, [pc, #16]	@ (8007644 <__i2b+0x28>)
 8007632:	f000 fcf5 	bl	8008020 <__assert_func>
 8007636:	2301      	movs	r3, #1
 8007638:	6144      	str	r4, [r0, #20]
 800763a:	6103      	str	r3, [r0, #16]
 800763c:	bd10      	pop	{r4, pc}
 800763e:	bf00      	nop
 8007640:	0800a440 	.word	0x0800a440
 8007644:	0800a451 	.word	0x0800a451

08007648 <__multiply>:
 8007648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	4617      	mov	r7, r2
 800764e:	690a      	ldr	r2, [r1, #16]
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	4689      	mov	r9, r1
 8007654:	429a      	cmp	r2, r3
 8007656:	bfa2      	ittt	ge
 8007658:	463b      	movge	r3, r7
 800765a:	460f      	movge	r7, r1
 800765c:	4699      	movge	r9, r3
 800765e:	693d      	ldr	r5, [r7, #16]
 8007660:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	eb05 060a 	add.w	r6, r5, sl
 800766c:	42b3      	cmp	r3, r6
 800766e:	b085      	sub	sp, #20
 8007670:	bfb8      	it	lt
 8007672:	3101      	addlt	r1, #1
 8007674:	f7ff fede 	bl	8007434 <_Balloc>
 8007678:	b930      	cbnz	r0, 8007688 <__multiply+0x40>
 800767a:	4602      	mov	r2, r0
 800767c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007680:	4b40      	ldr	r3, [pc, #256]	@ (8007784 <__multiply+0x13c>)
 8007682:	4841      	ldr	r0, [pc, #260]	@ (8007788 <__multiply+0x140>)
 8007684:	f000 fccc 	bl	8008020 <__assert_func>
 8007688:	f100 0414 	add.w	r4, r0, #20
 800768c:	4623      	mov	r3, r4
 800768e:	2200      	movs	r2, #0
 8007690:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007694:	4573      	cmp	r3, lr
 8007696:	d320      	bcc.n	80076da <__multiply+0x92>
 8007698:	f107 0814 	add.w	r8, r7, #20
 800769c:	f109 0114 	add.w	r1, r9, #20
 80076a0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80076a4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80076a8:	9302      	str	r3, [sp, #8]
 80076aa:	1beb      	subs	r3, r5, r7
 80076ac:	3b15      	subs	r3, #21
 80076ae:	f023 0303 	bic.w	r3, r3, #3
 80076b2:	3304      	adds	r3, #4
 80076b4:	3715      	adds	r7, #21
 80076b6:	42bd      	cmp	r5, r7
 80076b8:	bf38      	it	cc
 80076ba:	2304      	movcc	r3, #4
 80076bc:	9301      	str	r3, [sp, #4]
 80076be:	9b02      	ldr	r3, [sp, #8]
 80076c0:	9103      	str	r1, [sp, #12]
 80076c2:	428b      	cmp	r3, r1
 80076c4:	d80c      	bhi.n	80076e0 <__multiply+0x98>
 80076c6:	2e00      	cmp	r6, #0
 80076c8:	dd03      	ble.n	80076d2 <__multiply+0x8a>
 80076ca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d055      	beq.n	800777e <__multiply+0x136>
 80076d2:	6106      	str	r6, [r0, #16]
 80076d4:	b005      	add	sp, #20
 80076d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076da:	f843 2b04 	str.w	r2, [r3], #4
 80076de:	e7d9      	b.n	8007694 <__multiply+0x4c>
 80076e0:	f8b1 a000 	ldrh.w	sl, [r1]
 80076e4:	f1ba 0f00 	cmp.w	sl, #0
 80076e8:	d01f      	beq.n	800772a <__multiply+0xe2>
 80076ea:	46c4      	mov	ip, r8
 80076ec:	46a1      	mov	r9, r4
 80076ee:	2700      	movs	r7, #0
 80076f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80076f4:	f8d9 3000 	ldr.w	r3, [r9]
 80076f8:	fa1f fb82 	uxth.w	fp, r2
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	fb0a 330b 	mla	r3, sl, fp, r3
 8007702:	443b      	add	r3, r7
 8007704:	f8d9 7000 	ldr.w	r7, [r9]
 8007708:	0c12      	lsrs	r2, r2, #16
 800770a:	0c3f      	lsrs	r7, r7, #16
 800770c:	fb0a 7202 	mla	r2, sl, r2, r7
 8007710:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007714:	b29b      	uxth	r3, r3
 8007716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800771a:	4565      	cmp	r5, ip
 800771c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007720:	f849 3b04 	str.w	r3, [r9], #4
 8007724:	d8e4      	bhi.n	80076f0 <__multiply+0xa8>
 8007726:	9b01      	ldr	r3, [sp, #4]
 8007728:	50e7      	str	r7, [r4, r3]
 800772a:	9b03      	ldr	r3, [sp, #12]
 800772c:	3104      	adds	r1, #4
 800772e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007732:	f1b9 0f00 	cmp.w	r9, #0
 8007736:	d020      	beq.n	800777a <__multiply+0x132>
 8007738:	4647      	mov	r7, r8
 800773a:	46a4      	mov	ip, r4
 800773c:	f04f 0a00 	mov.w	sl, #0
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	f8b7 b000 	ldrh.w	fp, [r7]
 8007746:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800774a:	b29b      	uxth	r3, r3
 800774c:	fb09 220b 	mla	r2, r9, fp, r2
 8007750:	4452      	add	r2, sl
 8007752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007756:	f84c 3b04 	str.w	r3, [ip], #4
 800775a:	f857 3b04 	ldr.w	r3, [r7], #4
 800775e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007762:	f8bc 3000 	ldrh.w	r3, [ip]
 8007766:	42bd      	cmp	r5, r7
 8007768:	fb09 330a 	mla	r3, r9, sl, r3
 800776c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007770:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007774:	d8e5      	bhi.n	8007742 <__multiply+0xfa>
 8007776:	9a01      	ldr	r2, [sp, #4]
 8007778:	50a3      	str	r3, [r4, r2]
 800777a:	3404      	adds	r4, #4
 800777c:	e79f      	b.n	80076be <__multiply+0x76>
 800777e:	3e01      	subs	r6, #1
 8007780:	e7a1      	b.n	80076c6 <__multiply+0x7e>
 8007782:	bf00      	nop
 8007784:	0800a440 	.word	0x0800a440
 8007788:	0800a451 	.word	0x0800a451

0800778c <__pow5mult>:
 800778c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007790:	4615      	mov	r5, r2
 8007792:	f012 0203 	ands.w	r2, r2, #3
 8007796:	4607      	mov	r7, r0
 8007798:	460e      	mov	r6, r1
 800779a:	d007      	beq.n	80077ac <__pow5mult+0x20>
 800779c:	4c25      	ldr	r4, [pc, #148]	@ (8007834 <__pow5mult+0xa8>)
 800779e:	3a01      	subs	r2, #1
 80077a0:	2300      	movs	r3, #0
 80077a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077a6:	f7ff fea7 	bl	80074f8 <__multadd>
 80077aa:	4606      	mov	r6, r0
 80077ac:	10ad      	asrs	r5, r5, #2
 80077ae:	d03d      	beq.n	800782c <__pow5mult+0xa0>
 80077b0:	69fc      	ldr	r4, [r7, #28]
 80077b2:	b97c      	cbnz	r4, 80077d4 <__pow5mult+0x48>
 80077b4:	2010      	movs	r0, #16
 80077b6:	f7ff fd87 	bl	80072c8 <malloc>
 80077ba:	4602      	mov	r2, r0
 80077bc:	61f8      	str	r0, [r7, #28]
 80077be:	b928      	cbnz	r0, 80077cc <__pow5mult+0x40>
 80077c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80077c4:	4b1c      	ldr	r3, [pc, #112]	@ (8007838 <__pow5mult+0xac>)
 80077c6:	481d      	ldr	r0, [pc, #116]	@ (800783c <__pow5mult+0xb0>)
 80077c8:	f000 fc2a 	bl	8008020 <__assert_func>
 80077cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077d0:	6004      	str	r4, [r0, #0]
 80077d2:	60c4      	str	r4, [r0, #12]
 80077d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80077d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077dc:	b94c      	cbnz	r4, 80077f2 <__pow5mult+0x66>
 80077de:	f240 2171 	movw	r1, #625	@ 0x271
 80077e2:	4638      	mov	r0, r7
 80077e4:	f7ff ff1a 	bl	800761c <__i2b>
 80077e8:	2300      	movs	r3, #0
 80077ea:	4604      	mov	r4, r0
 80077ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80077f0:	6003      	str	r3, [r0, #0]
 80077f2:	f04f 0900 	mov.w	r9, #0
 80077f6:	07eb      	lsls	r3, r5, #31
 80077f8:	d50a      	bpl.n	8007810 <__pow5mult+0x84>
 80077fa:	4631      	mov	r1, r6
 80077fc:	4622      	mov	r2, r4
 80077fe:	4638      	mov	r0, r7
 8007800:	f7ff ff22 	bl	8007648 <__multiply>
 8007804:	4680      	mov	r8, r0
 8007806:	4631      	mov	r1, r6
 8007808:	4638      	mov	r0, r7
 800780a:	f7ff fe53 	bl	80074b4 <_Bfree>
 800780e:	4646      	mov	r6, r8
 8007810:	106d      	asrs	r5, r5, #1
 8007812:	d00b      	beq.n	800782c <__pow5mult+0xa0>
 8007814:	6820      	ldr	r0, [r4, #0]
 8007816:	b938      	cbnz	r0, 8007828 <__pow5mult+0x9c>
 8007818:	4622      	mov	r2, r4
 800781a:	4621      	mov	r1, r4
 800781c:	4638      	mov	r0, r7
 800781e:	f7ff ff13 	bl	8007648 <__multiply>
 8007822:	6020      	str	r0, [r4, #0]
 8007824:	f8c0 9000 	str.w	r9, [r0]
 8007828:	4604      	mov	r4, r0
 800782a:	e7e4      	b.n	80077f6 <__pow5mult+0x6a>
 800782c:	4630      	mov	r0, r6
 800782e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007832:	bf00      	nop
 8007834:	0800a504 	.word	0x0800a504
 8007838:	0800a3d1 	.word	0x0800a3d1
 800783c:	0800a451 	.word	0x0800a451

08007840 <__lshift>:
 8007840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007844:	460c      	mov	r4, r1
 8007846:	4607      	mov	r7, r0
 8007848:	4691      	mov	r9, r2
 800784a:	6923      	ldr	r3, [r4, #16]
 800784c:	6849      	ldr	r1, [r1, #4]
 800784e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007858:	f108 0601 	add.w	r6, r8, #1
 800785c:	42b3      	cmp	r3, r6
 800785e:	db0b      	blt.n	8007878 <__lshift+0x38>
 8007860:	4638      	mov	r0, r7
 8007862:	f7ff fde7 	bl	8007434 <_Balloc>
 8007866:	4605      	mov	r5, r0
 8007868:	b948      	cbnz	r0, 800787e <__lshift+0x3e>
 800786a:	4602      	mov	r2, r0
 800786c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007870:	4b27      	ldr	r3, [pc, #156]	@ (8007910 <__lshift+0xd0>)
 8007872:	4828      	ldr	r0, [pc, #160]	@ (8007914 <__lshift+0xd4>)
 8007874:	f000 fbd4 	bl	8008020 <__assert_func>
 8007878:	3101      	adds	r1, #1
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	e7ee      	b.n	800785c <__lshift+0x1c>
 800787e:	2300      	movs	r3, #0
 8007880:	f100 0114 	add.w	r1, r0, #20
 8007884:	f100 0210 	add.w	r2, r0, #16
 8007888:	4618      	mov	r0, r3
 800788a:	4553      	cmp	r3, sl
 800788c:	db33      	blt.n	80078f6 <__lshift+0xb6>
 800788e:	6920      	ldr	r0, [r4, #16]
 8007890:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007894:	f104 0314 	add.w	r3, r4, #20
 8007898:	f019 091f 	ands.w	r9, r9, #31
 800789c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078a4:	d02b      	beq.n	80078fe <__lshift+0xbe>
 80078a6:	468a      	mov	sl, r1
 80078a8:	2200      	movs	r2, #0
 80078aa:	f1c9 0e20 	rsb	lr, r9, #32
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	fa00 f009 	lsl.w	r0, r0, r9
 80078b4:	4310      	orrs	r0, r2
 80078b6:	f84a 0b04 	str.w	r0, [sl], #4
 80078ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80078be:	459c      	cmp	ip, r3
 80078c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80078c4:	d8f3      	bhi.n	80078ae <__lshift+0x6e>
 80078c6:	ebac 0304 	sub.w	r3, ip, r4
 80078ca:	3b15      	subs	r3, #21
 80078cc:	f023 0303 	bic.w	r3, r3, #3
 80078d0:	3304      	adds	r3, #4
 80078d2:	f104 0015 	add.w	r0, r4, #21
 80078d6:	4560      	cmp	r0, ip
 80078d8:	bf88      	it	hi
 80078da:	2304      	movhi	r3, #4
 80078dc:	50ca      	str	r2, [r1, r3]
 80078de:	b10a      	cbz	r2, 80078e4 <__lshift+0xa4>
 80078e0:	f108 0602 	add.w	r6, r8, #2
 80078e4:	3e01      	subs	r6, #1
 80078e6:	4638      	mov	r0, r7
 80078e8:	4621      	mov	r1, r4
 80078ea:	612e      	str	r6, [r5, #16]
 80078ec:	f7ff fde2 	bl	80074b4 <_Bfree>
 80078f0:	4628      	mov	r0, r5
 80078f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80078fa:	3301      	adds	r3, #1
 80078fc:	e7c5      	b.n	800788a <__lshift+0x4a>
 80078fe:	3904      	subs	r1, #4
 8007900:	f853 2b04 	ldr.w	r2, [r3], #4
 8007904:	459c      	cmp	ip, r3
 8007906:	f841 2f04 	str.w	r2, [r1, #4]!
 800790a:	d8f9      	bhi.n	8007900 <__lshift+0xc0>
 800790c:	e7ea      	b.n	80078e4 <__lshift+0xa4>
 800790e:	bf00      	nop
 8007910:	0800a440 	.word	0x0800a440
 8007914:	0800a451 	.word	0x0800a451

08007918 <__mcmp>:
 8007918:	4603      	mov	r3, r0
 800791a:	690a      	ldr	r2, [r1, #16]
 800791c:	6900      	ldr	r0, [r0, #16]
 800791e:	b530      	push	{r4, r5, lr}
 8007920:	1a80      	subs	r0, r0, r2
 8007922:	d10e      	bne.n	8007942 <__mcmp+0x2a>
 8007924:	3314      	adds	r3, #20
 8007926:	3114      	adds	r1, #20
 8007928:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800792c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007930:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007934:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007938:	4295      	cmp	r5, r2
 800793a:	d003      	beq.n	8007944 <__mcmp+0x2c>
 800793c:	d205      	bcs.n	800794a <__mcmp+0x32>
 800793e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007942:	bd30      	pop	{r4, r5, pc}
 8007944:	42a3      	cmp	r3, r4
 8007946:	d3f3      	bcc.n	8007930 <__mcmp+0x18>
 8007948:	e7fb      	b.n	8007942 <__mcmp+0x2a>
 800794a:	2001      	movs	r0, #1
 800794c:	e7f9      	b.n	8007942 <__mcmp+0x2a>
	...

08007950 <__mdiff>:
 8007950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	4689      	mov	r9, r1
 8007956:	4606      	mov	r6, r0
 8007958:	4611      	mov	r1, r2
 800795a:	4648      	mov	r0, r9
 800795c:	4614      	mov	r4, r2
 800795e:	f7ff ffdb 	bl	8007918 <__mcmp>
 8007962:	1e05      	subs	r5, r0, #0
 8007964:	d112      	bne.n	800798c <__mdiff+0x3c>
 8007966:	4629      	mov	r1, r5
 8007968:	4630      	mov	r0, r6
 800796a:	f7ff fd63 	bl	8007434 <_Balloc>
 800796e:	4602      	mov	r2, r0
 8007970:	b928      	cbnz	r0, 800797e <__mdiff+0x2e>
 8007972:	f240 2137 	movw	r1, #567	@ 0x237
 8007976:	4b3e      	ldr	r3, [pc, #248]	@ (8007a70 <__mdiff+0x120>)
 8007978:	483e      	ldr	r0, [pc, #248]	@ (8007a74 <__mdiff+0x124>)
 800797a:	f000 fb51 	bl	8008020 <__assert_func>
 800797e:	2301      	movs	r3, #1
 8007980:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007984:	4610      	mov	r0, r2
 8007986:	b003      	add	sp, #12
 8007988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798c:	bfbc      	itt	lt
 800798e:	464b      	movlt	r3, r9
 8007990:	46a1      	movlt	r9, r4
 8007992:	4630      	mov	r0, r6
 8007994:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007998:	bfba      	itte	lt
 800799a:	461c      	movlt	r4, r3
 800799c:	2501      	movlt	r5, #1
 800799e:	2500      	movge	r5, #0
 80079a0:	f7ff fd48 	bl	8007434 <_Balloc>
 80079a4:	4602      	mov	r2, r0
 80079a6:	b918      	cbnz	r0, 80079b0 <__mdiff+0x60>
 80079a8:	f240 2145 	movw	r1, #581	@ 0x245
 80079ac:	4b30      	ldr	r3, [pc, #192]	@ (8007a70 <__mdiff+0x120>)
 80079ae:	e7e3      	b.n	8007978 <__mdiff+0x28>
 80079b0:	f100 0b14 	add.w	fp, r0, #20
 80079b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80079b8:	f109 0310 	add.w	r3, r9, #16
 80079bc:	60c5      	str	r5, [r0, #12]
 80079be:	f04f 0c00 	mov.w	ip, #0
 80079c2:	f109 0514 	add.w	r5, r9, #20
 80079c6:	46d9      	mov	r9, fp
 80079c8:	6926      	ldr	r6, [r4, #16]
 80079ca:	f104 0e14 	add.w	lr, r4, #20
 80079ce:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80079d2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80079d6:	9301      	str	r3, [sp, #4]
 80079d8:	9b01      	ldr	r3, [sp, #4]
 80079da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80079de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80079e2:	b281      	uxth	r1, r0
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	fa1f f38a 	uxth.w	r3, sl
 80079ea:	1a5b      	subs	r3, r3, r1
 80079ec:	0c00      	lsrs	r0, r0, #16
 80079ee:	4463      	add	r3, ip
 80079f0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80079f4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80079fe:	4576      	cmp	r6, lr
 8007a00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a04:	f849 3b04 	str.w	r3, [r9], #4
 8007a08:	d8e6      	bhi.n	80079d8 <__mdiff+0x88>
 8007a0a:	1b33      	subs	r3, r6, r4
 8007a0c:	3b15      	subs	r3, #21
 8007a0e:	f023 0303 	bic.w	r3, r3, #3
 8007a12:	3415      	adds	r4, #21
 8007a14:	3304      	adds	r3, #4
 8007a16:	42a6      	cmp	r6, r4
 8007a18:	bf38      	it	cc
 8007a1a:	2304      	movcc	r3, #4
 8007a1c:	441d      	add	r5, r3
 8007a1e:	445b      	add	r3, fp
 8007a20:	461e      	mov	r6, r3
 8007a22:	462c      	mov	r4, r5
 8007a24:	4544      	cmp	r4, r8
 8007a26:	d30e      	bcc.n	8007a46 <__mdiff+0xf6>
 8007a28:	f108 0103 	add.w	r1, r8, #3
 8007a2c:	1b49      	subs	r1, r1, r5
 8007a2e:	f021 0103 	bic.w	r1, r1, #3
 8007a32:	3d03      	subs	r5, #3
 8007a34:	45a8      	cmp	r8, r5
 8007a36:	bf38      	it	cc
 8007a38:	2100      	movcc	r1, #0
 8007a3a:	440b      	add	r3, r1
 8007a3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a40:	b199      	cbz	r1, 8007a6a <__mdiff+0x11a>
 8007a42:	6117      	str	r7, [r2, #16]
 8007a44:	e79e      	b.n	8007984 <__mdiff+0x34>
 8007a46:	46e6      	mov	lr, ip
 8007a48:	f854 1b04 	ldr.w	r1, [r4], #4
 8007a4c:	fa1f fc81 	uxth.w	ip, r1
 8007a50:	44f4      	add	ip, lr
 8007a52:	0c08      	lsrs	r0, r1, #16
 8007a54:	4471      	add	r1, lr
 8007a56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007a5a:	b289      	uxth	r1, r1
 8007a5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a64:	f846 1b04 	str.w	r1, [r6], #4
 8007a68:	e7dc      	b.n	8007a24 <__mdiff+0xd4>
 8007a6a:	3f01      	subs	r7, #1
 8007a6c:	e7e6      	b.n	8007a3c <__mdiff+0xec>
 8007a6e:	bf00      	nop
 8007a70:	0800a440 	.word	0x0800a440
 8007a74:	0800a451 	.word	0x0800a451

08007a78 <__d2b>:
 8007a78:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	4690      	mov	r8, r2
 8007a80:	4699      	mov	r9, r3
 8007a82:	9e08      	ldr	r6, [sp, #32]
 8007a84:	f7ff fcd6 	bl	8007434 <_Balloc>
 8007a88:	4604      	mov	r4, r0
 8007a8a:	b930      	cbnz	r0, 8007a9a <__d2b+0x22>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a92:	4b23      	ldr	r3, [pc, #140]	@ (8007b20 <__d2b+0xa8>)
 8007a94:	4823      	ldr	r0, [pc, #140]	@ (8007b24 <__d2b+0xac>)
 8007a96:	f000 fac3 	bl	8008020 <__assert_func>
 8007a9a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007aa2:	b10d      	cbz	r5, 8007aa8 <__d2b+0x30>
 8007aa4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	f1b8 0300 	subs.w	r3, r8, #0
 8007aae:	d024      	beq.n	8007afa <__d2b+0x82>
 8007ab0:	4668      	mov	r0, sp
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	f7ff fd85 	bl	80075c2 <__lo0bits>
 8007ab8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007abc:	b1d8      	cbz	r0, 8007af6 <__d2b+0x7e>
 8007abe:	f1c0 0320 	rsb	r3, r0, #32
 8007ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac6:	430b      	orrs	r3, r1
 8007ac8:	40c2      	lsrs	r2, r0
 8007aca:	6163      	str	r3, [r4, #20]
 8007acc:	9201      	str	r2, [sp, #4]
 8007ace:	9b01      	ldr	r3, [sp, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	bf0c      	ite	eq
 8007ad4:	2201      	moveq	r2, #1
 8007ad6:	2202      	movne	r2, #2
 8007ad8:	61a3      	str	r3, [r4, #24]
 8007ada:	6122      	str	r2, [r4, #16]
 8007adc:	b1ad      	cbz	r5, 8007b0a <__d2b+0x92>
 8007ade:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ae2:	4405      	add	r5, r0
 8007ae4:	6035      	str	r5, [r6, #0]
 8007ae6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aec:	6018      	str	r0, [r3, #0]
 8007aee:	4620      	mov	r0, r4
 8007af0:	b002      	add	sp, #8
 8007af2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007af6:	6161      	str	r1, [r4, #20]
 8007af8:	e7e9      	b.n	8007ace <__d2b+0x56>
 8007afa:	a801      	add	r0, sp, #4
 8007afc:	f7ff fd61 	bl	80075c2 <__lo0bits>
 8007b00:	9b01      	ldr	r3, [sp, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	6163      	str	r3, [r4, #20]
 8007b06:	3020      	adds	r0, #32
 8007b08:	e7e7      	b.n	8007ada <__d2b+0x62>
 8007b0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b12:	6030      	str	r0, [r6, #0]
 8007b14:	6918      	ldr	r0, [r3, #16]
 8007b16:	f7ff fd35 	bl	8007584 <__hi0bits>
 8007b1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b1e:	e7e4      	b.n	8007aea <__d2b+0x72>
 8007b20:	0800a440 	.word	0x0800a440
 8007b24:	0800a451 	.word	0x0800a451

08007b28 <__sfputc_r>:
 8007b28:	6893      	ldr	r3, [r2, #8]
 8007b2a:	b410      	push	{r4}
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	6093      	str	r3, [r2, #8]
 8007b32:	da07      	bge.n	8007b44 <__sfputc_r+0x1c>
 8007b34:	6994      	ldr	r4, [r2, #24]
 8007b36:	42a3      	cmp	r3, r4
 8007b38:	db01      	blt.n	8007b3e <__sfputc_r+0x16>
 8007b3a:	290a      	cmp	r1, #10
 8007b3c:	d102      	bne.n	8007b44 <__sfputc_r+0x1c>
 8007b3e:	bc10      	pop	{r4}
 8007b40:	f7fe bbeb 	b.w	800631a <__swbuf_r>
 8007b44:	6813      	ldr	r3, [r2, #0]
 8007b46:	1c58      	adds	r0, r3, #1
 8007b48:	6010      	str	r0, [r2, #0]
 8007b4a:	7019      	strb	r1, [r3, #0]
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	bc10      	pop	{r4}
 8007b50:	4770      	bx	lr

08007b52 <__sfputs_r>:
 8007b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b54:	4606      	mov	r6, r0
 8007b56:	460f      	mov	r7, r1
 8007b58:	4614      	mov	r4, r2
 8007b5a:	18d5      	adds	r5, r2, r3
 8007b5c:	42ac      	cmp	r4, r5
 8007b5e:	d101      	bne.n	8007b64 <__sfputs_r+0x12>
 8007b60:	2000      	movs	r0, #0
 8007b62:	e007      	b.n	8007b74 <__sfputs_r+0x22>
 8007b64:	463a      	mov	r2, r7
 8007b66:	4630      	mov	r0, r6
 8007b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b6c:	f7ff ffdc 	bl	8007b28 <__sfputc_r>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d1f3      	bne.n	8007b5c <__sfputs_r+0xa>
 8007b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b78 <_vfiprintf_r>:
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	460d      	mov	r5, r1
 8007b7e:	4614      	mov	r4, r2
 8007b80:	4698      	mov	r8, r3
 8007b82:	4606      	mov	r6, r0
 8007b84:	b09d      	sub	sp, #116	@ 0x74
 8007b86:	b118      	cbz	r0, 8007b90 <_vfiprintf_r+0x18>
 8007b88:	6a03      	ldr	r3, [r0, #32]
 8007b8a:	b90b      	cbnz	r3, 8007b90 <_vfiprintf_r+0x18>
 8007b8c:	f7fe fadc 	bl	8006148 <__sinit>
 8007b90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b92:	07d9      	lsls	r1, r3, #31
 8007b94:	d405      	bmi.n	8007ba2 <_vfiprintf_r+0x2a>
 8007b96:	89ab      	ldrh	r3, [r5, #12]
 8007b98:	059a      	lsls	r2, r3, #22
 8007b9a:	d402      	bmi.n	8007ba2 <_vfiprintf_r+0x2a>
 8007b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b9e:	f7fe fcce 	bl	800653e <__retarget_lock_acquire_recursive>
 8007ba2:	89ab      	ldrh	r3, [r5, #12]
 8007ba4:	071b      	lsls	r3, r3, #28
 8007ba6:	d501      	bpl.n	8007bac <_vfiprintf_r+0x34>
 8007ba8:	692b      	ldr	r3, [r5, #16]
 8007baa:	b99b      	cbnz	r3, 8007bd4 <_vfiprintf_r+0x5c>
 8007bac:	4629      	mov	r1, r5
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f7fe fbf2 	bl	8006398 <__swsetup_r>
 8007bb4:	b170      	cbz	r0, 8007bd4 <_vfiprintf_r+0x5c>
 8007bb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bb8:	07dc      	lsls	r4, r3, #31
 8007bba:	d504      	bpl.n	8007bc6 <_vfiprintf_r+0x4e>
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bc0:	b01d      	add	sp, #116	@ 0x74
 8007bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc6:	89ab      	ldrh	r3, [r5, #12]
 8007bc8:	0598      	lsls	r0, r3, #22
 8007bca:	d4f7      	bmi.n	8007bbc <_vfiprintf_r+0x44>
 8007bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bce:	f7fe fcb7 	bl	8006540 <__retarget_lock_release_recursive>
 8007bd2:	e7f3      	b.n	8007bbc <_vfiprintf_r+0x44>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bd8:	2320      	movs	r3, #32
 8007bda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bde:	2330      	movs	r3, #48	@ 0x30
 8007be0:	f04f 0901 	mov.w	r9, #1
 8007be4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007be8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007d94 <_vfiprintf_r+0x21c>
 8007bec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bf0:	4623      	mov	r3, r4
 8007bf2:	469a      	mov	sl, r3
 8007bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bf8:	b10a      	cbz	r2, 8007bfe <_vfiprintf_r+0x86>
 8007bfa:	2a25      	cmp	r2, #37	@ 0x25
 8007bfc:	d1f9      	bne.n	8007bf2 <_vfiprintf_r+0x7a>
 8007bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8007c02:	d00b      	beq.n	8007c1c <_vfiprintf_r+0xa4>
 8007c04:	465b      	mov	r3, fp
 8007c06:	4622      	mov	r2, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f7ff ffa1 	bl	8007b52 <__sfputs_r>
 8007c10:	3001      	adds	r0, #1
 8007c12:	f000 80a7 	beq.w	8007d64 <_vfiprintf_r+0x1ec>
 8007c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c18:	445a      	add	r2, fp
 8007c1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 809f 	beq.w	8007d64 <_vfiprintf_r+0x1ec>
 8007c26:	2300      	movs	r3, #0
 8007c28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c30:	f10a 0a01 	add.w	sl, sl, #1
 8007c34:	9304      	str	r3, [sp, #16]
 8007c36:	9307      	str	r3, [sp, #28]
 8007c38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c3e:	4654      	mov	r4, sl
 8007c40:	2205      	movs	r2, #5
 8007c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c46:	4853      	ldr	r0, [pc, #332]	@ (8007d94 <_vfiprintf_r+0x21c>)
 8007c48:	f7fe fc7b 	bl	8006542 <memchr>
 8007c4c:	9a04      	ldr	r2, [sp, #16]
 8007c4e:	b9d8      	cbnz	r0, 8007c88 <_vfiprintf_r+0x110>
 8007c50:	06d1      	lsls	r1, r2, #27
 8007c52:	bf44      	itt	mi
 8007c54:	2320      	movmi	r3, #32
 8007c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c5a:	0713      	lsls	r3, r2, #28
 8007c5c:	bf44      	itt	mi
 8007c5e:	232b      	movmi	r3, #43	@ 0x2b
 8007c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c64:	f89a 3000 	ldrb.w	r3, [sl]
 8007c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c6a:	d015      	beq.n	8007c98 <_vfiprintf_r+0x120>
 8007c6c:	4654      	mov	r4, sl
 8007c6e:	2000      	movs	r0, #0
 8007c70:	f04f 0c0a 	mov.w	ip, #10
 8007c74:	9a07      	ldr	r2, [sp, #28]
 8007c76:	4621      	mov	r1, r4
 8007c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c7c:	3b30      	subs	r3, #48	@ 0x30
 8007c7e:	2b09      	cmp	r3, #9
 8007c80:	d94b      	bls.n	8007d1a <_vfiprintf_r+0x1a2>
 8007c82:	b1b0      	cbz	r0, 8007cb2 <_vfiprintf_r+0x13a>
 8007c84:	9207      	str	r2, [sp, #28]
 8007c86:	e014      	b.n	8007cb2 <_vfiprintf_r+0x13a>
 8007c88:	eba0 0308 	sub.w	r3, r0, r8
 8007c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8007c90:	4313      	orrs	r3, r2
 8007c92:	46a2      	mov	sl, r4
 8007c94:	9304      	str	r3, [sp, #16]
 8007c96:	e7d2      	b.n	8007c3e <_vfiprintf_r+0xc6>
 8007c98:	9b03      	ldr	r3, [sp, #12]
 8007c9a:	1d19      	adds	r1, r3, #4
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	9103      	str	r1, [sp, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	bfbb      	ittet	lt
 8007ca4:	425b      	neglt	r3, r3
 8007ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8007caa:	9307      	strge	r3, [sp, #28]
 8007cac:	9307      	strlt	r3, [sp, #28]
 8007cae:	bfb8      	it	lt
 8007cb0:	9204      	strlt	r2, [sp, #16]
 8007cb2:	7823      	ldrb	r3, [r4, #0]
 8007cb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cb6:	d10a      	bne.n	8007cce <_vfiprintf_r+0x156>
 8007cb8:	7863      	ldrb	r3, [r4, #1]
 8007cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cbc:	d132      	bne.n	8007d24 <_vfiprintf_r+0x1ac>
 8007cbe:	9b03      	ldr	r3, [sp, #12]
 8007cc0:	3402      	adds	r4, #2
 8007cc2:	1d1a      	adds	r2, r3, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	9203      	str	r2, [sp, #12]
 8007cc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ccc:	9305      	str	r3, [sp, #20]
 8007cce:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007d98 <_vfiprintf_r+0x220>
 8007cd2:	2203      	movs	r2, #3
 8007cd4:	4650      	mov	r0, sl
 8007cd6:	7821      	ldrb	r1, [r4, #0]
 8007cd8:	f7fe fc33 	bl	8006542 <memchr>
 8007cdc:	b138      	cbz	r0, 8007cee <_vfiprintf_r+0x176>
 8007cde:	2240      	movs	r2, #64	@ 0x40
 8007ce0:	9b04      	ldr	r3, [sp, #16]
 8007ce2:	eba0 000a 	sub.w	r0, r0, sl
 8007ce6:	4082      	lsls	r2, r0
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	3401      	adds	r4, #1
 8007cec:	9304      	str	r3, [sp, #16]
 8007cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf2:	2206      	movs	r2, #6
 8007cf4:	4829      	ldr	r0, [pc, #164]	@ (8007d9c <_vfiprintf_r+0x224>)
 8007cf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cfa:	f7fe fc22 	bl	8006542 <memchr>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d03f      	beq.n	8007d82 <_vfiprintf_r+0x20a>
 8007d02:	4b27      	ldr	r3, [pc, #156]	@ (8007da0 <_vfiprintf_r+0x228>)
 8007d04:	bb1b      	cbnz	r3, 8007d4e <_vfiprintf_r+0x1d6>
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	3307      	adds	r3, #7
 8007d0a:	f023 0307 	bic.w	r3, r3, #7
 8007d0e:	3308      	adds	r3, #8
 8007d10:	9303      	str	r3, [sp, #12]
 8007d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d14:	443b      	add	r3, r7
 8007d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d18:	e76a      	b.n	8007bf0 <_vfiprintf_r+0x78>
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d22:	e7a8      	b.n	8007c76 <_vfiprintf_r+0xfe>
 8007d24:	2300      	movs	r3, #0
 8007d26:	f04f 0c0a 	mov.w	ip, #10
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	3401      	adds	r4, #1
 8007d2e:	9305      	str	r3, [sp, #20]
 8007d30:	4620      	mov	r0, r4
 8007d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d36:	3a30      	subs	r2, #48	@ 0x30
 8007d38:	2a09      	cmp	r2, #9
 8007d3a:	d903      	bls.n	8007d44 <_vfiprintf_r+0x1cc>
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0c6      	beq.n	8007cce <_vfiprintf_r+0x156>
 8007d40:	9105      	str	r1, [sp, #20]
 8007d42:	e7c4      	b.n	8007cce <_vfiprintf_r+0x156>
 8007d44:	4604      	mov	r4, r0
 8007d46:	2301      	movs	r3, #1
 8007d48:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d4c:	e7f0      	b.n	8007d30 <_vfiprintf_r+0x1b8>
 8007d4e:	ab03      	add	r3, sp, #12
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	462a      	mov	r2, r5
 8007d54:	4630      	mov	r0, r6
 8007d56:	4b13      	ldr	r3, [pc, #76]	@ (8007da4 <_vfiprintf_r+0x22c>)
 8007d58:	a904      	add	r1, sp, #16
 8007d5a:	f7fd fdad 	bl	80058b8 <_printf_float>
 8007d5e:	4607      	mov	r7, r0
 8007d60:	1c78      	adds	r0, r7, #1
 8007d62:	d1d6      	bne.n	8007d12 <_vfiprintf_r+0x19a>
 8007d64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d66:	07d9      	lsls	r1, r3, #31
 8007d68:	d405      	bmi.n	8007d76 <_vfiprintf_r+0x1fe>
 8007d6a:	89ab      	ldrh	r3, [r5, #12]
 8007d6c:	059a      	lsls	r2, r3, #22
 8007d6e:	d402      	bmi.n	8007d76 <_vfiprintf_r+0x1fe>
 8007d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d72:	f7fe fbe5 	bl	8006540 <__retarget_lock_release_recursive>
 8007d76:	89ab      	ldrh	r3, [r5, #12]
 8007d78:	065b      	lsls	r3, r3, #25
 8007d7a:	f53f af1f 	bmi.w	8007bbc <_vfiprintf_r+0x44>
 8007d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d80:	e71e      	b.n	8007bc0 <_vfiprintf_r+0x48>
 8007d82:	ab03      	add	r3, sp, #12
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	462a      	mov	r2, r5
 8007d88:	4630      	mov	r0, r6
 8007d8a:	4b06      	ldr	r3, [pc, #24]	@ (8007da4 <_vfiprintf_r+0x22c>)
 8007d8c:	a904      	add	r1, sp, #16
 8007d8e:	f7fe f831 	bl	8005df4 <_printf_i>
 8007d92:	e7e4      	b.n	8007d5e <_vfiprintf_r+0x1e6>
 8007d94:	0800a4aa 	.word	0x0800a4aa
 8007d98:	0800a4b0 	.word	0x0800a4b0
 8007d9c:	0800a4b4 	.word	0x0800a4b4
 8007da0:	080058b9 	.word	0x080058b9
 8007da4:	08007b53 	.word	0x08007b53

08007da8 <__sflush_r>:
 8007da8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	0716      	lsls	r6, r2, #28
 8007db0:	4605      	mov	r5, r0
 8007db2:	460c      	mov	r4, r1
 8007db4:	d454      	bmi.n	8007e60 <__sflush_r+0xb8>
 8007db6:	684b      	ldr	r3, [r1, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	dc02      	bgt.n	8007dc2 <__sflush_r+0x1a>
 8007dbc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	dd48      	ble.n	8007e54 <__sflush_r+0xac>
 8007dc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dc4:	2e00      	cmp	r6, #0
 8007dc6:	d045      	beq.n	8007e54 <__sflush_r+0xac>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007dce:	682f      	ldr	r7, [r5, #0]
 8007dd0:	6a21      	ldr	r1, [r4, #32]
 8007dd2:	602b      	str	r3, [r5, #0]
 8007dd4:	d030      	beq.n	8007e38 <__sflush_r+0x90>
 8007dd6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	0759      	lsls	r1, r3, #29
 8007ddc:	d505      	bpl.n	8007dea <__sflush_r+0x42>
 8007dde:	6863      	ldr	r3, [r4, #4]
 8007de0:	1ad2      	subs	r2, r2, r3
 8007de2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007de4:	b10b      	cbz	r3, 8007dea <__sflush_r+0x42>
 8007de6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007de8:	1ad2      	subs	r2, r2, r3
 8007dea:	2300      	movs	r3, #0
 8007dec:	4628      	mov	r0, r5
 8007dee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007df0:	6a21      	ldr	r1, [r4, #32]
 8007df2:	47b0      	blx	r6
 8007df4:	1c43      	adds	r3, r0, #1
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	d106      	bne.n	8007e08 <__sflush_r+0x60>
 8007dfa:	6829      	ldr	r1, [r5, #0]
 8007dfc:	291d      	cmp	r1, #29
 8007dfe:	d82b      	bhi.n	8007e58 <__sflush_r+0xb0>
 8007e00:	4a28      	ldr	r2, [pc, #160]	@ (8007ea4 <__sflush_r+0xfc>)
 8007e02:	40ca      	lsrs	r2, r1
 8007e04:	07d6      	lsls	r6, r2, #31
 8007e06:	d527      	bpl.n	8007e58 <__sflush_r+0xb0>
 8007e08:	2200      	movs	r2, #0
 8007e0a:	6062      	str	r2, [r4, #4]
 8007e0c:	6922      	ldr	r2, [r4, #16]
 8007e0e:	04d9      	lsls	r1, r3, #19
 8007e10:	6022      	str	r2, [r4, #0]
 8007e12:	d504      	bpl.n	8007e1e <__sflush_r+0x76>
 8007e14:	1c42      	adds	r2, r0, #1
 8007e16:	d101      	bne.n	8007e1c <__sflush_r+0x74>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	b903      	cbnz	r3, 8007e1e <__sflush_r+0x76>
 8007e1c:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e20:	602f      	str	r7, [r5, #0]
 8007e22:	b1b9      	cbz	r1, 8007e54 <__sflush_r+0xac>
 8007e24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e28:	4299      	cmp	r1, r3
 8007e2a:	d002      	beq.n	8007e32 <__sflush_r+0x8a>
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f7ff fa03 	bl	8007238 <_free_r>
 8007e32:	2300      	movs	r3, #0
 8007e34:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e36:	e00d      	b.n	8007e54 <__sflush_r+0xac>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	47b0      	blx	r6
 8007e3e:	4602      	mov	r2, r0
 8007e40:	1c50      	adds	r0, r2, #1
 8007e42:	d1c9      	bne.n	8007dd8 <__sflush_r+0x30>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0c6      	beq.n	8007dd8 <__sflush_r+0x30>
 8007e4a:	2b1d      	cmp	r3, #29
 8007e4c:	d001      	beq.n	8007e52 <__sflush_r+0xaa>
 8007e4e:	2b16      	cmp	r3, #22
 8007e50:	d11d      	bne.n	8007e8e <__sflush_r+0xe6>
 8007e52:	602f      	str	r7, [r5, #0]
 8007e54:	2000      	movs	r0, #0
 8007e56:	e021      	b.n	8007e9c <__sflush_r+0xf4>
 8007e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e5c:	b21b      	sxth	r3, r3
 8007e5e:	e01a      	b.n	8007e96 <__sflush_r+0xee>
 8007e60:	690f      	ldr	r7, [r1, #16]
 8007e62:	2f00      	cmp	r7, #0
 8007e64:	d0f6      	beq.n	8007e54 <__sflush_r+0xac>
 8007e66:	0793      	lsls	r3, r2, #30
 8007e68:	bf18      	it	ne
 8007e6a:	2300      	movne	r3, #0
 8007e6c:	680e      	ldr	r6, [r1, #0]
 8007e6e:	bf08      	it	eq
 8007e70:	694b      	ldreq	r3, [r1, #20]
 8007e72:	1bf6      	subs	r6, r6, r7
 8007e74:	600f      	str	r7, [r1, #0]
 8007e76:	608b      	str	r3, [r1, #8]
 8007e78:	2e00      	cmp	r6, #0
 8007e7a:	ddeb      	ble.n	8007e54 <__sflush_r+0xac>
 8007e7c:	4633      	mov	r3, r6
 8007e7e:	463a      	mov	r2, r7
 8007e80:	4628      	mov	r0, r5
 8007e82:	6a21      	ldr	r1, [r4, #32]
 8007e84:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007e88:	47e0      	blx	ip
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	dc07      	bgt.n	8007e9e <__sflush_r+0xf6>
 8007e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e9e:	4407      	add	r7, r0
 8007ea0:	1a36      	subs	r6, r6, r0
 8007ea2:	e7e9      	b.n	8007e78 <__sflush_r+0xd0>
 8007ea4:	20400001 	.word	0x20400001

08007ea8 <_fflush_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	690b      	ldr	r3, [r1, #16]
 8007eac:	4605      	mov	r5, r0
 8007eae:	460c      	mov	r4, r1
 8007eb0:	b913      	cbnz	r3, 8007eb8 <_fflush_r+0x10>
 8007eb2:	2500      	movs	r5, #0
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	b118      	cbz	r0, 8007ec2 <_fflush_r+0x1a>
 8007eba:	6a03      	ldr	r3, [r0, #32]
 8007ebc:	b90b      	cbnz	r3, 8007ec2 <_fflush_r+0x1a>
 8007ebe:	f7fe f943 	bl	8006148 <__sinit>
 8007ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0f3      	beq.n	8007eb2 <_fflush_r+0xa>
 8007eca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ecc:	07d0      	lsls	r0, r2, #31
 8007ece:	d404      	bmi.n	8007eda <_fflush_r+0x32>
 8007ed0:	0599      	lsls	r1, r3, #22
 8007ed2:	d402      	bmi.n	8007eda <_fflush_r+0x32>
 8007ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ed6:	f7fe fb32 	bl	800653e <__retarget_lock_acquire_recursive>
 8007eda:	4628      	mov	r0, r5
 8007edc:	4621      	mov	r1, r4
 8007ede:	f7ff ff63 	bl	8007da8 <__sflush_r>
 8007ee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	07da      	lsls	r2, r3, #31
 8007ee8:	d4e4      	bmi.n	8007eb4 <_fflush_r+0xc>
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	059b      	lsls	r3, r3, #22
 8007eee:	d4e1      	bmi.n	8007eb4 <_fflush_r+0xc>
 8007ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ef2:	f7fe fb25 	bl	8006540 <__retarget_lock_release_recursive>
 8007ef6:	e7dd      	b.n	8007eb4 <_fflush_r+0xc>

08007ef8 <__swhatbuf_r>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	460c      	mov	r4, r1
 8007efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f00:	4615      	mov	r5, r2
 8007f02:	2900      	cmp	r1, #0
 8007f04:	461e      	mov	r6, r3
 8007f06:	b096      	sub	sp, #88	@ 0x58
 8007f08:	da0c      	bge.n	8007f24 <__swhatbuf_r+0x2c>
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f12:	bf14      	ite	ne
 8007f14:	2340      	movne	r3, #64	@ 0x40
 8007f16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	6031      	str	r1, [r6, #0]
 8007f1e:	602b      	str	r3, [r5, #0]
 8007f20:	b016      	add	sp, #88	@ 0x58
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	466a      	mov	r2, sp
 8007f26:	f000 f849 	bl	8007fbc <_fstat_r>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	dbed      	blt.n	8007f0a <__swhatbuf_r+0x12>
 8007f2e:	9901      	ldr	r1, [sp, #4]
 8007f30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f38:	4259      	negs	r1, r3
 8007f3a:	4159      	adcs	r1, r3
 8007f3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f40:	e7eb      	b.n	8007f1a <__swhatbuf_r+0x22>

08007f42 <__smakebuf_r>:
 8007f42:	898b      	ldrh	r3, [r1, #12]
 8007f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f46:	079d      	lsls	r5, r3, #30
 8007f48:	4606      	mov	r6, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	d507      	bpl.n	8007f5e <__smakebuf_r+0x1c>
 8007f4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f52:	6023      	str	r3, [r4, #0]
 8007f54:	6123      	str	r3, [r4, #16]
 8007f56:	2301      	movs	r3, #1
 8007f58:	6163      	str	r3, [r4, #20]
 8007f5a:	b003      	add	sp, #12
 8007f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f5e:	466a      	mov	r2, sp
 8007f60:	ab01      	add	r3, sp, #4
 8007f62:	f7ff ffc9 	bl	8007ef8 <__swhatbuf_r>
 8007f66:	9f00      	ldr	r7, [sp, #0]
 8007f68:	4605      	mov	r5, r0
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7ff f9d5 	bl	800731c <_malloc_r>
 8007f72:	b948      	cbnz	r0, 8007f88 <__smakebuf_r+0x46>
 8007f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f78:	059a      	lsls	r2, r3, #22
 8007f7a:	d4ee      	bmi.n	8007f5a <__smakebuf_r+0x18>
 8007f7c:	f023 0303 	bic.w	r3, r3, #3
 8007f80:	f043 0302 	orr.w	r3, r3, #2
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	e7e2      	b.n	8007f4e <__smakebuf_r+0xc>
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	9b01      	ldr	r3, [sp, #4]
 8007f96:	6020      	str	r0, [r4, #0]
 8007f98:	b15b      	cbz	r3, 8007fb2 <__smakebuf_r+0x70>
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fa0:	f000 f81e 	bl	8007fe0 <_isatty_r>
 8007fa4:	b128      	cbz	r0, 8007fb2 <__smakebuf_r+0x70>
 8007fa6:	89a3      	ldrh	r3, [r4, #12]
 8007fa8:	f023 0303 	bic.w	r3, r3, #3
 8007fac:	f043 0301 	orr.w	r3, r3, #1
 8007fb0:	81a3      	strh	r3, [r4, #12]
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	431d      	orrs	r5, r3
 8007fb6:	81a5      	strh	r5, [r4, #12]
 8007fb8:	e7cf      	b.n	8007f5a <__smakebuf_r+0x18>
	...

08007fbc <_fstat_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	4d06      	ldr	r5, [pc, #24]	@ (8007fdc <_fstat_r+0x20>)
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	f7fa fa38 	bl	800243e <_fstat>
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	d102      	bne.n	8007fd8 <_fstat_r+0x1c>
 8007fd2:	682b      	ldr	r3, [r5, #0]
 8007fd4:	b103      	cbz	r3, 8007fd8 <_fstat_r+0x1c>
 8007fd6:	6023      	str	r3, [r4, #0]
 8007fd8:	bd38      	pop	{r3, r4, r5, pc}
 8007fda:	bf00      	nop
 8007fdc:	2000124c 	.word	0x2000124c

08007fe0 <_isatty_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	4d05      	ldr	r5, [pc, #20]	@ (8007ffc <_isatty_r+0x1c>)
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	4608      	mov	r0, r1
 8007fea:	602b      	str	r3, [r5, #0]
 8007fec:	f7fa fa36 	bl	800245c <_isatty>
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	d102      	bne.n	8007ffa <_isatty_r+0x1a>
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	b103      	cbz	r3, 8007ffa <_isatty_r+0x1a>
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	2000124c 	.word	0x2000124c

08008000 <_sbrk_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	2300      	movs	r3, #0
 8008004:	4d05      	ldr	r5, [pc, #20]	@ (800801c <_sbrk_r+0x1c>)
 8008006:	4604      	mov	r4, r0
 8008008:	4608      	mov	r0, r1
 800800a:	602b      	str	r3, [r5, #0]
 800800c:	f7fa fa3c 	bl	8002488 <_sbrk>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_sbrk_r+0x1a>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_sbrk_r+0x1a>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	2000124c 	.word	0x2000124c

08008020 <__assert_func>:
 8008020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008022:	4614      	mov	r4, r2
 8008024:	461a      	mov	r2, r3
 8008026:	4b09      	ldr	r3, [pc, #36]	@ (800804c <__assert_func+0x2c>)
 8008028:	4605      	mov	r5, r0
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68d8      	ldr	r0, [r3, #12]
 800802e:	b14c      	cbz	r4, 8008044 <__assert_func+0x24>
 8008030:	4b07      	ldr	r3, [pc, #28]	@ (8008050 <__assert_func+0x30>)
 8008032:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008036:	9100      	str	r1, [sp, #0]
 8008038:	462b      	mov	r3, r5
 800803a:	4906      	ldr	r1, [pc, #24]	@ (8008054 <__assert_func+0x34>)
 800803c:	f000 f842 	bl	80080c4 <fiprintf>
 8008040:	f000 f852 	bl	80080e8 <abort>
 8008044:	4b04      	ldr	r3, [pc, #16]	@ (8008058 <__assert_func+0x38>)
 8008046:	461c      	mov	r4, r3
 8008048:	e7f3      	b.n	8008032 <__assert_func+0x12>
 800804a:	bf00      	nop
 800804c:	20000030 	.word	0x20000030
 8008050:	0800a4c5 	.word	0x0800a4c5
 8008054:	0800a4d2 	.word	0x0800a4d2
 8008058:	0800a500 	.word	0x0800a500

0800805c <_calloc_r>:
 800805c:	b570      	push	{r4, r5, r6, lr}
 800805e:	fba1 5402 	umull	r5, r4, r1, r2
 8008062:	b934      	cbnz	r4, 8008072 <_calloc_r+0x16>
 8008064:	4629      	mov	r1, r5
 8008066:	f7ff f959 	bl	800731c <_malloc_r>
 800806a:	4606      	mov	r6, r0
 800806c:	b928      	cbnz	r0, 800807a <_calloc_r+0x1e>
 800806e:	4630      	mov	r0, r6
 8008070:	bd70      	pop	{r4, r5, r6, pc}
 8008072:	220c      	movs	r2, #12
 8008074:	2600      	movs	r6, #0
 8008076:	6002      	str	r2, [r0, #0]
 8008078:	e7f9      	b.n	800806e <_calloc_r+0x12>
 800807a:	462a      	mov	r2, r5
 800807c:	4621      	mov	r1, r4
 800807e:	f7fe f9e1 	bl	8006444 <memset>
 8008082:	e7f4      	b.n	800806e <_calloc_r+0x12>

08008084 <__ascii_mbtowc>:
 8008084:	b082      	sub	sp, #8
 8008086:	b901      	cbnz	r1, 800808a <__ascii_mbtowc+0x6>
 8008088:	a901      	add	r1, sp, #4
 800808a:	b142      	cbz	r2, 800809e <__ascii_mbtowc+0x1a>
 800808c:	b14b      	cbz	r3, 80080a2 <__ascii_mbtowc+0x1e>
 800808e:	7813      	ldrb	r3, [r2, #0]
 8008090:	600b      	str	r3, [r1, #0]
 8008092:	7812      	ldrb	r2, [r2, #0]
 8008094:	1e10      	subs	r0, r2, #0
 8008096:	bf18      	it	ne
 8008098:	2001      	movne	r0, #1
 800809a:	b002      	add	sp, #8
 800809c:	4770      	bx	lr
 800809e:	4610      	mov	r0, r2
 80080a0:	e7fb      	b.n	800809a <__ascii_mbtowc+0x16>
 80080a2:	f06f 0001 	mvn.w	r0, #1
 80080a6:	e7f8      	b.n	800809a <__ascii_mbtowc+0x16>

080080a8 <__ascii_wctomb>:
 80080a8:	4603      	mov	r3, r0
 80080aa:	4608      	mov	r0, r1
 80080ac:	b141      	cbz	r1, 80080c0 <__ascii_wctomb+0x18>
 80080ae:	2aff      	cmp	r2, #255	@ 0xff
 80080b0:	d904      	bls.n	80080bc <__ascii_wctomb+0x14>
 80080b2:	228a      	movs	r2, #138	@ 0x8a
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	4770      	bx	lr
 80080bc:	2001      	movs	r0, #1
 80080be:	700a      	strb	r2, [r1, #0]
 80080c0:	4770      	bx	lr
	...

080080c4 <fiprintf>:
 80080c4:	b40e      	push	{r1, r2, r3}
 80080c6:	b503      	push	{r0, r1, lr}
 80080c8:	4601      	mov	r1, r0
 80080ca:	ab03      	add	r3, sp, #12
 80080cc:	4805      	ldr	r0, [pc, #20]	@ (80080e4 <fiprintf+0x20>)
 80080ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d2:	6800      	ldr	r0, [r0, #0]
 80080d4:	9301      	str	r3, [sp, #4]
 80080d6:	f7ff fd4f 	bl	8007b78 <_vfiprintf_r>
 80080da:	b002      	add	sp, #8
 80080dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80080e0:	b003      	add	sp, #12
 80080e2:	4770      	bx	lr
 80080e4:	20000030 	.word	0x20000030

080080e8 <abort>:
 80080e8:	2006      	movs	r0, #6
 80080ea:	b508      	push	{r3, lr}
 80080ec:	f000 f82c 	bl	8008148 <raise>
 80080f0:	2001      	movs	r0, #1
 80080f2:	f7fa f955 	bl	80023a0 <_exit>

080080f6 <_raise_r>:
 80080f6:	291f      	cmp	r1, #31
 80080f8:	b538      	push	{r3, r4, r5, lr}
 80080fa:	4605      	mov	r5, r0
 80080fc:	460c      	mov	r4, r1
 80080fe:	d904      	bls.n	800810a <_raise_r+0x14>
 8008100:	2316      	movs	r3, #22
 8008102:	6003      	str	r3, [r0, #0]
 8008104:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008108:	bd38      	pop	{r3, r4, r5, pc}
 800810a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800810c:	b112      	cbz	r2, 8008114 <_raise_r+0x1e>
 800810e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008112:	b94b      	cbnz	r3, 8008128 <_raise_r+0x32>
 8008114:	4628      	mov	r0, r5
 8008116:	f000 f831 	bl	800817c <_getpid_r>
 800811a:	4622      	mov	r2, r4
 800811c:	4601      	mov	r1, r0
 800811e:	4628      	mov	r0, r5
 8008120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008124:	f000 b818 	b.w	8008158 <_kill_r>
 8008128:	2b01      	cmp	r3, #1
 800812a:	d00a      	beq.n	8008142 <_raise_r+0x4c>
 800812c:	1c59      	adds	r1, r3, #1
 800812e:	d103      	bne.n	8008138 <_raise_r+0x42>
 8008130:	2316      	movs	r3, #22
 8008132:	6003      	str	r3, [r0, #0]
 8008134:	2001      	movs	r0, #1
 8008136:	e7e7      	b.n	8008108 <_raise_r+0x12>
 8008138:	2100      	movs	r1, #0
 800813a:	4620      	mov	r0, r4
 800813c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008140:	4798      	blx	r3
 8008142:	2000      	movs	r0, #0
 8008144:	e7e0      	b.n	8008108 <_raise_r+0x12>
	...

08008148 <raise>:
 8008148:	4b02      	ldr	r3, [pc, #8]	@ (8008154 <raise+0xc>)
 800814a:	4601      	mov	r1, r0
 800814c:	6818      	ldr	r0, [r3, #0]
 800814e:	f7ff bfd2 	b.w	80080f6 <_raise_r>
 8008152:	bf00      	nop
 8008154:	20000030 	.word	0x20000030

08008158 <_kill_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	2300      	movs	r3, #0
 800815c:	4d06      	ldr	r5, [pc, #24]	@ (8008178 <_kill_r+0x20>)
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	4611      	mov	r1, r2
 8008164:	602b      	str	r3, [r5, #0]
 8008166:	f7fa f90b 	bl	8002380 <_kill>
 800816a:	1c43      	adds	r3, r0, #1
 800816c:	d102      	bne.n	8008174 <_kill_r+0x1c>
 800816e:	682b      	ldr	r3, [r5, #0]
 8008170:	b103      	cbz	r3, 8008174 <_kill_r+0x1c>
 8008172:	6023      	str	r3, [r4, #0]
 8008174:	bd38      	pop	{r3, r4, r5, pc}
 8008176:	bf00      	nop
 8008178:	2000124c 	.word	0x2000124c

0800817c <_getpid_r>:
 800817c:	f7fa b8f9 	b.w	8002372 <_getpid>

08008180 <expf>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4605      	mov	r5, r0
 8008184:	f000 f85a 	bl	800823c <__ieee754_expf>
 8008188:	4604      	mov	r4, r0
 800818a:	4628      	mov	r0, r5
 800818c:	f000 f81e 	bl	80081cc <finitef>
 8008190:	b150      	cbz	r0, 80081a8 <expf+0x28>
 8008192:	4628      	mov	r0, r5
 8008194:	490b      	ldr	r1, [pc, #44]	@ (80081c4 <expf+0x44>)
 8008196:	f7f8 ffa9 	bl	80010ec <__aeabi_fcmpgt>
 800819a:	b138      	cbz	r0, 80081ac <expf+0x2c>
 800819c:	f7fe f9a4 	bl	80064e8 <__errno>
 80081a0:	2322      	movs	r3, #34	@ 0x22
 80081a2:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 80081a6:	6003      	str	r3, [r0, #0]
 80081a8:	4620      	mov	r0, r4
 80081aa:	bd38      	pop	{r3, r4, r5, pc}
 80081ac:	4628      	mov	r0, r5
 80081ae:	4906      	ldr	r1, [pc, #24]	@ (80081c8 <expf+0x48>)
 80081b0:	f7f8 ff7e 	bl	80010b0 <__aeabi_fcmplt>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d0f7      	beq.n	80081a8 <expf+0x28>
 80081b8:	f7fe f996 	bl	80064e8 <__errno>
 80081bc:	2322      	movs	r3, #34	@ 0x22
 80081be:	2400      	movs	r4, #0
 80081c0:	6003      	str	r3, [r0, #0]
 80081c2:	e7f1      	b.n	80081a8 <expf+0x28>
 80081c4:	42b17217 	.word	0x42b17217
 80081c8:	c2cff1b5 	.word	0xc2cff1b5

080081cc <finitef>:
 80081cc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80081d0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80081d4:	bfac      	ite	ge
 80081d6:	2000      	movge	r0, #0
 80081d8:	2001      	movlt	r0, #1
 80081da:	4770      	bx	lr

080081dc <fminf>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4604      	mov	r4, r0
 80081e0:	460d      	mov	r5, r1
 80081e2:	f000 f811 	bl	8008208 <__fpclassifyf>
 80081e6:	b910      	cbnz	r0, 80081ee <fminf+0x12>
 80081e8:	462c      	mov	r4, r5
 80081ea:	4620      	mov	r0, r4
 80081ec:	bd38      	pop	{r3, r4, r5, pc}
 80081ee:	4628      	mov	r0, r5
 80081f0:	f000 f80a 	bl	8008208 <__fpclassifyf>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d0f8      	beq.n	80081ea <fminf+0xe>
 80081f8:	4629      	mov	r1, r5
 80081fa:	4620      	mov	r0, r4
 80081fc:	f7f8 ff58 	bl	80010b0 <__aeabi_fcmplt>
 8008200:	2800      	cmp	r0, #0
 8008202:	d0f1      	beq.n	80081e8 <fminf+0xc>
 8008204:	e7f1      	b.n	80081ea <fminf+0xe>
	...

08008208 <__fpclassifyf>:
 8008208:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800820c:	d00d      	beq.n	800822a <__fpclassifyf+0x22>
 800820e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8008212:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8008216:	d30a      	bcc.n	800822e <__fpclassifyf+0x26>
 8008218:	4b07      	ldr	r3, [pc, #28]	@ (8008238 <__fpclassifyf+0x30>)
 800821a:	1e42      	subs	r2, r0, #1
 800821c:	429a      	cmp	r2, r3
 800821e:	d908      	bls.n	8008232 <__fpclassifyf+0x2a>
 8008220:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8008224:	4258      	negs	r0, r3
 8008226:	4158      	adcs	r0, r3
 8008228:	4770      	bx	lr
 800822a:	2002      	movs	r0, #2
 800822c:	4770      	bx	lr
 800822e:	2004      	movs	r0, #4
 8008230:	4770      	bx	lr
 8008232:	2003      	movs	r0, #3
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	007ffffe 	.word	0x007ffffe

0800823c <__ieee754_expf>:
 800823c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008240:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008244:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008248:	4604      	mov	r4, r0
 800824a:	d904      	bls.n	8008256 <__ieee754_expf+0x1a>
 800824c:	4601      	mov	r1, r0
 800824e:	f7f8 fc89 	bl	8000b64 <__addsf3>
 8008252:	4604      	mov	r4, r0
 8008254:	e005      	b.n	8008262 <__ieee754_expf+0x26>
 8008256:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 800825a:	d105      	bne.n	8008268 <__ieee754_expf+0x2c>
 800825c:	2e00      	cmp	r6, #0
 800825e:	f040 80c3 	bne.w	80083e8 <__ieee754_expf+0x1ac>
 8008262:	4620      	mov	r0, r4
 8008264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008268:	4960      	ldr	r1, [pc, #384]	@ (80083ec <__ieee754_expf+0x1b0>)
 800826a:	4288      	cmp	r0, r1
 800826c:	dd04      	ble.n	8008278 <__ieee754_expf+0x3c>
 800826e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008272:	2000      	movs	r0, #0
 8008274:	f000 b8f3 	b.w	800845e <__math_oflowf>
 8008278:	2800      	cmp	r0, #0
 800827a:	da07      	bge.n	800828c <__ieee754_expf+0x50>
 800827c:	4a5c      	ldr	r2, [pc, #368]	@ (80083f0 <__ieee754_expf+0x1b4>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d904      	bls.n	800828c <__ieee754_expf+0x50>
 8008282:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008286:	2000      	movs	r0, #0
 8008288:	f000 b8e5 	b.w	8008456 <__math_uflowf>
 800828c:	4a59      	ldr	r2, [pc, #356]	@ (80083f4 <__ieee754_expf+0x1b8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d971      	bls.n	8008376 <__ieee754_expf+0x13a>
 8008292:	4a59      	ldr	r2, [pc, #356]	@ (80083f8 <__ieee754_expf+0x1bc>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d851      	bhi.n	800833c <__ieee754_expf+0x100>
 8008298:	4b58      	ldr	r3, [pc, #352]	@ (80083fc <__ieee754_expf+0x1c0>)
 800829a:	4620      	mov	r0, r4
 800829c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80082a0:	f7f8 fc5e 	bl	8000b60 <__aeabi_fsub>
 80082a4:	4605      	mov	r5, r0
 80082a6:	4b56      	ldr	r3, [pc, #344]	@ (8008400 <__ieee754_expf+0x1c4>)
 80082a8:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 80082ac:	f086 0301 	eor.w	r3, r6, #1
 80082b0:	eba3 0806 	sub.w	r8, r3, r6
 80082b4:	4639      	mov	r1, r7
 80082b6:	4628      	mov	r0, r5
 80082b8:	f7f8 fc52 	bl	8000b60 <__aeabi_fsub>
 80082bc:	4604      	mov	r4, r0
 80082be:	4621      	mov	r1, r4
 80082c0:	4620      	mov	r0, r4
 80082c2:	f7f8 fd57 	bl	8000d74 <__aeabi_fmul>
 80082c6:	4606      	mov	r6, r0
 80082c8:	494e      	ldr	r1, [pc, #312]	@ (8008404 <__ieee754_expf+0x1c8>)
 80082ca:	f7f8 fd53 	bl	8000d74 <__aeabi_fmul>
 80082ce:	494e      	ldr	r1, [pc, #312]	@ (8008408 <__ieee754_expf+0x1cc>)
 80082d0:	f7f8 fc46 	bl	8000b60 <__aeabi_fsub>
 80082d4:	4631      	mov	r1, r6
 80082d6:	f7f8 fd4d 	bl	8000d74 <__aeabi_fmul>
 80082da:	494c      	ldr	r1, [pc, #304]	@ (800840c <__ieee754_expf+0x1d0>)
 80082dc:	f7f8 fc42 	bl	8000b64 <__addsf3>
 80082e0:	4631      	mov	r1, r6
 80082e2:	f7f8 fd47 	bl	8000d74 <__aeabi_fmul>
 80082e6:	494a      	ldr	r1, [pc, #296]	@ (8008410 <__ieee754_expf+0x1d4>)
 80082e8:	f7f8 fc3a 	bl	8000b60 <__aeabi_fsub>
 80082ec:	4631      	mov	r1, r6
 80082ee:	f7f8 fd41 	bl	8000d74 <__aeabi_fmul>
 80082f2:	4948      	ldr	r1, [pc, #288]	@ (8008414 <__ieee754_expf+0x1d8>)
 80082f4:	f7f8 fc36 	bl	8000b64 <__addsf3>
 80082f8:	4631      	mov	r1, r6
 80082fa:	f7f8 fd3b 	bl	8000d74 <__aeabi_fmul>
 80082fe:	4601      	mov	r1, r0
 8008300:	4620      	mov	r0, r4
 8008302:	f7f8 fc2d 	bl	8000b60 <__aeabi_fsub>
 8008306:	4601      	mov	r1, r0
 8008308:	4606      	mov	r6, r0
 800830a:	4620      	mov	r0, r4
 800830c:	f7f8 fd32 	bl	8000d74 <__aeabi_fmul>
 8008310:	4681      	mov	r9, r0
 8008312:	f1b8 0f00 	cmp.w	r8, #0
 8008316:	d143      	bne.n	80083a0 <__ieee754_expf+0x164>
 8008318:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800831c:	4630      	mov	r0, r6
 800831e:	f7f8 fc1f 	bl	8000b60 <__aeabi_fsub>
 8008322:	4601      	mov	r1, r0
 8008324:	4648      	mov	r0, r9
 8008326:	f7f8 fdd9 	bl	8000edc <__aeabi_fdiv>
 800832a:	4621      	mov	r1, r4
 800832c:	f7f8 fc18 	bl	8000b60 <__aeabi_fsub>
 8008330:	4601      	mov	r1, r0
 8008332:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008336:	f7f8 fc13 	bl	8000b60 <__aeabi_fsub>
 800833a:	e78a      	b.n	8008252 <__ieee754_expf+0x16>
 800833c:	4936      	ldr	r1, [pc, #216]	@ (8008418 <__ieee754_expf+0x1dc>)
 800833e:	4620      	mov	r0, r4
 8008340:	f7f8 fd18 	bl	8000d74 <__aeabi_fmul>
 8008344:	4b35      	ldr	r3, [pc, #212]	@ (800841c <__ieee754_expf+0x1e0>)
 8008346:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800834a:	f7f8 fc0b 	bl	8000b64 <__addsf3>
 800834e:	f7f8 fed7 	bl	8001100 <__aeabi_f2iz>
 8008352:	4680      	mov	r8, r0
 8008354:	f7f8 fcba 	bl	8000ccc <__aeabi_i2f>
 8008358:	4931      	ldr	r1, [pc, #196]	@ (8008420 <__ieee754_expf+0x1e4>)
 800835a:	4606      	mov	r6, r0
 800835c:	f7f8 fd0a 	bl	8000d74 <__aeabi_fmul>
 8008360:	4601      	mov	r1, r0
 8008362:	4620      	mov	r0, r4
 8008364:	f7f8 fbfc 	bl	8000b60 <__aeabi_fsub>
 8008368:	492e      	ldr	r1, [pc, #184]	@ (8008424 <__ieee754_expf+0x1e8>)
 800836a:	4605      	mov	r5, r0
 800836c:	4630      	mov	r0, r6
 800836e:	f7f8 fd01 	bl	8000d74 <__aeabi_fmul>
 8008372:	4607      	mov	r7, r0
 8008374:	e79e      	b.n	80082b4 <__ieee754_expf+0x78>
 8008376:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800837a:	d20c      	bcs.n	8008396 <__ieee754_expf+0x15a>
 800837c:	492a      	ldr	r1, [pc, #168]	@ (8008428 <__ieee754_expf+0x1ec>)
 800837e:	4620      	mov	r0, r4
 8008380:	f7f8 fbf0 	bl	8000b64 <__addsf3>
 8008384:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008388:	f7f8 feb0 	bl	80010ec <__aeabi_fcmpgt>
 800838c:	b130      	cbz	r0, 800839c <__ieee754_expf+0x160>
 800838e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008392:	4620      	mov	r0, r4
 8008394:	e75b      	b.n	800824e <__ieee754_expf+0x12>
 8008396:	f04f 0800 	mov.w	r8, #0
 800839a:	e790      	b.n	80082be <__ieee754_expf+0x82>
 800839c:	4680      	mov	r8, r0
 800839e:	e78e      	b.n	80082be <__ieee754_expf+0x82>
 80083a0:	4631      	mov	r1, r6
 80083a2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80083a6:	f7f8 fbdb 	bl	8000b60 <__aeabi_fsub>
 80083aa:	4601      	mov	r1, r0
 80083ac:	4648      	mov	r0, r9
 80083ae:	f7f8 fd95 	bl	8000edc <__aeabi_fdiv>
 80083b2:	4601      	mov	r1, r0
 80083b4:	4638      	mov	r0, r7
 80083b6:	f7f8 fbd3 	bl	8000b60 <__aeabi_fsub>
 80083ba:	4629      	mov	r1, r5
 80083bc:	f7f8 fbd0 	bl	8000b60 <__aeabi_fsub>
 80083c0:	4601      	mov	r1, r0
 80083c2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80083c6:	f7f8 fbcb 	bl	8000b60 <__aeabi_fsub>
 80083ca:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 80083ce:	db02      	blt.n	80083d6 <__ieee754_expf+0x19a>
 80083d0:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 80083d4:	e745      	b.n	8008262 <__ieee754_expf+0x26>
 80083d6:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 80083da:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 80083de:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 80083e2:	f7f8 fcc7 	bl	8000d74 <__aeabi_fmul>
 80083e6:	e734      	b.n	8008252 <__ieee754_expf+0x16>
 80083e8:	2400      	movs	r4, #0
 80083ea:	e73a      	b.n	8008262 <__ieee754_expf+0x26>
 80083ec:	42b17217 	.word	0x42b17217
 80083f0:	42cff1b5 	.word	0x42cff1b5
 80083f4:	3eb17218 	.word	0x3eb17218
 80083f8:	3f851591 	.word	0x3f851591
 80083fc:	0800a70c 	.word	0x0800a70c
 8008400:	0800a704 	.word	0x0800a704
 8008404:	3331bb4c 	.word	0x3331bb4c
 8008408:	35ddea0e 	.word	0x35ddea0e
 800840c:	388ab355 	.word	0x388ab355
 8008410:	3b360b61 	.word	0x3b360b61
 8008414:	3e2aaaab 	.word	0x3e2aaaab
 8008418:	3fb8aa3b 	.word	0x3fb8aa3b
 800841c:	0800a714 	.word	0x0800a714
 8008420:	3f317180 	.word	0x3f317180
 8008424:	3717f7d1 	.word	0x3717f7d1
 8008428:	7149f2ca 	.word	0x7149f2ca

0800842c <with_errnof>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4604      	mov	r4, r0
 8008430:	460d      	mov	r5, r1
 8008432:	f7fe f859 	bl	80064e8 <__errno>
 8008436:	6005      	str	r5, [r0, #0]
 8008438:	4620      	mov	r0, r4
 800843a:	bd38      	pop	{r3, r4, r5, pc}

0800843c <xflowf>:
 800843c:	b508      	push	{r3, lr}
 800843e:	b140      	cbz	r0, 8008452 <xflowf+0x16>
 8008440:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8008444:	f7f8 fc96 	bl	8000d74 <__aeabi_fmul>
 8008448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800844c:	2122      	movs	r1, #34	@ 0x22
 800844e:	f7ff bfed 	b.w	800842c <with_errnof>
 8008452:	4608      	mov	r0, r1
 8008454:	e7f6      	b.n	8008444 <xflowf+0x8>

08008456 <__math_uflowf>:
 8008456:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800845a:	f7ff bfef 	b.w	800843c <xflowf>

0800845e <__math_oflowf>:
 800845e:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8008462:	f7ff bfeb 	b.w	800843c <xflowf>
	...

08008468 <_init>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	bf00      	nop
 800846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846e:	bc08      	pop	{r3}
 8008470:	469e      	mov	lr, r3
 8008472:	4770      	bx	lr

08008474 <_fini>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	bf00      	nop
 8008478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847a:	bc08      	pop	{r3}
 800847c:	469e      	mov	lr, r3
 800847e:	4770      	bx	lr
